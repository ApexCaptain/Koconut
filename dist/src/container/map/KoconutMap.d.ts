import { KoconutPrimitive, Entry, Pair, KoconutPair, KoconutEntry, KoconutIterable, KoconutArray, KoconutSet, KoconutComparable } from "../../../module.internal";
export declare class KoconutMap<KeyType, ValueType> extends KoconutIterable<[KeyType, ValueType], Entry<KeyType, ValueType>, Set<Entry<KeyType, ValueType>>, Map<KeyType, ValueType>> {
    static from<KeyType, ValueType>(source: Map<KeyType, ValueType>): KoconutMap<KeyType, ValueType>;
    static of<KeyType, ValueType>(...data: [KeyType, ValueType][] | Pair<KeyType, ValueType>[] | Entry<KeyType, ValueType>[]): KoconutMap<KeyType, ValueType>;
    validiate(data: Map<KeyType, ValueType> | null): Promise<void>;
    private mKeys;
    private mEntries;
    private mValues;
    private mSize;
    keys(): KoconutSet<KeyType>;
    entries(): KoconutSet<Entry<KeyType, ValueType>>;
    values(): KoconutArray<ValueType>;
    size(): KoconutPrimitive<number>;
    asArray(): KoconutArray<Entry<KeyType, ValueType>>;
    contains(key: KeyType): KoconutPrimitive<boolean>;
    containsKey(key: KeyType): KoconutPrimitive<boolean>;
    containsValue(value: ValueType): KoconutPrimitive<boolean>;
    filter(predicate: (entry: Entry<KeyType, ValueType>) => boolean | Promise<boolean>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    filterKeys(predicate: (key: KeyType) => boolean | Promise<boolean>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    filterNot(predicate: (entry: Entry<KeyType, ValueType>) => boolean | Promise<boolean>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    filterNotTo(destination: Map<KeyType, ValueType>, predicate: (entry: Entry<KeyType, ValueType>) => boolean | Promise<boolean>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    filterTo(destination: Map<KeyType, ValueType>, predicate: (entry: Entry<KeyType, ValueType>) => boolean | Promise<boolean>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    filterValues(predicate: (value: ValueType) => boolean | Promise<boolean>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    flatMap<ResultDataType>(transform: (entry: Entry<KeyType, ValueType>) => Array<ResultDataType> | Promise<Array<ResultDataType>>, thisArg?: any): KoconutArray<ResultDataType>;
    flatMapTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (entry: Entry<KeyType, ValueType>) => Array<ResultDataType> | Promise<Array<ResultDataType>>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    forEach(action: (entry: Entry<KeyType, ValueType>) => boolean | void | Promise<boolean | void>, thisArg?: any): KoconutPrimitive<void>;
    get(key: KeyType): KoconutPrimitive<ValueType | null>;
    getOrDefault(key: KeyType, defaultValue: ValueType): KoconutPrimitive<ValueType>;
    getOrElse(key: KeyType, defaultValue: () => ValueType | Promise<ValueType>): KoconutPrimitive<ValueType>;
    getValue(key: KeyType): KoconutPrimitive<ValueType>;
    isEmpty(): KoconutPrimitive<boolean>;
    isNotEmpty(): KoconutPrimitive<boolean>;
    isNullOrEmpty(): KoconutPrimitive<boolean>;
    map<ResultDataType>(transform: (entry: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutArray<ResultDataType>;
    mapKeys<ResultDataType>(transform: (entry: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutMap<ResultDataType, ValueType>;
    mapKeysTo<ResultDataType>(destination: Map<ResultDataType, ValueType>, transform: (entry: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    mapNotNull<ResultDataType>(transform: (entry: Entry<KeyType, ValueType>) => ResultDataType | void | null | undefined | Promise<ResultDataType | void | null | undefined>, thisArg?: any): KoconutArray<ResultDataType>;
    mapNotNullTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (entry: Entry<KeyType, ValueType>) => ResultDataType | null | Promise<ResultDataType | null>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    mapTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (entry: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    mapVaues<ResultDataType>(transform: (entry: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutMap<KeyType, ResultDataType>;
    mapValuesTo<ResultDataType>(destination: Map<KeyType, ResultDataType>, transform: (entry: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    maxByOrNull(selector: (entry: Entry<KeyType, ValueType>) => number | string | KoconutComparable | Promise<number | string | KoconutComparable>, thisArg?: any): KoconutEntry<KeyType, ValueType>;
    maxOf(selector: (entry: Entry<KeyType, ValueType>) => number | Promise<number>): KoconutPrimitive<number>;
    maxOf(selector: (entry: Entry<KeyType, ValueType>) => number | Promise<number>, thisArg: any): KoconutPrimitive<number>;
    maxOf(selector: (entry: Entry<KeyType, ValueType>) => string | Promise<string>): KoconutPrimitive<string>;
    maxOf(selector: (entry: Entry<KeyType, ValueType>) => string | Promise<string>, thisArg: any): KoconutPrimitive<string>;
    maxOf<ComparableType extends KoconutComparable>(selector: (entry: Entry<KeyType, ValueType>) => ComparableType | Promise<ComparableType>): KoconutPrimitive<ComparableType>;
    maxOf<ComparableType extends KoconutComparable>(selector: (entry: Entry<KeyType, ValueType>) => ComparableType | Promise<ComparableType>, thisArg: any): KoconutPrimitive<ComparableType>;
    maxOfOrNull(selector: (entry: Entry<KeyType, ValueType>) => number | Promise<number>): KoconutPrimitive<number | null>;
    maxOfOrNull(selector: (entry: Entry<KeyType, ValueType>) => number | Promise<number>, thisArg: any): KoconutPrimitive<number | null>;
    maxOfOrNull(selector: (entry: Entry<KeyType, ValueType>) => string | Promise<string>): KoconutPrimitive<string | null>;
    maxOfOrNull(selector: (entry: Entry<KeyType, ValueType>) => string | Promise<string>, thisArg: any): KoconutPrimitive<string | null>;
    maxOfOrNull<ComparableType extends KoconutComparable>(selector: (entry: Entry<KeyType, ValueType>) => ComparableType | Promise<ComparableType>): KoconutPrimitive<ComparableType | null>;
    maxOfOrNull<ComparableType extends KoconutComparable>(selector: (entry: Entry<KeyType, ValueType>) => ComparableType | Promise<ComparableType>, thisArg: any): KoconutPrimitive<ComparableType | null>;
    maxOfWith<ResultDataType>(selector: (element: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, comparator: (front: ResultDataType, rear: ResultDataType) => number | Promise<number>, selectorThisArg?: any, comparatorThisArg?: any): KoconutPrimitive<ResultDataType>;
    maxOfWithOrNull<ResultDataType>(selector: (element: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, comparator: (front: ResultDataType, rear: ResultDataType) => number | Promise<number>, selectorThisArg?: any, comparatorThisArg?: any): KoconutPrimitive<ResultDataType | null>;
    maxWithOrNull(comparator: (front: Entry<KeyType, ValueType>, rear: Entry<KeyType, ValueType>) => number | Promise<number>, thisArg?: any): KoconutPrimitive<Entry<KeyType, ValueType> | null>;
    minByOrNull(selector: (entry: Entry<KeyType, ValueType>) => number | string | KoconutComparable | Promise<number | string | KoconutComparable>, thisArg?: any): KoconutEntry<KeyType, ValueType>;
    minOf(selector: (entry: Entry<KeyType, ValueType>) => number | Promise<number>): KoconutPrimitive<number>;
    minOf(selector: (entry: Entry<KeyType, ValueType>) => number | Promise<number>, thisArg: any): KoconutPrimitive<number>;
    minOf(selector: (entry: Entry<KeyType, ValueType>) => string | Promise<string>): KoconutPrimitive<string>;
    minOf(selector: (entry: Entry<KeyType, ValueType>) => string | Promise<string>, thisArg: any): KoconutPrimitive<string>;
    minOf<ComparableType extends KoconutComparable>(selector: (entry: Entry<KeyType, ValueType>) => ComparableType | Promise<ComparableType>): KoconutPrimitive<ComparableType>;
    minOf<ComparableType extends KoconutComparable>(selector: (entry: Entry<KeyType, ValueType>) => ComparableType | Promise<ComparableType>, thisArg: any): KoconutPrimitive<ComparableType>;
    minOfOrNull(selector: (entry: Entry<KeyType, ValueType>) => number | Promise<number>): KoconutPrimitive<number | null>;
    minOfOrNull(selector: (entry: Entry<KeyType, ValueType>) => number | Promise<number>, thisArg: any): KoconutPrimitive<number | null>;
    minOfOrNull(selector: (entry: Entry<KeyType, ValueType>) => string | Promise<string>): KoconutPrimitive<string | null>;
    minOfOrNull(selector: (entry: Entry<KeyType, ValueType>) => string | Promise<string>, thisArg: any): KoconutPrimitive<string | null>;
    minOfOrNull<ComparableType extends KoconutComparable>(selector: (entry: Entry<KeyType, ValueType>) => ComparableType | Promise<ComparableType>): KoconutPrimitive<ComparableType | null>;
    minOfOrNull<ComparableType extends KoconutComparable>(selector: (entry: Entry<KeyType, ValueType>) => ComparableType | Promise<ComparableType>, thisArg: any): KoconutPrimitive<ComparableType | null>;
    minOfWith<ResultDataType>(selector: (element: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, comparator: (front: ResultDataType, rear: ResultDataType) => number | Promise<number>, selectorThisArg?: any, comparatorThisArg?: any): KoconutPrimitive<ResultDataType>;
    minOfWithOrNull<ResultDataType>(selector: (element: Entry<KeyType, ValueType>) => ResultDataType | Promise<ResultDataType>, comparator: (front: ResultDataType, rear: ResultDataType) => number | Promise<number>, selectorThisArg?: any, comparatorThisArg?: any): KoconutPrimitive<ResultDataType | null>;
    minus(keys: KeyType | Iterable<KeyType>): KoconutMap<KeyType, ValueType>;
    minWithOrNull(comparator: (front: Entry<KeyType, ValueType>, rear: Entry<KeyType, ValueType>) => number | Promise<number>, thisArg?: any): KoconutPrimitive<Entry<KeyType, ValueType> | null>;
    none(predicate?: ((entry: Entry<KeyType, ValueType>) => boolean | Promise<boolean>) | null, thisArg?: any): KoconutPrimitive<boolean>;
    onEach(action: (entry: Entry<KeyType, ValueType>) => boolean | void | Promise<boolean | void>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    onEachIndexed(action: (index: number, entry: Entry<KeyType, ValueType>) => boolean | void | Promise<boolean | void>, thisArg?: any): KoconutMap<KeyType, ValueType>;
    plus(element: Pair<KeyType, ValueType> | KoconutPair<KeyType, ValueType> | Entry<KeyType, ValueType> | KoconutEntry<KeyType, ValueType> | Iterable<Pair<KeyType, ValueType> | KoconutPair<KeyType, ValueType> | Entry<KeyType, ValueType> | KoconutEntry<KeyType, ValueType>>): KoconutMap<KeyType, ValueType>;
    toArray(): KoconutArray<Entry<KeyType, ValueType>>;
}
