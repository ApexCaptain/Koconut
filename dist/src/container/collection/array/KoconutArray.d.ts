import { Pair, KoconutPair, KoconutCollection, KoconutEquatable, KoconutComparable } from "../../../../module.internal";
export declare class KoconutArray<DataType> extends KoconutCollection<DataType, Array<DataType>> {
    static from<DataType>(source: Iterable<DataType>): KoconutArray<DataType>;
    static of<DataType>(...data: DataType[]): KoconutArray<DataType>;
    private static fromCollection;
    associateByTo<KeyType, ValueType = DataType>(destination: Map<KeyType, ValueType>, keySelector: (element: DataType) => KeyType | Promise<KeyType>, valueTransform?: ((element: DataType) => ValueType | Promise<ValueType>) | null, keySelectorThisArg?: any, valueTransformThisArg?: any): KoconutArray<DataType>;
    associateTo<KeyType, ValueType>(destination: Map<KeyType, ValueType>, transform: (element: DataType) => [KeyType, ValueType] | Pair<KeyType, ValueType> | KoconutPair<KeyType, ValueType> | Pair<KeyType, ValueType> | Promise<[KeyType, ValueType] | KoconutPair<KeyType, ValueType>>, thisArg?: any): KoconutArray<DataType>;
    associateWithTo<ValueType>(destination: Map<DataType, ValueType>, valueSelector: (element: DataType) => ValueType | Promise<ValueType>, thisArg?: any): KoconutArray<DataType>;
    distinct(): KoconutArray<DataType>;
    distinctBy<KeyType, EquatableKeyType extends KoconutEquatable>(selector: (element: DataType) => KeyType | EquatableKeyType | Promise<KeyType>, thisArg?: any): KoconutArray<DataType>;
    drop(n: number): KoconutArray<DataType>;
    dropLast(n: number): KoconutArray<DataType>;
    dropLastWhile(predicate: (element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    dropWhile(predicate: (element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    filter(predicate: (element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    filterIndexed(predicate: (index: number, element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    filterIndexedTo(destination: Array<DataType> | Set<DataType>, predicate: (index: number, element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    filterNot(predicate: (element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    filterNotNull(): KoconutArray<DataType>;
    filterNotNullTo(destination: Array<DataType> | Set<DataType>): KoconutArray<DataType>;
    filterNotTo(destination: Array<DataType> | Set<DataType>, predicate: (element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    filterTo(destination: Array<DataType> | Set<DataType>, predicate: (element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    flatMapIndexedTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (index: number, element: DataType) => Iterable<ResultDataType> | Promise<Iterable<ResultDataType>>, thisArg?: any): KoconutArray<DataType>;
    flatMapTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (element: DataType) => Iterable<ResultDataType> | Promise<Iterable<ResultDataType>>, thisArg?: any): KoconutArray<DataType>;
    groupByTo<KeyType, ValueType = DataType>(destination: Map<KeyType, Array<ValueType>>, keySelector: (element: DataType) => KeyType | Promise<KeyType>, valueTransform?: ((element: DataType) => ValueType | Promise<ValueType>) | null, keySelectorThisArg?: any, valueTransformThisArg?: any): KoconutArray<DataType>;
    mapIndexedNotNullTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (index: number, element: DataType) => ResultDataType | void | null | undefined | Promise<ResultDataType | void | null | undefined>, thisArg?: any): KoconutArray<DataType>;
    mapIndexedTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (index: number, element: DataType) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutArray<DataType>;
    mapNotNullTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (element: DataType) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutArray<DataType>;
    mapTo<ResultDataType>(destination: Array<ResultDataType> | Set<ResultDataType>, transform: (element: DataType) => ResultDataType | Promise<ResultDataType>, thisArg?: any): KoconutArray<DataType>;
    minus(element: DataType): KoconutArray<DataType>;
    minus(elements: Iterable<DataType>): KoconutArray<DataType>;
    minusElement(element: DataType): KoconutArray<DataType>;
    onEach(action: (element: DataType) => boolean | void | Promise<boolean | void>, thisArg?: any): KoconutArray<DataType>;
    onEachIndexed(action: (index: number, element: DataType) => boolean | void | Promise<boolean | void>, thisArg?: any): KoconutArray<DataType>;
    plus(element: DataType): KoconutArray<DataType>;
    plus(elements: Iterable<DataType>): KoconutArray<DataType>;
    plusElement(element: DataType): KoconutArray<DataType>;
    reversed(): KoconutArray<DataType>;
    shuffled(): KoconutArray<DataType>;
    sortedBy(selector: (element: DataType) => number | string | KoconutComparable | Promise<number | string | KoconutComparable>, thisArg?: any): KoconutArray<DataType>;
    sortedByDescending(selector: (element: DataType) => number | string | KoconutComparable | Promise<number | string | KoconutComparable>, thisArg?: any): KoconutArray<DataType>;
    sortedWith(comparator: (front: DataType, rear: DataType) => number | Promise<number>, thisArg?: any): KoconutArray<DataType>;
    take(n: number): KoconutArray<DataType>;
    takeLast(n: number): KoconutArray<DataType>;
    takeLastWhile(predicate: (element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
    takeWhile(predicate: (element: DataType) => boolean | Promise<boolean>, thisArg?: any): KoconutArray<DataType>;
}
