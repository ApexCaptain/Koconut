/*! For license information please see browser.spec.js.LICENSE.txt */
!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var t=n();for(var a in t)("object"==typeof exports?exports:e)[a]=t[a]}}(this,(function(){return(()=>{var __webpack_modules__={"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":module=>{eval('function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js?')},"./node_modules/@babel/runtime/helpers/arrayWithHoles.js":module=>{eval('function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/arrayWithHoles.js?')},"./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js?')},"./node_modules/@babel/runtime/helpers/assertThisInitialized.js":module=>{eval('function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/assertThisInitialized.js?')},"./node_modules/@babel/runtime/helpers/asyncToGenerator.js":module=>{eval('function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/asyncToGenerator.js?')},"./node_modules/@babel/runtime/helpers/classApplyDescriptorGet.js":module=>{eval('function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nmodule.exports = _classApplyDescriptorGet, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/classApplyDescriptorGet.js?')},"./node_modules/@babel/runtime/helpers/classApplyDescriptorSet.js":module=>{eval('function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError("attempted to set read only private field");\n    }\n\n    descriptor.value = value;\n  }\n}\n\nmodule.exports = _classApplyDescriptorSet, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/classApplyDescriptorSet.js?')},"./node_modules/@babel/runtime/helpers/classCallCheck.js":module=>{eval('function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/classCallCheck.js?')},"./node_modules/@babel/runtime/helpers/classExtractFieldDescriptor.js":module=>{eval('function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError("attempted to " + action + " private field on non-instance");\n  }\n\n  return privateMap.get(receiver);\n}\n\nmodule.exports = _classExtractFieldDescriptor, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/classExtractFieldDescriptor.js?')},"./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var classApplyDescriptorGet = __webpack_require__(/*! ./classApplyDescriptorGet.js */ "./node_modules/@babel/runtime/helpers/classApplyDescriptorGet.js");\n\nvar classExtractFieldDescriptor = __webpack_require__(/*! ./classExtractFieldDescriptor.js */ "./node_modules/@babel/runtime/helpers/classExtractFieldDescriptor.js");\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, "get");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n\nmodule.exports = _classPrivateFieldGet, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js?')},"./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var classApplyDescriptorSet = __webpack_require__(/*! ./classApplyDescriptorSet.js */ "./node_modules/@babel/runtime/helpers/classApplyDescriptorSet.js");\n\nvar classExtractFieldDescriptor = __webpack_require__(/*! ./classExtractFieldDescriptor.js */ "./node_modules/@babel/runtime/helpers/classExtractFieldDescriptor.js");\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n\nmodule.exports = _classPrivateFieldSet, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js?')},"./node_modules/@babel/runtime/helpers/construct.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");\n\nvar isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct.js */ "./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/construct.js?')},"./node_modules/@babel/runtime/helpers/createClass.js":module=>{eval('function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ("value" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, "prototype", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/createClass.js?')},"./node_modules/@babel/runtime/helpers/defineProperty.js":module=>{eval('function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/defineProperty.js?')},"./node_modules/@babel/runtime/helpers/get.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var superPropBase = __webpack_require__(/*! ./superPropBase.js */ "./node_modules/@babel/runtime/helpers/superPropBase.js");\n\nfunction _get() {\n  if (typeof Reflect !== "undefined" && Reflect.get) {\n    module.exports = _get = Reflect.get, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    }, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  }\n\n  return _get.apply(this, arguments);\n}\n\nmodule.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/get.js?')},"./node_modules/@babel/runtime/helpers/getPrototypeOf.js":module=>{eval('function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/getPrototypeOf.js?')},"./node_modules/@babel/runtime/helpers/inherits.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, "prototype", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/inherits.js?')},"./node_modules/@babel/runtime/helpers/interopRequireDefault.js":module=>{eval('function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    "default": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/interopRequireDefault.js?')},"./node_modules/@babel/runtime/helpers/isNativeFunction.js":module=>{eval('function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf("[native code]") !== -1;\n}\n\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/isNativeFunction.js?')},"./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":module=>{eval('function _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js?')},"./node_modules/@babel/runtime/helpers/iterableToArray.js":module=>{eval('function _iterableToArray(iter) {\n  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/iterableToArray.js?')},"./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":module=>{eval('function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js?')},"./node_modules/@babel/runtime/helpers/nonIterableRest.js":module=>{eval('function _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/nonIterableRest.js?')},"./node_modules/@babel/runtime/helpers/nonIterableSpread.js":module=>{eval('function _nonIterableSpread() {\n  throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/nonIterableSpread.js?')},"./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var _typeof = (__webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"]);\n\nvar assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized.js */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === "object" || typeof call === "function")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError("Derived constructors may only return object or undefined");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js?')},"./node_modules/@babel/runtime/helpers/setPrototypeOf.js":module=>{eval('function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/setPrototypeOf.js?')},"./node_modules/@babel/runtime/helpers/slicedToArray.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");\n\nvar iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit.js */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");\n\nvar nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/slicedToArray.js?')},"./node_modules/@babel/runtime/helpers/superPropBase.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/superPropBase.js?')},"./node_modules/@babel/runtime/helpers/toConsumableArray.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles.js */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");\n\nvar iterableToArray = __webpack_require__(/*! ./iterableToArray.js */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");\n\nvar unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");\n\nvar nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread.js */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/toConsumableArray.js?')},"./node_modules/@babel/runtime/helpers/typeof.js":module=>{eval('function _typeof(obj) {\n  "@babel/helpers - typeof";\n\n  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;\n  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/typeof.js?')},"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js?')},"./node_modules/@babel/runtime/helpers/wrapNativeSuper.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js");\n\nvar setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");\n\nvar isNativeFunction = __webpack_require__(/*! ./isNativeFunction.js */ "./node_modules/@babel/runtime/helpers/isNativeFunction.js");\n\nvar construct = __webpack_require__(/*! ./construct.js */ "./node_modules/@babel/runtime/helpers/construct.js");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === "function" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== "function") {\n      throw new TypeError("Super expression must either be null or a function");\n    }\n\n    if (typeof _cache !== "undefined") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  }, module.exports.__esModule = true, module.exports["default"] = module.exports;\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/helpers/wrapNativeSuper.js?')},"./node_modules/@babel/runtime/regenerator/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");\n\n\n//# sourceURL=webpack://koconut/./node_modules/@babel/runtime/regenerator/index.js?')},"./node_modules/assertion-error/index.js":module=>{eval("/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/assertion-error/index.js?")},"./coverage/nodejs/KoconutArray.spec.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\"));\n\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));\n\nvar _chai = __webpack_require__(/*! chai */ \"./node_modules/chai/index.js\");\n\nvar _module = __webpack_require__(/*! ../../dist/module */ \"./dist/module.js\");\n\nvar _TestDataClasses = __webpack_require__(/*! ./TestDataClasses */ \"./coverage/nodejs/TestDataClasses.js\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Creator\"), function () {\n  it(_module.KoconutArray.from.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee() {\n    var koconutCase1, resultCase1, koconutCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            (0, _chai.expect)(koconutCase1).to.be.instanceOf(_module.KoconutArray);\n            _context.next = 4;\n            return koconutCase1[\"yield\"]();\n\n          case 4:\n            resultCase1 = _context.sent;\n            (0, _chai.expect)(resultCase1).to.be.eqls([1, 2, 3, 4, 5]);\n            koconutCase2 = _module.KoconutArray.from();\n            (0, _chai.expect)(koconutCase2).to.be.instanceOf(_module.KoconutArray);\n            _context.next = 10;\n            return koconutCase2[\"yield\"]();\n\n          case 10:\n            resultCase2 = _context.sent;\n            (0, _chai.expect)(resultCase2).to.be.eqls([]);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n  it(_module.KoconutArray.generate.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee2() {\n    var koconutCase1, resultCase1, koconutCase2;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.generate(5, function (index) {\n              return \"\".concat(index);\n            });\n            _context2.next = 3;\n            return koconutCase1[\"yield\"]();\n\n          case 3:\n            resultCase1 = _context2.sent;\n            (0, _chai.expect)(resultCase1).eqls(['0', '1', '2', '3', '4']);\n            koconutCase2 = _module.KoconutArray.generate(-1, function (index) {\n              return \"\".concat(index);\n            });\n            _context2.prev = 6;\n            _context2.next = 9;\n            return koconutCase2.process();\n\n          case 9:\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](6);\n            (0, _chai.expect)(_context2.t0).to.be.instanceOf(_module.KoconutInvalidArgumentException);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[6, 11]]);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Processor\"), function () {\n  it(_module.KoconutArray.prototype.retrieve.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee3() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5);\n            _context3.next = 3;\n            return koconut.retrieve();\n\n          case 3:\n            yieldable = _context3.sent;\n            (0, _chai.expect)(yieldable).eqls(koconut);\n            _context3.next = 7;\n            return yieldable[\"yield\"]();\n\n          case 7:\n            result = _context3.sent;\n            (0, _chai.expect)(result).to.be.eqls([1, 2, 3, 4, 5]);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Property Getter\"), function () {\n  it(_module.KoconutArray.prototype.size.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee4() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.size();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context4.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context4.sent;\n            (0, _chai.expect)(result).to.equals(5);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })));\n  it(_module.KoconutArray.prototype.indices.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee5() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.indices();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context5.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context5.sent;\n            (0, _chai.expect)(result).to.eql([0, 1, 2, 3, 4]);\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Accumulator\"), function () {\n  it(_module.KoconutArray.prototype.fold.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee6() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.fold(1, function (acc, eachElement) {\n              return acc * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context6.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context6.sent;\n            (0, _chai.expect)(result).equals(120);\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  })));\n  it(_module.KoconutArray.prototype.foldIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee7() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.foldIndexed(0, function (eachIndex, acc, eachElement) {\n              return acc + eachIndex + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context7.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context7.sent;\n            (0, _chai.expect)(result).equals(25);\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Calculator\"), function () {\n  it(_module.KoconutArray.prototype.count.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee8() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.count();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context8.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context8.sent;\n            (0, _chai.expect)(resultCase1).to.equals(5);\n            yieldableCase2 = koconut.count(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context8.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context8.sent;\n            (0, _chai.expect)(resultCase2).to.equals(2);\n\n          case 13:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  })));\n  it(_module.KoconutArray.prototype.maxBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee9() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxBy(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context9.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500));\n            yieldableCase2 = koconut.maxBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context9.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxBy(function (eachElement) {\n              return eachElement;\n            });\n            _context9.prev = 14;\n            _context9.next = 17;\n            return yieldableCase3.process();\n\n          case 17:\n            _context9.next = 22;\n            break;\n\n          case 19:\n            _context9.prev = 19;\n            _context9.t0 = _context9[\"catch\"](14);\n            (0, _chai.expect)(_context9.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80));\n            yieldableCase4 = koconutCase4.maxBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 27;\n            return yieldableCase4[\"yield\"]();\n\n          case 27:\n            resultCase4 = _context9.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(new _TestDataClasses.Worker('Grace', 'Hopper', 100));\n\n          case 29:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[14, 19]]);\n  })));\n  it(_module.KoconutArray.prototype.maxByOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee10() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxByOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context10.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500));\n            yieldableCase2 = koconut.maxByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context10.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context10.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80));\n            yieldableCase4 = koconutCase4.maxByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 24;\n            return yieldableCase4[\"yield\"]();\n\n          case 24:\n            resultCase4 = _context10.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(new _TestDataClasses.Worker('Grace', 'Hopper', 100));\n\n          case 26:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  })));\n  it(_module.KoconutArray.prototype.maxOf.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee11() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxOf(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context11.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context11.sent;\n            (0, _chai.expect)(resultCase1).equals('iPhone -- June');\n            yieldableCase2 = koconut.maxOf(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context11.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context11.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000));\n            koconutCase3 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80));\n            yieldableCase3 = koconutCase3.maxOf(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context11.next = 18;\n            return yieldableCase3[\"yield\"]();\n\n          case 18:\n            resultCase3 = _context11.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _TestDataClasses.Worker('Grace', 'Hopper', 100));\n\n          case 20:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  })));\n  it(_module.KoconutArray.prototype.maxOfOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee12() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxOfOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context12.sent;\n            (0, _chai.expect)(resultCase1).equals('iPhone -- June');\n            yieldableCase2 = koconut.maxOfOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context12.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price < 500;\n            }).maxOfOrNull(function (eachElement) {\n              return eachElement.price;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context12.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80));\n            yieldableCase4 = koconutCase4.maxOfOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 24;\n            return yieldableCase4[\"yield\"]();\n\n          case 24:\n            resultCase4 = _context12.sent;\n            (0, _chai.expect)(resultCase4).eqls(new _TestDataClasses.Worker('Grace', 'Hopper', 100));\n\n          case 26:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  })));\n  it(_module.KoconutArray.prototype.maxOfWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee13() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldable = koconut.maxOfWith(function (eachElement) {\n              return eachElement.name;\n            }, function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context13.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context13.sent;\n            (0, _chai.expect)(result).equals('Mac Book Air -- September');\n\n          case 7:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  })));\n  it(_module.KoconutArray.prototype.maxOfWithOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee14() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldable = koconut.maxOfWithOrNull(function (eachElement) {\n              return eachElement.name;\n            }, function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context14.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context14.sent;\n            (0, _chai.expect)(result).equals('Mac Book Air -- September');\n\n          case 7:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  })));\n  it(_module.KoconutArray.prototype.maxWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee15() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context15.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context15.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context15.prev = 9;\n            _context15.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            _context15.next = 17;\n            break;\n\n          case 14:\n            _context15.prev = 14;\n            _context15.t0 = _context15[\"catch\"](9);\n            (0, _chai.expect)(_context15.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, _callee15, null, [[9, 14]]);\n  })));\n  it(_module.KoconutArray.prototype.maxWithOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee16() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context16.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context16.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context16.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context16.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee16);\n  })));\n  it(_module.KoconutArray.prototype.minBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee17() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minBy(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context17.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase2 = koconut.minBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context17.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minBy(function (eachElement) {\n              return eachElement;\n            });\n            _context17.prev = 14;\n            _context17.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            _context17.next = 22;\n            break;\n\n          case 19:\n            _context17.prev = 19;\n            _context17.t0 = _context17[\"catch\"](14);\n            (0, _chai.expect)(_context17.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80));\n            yieldableCase4 = koconutCase4.minBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 27;\n            return yieldableCase4[\"yield\"]();\n\n          case 27:\n            resultCase4 = _context17.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50));\n\n          case 29:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee17, null, [[14, 19]]);\n  })));\n  it(_module.KoconutArray.prototype.minByOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee18() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee18$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minByOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context18.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context18.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase2 = koconut.minByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context18.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context18.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            _context18.next = 16;\n            return yieldableCase3[\"yield\"]();\n\n          case 16:\n            resultCase3 = _context18.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80));\n            yieldableCase4 = koconutCase4.minByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context18.next = 23;\n            return yieldableCase4[\"yield\"]();\n\n          case 23:\n            resultCase4 = _context18.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50));\n\n          case 25:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee18);\n  })));\n  it(_module.KoconutArray.prototype.minOf.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee19() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee19$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minOf(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context19.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context19.sent;\n            (0, _chai.expect)(resultCase1).equals('Mac Book Air -- September');\n            yieldableCase2 = koconut.minOf(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context19.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context19.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            koconutCase3 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80));\n            yieldableCase3 = koconutCase3.minOf(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context19.next = 18;\n            return yieldableCase3[\"yield\"]();\n\n          case 18:\n            resultCase3 = _context19.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50));\n\n          case 20:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee19);\n  })));\n  it(_module.KoconutArray.prototype.minOfOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee20() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee20$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minOfOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context20.sent;\n            (0, _chai.expect)(resultCase1).equals('Mac Book Air -- September');\n            yieldableCase2 = koconut.minOfOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context20.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price < 500;\n            }).minOfOrNull(function (eachElement) {\n              return eachElement.price;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context20.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80));\n            yieldableCase4 = koconutCase4.minOfOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 24;\n            return yieldableCase4[\"yield\"]();\n\n          case 24:\n            resultCase4 = _context20.sent;\n            (0, _chai.expect)(resultCase4).eqls(new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50));\n\n          case 26:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _callee20);\n  })));\n  it(_module.KoconutArray.prototype.minOfWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee21() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee21$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldable = koconut.minOfWith(function (eachElement) {\n              return eachElement.name;\n            }, function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context21.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context21.sent;\n            (0, _chai.expect)(result).equals('iPhone -- June');\n\n          case 7:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, _callee21);\n  })));\n  it(_module.KoconutArray.prototype.minOfWithOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee22() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee22$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldable = koconut.minOfWithOrNull(function (eachElement) {\n              return eachElement.name;\n            }, function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context22.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context22.sent;\n            (0, _chai.expect)(result).equals('iPhone -- June');\n\n          case 7:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, _callee22);\n  })));\n  it(_module.KoconutArray.prototype.minWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee23() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee23$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context23.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context23.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context23.prev = 9;\n            _context23.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            _context23.next = 17;\n            break;\n\n          case 14:\n            _context23.prev = 14;\n            _context23.t0 = _context23[\"catch\"](9);\n            (0, _chai.expect)(_context23.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, _callee23, null, [[9, 14]]);\n  })));\n  it(_module.KoconutArray.prototype.minWithOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee24() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee24$(_context24) {\n      while (1) {\n        switch (_context24.prev = _context24.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context24.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context24.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context24.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context24.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case \"end\":\n            return _context24.stop();\n        }\n      }\n    }, _callee24);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Caster\"), function () {\n  it(_module.KoconutArray.prototype.asArray.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee25() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee25$(_context25) {\n      while (1) {\n        switch (_context25.prev = _context25.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5);\n            yieldable = koconut.asArray();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context25.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context25.sent;\n            (0, _chai.expect)(result).eqls([1, 2, 3, 4, 5]);\n\n          case 7:\n          case \"end\":\n            return _context25.stop();\n        }\n      }\n    }, _callee25);\n  })));\n  it(_module.KoconutArray.prototype.asSet.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee26() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee26$(_context26) {\n      while (1) {\n        switch (_context26.prev = _context26.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 1, 2, 2, 3, 3);\n            yieldable = koconut.asSet();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context26.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context26.sent;\n            (0, _chai.expect)(result).eqls(new Set([1, 2, 3]));\n\n          case 7:\n          case \"end\":\n            return _context26.stop();\n        }\n      }\n    }, _callee26);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Inspector\"), function () {\n  it(_module.KoconutArray.prototype.all.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee27() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee27$(_context27) {\n      while (1) {\n        switch (_context27.prev = _context27.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.all(function (element) {\n              return element > 2;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context27.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context27.sent;\n            (0, _chai.expect)(resultCase1).to.equals(false);\n            yieldableCase2 = koconut.all(function (element) {\n              return element < 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context27.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context27.sent;\n            (0, _chai.expect)(resultCase2).to.equals(true);\n\n          case 13:\n          case \"end\":\n            return _context27.stop();\n        }\n      }\n    }, _callee27);\n  })));\n  it(_module.KoconutArray.prototype.any.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee28() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee28$(_context28) {\n      while (1) {\n        switch (_context28.prev = _context28.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.any(function (element) {\n              return element >= 4;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context28.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context28.sent;\n            (0, _chai.expect)(resultCase1).to.equals(true);\n            yieldableCase2 = koconut.any(function (element) {\n              return element > 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context28.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context28.sent;\n            (0, _chai.expect)(resultCase2).to.equals(false);\n\n          case 13:\n          case \"end\":\n            return _context28.stop();\n        }\n      }\n    }, _callee28);\n  })));\n  it(_module.KoconutArray.prototype.isEmpty.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee29() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee29$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5);\n            yieldableCase1 = koconut.isEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context29.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context29.sent;\n            (0, _chai.expect)(resultCase1).equals(false);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).isEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context29.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context29.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 13:\n          case \"end\":\n            return _context29.stop();\n        }\n      }\n    }, _callee29);\n  })));\n  it(_module.KoconutArray.prototype.isNotEmpty.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee30() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee30$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5);\n            yieldableCase1 = koconut.isNotEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context30.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context30.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).isNotEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context30.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context30.sent;\n            (0, _chai.expect)(resultCase2).equals(false);\n\n          case 13:\n          case \"end\":\n            return _context30.stop();\n        }\n      }\n    }, _callee30);\n  })));\n  it(_module.KoconutArray.prototype.isNullOrEmpty.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee31() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee31$(_context31) {\n      while (1) {\n        switch (_context31.prev = _context31.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5);\n            yieldableCase1 = koconut.isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context31.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context31.sent;\n            (0, _chai.expect)(resultCase1).equals(false);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context31.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context31.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 13:\n          case \"end\":\n            return _context31.stop();\n        }\n      }\n    }, _callee31);\n  })));\n  it(_module.KoconutArray.prototype.contains.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee32() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee32$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.contains(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context32.sent;\n            (0, _chai.expect)(resultCase1).to.equals(true);\n            yieldableCase2 = koconut.contains(6);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context32.sent;\n            (0, _chai.expect)(resultCase2).to.equals(false);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase3 = koconutCase3.contains(new _TestDataClasses.Person('Jinyoung', 'Luvya'));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 18;\n            return yieldableCase3[\"yield\"]();\n\n          case 18:\n            resultCase3 = _context32.sent;\n            (0, _chai.expect)(resultCase3).to.equal(true);\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Dog('Brie', 3, 0), new _TestDataClasses.Dog('Mike', 5, 1), new _TestDataClasses.Dog('unknown', 3, 0));\n            yieldableCase4 = koconutCase4.contains(new _TestDataClasses.Dog('no-name', 3, 2));\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 25;\n            return yieldableCase4[\"yield\"]();\n\n          case 25:\n            resultCase4 = _context32.sent;\n            (0, _chai.expect)(resultCase4).to.equal(false);\n\n          case 27:\n          case \"end\":\n            return _context32.stop();\n        }\n      }\n    }, _callee32);\n  })));\n  it(_module.KoconutArray.prototype.containsAll.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee33() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4, koconutCase5, yieldableCase5, resultCase5;\n    return _regenerator[\"default\"].wrap(function _callee33$(_context33) {\n      while (1) {\n        switch (_context33.prev = _context33.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abc');\n            yieldableCase1 = koconut.containsAll('ab');\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context33.sent;\n            (0, _chai.expect)(resultCase1).to.equals(true);\n            yieldableCase2 = koconut.containsAll('abcd');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context33.sent;\n            (0, _chai.expect)(resultCase2).to.equals(false);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase3 = koconutCase3.containsAll([new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli')]);\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 18;\n            return yieldableCase3[\"yield\"]();\n\n          case 18:\n            resultCase3 = _context33.sent;\n            (0, _chai.expect)(resultCase3).to.equals(true);\n            koconutCase4 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase4 = koconutCase4.containsAll([new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Steve', 'Jobs')]);\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 25;\n            return yieldableCase4[\"yield\"]();\n\n          case 25:\n            resultCase4 = _context33.sent;\n            (0, _chai.expect)(resultCase4).to.equals(false);\n            koconutCase5 = _module.KoconutArray.of(new _TestDataClasses.Dog('Brie', 3, 0), new _TestDataClasses.Dog('Mike', 5, 1));\n            yieldableCase5 = koconutCase5.containsAll([new _TestDataClasses.Dog('Brie', 3, 0), new _TestDataClasses.Dog('Mike', 5, 1)]);\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 32;\n            return yieldableCase5[\"yield\"]();\n\n          case 32:\n            resultCase5 = _context33.sent;\n            (0, _chai.expect)(resultCase5).to.be.eqls(true);\n\n          case 34:\n          case \"end\":\n            return _context33.stop();\n        }\n      }\n    }, _callee33);\n  })));\n  it(_module.KoconutArray.prototype.none.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee34() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee34$(_context34) {\n      while (1) {\n        switch (_context34.prev = _context34.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.none();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context34.sent;\n            (0, _chai.expect)(resultCase1).equals(false);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).none();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context34.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n            yieldableCase3 = koconut.none(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context34.sent;\n            (0, _chai.expect)(resultCase3).equals(false);\n            yieldableCase4 = koconut.none(function (eachElement) {\n              return eachElement % 10 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 23;\n            return yieldableCase4[\"yield\"]();\n\n          case 23:\n            resultCase4 = _context34.sent;\n            (0, _chai.expect)(resultCase4).equals(true);\n\n          case 25:\n          case \"end\":\n            return _context34.stop();\n        }\n      }\n    }, _callee34);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Iterator\"), function () {\n  it(_module.KoconutArray.prototype.forEach.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee35() {\n    var koconut, yieldableCase1, resultCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee35$(_context35) {\n      while (1) {\n        switch (_context35.prev = _context35.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.forEach(function (eachElement) {\n              (0, _chai.expect)(eachElement).to.be.a('number');\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context35.next = 5;\n            return yieldableCase1.process();\n\n          case 5:\n            resultCase2 = new Array();\n            yieldableCase2 = koconut.forEach(function (eachElement) {\n              if (eachElement > 3) return false;\n              resultCase2.push(eachElement);\n            });\n            _context35.next = 9;\n            return yieldableCase2.process();\n\n          case 9:\n            (0, _chai.expect)(resultCase2).to.be.eqls([1, 2, 3]);\n\n          case 10:\n          case \"end\":\n            return _context35.stop();\n        }\n      }\n    }, _callee35);\n  })));\n  it(_module.KoconutArray.prototype.forEachIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee36() {\n    var koconut, yieldableCase1, resultCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee36$(_context36) {\n      while (1) {\n        switch (_context36.prev = _context36.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.forEachIndexed(function (eachIndex, eachElement) {\n              (0, _chai.expect)(eachElement - eachIndex).equals(1);\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context36.next = 5;\n            return yieldableCase1.process();\n\n          case 5:\n            resultCase2 = new Array();\n            yieldableCase2 = koconut.forEachIndexed(function (eachIndex, eachElement) {\n              if (eachIndex > 2) return false;else resultCase2.push(eachElement);\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context36.next = 10;\n            return yieldableCase2.process();\n\n          case 10:\n            (0, _chai.expect)(resultCase2).to.be.eqls([1, 2, 3]);\n\n          case 11:\n          case \"end\":\n            return _context36.stop();\n        }\n      }\n    }, _callee36);\n  })));\n  it(_module.KoconutArray.prototype.onEach.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee37() {\n    var koconut, yieldableCase1, resultCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee37$(_context37) {\n      while (1) {\n        switch (_context37.prev = _context37.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.onEach(function (eachElement) {\n              (0, _chai.expect)(eachElement).to.be.a('number');\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context37.next = 5;\n            return yieldableCase1.process();\n\n          case 5:\n            resultCase2 = new Array();\n            yieldableCase2 = koconut.onEach(function (eachElement) {\n              if (eachElement > 3) return false;\n              resultCase2.push(eachElement);\n            });\n            _context37.next = 9;\n            return yieldableCase2.process();\n\n          case 9:\n            (0, _chai.expect)(resultCase2).to.be.eqls([1, 2, 3]);\n\n          case 10:\n          case \"end\":\n            return _context37.stop();\n        }\n      }\n    }, _callee37);\n  })));\n  it(_module.KoconutArray.prototype.onEachIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee38() {\n    var koconut, yieldableCase1, resultCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee38$(_context38) {\n      while (1) {\n        switch (_context38.prev = _context38.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.onEachIndexed(function (eachIndex, eachElement) {\n              (0, _chai.expect)(eachElement - eachIndex).equals(1);\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context38.next = 5;\n            return yieldableCase1.process();\n\n          case 5:\n            resultCase2 = new Array();\n            yieldableCase2 = koconut.onEachIndexed(function (eachIndex, eachElement) {\n              if (eachIndex > 2) return false;\n              resultCase2.push(eachElement);\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context38.next = 10;\n            return yieldableCase2.process();\n\n          case 10:\n            (0, _chai.expect)(resultCase2).to.be.eqls([1, 2, 3]);\n\n          case 11:\n          case \"end\":\n            return _context38.stop();\n        }\n      }\n    }, _callee38);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Manipulator\"), function () {\n  it(_module.KoconutArray.prototype.distinct.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee39() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee39$(_context39) {\n      while (1) {\n        switch (_context39.prev = _context39.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from('aAbBcCaA');\n            yieldableCase1 = koconutCase1.distinct();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context39.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context39.sent;\n            (0, _chai.expect)(resultCase1.join('')).equals('aAbBcC');\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase2 = koconutCase2.distinct();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context39.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context39.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')];\n            (0, _chai.expect)(resultCase2).to.eql(expectedResultArrayCase2);\n            koconutCase3 = _module.KoconutArray.of(new _TestDataClasses.Dog('no-name 1', 3, 0), new _TestDataClasses.Dog('no-name 2', 4, 0));\n            yieldableCase3 = koconutCase3.distinct();\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutArray);\n            _context39.next = 20;\n            return yieldableCase3[\"yield\"]();\n\n          case 20:\n            resultCase3 = _context39.sent;\n            (0, _chai.expect)(resultCase3).to.be.eqls([new _TestDataClasses.Dog('no-name 1', 3, 0)]);\n\n          case 22:\n          case \"end\":\n            return _context39.stop();\n        }\n      }\n    }, _callee39);\n  })));\n  it(_module.KoconutArray.prototype.distinctBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee40() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee40$(_context40) {\n      while (1) {\n        switch (_context40.prev = _context40.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from('aAbBcCaA');\n            yieldableCase1 = koconutCase1.distinctBy(function (element) {\n              return element.toUpperCase();\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context40.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context40.sent;\n            (0, _chai.expect)(resultCase1.join('')).equals('abc');\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase2 = koconutCase2.distinctBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context40.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context40.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')];\n            (0, _chai.expect)(resultCase2).to.eql(expectedResultArrayCase2);\n            koconutCase3 = _module.KoconutArray.of(new _TestDataClasses.Dog('no-name 1', 3, 0), new _TestDataClasses.Dog('no-name 2', 4, 0));\n            yieldableCase3 = koconutCase3.distinctBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutArray);\n            _context40.next = 20;\n            return yieldableCase3[\"yield\"]();\n\n          case 20:\n            resultCase3 = _context40.sent;\n            (0, _chai.expect)(resultCase3).to.be.eqls([new _TestDataClasses.Dog('no-name 1', 3, 0)]);\n\n          case 22:\n          case \"end\":\n            return _context40.stop();\n        }\n      }\n    }, _callee40);\n  })));\n  it(_module.KoconutArray.prototype.drop.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee41() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee41$(_context41) {\n      while (1) {\n        switch (_context41.prev = _context41.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('ABCDEFG');\n            yieldableCase1 = koconut.drop(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context41.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context41.sent;\n            (0, _chai.expect)(resultCase1.join('')).equals('DEFG');\n            yieldableCase2 = koconut.drop(-2);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context41.prev = 9;\n            _context41.next = 12;\n            return yieldableCase2.process();\n\n          case 12:\n            _context41.next = 17;\n            break;\n\n          case 14:\n            _context41.prev = 14;\n            _context41.t0 = _context41[\"catch\"](9);\n            (0, _chai.expect)(_context41.t0).to.be.instanceOf(_module.KoconutInvalidArgumentException);\n\n          case 17:\n          case \"end\":\n            return _context41.stop();\n        }\n      }\n    }, _callee41, null, [[9, 14]]);\n  })));\n  it(_module.KoconutArray.prototype.dropLast.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee42() {\n    var koconut, yieldable, result, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee42$(_context42) {\n      while (1) {\n        switch (_context42.prev = _context42.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('ABCDEFG');\n            yieldable = koconut.dropLast(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context42.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context42.sent;\n            (0, _chai.expect)(result.join('')).equals('ABCD');\n            yieldableCase2 = koconut.dropLast(-2);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context42.prev = 9;\n            _context42.next = 12;\n            return yieldableCase2.process();\n\n          case 12:\n            _context42.next = 17;\n            break;\n\n          case 14:\n            _context42.prev = 14;\n            _context42.t0 = _context42[\"catch\"](9);\n            (0, _chai.expect)(_context42.t0).to.be.instanceOf(_module.KoconutInvalidArgumentException);\n\n          case 17:\n          case \"end\":\n            return _context42.stop();\n        }\n      }\n    }, _callee42, null, [[9, 14]]);\n  })));\n  it(_module.KoconutArray.prototype.dropLastWhile.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee43() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee43$(_context43) {\n      while (1) {\n        switch (_context43.prev = _context43.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('ABCDEFG');\n            yieldable = koconut.dropLastWhile(function (eachElement) {\n              return eachElement > 'C';\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context43.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context43.sent;\n            (0, _chai.expect)(result.join('')).equals('ABC');\n\n          case 7:\n          case \"end\":\n            return _context43.stop();\n        }\n      }\n    }, _callee43);\n  })));\n  it(_module.KoconutArray.prototype.dropWhile.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee44() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee44$(_context44) {\n      while (1) {\n        switch (_context44.prev = _context44.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('ABCDEFG');\n            yieldable = koconut.dropWhile(function (eachElement) {\n              return eachElement < 'D';\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context44.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context44.sent;\n            (0, _chai.expect)(result.join('')).equals('DEFG');\n\n          case 7:\n          case \"end\":\n            return _context44.stop();\n        }\n      }\n    }, _callee44);\n  })));\n  it(_module.KoconutArray.prototype.filter.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee45() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee45$(_context45) {\n      while (1) {\n        switch (_context45.prev = _context45.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldable = koconut.filter(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context45.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context45.sent;\n            (0, _chai.expect)(result).eqls([2, 4, 6]);\n\n          case 7:\n          case \"end\":\n            return _context45.stop();\n        }\n      }\n    }, _callee45);\n  })));\n  it(_module.KoconutArray.prototype.filterNot.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee46() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee46$(_context46) {\n      while (1) {\n        switch (_context46.prev = _context46.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldable = koconut.filterNot(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context46.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context46.sent;\n            (0, _chai.expect)(result).eqls([1, 2, 4, 5, 7]);\n\n          case 7:\n          case \"end\":\n            return _context46.stop();\n        }\n      }\n    }, _callee46);\n  })));\n  it(_module.KoconutArray.prototype.filterTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee47() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee47$(_context47) {\n      while (1) {\n        switch (_context47.prev = _context47.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            destination = new Array();\n            yieldable = koconut.filterTo(destination, function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context47.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([2, 4, 6]);\n\n          case 7:\n          case \"end\":\n            return _context47.stop();\n        }\n      }\n    }, _callee47);\n  })));\n  it(_module.KoconutArray.prototype.filterNotTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee48() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee48$(_context48) {\n      while (1) {\n        switch (_context48.prev = _context48.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            destination = new Array();\n            yieldable = koconut.filterNotTo(destination, function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context48.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([1, 2, 4, 5, 7]);\n\n          case 7:\n          case \"end\":\n            return _context48.stop();\n        }\n      }\n    }, _callee48);\n  })));\n  it(_module.KoconutArray.prototype.filterIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee49() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee49$(_context49) {\n      while (1) {\n        switch (_context49.prev = _context49.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([0, 1, 2, 3, 4, 8, 6]);\n            yieldable = koconut.filterIndexed(function (eachIndex, eachElement) {\n              return eachIndex == eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context49.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context49.sent;\n            (0, _chai.expect)(result).eqls([0, 1, 2, 3, 4, 6]);\n\n          case 7:\n          case \"end\":\n            return _context49.stop();\n        }\n      }\n    }, _callee49);\n  })));\n  it(_module.KoconutArray.prototype.filterIndexedTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee50() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee50$(_context50) {\n      while (1) {\n        switch (_context50.prev = _context50.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([0, 1, 2, 3, 4, 8, 6]);\n            destination = new Array();\n            yieldable = koconut.filterIndexedTo(destination, function (eachIndex, eachElement) {\n              return eachIndex == eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context50.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([0, 1, 2, 3, 4, 6]);\n\n          case 7:\n          case \"end\":\n            return _context50.stop();\n        }\n      }\n    }, _callee50);\n  })));\n  it(_module.KoconutArray.prototype.filterNotNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee51() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee51$(_context51) {\n      while (1) {\n        switch (_context51.prev = _context51.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, null, 4]);\n            yieldable = koconut.filterNotNull();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context51.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context51.sent;\n            (0, _chai.expect)(result).eqls([1, 2, 4]);\n\n          case 7:\n          case \"end\":\n            return _context51.stop();\n        }\n      }\n    }, _callee51);\n  })));\n  it(_module.KoconutArray.prototype.filterNotNullTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee52() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee52$(_context52) {\n      while (1) {\n        switch (_context52.prev = _context52.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, null, 4]);\n            destination = new Array();\n            yieldable = koconut.filterNotNullTo(destination);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context52.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([1, 2, 4]);\n\n          case 7:\n          case \"end\":\n            return _context52.stop();\n        }\n      }\n    }, _callee52);\n  })));\n  it(_module.KoconutArray.prototype.sortedBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee53() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, expectedResultArrayCase3, koconutCase4, yieldableCase4, resultCase4, expectedResultArrayCase4;\n    return _regenerator[\"default\"].wrap(function _callee53$(_context53) {\n      while (1) {\n        switch (_context53.prev = _context53.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from(['aaa', 'cc', 'bbbb']);\n            yieldableCase1 = koconutCase1.sortedBy(function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context53.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context53.sent;\n            (0, _chai.expect)(resultCase1).eqls(['cc', 'aaa', 'bbbb']);\n            koconutCase2 = _module.KoconutArray.from('dcba');\n            yieldableCase2 = koconutCase2.sortedBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context53.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context53.sent;\n            (0, _chai.expect)(resultCase2).eqls(['a', 'b', 'c', 'd']);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase3 = koconutCase3.sortedBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutArray);\n            _context53.next = 19;\n            return yieldableCase3[\"yield\"]();\n\n          case 19:\n            resultCase3 = _context53.sent;\n            expectedResultArrayCase3 = [new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500), new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000)];\n            (0, _chai.expect)(resultCase3).eqls(expectedResultArrayCase3);\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80), new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50));\n            yieldableCase4 = koconutCase4.sortedBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutArray);\n            _context53.next = 27;\n            return yieldableCase4[\"yield\"]();\n\n          case 27:\n            resultCase4 = _context53.sent;\n            expectedResultArrayCase4 = [new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50), new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80), new _TestDataClasses.Worker('Grace', 'Hopper', 100)];\n            (0, _chai.expect)(resultCase4).eqls(expectedResultArrayCase4);\n\n          case 30:\n          case \"end\":\n            return _context53.stop();\n        }\n      }\n    }, _callee53);\n  })));\n  it(_module.KoconutArray.prototype.sortedByDescending.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee54() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, expectedResultArrayCase3, koconutCase4, yieldableCase4, resultCase4, expectedResultArrayCase4;\n    return _regenerator[\"default\"].wrap(function _callee54$(_context54) {\n      while (1) {\n        switch (_context54.prev = _context54.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from(['aaa', 'cc', 'bbbb']);\n            yieldableCase1 = koconutCase1.sortedByDescending(function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context54.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context54.sent;\n            (0, _chai.expect)(resultCase1).eqls(['bbbb', 'aaa', 'cc']);\n            koconutCase2 = _module.KoconutArray.from('dcba');\n            yieldableCase2 = koconutCase2.sortedByDescending(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context54.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context54.sent;\n            (0, _chai.expect)(resultCase2).eqls(['d', 'c', 'b', 'a']);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase3 = koconutCase3.sortedByDescending(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutArray);\n            _context54.next = 19;\n            return yieldableCase3[\"yield\"]();\n\n          case 19:\n            resultCase3 = _context54.sent;\n            expectedResultArrayCase3 = [new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200)];\n            (0, _chai.expect)(resultCase3).eqls(expectedResultArrayCase3);\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80), new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50));\n            yieldableCase4 = koconutCase4.sortedByDescending(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutArray);\n            _context54.next = 27;\n            return yieldableCase4[\"yield\"]();\n\n          case 27:\n            resultCase4 = _context54.sent;\n            expectedResultArrayCase4 = [new _TestDataClasses.Worker('Grace', 'Hopper', 100), new _TestDataClasses.Worker('Johann', 'Bernoulli', 80), new _TestDataClasses.Worker('Jinyoung', 'Luvya', 60), new _TestDataClasses.Worker('Jacob', 'Bernoulli', 50)];\n            (0, _chai.expect)(resultCase4).eqls(expectedResultArrayCase4);\n\n          case 30:\n          case \"end\":\n            return _context54.stop();\n        }\n      }\n    }, _callee54);\n  })));\n  it(_module.KoconutArray.prototype.sortedWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee55() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator[\"default\"].wrap(function _callee55$(_context55) {\n      while (1) {\n        switch (_context55.prev = _context55.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from(['aaa', 'cc', 'bbbb']);\n            yieldableCase1 = koconutCase1.sortedWith(function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context55.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context55.sent;\n            (0, _chai.expect)(resultCase1).eqls(['cc', 'aaa', 'bbbb']);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase2 = koconutCase2.sortedWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context55.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context55.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500), new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200)];\n            (0, _chai.expect)(resultCase2).eqls(expectedResultArrayCase2);\n\n          case 15:\n          case \"end\":\n            return _context55.stop();\n        }\n      }\n    }, _callee55);\n  })));\n  it(_module.KoconutArray.prototype.take.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee56() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee56$(_context56) {\n      while (1) {\n        switch (_context56.prev = _context56.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcdefg');\n            yieldable = koconut.take(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context56.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context56.sent;\n            (0, _chai.expect)(result).eqls(['a', 'b', 'c']);\n\n          case 7:\n          case \"end\":\n            return _context56.stop();\n        }\n      }\n    }, _callee56);\n  })));\n  it(_module.KoconutArray.prototype.takeLast.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee57() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee57$(_context57) {\n      while (1) {\n        switch (_context57.prev = _context57.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcdefg');\n            yieldable = koconut.takeLast(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context57.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context57.sent;\n            (0, _chai.expect)(result).eqls(['e', 'f', 'g']);\n\n          case 7:\n          case \"end\":\n            return _context57.stop();\n        }\n      }\n    }, _callee57);\n  })));\n  it(_module.KoconutArray.prototype.takeLastWhile.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee58() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee58$(_context58) {\n      while (1) {\n        switch (_context58.prev = _context58.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcdefg');\n            yieldable = koconut.takeLastWhile(function (eachElement) {\n              return eachElement > 'c';\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context58.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context58.sent;\n            (0, _chai.expect)(result).eqls(['d', 'e', 'f', 'g']);\n\n          case 7:\n          case \"end\":\n            return _context58.stop();\n        }\n      }\n    }, _callee58);\n  })));\n  it(_module.KoconutArray.prototype.takeWhile.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee59() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee59$(_context59) {\n      while (1) {\n        switch (_context59.prev = _context59.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcdefg');\n            yieldable = koconut.takeWhile(function (eachElement) {\n              return eachElement < 'f';\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context59.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context59.sent;\n            (0, _chai.expect)(result).eqls(['a', 'b', 'c', 'd', 'e']);\n\n          case 7:\n          case \"end\":\n            return _context59.stop();\n        }\n      }\n    }, _callee59);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Selector\"), function () {\n  it(_module.KoconutArray.prototype.elementAt.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee60() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee60$(_context60) {\n      while (1) {\n        switch (_context60.prev = _context60.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3]);\n            yieldableCase1 = koconut.elementAt(0);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context60.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context60.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.elementAt(5);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context60.prev = 9;\n            _context60.next = 12;\n            return yieldableCase2.process();\n\n          case 12:\n            _context60.next = 17;\n            break;\n\n          case 14:\n            _context60.prev = 14;\n            _context60.t0 = _context60[\"catch\"](9);\n            (0, _chai.expect)(_context60.t0).instanceOf(_module.KoconutIndexOutOfBoundsException);\n\n          case 17:\n          case \"end\":\n            return _context60.stop();\n        }\n      }\n    }, _callee60, null, [[9, 14]]);\n  })));\n  it(_module.KoconutArray.prototype.elementAtOrElse.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee61() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee61$(_context61) {\n      while (1) {\n        switch (_context61.prev = _context61.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3]);\n            yieldableCase1 = koconut.elementAtOrElse(0, function (index) {\n              return index + 1;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context61.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context61.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.elementAtOrElse(3, function (index) {\n              return index + 1;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context61.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context61.sent;\n            (0, _chai.expect)(resultCase2).equals(4);\n\n          case 13:\n          case \"end\":\n            return _context61.stop();\n        }\n      }\n    }, _callee61);\n  })));\n  it(_module.KoconutArray.prototype.elementAtOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee62() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee62$(_context62) {\n      while (1) {\n        switch (_context62.prev = _context62.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3]);\n            yieldableCase1 = koconut.elementAtOrNull(0);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context62.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context62.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.elementAtOrNull(3);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context62.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context62.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case \"end\":\n            return _context62.stop();\n        }\n      }\n    }, _callee62);\n  })));\n  it(_module.KoconutArray.prototype.find.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee63() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee63$(_context63) {\n      while (1) {\n        switch (_context63.prev = _context63.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconut.find(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context63.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context63.sent;\n            (0, _chai.expect)(resultCase1).equals(2);\n            yieldableCase2 = koconut.find(function (eachElement) {\n              return eachElement < 1;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context63.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context63.sent;\n            (0, _chai.expect)(resultCase2).to.be.equals(null);\n\n          case 13:\n          case \"end\":\n            return _context63.stop();\n        }\n      }\n    }, _callee63);\n  })));\n  it(_module.KoconutArray.prototype.findLast.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee64() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee64$(_context64) {\n      while (1) {\n        switch (_context64.prev = _context64.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconut.findLast(function (eachElement) {\n              return eachElement % 2 == 1;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context64.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context64.sent;\n            (0, _chai.expect)(resultCase1).equals(7);\n            yieldableCase2 = koconut.findLast(function (eachElement) {\n              return eachElement < 1;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context64.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context64.sent;\n            (0, _chai.expect)(resultCase2).to.be.equals(null);\n\n          case 13:\n          case \"end\":\n            return _context64.stop();\n        }\n      }\n    }, _callee64);\n  })));\n  it(_module.KoconutArray.prototype.first.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee65() {\n    var koconutCase1, yieldableCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee65$(_context65) {\n      while (1) {\n        switch (_context65.prev = _context65.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconutCase1.filter(function (eachElement) {\n              return eachElement > 10;\n            }).first();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context65.prev = 3;\n            _context65.next = 6;\n            return yieldableCase1.process();\n\n          case 6:\n            _context65.next = 11;\n            break;\n\n          case 8:\n            _context65.prev = 8;\n            _context65.t0 = _context65[\"catch\"](3);\n            (0, _chai.expect)(_context65.t0).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 11:\n            koconutCase2 = _module.KoconutArray.from('abc');\n            yieldableCase2 = koconutCase2.first(function (eachElement) {\n              return eachElement > 'd';\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context65.prev = 14;\n            _context65.next = 17;\n            return yieldableCase2.process();\n\n          case 17:\n            _context65.next = 22;\n            break;\n\n          case 19:\n            _context65.prev = 19;\n            _context65.t1 = _context65[\"catch\"](14);\n            (0, _chai.expect)(_context65.t1).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n            koconutCase3 = _module.KoconutArray.from([1, 2, 3]);\n            yieldableCase3 = koconutCase3.first();\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context65.next = 27;\n            return yieldableCase3[\"yield\"]();\n\n          case 27:\n            resultCase3 = _context65.sent;\n            (0, _chai.expect)(resultCase3).equals(1);\n            koconutCase4 = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase4 = koconutCase4.first(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context65.next = 34;\n            return yieldableCase4[\"yield\"]();\n\n          case 34:\n            resultCase4 = _context65.sent;\n            (0, _chai.expect)(resultCase4).equals(3);\n\n          case 36:\n          case \"end\":\n            return _context65.stop();\n        }\n      }\n    }, _callee65, null, [[3, 8], [14, 19]]);\n  })));\n  it(_module.KoconutArray.prototype.firstOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee66() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4, koconutCase5, yieldableCase5, resultCase5;\n    return _regenerator[\"default\"].wrap(function _callee66$(_context66) {\n      while (1) {\n        switch (_context66.prev = _context66.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconutCase1.filter(function (eachElement) {\n              return eachElement > 10;\n            }).firstOrNull();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context66.sent;\n            (0, _chai.expect)(resultCase1).equals(null);\n            koconutCase2 = _module.KoconutArray.from('abc');\n            yieldableCase2 = koconutCase2.firstOrNull(function (eachElement) {\n              return eachElement > 'd';\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context66.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            koconutCase3 = _module.KoconutArray.from([1, 2, 3]);\n            yieldableCase3 = koconutCase3.firstOrNull();\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 19;\n            return yieldableCase3[\"yield\"]();\n\n          case 19:\n            resultCase3 = _context66.sent;\n            (0, _chai.expect)(resultCase3).equals(1);\n            koconutCase4 = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase4 = koconutCase4.firstOrNull(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 26;\n            return yieldableCase4[\"yield\"]();\n\n          case 26:\n            resultCase4 = _context66.sent;\n            (0, _chai.expect)(resultCase4).equals(3);\n            koconutCase5 = _module.KoconutArray.of(1, 3, 5, 7, 9);\n            yieldableCase5 = koconutCase5.firstOrNull(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 33;\n            return yieldableCase5[\"yield\"]();\n\n          case 33:\n            resultCase5 = _context66.sent;\n            (0, _chai.expect)(resultCase5).to.be.equals(null);\n\n          case 35:\n          case \"end\":\n            return _context66.stop();\n        }\n      }\n    }, _callee66);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Transformer\"), function () {\n  it(_module.KoconutArray.prototype.associate.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee67() {\n    var koconut, expectedResultEntryArray, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4, yieldableCase5, resultCase5;\n    return _regenerator[\"default\"].wrap(function _callee67$(_context67) {\n      while (1) {\n        switch (_context67.prev = _context67.next) {\n          case 0:\n            koconut = _module.KoconutArray.from(['Grace Hopper', 'Jacob Bernoulli', 'Johann Bernoulli', 'Jinyoung Luvya']);\n            expectedResultEntryArray = [['Hopper', 'Grace'], ['Bernoulli', 'Johann'], ['Luvya', 'Jinyoung']];\n            yieldableCase1 = koconut.associate(function (eachElement) {\n              var _eachElement$split = eachElement.split(' '),\n                  _eachElement$split2 = (0, _slicedToArray2[\"default\"])(_eachElement$split, 2),\n                  firstName = _eachElement$split2[0],\n                  lastName = _eachElement$split2[1];\n\n              return [lastName, firstName];\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutMap);\n            _context67.next = 6;\n            return yieldableCase1[\"yield\"]();\n\n          case 6:\n            resultCase1 = _context67.sent;\n            (0, _chai.expect)(Array.from(resultCase1.entries())).to.eql(expectedResultEntryArray);\n            yieldableCase2 = koconut.associate(function (eachElement) {\n              var _eachElement$split3 = eachElement.split(' '),\n                  _eachElement$split4 = (0, _slicedToArray2[\"default\"])(_eachElement$split3, 2),\n                  firstName = _eachElement$split4[0],\n                  lastName = _eachElement$split4[1];\n\n              return new _module.Pair(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutMap);\n            _context67.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context67.sent;\n            (0, _chai.expect)(Array.from(resultCase2.entries())).to.eql(expectedResultEntryArray);\n            yieldableCase3 = koconut.associate(function (eachElement) {\n              var _eachElement$split5 = eachElement.split(' '),\n                  _eachElement$split6 = (0, _slicedToArray2[\"default\"])(_eachElement$split5, 2),\n                  firstName = _eachElement$split6[0],\n                  lastName = _eachElement$split6[1];\n\n              return new _module.KoconutPair(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutMap);\n            _context67.next = 18;\n            return yieldableCase3[\"yield\"]();\n\n          case 18:\n            resultCase3 = _context67.sent;\n            (0, _chai.expect)(Array.from(resultCase3.entries())).to.eql(expectedResultEntryArray);\n            yieldableCase4 = koconut.associate(function (eachElement) {\n              var _eachElement$split7 = eachElement.split(' '),\n                  _eachElement$split8 = (0, _slicedToArray2[\"default\"])(_eachElement$split7, 2),\n                  firstName = _eachElement$split8[0],\n                  lastName = _eachElement$split8[1];\n\n              return new _module.KoconutEntry(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutMap);\n            _context67.next = 24;\n            return yieldableCase4[\"yield\"]();\n\n          case 24:\n            resultCase4 = _context67.sent;\n            (0, _chai.expect)(Array.from(resultCase4.entries())).to.eql(expectedResultEntryArray);\n            yieldableCase5 = koconut.associate(function (eachElement) {\n              var _eachElement$split9 = eachElement.split(' '),\n                  _eachElement$split10 = (0, _slicedToArray2[\"default\"])(_eachElement$split9, 2),\n                  firstName = _eachElement$split10[0],\n                  lastName = _eachElement$split10[1];\n\n              return new _module.Entry(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutMap);\n            _context67.next = 30;\n            return yieldableCase5[\"yield\"]();\n\n          case 30:\n            resultCase5 = _context67.sent;\n            (0, _chai.expect)(Array.from(resultCase5.entries())).to.eql(expectedResultEntryArray);\n\n          case 32:\n          case \"end\":\n            return _context67.stop();\n        }\n      }\n    }, _callee67);\n  })));\n  it(_module.KoconutArray.prototype.associateBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee68() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, expectedResultEntryArrayCase2;\n    return _regenerator[\"default\"].wrap(function _callee68$(_context68) {\n      while (1) {\n        switch (_context68.prev = _context68.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase1 = koconut.associateBy(function (eachElement) {\n              return eachElement.lastName;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutMap);\n            _context68.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context68.sent;\n            (0, _chai.expect)(resultCase1 === null || resultCase1 === void 0 ? void 0 : resultCase1.get('Hopper')).to.eql(new _TestDataClasses.Person('Grace', 'Hopper'));\n            (0, _chai.expect)(resultCase1 === null || resultCase1 === void 0 ? void 0 : resultCase1.get('Bernoulli')).to.eql(new _TestDataClasses.Person('Johann', 'Bernoulli'));\n            (0, _chai.expect)(resultCase1 === null || resultCase1 === void 0 ? void 0 : resultCase1.get('Luvya')).to.eql(new _TestDataClasses.Person('Jinyoung', 'Luvya'));\n            yieldableCase2 = koconut.associateBy(function (eachElement) {\n              return eachElement.lastName;\n            }, function (eachElement) {\n              return eachElement.firstName;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutMap);\n            _context68.next = 13;\n            return yieldableCase2[\"yield\"]();\n\n          case 13:\n            resultCase2 = _context68.sent;\n            expectedResultEntryArrayCase2 = [['Hopper', 'Grace'], ['Bernoulli', 'Johann'], ['Luvya', 'Jinyoung']];\n            (0, _chai.expect)(Array.from(resultCase2.entries())).to.eql(expectedResultEntryArrayCase2);\n\n          case 16:\n          case \"end\":\n            return _context68.stop();\n        }\n      }\n    }, _callee68);\n  })));\n  it(_module.KoconutArray.prototype.associateByTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee69() {\n    var koconut, destinationCase1, yieldableCase1, destinationCase2, yieldableCase2, expectedResultEntryArrayCase2;\n    return _regenerator[\"default\"].wrap(function _callee69$(_context69) {\n      while (1) {\n        switch (_context69.prev = _context69.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            destinationCase1 = new Map();\n            yieldableCase1 = koconut.associateByTo(destinationCase1, function (eachElement) {\n              return eachElement.lastName;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context69.next = 6;\n            return yieldableCase1.process();\n\n          case 6:\n            (0, _chai.expect)(destinationCase1.get('Hopper')).to.eql(new _TestDataClasses.Person('Grace', 'Hopper'));\n            (0, _chai.expect)(destinationCase1.get('Bernoulli')).to.eql(new _TestDataClasses.Person('Johann', 'Bernoulli'));\n            (0, _chai.expect)(destinationCase1.get('Luvya')).to.eql(new _TestDataClasses.Person('Jinyoung', 'Luvya'));\n            destinationCase2 = new Map();\n            yieldableCase2 = koconut.associateByTo(destinationCase2, function (eachElement) {\n              return eachElement.lastName;\n            }, function (eachElement) {\n              return eachElement.firstName;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context69.next = 14;\n            return yieldableCase2.process();\n\n          case 14:\n            expectedResultEntryArrayCase2 = [['Hopper', 'Grace'], ['Bernoulli', 'Johann'], ['Luvya', 'Jinyoung']];\n            (0, _chai.expect)(Array.from(destinationCase2.entries())).to.eql(expectedResultEntryArrayCase2);\n\n          case 16:\n          case \"end\":\n            return _context69.stop();\n        }\n      }\n    }, _callee69);\n  })));\n  it(_module.KoconutArray.prototype.associateTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee70() {\n    var koconut, expectedResultEntryArray, destinationCase1, yieldableCase1, destinationCase2, yieldableCase2, destinationCase3, yieldableCase3;\n    return _regenerator[\"default\"].wrap(function _callee70$(_context70) {\n      while (1) {\n        switch (_context70.prev = _context70.next) {\n          case 0:\n            koconut = _module.KoconutArray.from(['Grace Hopper', 'Jacob Bernoulli', 'Johann Bernoulli', 'Jinyoung Luvya']);\n            expectedResultEntryArray = [['Hopper', 'Grace'], ['Bernoulli', 'Johann'], ['Luvya', 'Jinyoung']];\n            destinationCase1 = new Map();\n            yieldableCase1 = koconut.associateTo(destinationCase1, function (eachElement) {\n              var _eachElement$split11 = eachElement.split(' '),\n                  _eachElement$split12 = (0, _slicedToArray2[\"default\"])(_eachElement$split11, 2),\n                  firstName = _eachElement$split12[0],\n                  lastName = _eachElement$split12[1];\n\n              return [lastName, firstName];\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context70.next = 7;\n            return yieldableCase1.process();\n\n          case 7:\n            (0, _chai.expect)(Array.from(destinationCase1.entries())).to.eql(expectedResultEntryArray);\n            destinationCase2 = new Map();\n            yieldableCase2 = koconut.associateTo(destinationCase2, function (eachElement) {\n              var _eachElement$split13 = eachElement.split(' '),\n                  _eachElement$split14 = (0, _slicedToArray2[\"default\"])(_eachElement$split13, 2),\n                  firstName = _eachElement$split14[0],\n                  lastName = _eachElement$split14[1];\n\n              return new _module.Pair(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context70.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            (0, _chai.expect)(Array.from(destinationCase2.entries())).to.eql(expectedResultEntryArray);\n            destinationCase3 = new Map();\n            yieldableCase3 = koconut.associateTo(destinationCase3, function (eachElement) {\n              var _eachElement$split15 = eachElement.split(' '),\n                  _eachElement$split16 = (0, _slicedToArray2[\"default\"])(_eachElement$split15, 2),\n                  firstName = _eachElement$split16[0],\n                  lastName = _eachElement$split16[1];\n\n              return new _module.KoconutPair(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutArray);\n            _context70.next = 19;\n            return yieldableCase3.process();\n\n          case 19:\n            (0, _chai.expect)(Array.from(destinationCase3.entries())).to.eql(expectedResultEntryArray);\n\n          case 20:\n          case \"end\":\n            return _context70.stop();\n        }\n      }\n    }, _callee70);\n  })));\n  it(_module.KoconutArray.prototype.associateWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee71() {\n    var koconut, yieldable, result, expectedResultEntryArray;\n    return _regenerator[\"default\"].wrap(function _callee71$(_context71) {\n      while (1) {\n        switch (_context71.prev = _context71.next) {\n          case 0:\n            koconut = _module.KoconutArray.from(['a', 'ab', 'abc', 'abcd']);\n            yieldable = koconut.associateWith(function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context71.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context71.sent;\n            expectedResultEntryArray = [['a', 1], ['ab', 2], ['abc', 3], ['abcd', 4]];\n            (0, _chai.expect)(Array.from(result.entries())).to.eql(expectedResultEntryArray);\n\n          case 8:\n          case \"end\":\n            return _context71.stop();\n        }\n      }\n    }, _callee71);\n  })));\n  it(_module.KoconutArray.prototype.associateWithTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee72() {\n    var koconut, destination, yieldable, expectedResultEntryArray;\n    return _regenerator[\"default\"].wrap(function _callee72$(_context72) {\n      while (1) {\n        switch (_context72.prev = _context72.next) {\n          case 0:\n            koconut = _module.KoconutArray.from(['Grace Hopper', 'Jacob Bernoulli', 'Johann Bernoulli', 'Jinyoung Luvya']);\n            destination = new Map();\n            yieldable = koconut.associateWithTo(destination, function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context72.next = 6;\n            return yieldable.process();\n\n          case 6:\n            expectedResultEntryArray = [['Grace Hopper', 12], ['Jacob Bernoulli', 15], ['Johann Bernoulli', 16], ['Jinyoung Luvya', 14]];\n            (0, _chai.expect)(Array.from(destination.entries())).to.eql(expectedResultEntryArray);\n\n          case 8:\n          case \"end\":\n            return _context72.stop();\n        }\n      }\n    }, _callee72);\n  })));\n  it(_module.KoconutArray.prototype.chunked.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee73() {\n    var koconut, yieldableCase1, resultCase1, expectedResultArrayCase1, yieldableCase2, resultCase2, expectedResultArrayCase2, yieldableCase3;\n    return _regenerator[\"default\"].wrap(function _callee73$(_context73) {\n      while (1) {\n        switch (_context73.prev = _context73.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('one two three four five six seven eight nine ten'.split(' '));\n            yieldableCase1 = koconut.chunked(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context73.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context73.sent;\n            expectedResultArrayCase1 = [['one', 'two', 'three'], ['four', 'five', 'six'], ['seven', 'eight', 'nine'], ['ten']];\n            (0, _chai.expect)(resultCase1).to.eql(expectedResultArrayCase1);\n            yieldableCase2 = koconut.chunked(3, function (eachElements) {\n              return eachElements.join(' ');\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context73.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context73.sent;\n            expectedResultArrayCase2 = ['one two three', 'four five six', 'seven eight nine', 'ten'];\n            (0, _chai.expect)(resultCase2).to.eql(expectedResultArrayCase2);\n            yieldableCase3 = koconut.chunked(-1);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context73.prev = 17;\n            _context73.next = 20;\n            return yieldableCase3.process();\n\n          case 20:\n            _context73.next = 25;\n            break;\n\n          case 22:\n            _context73.prev = 22;\n            _context73.t0 = _context73[\"catch\"](17);\n            (0, _chai.expect)(_context73.t0).to.be.instanceOf(_module.KoconutInvalidArgumentException);\n\n          case 25:\n          case \"end\":\n            return _context73.stop();\n        }\n      }\n    }, _callee73, null, [[17, 22]]);\n  })));\n  it(_module.KoconutArray.prototype.flatMap.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee74() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee74$(_context74) {\n      while (1) {\n        switch (_context74.prev = _context74.next) {\n          case 0:\n            koconut = _module.KoconutArray.from(['abc', 'de']);\n            yieldable = koconut.flatMap(function (eachElement) {\n              return eachElement.split('');\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context74.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context74.sent;\n            (0, _chai.expect)(result).eqls(['a', 'b', 'c', 'd', 'e']);\n\n          case 7:\n          case \"end\":\n            return _context74.stop();\n        }\n      }\n    }, _callee74);\n  })));\n  it(_module.KoconutArray.prototype.flatMapIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee75() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee75$(_context75) {\n      while (1) {\n        switch (_context75.prev = _context75.next) {\n          case 0:\n            koconut = _module.KoconutArray.from(['abc', 'def', 'ghi', 'jkl']);\n            yieldable = koconut.flatMapIndexed(function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement.split('');else return [];\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context75.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context75.sent;\n            (0, _chai.expect)(result).eqls(['a', 'b', 'c', 'g', 'h', 'i']);\n\n          case 7:\n          case \"end\":\n            return _context75.stop();\n        }\n      }\n    }, _callee75);\n  })));\n  it(_module.KoconutArray.prototype.flatMapTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee76() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee76$(_context76) {\n      while (1) {\n        switch (_context76.prev = _context76.next) {\n          case 0:\n            koconut = _module.KoconutArray.from(['abc', 'de']);\n            destination = new Array();\n            yieldable = koconut.flatMapTo(destination, function (eachElement) {\n              return eachElement.split('');\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context76.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(['a', 'b', 'c', 'd', 'e']);\n\n          case 7:\n          case \"end\":\n            return _context76.stop();\n        }\n      }\n    }, _callee76);\n  })));\n  it(_module.KoconutArray.prototype.flatMapIndexedTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee77() {\n    var koconut, arrayDestination, setDestination, yieldableCase1, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee77$(_context77) {\n      while (1) {\n        switch (_context77.prev = _context77.next) {\n          case 0:\n            koconut = _module.KoconutArray.from(['abc', 'def', 'ghi', 'jkl']);\n            arrayDestination = new Array();\n            setDestination = new Set();\n            yieldableCase1 = koconut.flatMapIndexedTo(arrayDestination, function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement.split('');else return [];\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context77.next = 7;\n            return yieldableCase1.process();\n\n          case 7:\n            (0, _chai.expect)(arrayDestination).eqls(['a', 'b', 'c', 'g', 'h', 'i']);\n            yieldableCase2 = koconut.flatMapIndexedTo(setDestination, function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement.split('');else return [];\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context77.next = 12;\n            return yieldableCase2.process();\n\n          case 12:\n            (0, _chai.expect)(setDestination).eqls(new Set(['a', 'b', 'c', 'g', 'h', 'i']));\n\n          case 13:\n          case \"end\":\n            return _context77.stop();\n        }\n      }\n    }, _callee77);\n  })));\n  it(_module.KoconutArray.prototype.groupBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee78() {\n    var koconutCase1, yieldableCase1, resultCase1, expectedResultEntryArrayCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultEntryArrayCase2;\n    return _regenerator[\"default\"].wrap(function _callee78$(_context78) {\n      while (1) {\n        switch (_context78.prev = _context78.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from(['a', 'abc', 'ab', 'def', 'abcd']);\n            yieldableCase1 = koconutCase1.groupBy(function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutMap);\n            _context78.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context78.sent;\n            expectedResultEntryArrayCase1 = [[1, ['a']], [3, ['abc', 'def']], [2, ['ab']], [4, ['abcd']]];\n            (0, _chai.expect)(Array.from(resultCase1.entries())).eqls(expectedResultEntryArrayCase1);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase2 = koconutCase2.groupBy(function (eachElement) {\n              return eachElement.lastName;\n            }, function (eachElement) {\n              return eachElement.firstName;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutMap);\n            _context78.next = 13;\n            return yieldableCase2[\"yield\"]();\n\n          case 13:\n            resultCase2 = _context78.sent;\n            expectedResultEntryArrayCase2 = [['Hopper', ['Grace']], ['Bernoulli', ['Jacob', 'Johann']], ['Luvya', ['Jinyoung']]];\n            (0, _chai.expect)(Array.from(resultCase2.entries())).eqls(expectedResultEntryArrayCase2);\n\n          case 16:\n          case \"end\":\n            return _context78.stop();\n        }\n      }\n    }, _callee78);\n  })));\n  it(_module.KoconutArray.prototype.groupByTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee79() {\n    var koconutCase1, destinationCase1, yieldableCase1, expectedResultEntryArrayCase1, koconutCase2, destinationCase2, yieldableCase2, expectedResultEntryArrayCase2;\n    return _regenerator[\"default\"].wrap(function _callee79$(_context79) {\n      while (1) {\n        switch (_context79.prev = _context79.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from(['a', 'abc', 'ab', 'def', 'abcd']);\n            destinationCase1 = new Map();\n            yieldableCase1 = koconutCase1.groupByTo(destinationCase1, function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context79.next = 6;\n            return yieldableCase1.process();\n\n          case 6:\n            expectedResultEntryArrayCase1 = [[1, ['a']], [3, ['abc', 'def']], [2, ['ab']], [4, ['abcd']]];\n            (0, _chai.expect)(Array.from(destinationCase1.entries())).eqls(expectedResultEntryArrayCase1);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            destinationCase2 = new Map();\n            yieldableCase2 = koconutCase2.groupByTo(destinationCase2, function (eachElement) {\n              return eachElement.lastName;\n            }, function (eachElement) {\n              return eachElement.firstName;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context79.next = 14;\n            return yieldableCase2.process();\n\n          case 14:\n            expectedResultEntryArrayCase2 = [['Hopper', ['Grace']], ['Bernoulli', ['Jacob', 'Johann']], ['Luvya', ['Jinyoung']]];\n            (0, _chai.expect)(Array.from(destinationCase2.entries())).eqls(expectedResultEntryArrayCase2);\n\n          case 16:\n          case \"end\":\n            return _context79.stop();\n        }\n      }\n    }, _callee79);\n  })));\n  it(_module.KoconutArray.prototype.map.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee80() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee80$(_context80) {\n      while (1) {\n        switch (_context80.prev = _context80.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3]);\n            yieldable = koconut.map(function (eachElement) {\n              return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context80.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context80.sent;\n            (0, _chai.expect)(result).eqls([1, 4, 9]);\n\n          case 7:\n          case \"end\":\n            return _context80.stop();\n        }\n      }\n    }, _callee80);\n  })));\n  it(_module.KoconutArray.prototype.mapIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee81() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee81$(_context81) {\n      while (1) {\n        switch (_context81.prev = _context81.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3]);\n            yieldable = koconut.mapIndexed(function (eachIndex, eachElement) {\n              return eachIndex + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context81.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context81.sent;\n            (0, _chai.expect)(result).eqls([1, 3, 5]);\n\n          case 7:\n          case \"end\":\n            return _context81.stop();\n        }\n      }\n    }, _callee81);\n  })));\n  it(_module.KoconutArray.prototype.mapIndexedNotNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee82() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee82$(_context82) {\n      while (1) {\n        switch (_context82.prev = _context82.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.mapIndexedNotNull(function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context82.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context82.sent;\n            (0, _chai.expect)(result).eqls([1, 9, 25]);\n\n          case 7:\n          case \"end\":\n            return _context82.stop();\n        }\n      }\n    }, _callee82);\n  })));\n  it(_module.KoconutArray.prototype.mapIndexedNotNullTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee83() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee83$(_context83) {\n      while (1) {\n        switch (_context83.prev = _context83.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            destination = new Array();\n            yieldable = koconut.mapIndexedNotNullTo(destination, function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context83.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([1, 9, 25]);\n\n          case 7:\n          case \"end\":\n            return _context83.stop();\n        }\n      }\n    }, _callee83);\n  })));\n  it(_module.KoconutArray.prototype.mapIndexedTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee84() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee84$(_context84) {\n      while (1) {\n        switch (_context84.prev = _context84.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3]);\n            destination = new Array();\n            yieldable = koconut.mapIndexedTo(destination, function (eachIndex, eachElement) {\n              return eachIndex + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context84.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([1, 3, 5]);\n\n          case 7:\n          case \"end\":\n            return _context84.stop();\n        }\n      }\n    }, _callee84);\n  })));\n  it(_module.KoconutArray.prototype.mapNotNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee85() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee85$(_context85) {\n      while (1) {\n        switch (_context85.prev = _context85.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.mapNotNull(function (eachElement) {\n              if (eachElement % 2 == 0) return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context85.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context85.sent;\n            (0, _chai.expect)(result).eqls([4, 16]);\n\n          case 7:\n          case \"end\":\n            return _context85.stop();\n        }\n      }\n    }, _callee85);\n  })));\n  it(_module.KoconutArray.prototype.mapNotNullTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee86() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee86$(_context86) {\n      while (1) {\n        switch (_context86.prev = _context86.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            destination = new Array();\n            yieldable = koconut.mapNotNullTo(destination, function (eachElement) {\n              if (eachElement % 2 == 0) return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context86.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([4, 16]);\n\n          case 7:\n          case \"end\":\n            return _context86.stop();\n        }\n      }\n    }, _callee86);\n  })));\n  it(_module.KoconutArray.prototype.mapTo.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee87() {\n    var koconut, destination, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee87$(_context87) {\n      while (1) {\n        switch (_context87.prev = _context87.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3]);\n            destination = new Array();\n            yieldable = koconut.mapTo(destination, function (eachElement) {\n              return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context87.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([1, 4, 9]);\n\n          case 7:\n          case \"end\":\n            return _context87.stop();\n        }\n      }\n    }, _callee87);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutArray.name, \" -- Function\"), function () {\n  it(_module.KoconutArray.prototype.indexOf.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee88() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee88$(_context88) {\n      while (1) {\n        switch (_context88.prev = _context88.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.indexOf(2);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context88.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context88.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            koconutCase2 = _module.KoconutArray.from('abc');\n            yieldableCase2 = koconutCase2.indexOf('d');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context88.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context88.sent;\n            (0, _chai.expect)(resultCase2).equals(-1);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase3 = koconutCase3.indexOf(new _TestDataClasses.Person('Grace', 'Hopper'));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context88.next = 19;\n            return yieldableCase3[\"yield\"]();\n\n          case 19:\n            resultCase3 = _context88.sent;\n            (0, _chai.expect)(resultCase3).equals(0);\n            koconutCase4 = _module.KoconutArray.of(new _TestDataClasses.Dog('Brie', 3, 0), new _TestDataClasses.Dog('Mike', 5, 1), new _TestDataClasses.Dog('unknown', 6, 2));\n            yieldableCase4 = koconutCase4.indexOf(new _TestDataClasses.Dog('unknown', -1, 2));\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context88.next = 26;\n            return yieldableCase4[\"yield\"]();\n\n          case 26:\n            resultCase4 = _context88.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(2);\n\n          case 28:\n          case \"end\":\n            return _context88.stop();\n        }\n      }\n    }, _callee88);\n  })));\n  it(_module.KoconutArray.prototype.indexOfFirst.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee89() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee89$(_context89) {\n      while (1) {\n        switch (_context89.prev = _context89.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconut.indexOfFirst(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context89.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context89.sent;\n            (0, _chai.expect)(resultCase1).equals(2);\n            yieldableCase2 = koconut.indexOfFirst(function (eachElement) {\n              return eachElement > 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context89.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context89.sent;\n            (0, _chai.expect)(resultCase2).equals(-1);\n\n          case 13:\n          case \"end\":\n            return _context89.stop();\n        }\n      }\n    }, _callee89);\n  })));\n  it(_module.KoconutArray.prototype.indexOfLast.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee90() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee90$(_context90) {\n      while (1) {\n        switch (_context90.prev = _context90.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconut.indexOfLast(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context90.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context90.sent;\n            (0, _chai.expect)(resultCase1).equals(5);\n            yieldableCase2 = koconut.indexOfLast(function (eachElement) {\n              return eachElement > 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context90.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context90.sent;\n            (0, _chai.expect)(resultCase2).equals(-1);\n\n          case 13:\n          case \"end\":\n            return _context90.stop();\n        }\n      }\n    }, _callee90);\n  })));\n  it(_module.KoconutArray.prototype.intersect.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee91() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee91$(_context91) {\n      while (1) {\n        switch (_context91.prev = _context91.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconutCase1.intersect([5, 6, 7, 8, 9]);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context91.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context91.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([5, 6, 7]));\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase2 = koconutCase2.intersect([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- April', 2000), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- July', 1500)]);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context91.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context91.sent;\n            (0, _chai.expect)(Array.from(resultCase2)).eqls([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n\n          case 14:\n          case \"end\":\n            return _context91.stop();\n        }\n      }\n    }, _callee91);\n  })));\n  it(_module.KoconutArray.prototype.isNotEmpty.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee92() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee92$(_context92) {\n      while (1) {\n        switch (_context92.prev = _context92.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.isNotEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context92.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context92.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement >= 10;\n            }).isNotEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context92.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context92.sent;\n            (0, _chai.expect)(resultCase2).equals(false);\n\n          case 13:\n          case \"end\":\n            return _context92.stop();\n        }\n      }\n    }, _callee92);\n  })));\n  it(_module.KoconutArray.prototype.isNullOrEmpty.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee93() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee93$(_context93) {\n      while (1) {\n        switch (_context93.prev = _context93.next) {\n          case 0:\n            koconutCase1 = new _module.KoconutArray();\n            yieldableCase1 = koconutCase1.isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context93.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context93.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            koconutCase2 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase2 = koconutCase2.filter(function (eachElement) {\n              return eachElement > 10;\n            }).isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context93.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context93.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 14:\n          case \"end\":\n            return _context93.stop();\n        }\n      }\n    }, _callee93);\n  })));\n  it(_module.KoconutArray.prototype.join.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee94() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee94$(_context94) {\n      while (1) {\n        switch (_context94.prev = _context94.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcdefg');\n            yieldableCase1 = koconut.join();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context94.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context94.sent;\n            (0, _chai.expect)(resultCase1).equals('a, b, c, d, e, f, g');\n            yieldableCase2 = koconut.join('•', '<', '>');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context94.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context94.sent;\n            (0, _chai.expect)(resultCase2).equals('<a•b•c•d•e•f•g>');\n            yieldableCase3 = koconut.join(' - ', '< ', ' >', 5, ' ~', function (eachElement) {\n              return eachElement.toUpperCase();\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context94.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context94.sent;\n            (0, _chai.expect)(resultCase3).equals('< A - B - C - D - E ~ >');\n\n          case 19:\n          case \"end\":\n            return _context94.stop();\n        }\n      }\n    }, _callee94);\n  })));\n  it(_module.KoconutArray.prototype.last.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee95() {\n    var koconutCase1, yieldableCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee95$(_context95) {\n      while (1) {\n        switch (_context95.prev = _context95.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconutCase1.filter(function (eachElement) {\n              return eachElement > 10;\n            }).last();\n            (0, _chai.expect)(koconutCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context95.prev = 3;\n            _context95.next = 6;\n            return yieldableCase1.process();\n\n          case 6:\n            _context95.next = 11;\n            break;\n\n          case 8:\n            _context95.prev = 8;\n            _context95.t0 = _context95[\"catch\"](3);\n            (0, _chai.expect)(_context95.t0).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 11:\n            koconutCase2 = _module.KoconutArray.from('abc');\n            yieldableCase2 = koconutCase2.last(function (eachElement) {\n              return eachElement > 'd';\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context95.prev = 14;\n            _context95.next = 17;\n            return yieldableCase2.process();\n\n          case 17:\n            _context95.next = 22;\n            break;\n\n          case 19:\n            _context95.prev = 19;\n            _context95.t1 = _context95[\"catch\"](14);\n            (0, _chai.expect)(_context95.t1).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n            koconutCase3 = _module.KoconutArray.from([1, 2, 3]);\n            yieldableCase3 = koconutCase3.last();\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context95.next = 27;\n            return yieldableCase3[\"yield\"]();\n\n          case 27:\n            resultCase3 = _context95.sent;\n            (0, _chai.expect)(resultCase3).equals(3);\n            koconutCase4 = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase4 = koconutCase4.last(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context95.next = 34;\n            return yieldableCase4[\"yield\"]();\n\n          case 34:\n            resultCase4 = _context95.sent;\n            (0, _chai.expect)(resultCase4).equals(6);\n\n          case 36:\n          case \"end\":\n            return _context95.stop();\n        }\n      }\n    }, _callee95, null, [[3, 8], [14, 19]]);\n  })));\n  it(_module.KoconutArray.prototype.lastIndexOf.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee96() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee96$(_context96) {\n      while (1) {\n        switch (_context96.prev = _context96.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 1, 2, 1, 2]);\n            yieldableCase1 = koconutCase1.lastIndexOf(1);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context96.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context96.sent;\n            (0, _chai.expect)(resultCase1).equals(4);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase2 = koconutCase2.lastIndexOf(new _TestDataClasses.Person('Johann', 'Bernoulli'));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context96.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context96.sent;\n            (0, _chai.expect)(resultCase2).equals(2);\n            koconutCase3 = _module.KoconutArray.of(new _TestDataClasses.Dog('Brie', 3, 0), new _TestDataClasses.Dog('Mike', 5, 1));\n            yieldableCase3 = koconutCase3.lastIndexOf(new _TestDataClasses.Dog('unknown', 3, 0));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context96.next = 19;\n            return yieldableCase3[\"yield\"]();\n\n          case 19:\n            resultCase3 = _context96.sent;\n            (0, _chai.expect)(resultCase3).equals(0);\n            koconutCase4 = _module.KoconutArray.of(1, 2, 3, 4, 5);\n            yieldableCase4 = koconutCase4.lastIndexOf(6);\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context96.next = 26;\n            return yieldableCase4[\"yield\"]();\n\n          case 26:\n            resultCase4 = _context96.sent;\n            (0, _chai.expect)(resultCase4).equals(-1);\n\n          case 28:\n          case \"end\":\n            return _context96.stop();\n        }\n      }\n    }, _callee96);\n  })));\n  it(_module.KoconutArray.prototype.lastOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee97() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4;\n    return _regenerator[\"default\"].wrap(function _callee97$(_context97) {\n      while (1) {\n        switch (_context97.prev = _context97.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).lastOrNull();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context97.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context97.sent;\n            (0, _chai.expect)(resultCase1).equals(null);\n            yieldableCase2 = koconut.lastOrNull();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context97.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context97.sent;\n            (0, _chai.expect)(resultCase2).equals(5);\n            yieldableCase3 = koconut.lastOrNull(function (eachElement) {\n              return eachElement > 10;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context97.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context97.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n            yieldableCase4 = koconut.lastOrNull(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context97.next = 23;\n            return yieldableCase4[\"yield\"]();\n\n          case 23:\n            resultCase4 = _context97.sent;\n            (0, _chai.expect)(resultCase4).equals(3);\n\n          case 25:\n          case \"end\":\n            return _context97.stop();\n        }\n      }\n    }, _callee97);\n  })));\n  it(_module.KoconutArray.prototype.minus.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee98() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, expectedResultArrayCase3, koconutCase4, yieldableCase4, resultCase4, expectedResultArrayCase4;\n    return _regenerator[\"default\"].wrap(function _callee98$(_context98) {\n      while (1) {\n        switch (_context98.prev = _context98.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.minus(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context98.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context98.sent;\n            (0, _chai.expect)(resultCase1).eqls([1, 2, 4, 5]);\n            koconutCase2 = _module.KoconutArray.from('abcde');\n            yieldableCase2 = koconutCase2.minus('abc');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context98.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context98.sent;\n            (0, _chai.expect)(resultCase2).eqls('de'.split(''));\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase3 = koconutCase3.minus(new _TestDataClasses.Person('Grace', 'Hopper'));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutArray);\n            _context98.next = 19;\n            return yieldableCase3[\"yield\"]();\n\n          case 19:\n            resultCase3 = _context98.sent;\n            expectedResultArrayCase3 = [new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')];\n            (0, _chai.expect)(resultCase3).eql(expectedResultArrayCase3);\n            koconutCase4 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase4 = koconutCase4.minus([new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli')]);\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutArray);\n            _context98.next = 27;\n            return yieldableCase4[\"yield\"]();\n\n          case 27:\n            resultCase4 = _context98.sent;\n            expectedResultArrayCase4 = [new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jinyoung', 'Luvya')];\n            (0, _chai.expect)(resultCase4).eql(expectedResultArrayCase4);\n\n          case 30:\n          case \"end\":\n            return _context98.stop();\n        }\n      }\n    }, _callee98);\n  })));\n  it(_module.KoconutArray.prototype.minusElement.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee99() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator[\"default\"].wrap(function _callee99$(_context99) {\n      while (1) {\n        switch (_context99.prev = _context99.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.minusElement(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context99.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context99.sent;\n            (0, _chai.expect)(resultCase1).eqls([1, 2, 4, 5]);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase2 = koconutCase2.minusElement(new _TestDataClasses.Person('Grace', 'Hopper'));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context99.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context99.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')];\n            (0, _chai.expect)(resultCase2).eql(expectedResultArrayCase2);\n\n          case 15:\n          case \"end\":\n            return _context99.stop();\n        }\n      }\n    }, _callee99);\n  })));\n  it(_module.KoconutArray.prototype.partition.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee100() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee100$(_context100) {\n      while (1) {\n        switch (_context100.prev = _context100.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.partition(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPair);\n            _context100.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context100.sent;\n            (0, _chai.expect)(result).eqls(new _module.Pair([2, 4], [1, 3, 5]));\n\n          case 7:\n          case \"end\":\n            return _context100.stop();\n        }\n      }\n    }, _callee100);\n  })));\n  it(_module.KoconutArray.prototype.plus.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee101() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee101$(_context101) {\n      while (1) {\n        switch (_context101.prev = _context101.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.plus(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context101.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context101.sent;\n            (0, _chai.expect)(resultCase1).eqls([1, 2, 3, 4, 5, 3]);\n            koconutCase2 = _module.KoconutArray.from('abcde');\n            yieldableCase2 = koconutCase2.plus('abc');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context101.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context101.sent;\n            (0, _chai.expect)(resultCase2).eqls('abcdeabc'.split(''));\n\n          case 14:\n          case \"end\":\n            return _context101.stop();\n        }\n      }\n    }, _callee101);\n  })));\n  it(_module.KoconutArray.prototype.plusElement.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee102() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee102$(_context102) {\n      while (1) {\n        switch (_context102.prev = _context102.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.plusElement(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context102.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context102.sent;\n            (0, _chai.expect)(result).eqls([1, 2, 3, 4, 5, 3]);\n\n          case 7:\n          case \"end\":\n            return _context102.stop();\n        }\n      }\n    }, _callee102);\n  })));\n  it(_module.KoconutArray.prototype.random.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee103() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee103$(_context103) {\n      while (1) {\n        switch (_context103.prev = _context103.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.random();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context103.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context103.sent;\n            _context103.t0 = _chai.expect;\n            _context103.next = 9;\n            return koconutCase1[\"yield\"]();\n\n          case 9:\n            _context103.t1 = _context103.sent.includes(resultCase1);\n            (0, _context103.t0)(_context103.t1).equals(true);\n            koconutCase2 = _module.KoconutArray.of();\n            yieldableCase2 = koconutCase2.random();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context103.prev = 14;\n            _context103.next = 17;\n            return yieldableCase2.process();\n\n          case 17:\n            _context103.next = 22;\n            break;\n\n          case 19:\n            _context103.prev = 19;\n            _context103.t2 = _context103[\"catch\"](14);\n            (0, _chai.expect)(_context103.t2).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n          case \"end\":\n            return _context103.stop();\n        }\n      }\n    }, _callee103, null, [[14, 19]]);\n  })));\n  it(_module.KoconutArray.prototype.randomOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee104() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee104$(_context104) {\n      while (1) {\n        switch (_context104.prev = _context104.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.randomOrNull();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context104.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context104.sent;\n            _context104.t0 = _chai.expect;\n            _context104.next = 9;\n            return koconut[\"yield\"]();\n\n          case 9:\n            _context104.t1 = _context104.sent.includes(resultCase1);\n            (0, _context104.t0)(_context104.t1).equals(true);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).randomOrNull();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context104.next = 15;\n            return yieldableCase2[\"yield\"]();\n\n          case 15:\n            resultCase2 = _context104.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 17:\n          case \"end\":\n            return _context104.stop();\n        }\n      }\n    }, _callee104);\n  })));\n  it(_module.KoconutArray.prototype.reduce.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee105() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee105$(_context105) {\n      while (1) {\n        switch (_context105.prev = _context105.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from('abcd');\n            yieldableCase1 = koconutCase1.reduce(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context105.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context105.sent;\n            (0, _chai.expect)(resultCase1).equals('abcd');\n            koconutCase2 = _module.KoconutArray.of();\n            yieldableCase2 = koconutCase2.reduce(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context105.prev = 10;\n            _context105.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            _context105.next = 18;\n            break;\n\n          case 15:\n            _context105.prev = 15;\n            _context105.t0 = _context105[\"catch\"](10);\n            (0, _chai.expect)(_context105.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n          case \"end\":\n            return _context105.stop();\n        }\n      }\n    }, _callee105, null, [[10, 15]]);\n  })));\n  it(_module.KoconutArray.prototype.reduceIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee106() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee106$(_context106) {\n      while (1) {\n        switch (_context106.prev = _context106.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from('abcd');\n            yieldableCase1 = koconutCase1.reduceIndexed(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context106.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context106.sent;\n            (0, _chai.expect)(resultCase1).equals('ab1c2d3');\n            koconutCase2 = _module.KoconutArray.of();\n            yieldableCase2 = koconutCase2.reduceIndexed(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context106.prev = 10;\n            _context106.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            _context106.next = 18;\n            break;\n\n          case 15:\n            _context106.prev = 15;\n            _context106.t0 = _context106[\"catch\"](10);\n            (0, _chai.expect)(_context106.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n          case \"end\":\n            return _context106.stop();\n        }\n      }\n    }, _callee106, null, [[10, 15]]);\n  })));\n  it(_module.KoconutArray.prototype.reduceIndexedOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee107() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee107$(_context107) {\n      while (1) {\n        switch (_context107.prev = _context107.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcd');\n            yieldableCase1 = koconut.reduceIndexedOrNull(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context107.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context107.sent;\n            (0, _chai.expect)(resultCase1).equals('ab1c2d3');\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 'e';\n            }).reduceIndexedOrNull(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context107.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context107.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case \"end\":\n            return _context107.stop();\n        }\n      }\n    }, _callee107);\n  })));\n  it(_module.KoconutArray.prototype.reduceOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee108() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee108$(_context108) {\n      while (1) {\n        switch (_context108.prev = _context108.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcd');\n            yieldableCase1 = koconut.reduceOrNull(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context108.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context108.sent;\n            (0, _chai.expect)(resultCase1).equals('abcd');\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 'e';\n            }).reduceOrNull(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context108.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context108.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case \"end\":\n            return _context108.stop();\n        }\n      }\n    }, _callee108);\n  })));\n  it(_module.KoconutArray.prototype.reversed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee109() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee109$(_context109) {\n      while (1) {\n        switch (_context109.prev = _context109.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.reversed();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context109.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context109.sent;\n            (0, _chai.expect)(result).eqls([5, 4, 3, 2, 1]);\n\n          case 7:\n          case \"end\":\n            return _context109.stop();\n        }\n      }\n    }, _callee109);\n  })));\n  it(_module.KoconutArray.prototype.runningFold.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee110() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee110$(_context110) {\n      while (1) {\n        switch (_context110.prev = _context110.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcd');\n            yieldable = koconut.runningFold('W', function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context110.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context110.sent;\n            (0, _chai.expect)(result).eqls(['W', 'Wa', 'Wab', 'Wabc', 'Wabcd']);\n\n          case 7:\n          case \"end\":\n            return _context110.stop();\n        }\n      }\n    }, _callee110);\n  })));\n  it(_module.KoconutArray.prototype.runningFoldIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee111() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee111$(_context111) {\n      while (1) {\n        switch (_context111.prev = _context111.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcd');\n            yieldable = koconut.runningFoldIndexed('W', function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context111.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context111.sent;\n            (0, _chai.expect)(result).eqls(['W', 'Wa0', 'Wa0b1', 'Wa0b1c2', 'Wa0b1c2d3']);\n\n          case 7:\n          case \"end\":\n            return _context111.stop();\n        }\n      }\n    }, _callee111);\n  })));\n  it(_module.KoconutArray.prototype.runningReduce.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee112() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee112$(_context112) {\n      while (1) {\n        switch (_context112.prev = _context112.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from('abcd');\n            yieldableCase1 = koconutCase1.runningReduce(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context112.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context112.sent;\n            (0, _chai.expect)(resultCase1).eqls(['a', 'ab', 'abc', 'abcd']);\n            koconutCase2 = _module.KoconutArray.of();\n            yieldableCase2 = koconutCase2.runningReduce(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context112.prev = 10;\n            _context112.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            _context112.next = 18;\n            break;\n\n          case 15:\n            _context112.prev = 15;\n            _context112.t0 = _context112[\"catch\"](10);\n            (0, _chai.expect)(_context112.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n          case \"end\":\n            return _context112.stop();\n        }\n      }\n    }, _callee112, null, [[10, 15]]);\n  })));\n  it(_module.KoconutArray.prototype.runningReduceIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee113() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee113$(_context113) {\n      while (1) {\n        switch (_context113.prev = _context113.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from('abcd');\n            yieldableCase1 = koconutCase1.runningReduceIndexed(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context113.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context113.sent;\n            (0, _chai.expect)(resultCase1).eqls(['a', 'ab1', 'ab1c2', 'ab1c2d3']);\n            koconutCase2 = _module.KoconutArray.of();\n            yieldableCase2 = koconutCase2.runningReduceIndexed(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context113.prev = 10;\n            _context113.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            _context113.next = 18;\n            break;\n\n          case 15:\n            _context113.prev = 15;\n            _context113.t0 = _context113[\"catch\"](10);\n            (0, _chai.expect)(_context113.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n          case \"end\":\n            return _context113.stop();\n        }\n      }\n    }, _callee113, null, [[10, 15]]);\n  })));\n  it(_module.KoconutArray.prototype.scan.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee114() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee114$(_context114) {\n      while (1) {\n        switch (_context114.prev = _context114.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcd');\n            yieldable = koconut.scan('W', function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context114.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context114.sent;\n            (0, _chai.expect)(result).eqls(['W', 'Wa', 'Wab', 'Wabc', 'Wabcd']);\n\n          case 7:\n          case \"end\":\n            return _context114.stop();\n        }\n      }\n    }, _callee114);\n  })));\n  it(_module.KoconutArray.prototype.scanIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee115() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee115$(_context115) {\n      while (1) {\n        switch (_context115.prev = _context115.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcd');\n            yieldable = koconut.scanIndexed('W', function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context115.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context115.sent;\n            (0, _chai.expect)(result).eqls(['W', 'Wa0', 'Wa0b1', 'Wa0b1c2', 'Wa0b1c2d3']);\n\n          case 7:\n          case \"end\":\n            return _context115.stop();\n        }\n      }\n    }, _callee115);\n  })));\n  it(_module.KoconutArray.prototype.shuffled.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee116() {\n    var koconut, yieldable, result, _iterator, _step, eachShuffledElement;\n\n    return _regenerator[\"default\"].wrap(function _callee116$(_context116) {\n      while (1) {\n        switch (_context116.prev = _context116.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4]);\n            yieldable = koconut.shuffled();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context116.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context116.sent;\n            _iterator = _createForOfIteratorHelper(result);\n            _context116.prev = 7;\n\n            _iterator.s();\n\n          case 9:\n            if ((_step = _iterator.n()).done) {\n              _context116.next = 18;\n              break;\n            }\n\n            eachShuffledElement = _step.value;\n            _context116.t0 = _chai.expect;\n            _context116.next = 14;\n            return koconut[\"yield\"]();\n\n          case 14:\n            _context116.t1 = _context116.sent.includes(eachShuffledElement);\n            (0, _context116.t0)(_context116.t1).equals(true);\n\n          case 16:\n            _context116.next = 9;\n            break;\n\n          case 18:\n            _context116.next = 23;\n            break;\n\n          case 20:\n            _context116.prev = 20;\n            _context116.t2 = _context116[\"catch\"](7);\n\n            _iterator.e(_context116.t2);\n\n          case 23:\n            _context116.prev = 23;\n\n            _iterator.f();\n\n            return _context116.finish(23);\n\n          case 26:\n          case \"end\":\n            return _context116.stop();\n        }\n      }\n    }, _callee116, null, [[7, 20, 23, 26]]);\n  })));\n  it(_module.KoconutArray.prototype.single.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee117() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, yieldableCase3, resultCase3, yieldableCase4, yieldableCase5;\n    return _regenerator[\"default\"].wrap(function _callee117$(_context117) {\n      while (1) {\n        switch (_context117.prev = _context117.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.single();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context117.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).single();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.prev = 9;\n            _context117.next = 12;\n            return yieldableCase2.process();\n\n          case 12:\n            _context117.next = 17;\n            break;\n\n          case 14:\n            _context117.prev = 14;\n            _context117.t0 = _context117[\"catch\"](9);\n            (0, _chai.expect)(_context117.t0).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n            yieldableCase3 = koconut.single(function (eachElement) {\n              return eachElement % 5 == 0;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.next = 21;\n            return yieldableCase3[\"yield\"]();\n\n          case 21:\n            resultCase3 = _context117.sent;\n            (0, _chai.expect)(resultCase3).equals(5);\n            yieldableCase4 = koconut.single(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.prev = 25;\n            _context117.next = 28;\n            return yieldableCase4.process();\n\n          case 28:\n            _context117.next = 33;\n            break;\n\n          case 30:\n            _context117.prev = 30;\n            _context117.t1 = _context117[\"catch\"](25);\n            (0, _chai.expect)(_context117.t1).to.be.instanceOf(_module.KoconutConflictException);\n\n          case 33:\n            yieldableCase5 = koconut.single(function (eachElement) {\n              return eachElement % 10 == 0;\n            });\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.prev = 35;\n            _context117.next = 38;\n            return yieldableCase5.process();\n\n          case 38:\n            _context117.next = 43;\n            break;\n\n          case 40:\n            _context117.prev = 40;\n            _context117.t2 = _context117[\"catch\"](35);\n            (0, _chai.expect)(_context117.t2).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 43:\n          case \"end\":\n            return _context117.stop();\n        }\n      }\n    }, _callee117, null, [[9, 14], [25, 30], [35, 40]]);\n  })));\n  it(_module.KoconutArray.prototype.singleOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee118() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4, yieldableCase5, resultCase5;\n    return _regenerator[\"default\"].wrap(function _callee118$(_context118) {\n      while (1) {\n        switch (_context118.prev = _context118.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.singleOrNull();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context118.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).singleOrNull();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context118.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            yieldableCase3 = koconut.singleOrNull(function (eachElement) {\n              return eachElement % 5 == 0;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context118.sent;\n            (0, _chai.expect)(resultCase3).equals(5);\n            yieldableCase4 = koconut.singleOrNull(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 23;\n            return yieldableCase4[\"yield\"]();\n\n          case 23:\n            resultCase4 = _context118.sent;\n            (0, _chai.expect)(resultCase4).equals(null);\n            yieldableCase5 = koconut.singleOrNull(function (eachElement) {\n              return eachElement % 10 == 0;\n            });\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 29;\n            return yieldableCase5[\"yield\"]();\n\n          case 29:\n            resultCase5 = _context118.sent;\n            (0, _chai.expect)(resultCase5).equals(null);\n\n          case 31:\n          case \"end\":\n            return _context118.stop();\n        }\n      }\n    }, _callee118);\n  })));\n  it(_module.KoconutArray.prototype.subtract.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee119() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee119$(_context119) {\n      while (1) {\n        switch (_context119.prev = _context119.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.subtract([1, 3, 5]);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context119.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context119.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([2, 4]));\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase2 = koconutCase2.subtract([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli')]);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context119.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context119.sent;\n            (0, _chai.expect)(resultCase2).eqls(new Set([new _TestDataClasses.Person('Jinyoung', 'Luvya')]));\n\n          case 14:\n          case \"end\":\n            return _context119.stop();\n        }\n      }\n    }, _callee119);\n  })));\n  it(_module.KoconutArray.prototype.sumBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee120() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee120$(_context120) {\n      while (1) {\n        switch (_context120.prev = _context120.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.sumBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context120.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context120.sent;\n            (0, _chai.expect)(resultCase1).equals(15);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase2 = koconutCase2.sumBy(function (eachElement) {\n              return eachElement.price;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context120.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context120.sent;\n            (0, _chai.expect)(resultCase2).equals(4700);\n\n          case 14:\n          case \"end\":\n            return _context120.stop();\n        }\n      }\n    }, _callee120);\n  })));\n  it(_module.KoconutArray.prototype.union.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee121() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator[\"default\"].wrap(function _callee121$(_context121) {\n      while (1) {\n        switch (_context121.prev = _context121.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.union([4, 5, 6, 7, 8]);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context121.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context121.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([1, 2, 3, 4, 5, 6, 7, 8]));\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Johann', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya')]);\n            yieldableCase2 = koconutCase2.union([new _TestDataClasses.Person('Steve', 'Jobs'), new _TestDataClasses.Person('SangHun', 'Luvya')]);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context121.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context121.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.Person('Grace', 'Hopper'), new _TestDataClasses.Person('Jacob', 'Bernoulli'), new _TestDataClasses.Person('Jinyoung', 'Luvya'), new _TestDataClasses.Person('Steve', 'Jobs')];\n            (0, _chai.expect)(resultCase2).eqls(new Set(expectedResultArrayCase2));\n\n          case 15:\n          case \"end\":\n            return _context121.stop();\n        }\n      }\n    }, _callee121);\n  })));\n  it(_module.KoconutArray.prototype.windowed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee122() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4, yieldableCase5, resultCase5;\n    return _regenerator[\"default\"].wrap(function _callee122$(_context122) {\n      while (1) {\n        switch (_context122.prev = _context122.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconut.windowed(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context122.sent;\n            (0, _chai.expect)(resultCase1).eqls([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]]);\n            yieldableCase2 = koconut.windowed(3, 2);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context122.sent;\n            (0, _chai.expect)(resultCase2).eqls([[1, 2, 3], [3, 4, 5], [5, 6, 7]]);\n            yieldableCase3 = koconut.windowed(3, 2, true);\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context122.sent;\n            (0, _chai.expect)(resultCase3).eqls([[1, 2, 3], [3, 4, 5], [5, 6, 7], [7]]);\n            yieldableCase4 = koconut.windowed(3, 2, false, function (eachElements) {\n              var sum = 0;\n\n              var _iterator2 = _createForOfIteratorHelper(eachElements),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var eachElement = _step2.value;\n                  sum += eachElement;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              return sum;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 23;\n            return yieldableCase4[\"yield\"]();\n\n          case 23:\n            resultCase4 = _context122.sent;\n            (0, _chai.expect)(resultCase4).eqls([6, 12, 18]);\n            yieldableCase5 = koconut.windowed(-3, -2);\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 29;\n            return yieldableCase5[\"yield\"]();\n\n          case 29:\n            resultCase5 = _context122.sent;\n            (0, _chai.expect)(resultCase5).eqls([[1, 2, 3], [3, 4, 5], [5, 6, 7]]);\n\n          case 31:\n          case \"end\":\n            return _context122.stop();\n        }\n      }\n    }, _callee122);\n  })));\n  it(_module.KoconutArray.prototype.withIndex.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee123() {\n    var koconut, yieldable, result, expectedResultEntryArray;\n    return _regenerator[\"default\"].wrap(function _callee123$(_context123) {\n      while (1) {\n        switch (_context123.prev = _context123.next) {\n          case 0:\n            koconut = _module.KoconutArray.from('abcde');\n            yieldable = koconut.withIndex();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context123.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context123.sent;\n            expectedResultEntryArray = [new _module.Entry(0, 'a'), new _module.Entry(1, 'b'), new _module.Entry(2, 'c'), new _module.Entry(3, 'd'), new _module.Entry(4, 'e')];\n            (0, _chai.expect)(result).eqls(expectedResultEntryArray);\n\n          case 8:\n          case \"end\":\n            return _context123.stop();\n        }\n      }\n    }, _callee123);\n  })));\n  it(_module.KoconutArray.prototype.zip.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee124() {\n    var koconut, yieldableCase1, resultCase1, expectedResultPairArrayCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee124$(_context124) {\n      while (1) {\n        switch (_context124.prev = _context124.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.zip('abcdefg');\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context124.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context124.sent;\n            expectedResultPairArrayCase1 = [new _module.Pair(1, 'a'), new _module.Pair(2, 'b'), new _module.Pair(3, 'c'), new _module.Pair(4, 'd'), new _module.Pair(5, 'e')];\n            (0, _chai.expect)(resultCase1).eqls(expectedResultPairArrayCase1);\n            yieldableCase2 = koconut.zip('abc', function (eachElement, eachOtherElement) {\n              return eachElement + eachOtherElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context124.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context124.sent;\n            (0, _chai.expect)(resultCase2).eqls(['1a', '2b', '3c']);\n\n          case 14:\n          case \"end\":\n            return _context124.stop();\n        }\n      }\n    }, _callee124);\n  })));\n  it(_module.KoconutArray.prototype.zipWithNext.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee125() {\n    var koconut, yieldableCase1, resultCase1, expectedResultPairArrayCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee125$(_context125) {\n      while (1) {\n        switch (_context125.prev = _context125.next) {\n          case 0:\n            koconut = _module.KoconutArray.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.zipWithNext();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context125.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context125.sent;\n            expectedResultPairArrayCase1 = [new _module.Pair(1, 2), new _module.Pair(2, 3), new _module.Pair(3, 4), new _module.Pair(4, 5)];\n            (0, _chai.expect)(resultCase1).eqls(expectedResultPairArrayCase1);\n            yieldableCase2 = koconut.zipWithNext(function (eachFirstElement, eachSecondElement) {\n              return eachFirstElement * eachSecondElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context125.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            resultCase2 = _context125.sent;\n            (0, _chai.expect)(resultCase2).eqls([2, 6, 12, 20]);\n\n          case 14:\n          case \"end\":\n            return _context125.stop();\n        }\n      }\n    }, _callee125);\n  })));\n});\n\n//# sourceURL=webpack://koconut/./coverage/nodejs/KoconutArray.spec.js?")},"./coverage/nodejs/KoconutMap.spec.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _chai = __webpack_require__(/*! chai */ "./node_modules/chai/index.js");\n\nvar _module = __webpack_require__(/*! ../../dist/module */ "./dist/module.js");\n\nvar _TestDataClasses = __webpack_require__(/*! ./TestDataClasses */ "./coverage/nodejs/TestDataClasses.js");\n\n_module.KoconutDeprecation.isRunningOnDevUnitTesting = true;\ndescribe("".concat(_module.KoconutMap.name, " -- Creator"), function () {\n  it("constructor", (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n    var koconut, result;\n    return _regenerator["default"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            koconut = new _module.KoconutMap([[0, \'a\'], new _module.Entry(1, \'b\'), new _module.Pair(2, \'c\')]);\n            _context.next = 3;\n            return koconut["yield"]();\n\n          case 3:\n            result = _context.sent;\n            (0, _chai.expect)(result).eqls(new Map([[0, \'a\'], [1, \'b\'], [2, \'c\']]));\n\n          case 5:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n  it("".concat(_module.KoconutMap.from.name), (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n    var koconut, result;\n    return _regenerator["default"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            koconut = _module.KoconutMap.from();\n            _context2.next = 3;\n            return koconut["yield"]();\n\n          case 3:\n            result = _context2.sent;\n            (0, _chai.expect)(result).eqls(new Map());\n\n          case 5:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n  it("".concat(_module.KoconutMap.generate.name), (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n    var koconutCase1, resultCase1, koconutCase2;\n    return _regenerator["default"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.generate(5, function (index) {\n              if (index == 0) return [index, index + 1];else if (index == 1) return new _module.Pair(index, index + 1);else if (index == 2) return new _module.KoconutPair(index, index + 1);else if (index == 3) return new _module.Entry(index, index + 1);else return new _module.KoconutEntry(index, index + 1);\n            });\n            _context3.next = 3;\n            return koconutCase1["yield"]();\n\n          case 3:\n            resultCase1 = _context3.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Map([[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]));\n            koconutCase2 = _module.KoconutMap.generate(-1, function (index) {\n              return [index, index + 1];\n            });\n            _context3.prev = 6;\n            _context3.next = 9;\n            return koconutCase2.process();\n\n          case 9:\n            _context3.next = 14;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3["catch"](6);\n            (0, _chai.expect)(_context3.t0).to.be.instanceOf(_module.KoconutInvalidArgumentException);\n\n          case 14:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[6, 11]]);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Processor"), function () {\n  it("".concat(_module.KoconutMap.prototype.retrieve.name), (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([0, 1], [1, 2]);\n            _context4.next = 3;\n            return koconut.retrieve();\n\n          case 3:\n            yieldable = _context4.sent;\n            (0, _chai.expect)(yieldable).eqls(koconut);\n            _context4.next = 7;\n            return yieldable["yield"]();\n\n          case 7:\n            result = _context4.sent;\n            (0, _chai.expect)(result).eqls(new Map([[0, 1], [1, 2]]));\n\n          case 9:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Accessor"), function () {\n  it(\'entries\', (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {\n    var koconutCase1, yieldableCase1, resultCase1, expectedResultEntryArrayCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultEntryArrayCase2;\n    return _regenerator["default"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([0, \'a\'], [1, \'b\'], [2, \'c\']);\n            yieldableCase1 = koconutCase1.entries;\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context5.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context5.sent;\n            expectedResultEntryArrayCase1 = [new _module.Entry(0, \'a\'), new _module.Entry(1, \'b\'), new _module.Entry(2, \'c\')];\n            (0, _chai.expect)(resultCase1).eqls(new Set(expectedResultEntryArrayCase1));\n            koconutCase2 = _module.KoconutMap.of([new _TestDataClasses.Dog(\'unknown\', 0, 0), 1], [new _TestDataClasses.Dog(\'unknown\', 2, 0), 2], [new _TestDataClasses.Dog(\'unknown\', 0, 1), 3]);\n            yieldableCase2 = koconutCase2.entries;\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context5.next = 13;\n            return yieldableCase2["yield"]();\n\n          case 13:\n            resultCase2 = _context5.sent;\n            expectedResultEntryArrayCase2 = [new _module.Entry(new _TestDataClasses.Dog(\'unknown\', 0, 0), 1), new _module.Entry(new _TestDataClasses.Dog(\'unknown\', 0, 1), 3)];\n            (0, _chai.expect)(resultCase2).eqls(new Set(expectedResultEntryArrayCase2));\n\n          case 16:\n          case "end":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  })));\n  it(\'keys\', (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([0, \'a\'], [1, \'b\'], [2, \'c\']);\n            yieldable = koconut.keys;\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context6.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context6.sent;\n            (0, _chai.expect)(result).eqls(new Set([0, 1, 2]));\n\n          case 7:\n          case "end":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  })));\n  it(\'size\', (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([0, \'a\'], [1, \'b\'], [2, \'c\']);\n            yieldable = koconut.size;\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context7.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context7.sent;\n            (0, _chai.expect)(result).equals(3);\n\n          case 7:\n          case "end":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  })));\n  it(\'values\', (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([0, \'a\'], [1, \'b\'], [2, \'c\']);\n            yieldable = koconut.values;\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context8.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context8.sent;\n            (0, _chai.expect)(result).eqls([\'a\', \'b\', \'c\']);\n\n          case 7:\n          case "end":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Calculator"), function () {\n  it(_module.KoconutMap.prototype.count.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconut.count();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context9.sent;\n            (0, _chai.expect)(resultCase1).equals(5);\n            yieldableCase2 = koconut.count(function (eachEntry) {\n              return eachEntry.key % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context9.sent;\n            (0, _chai.expect)(resultCase2).equals(2);\n\n          case 13:\n          case "end":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  })));\n  it(_module.KoconutMap.prototype.maxBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconutCase1.maxBy(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutEntry);\n            _context10.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context10.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _module.Entry(\'Carol\', 51));\n            koconutCase2 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase2 = koconutCase2.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).maxBy(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutEntry);\n            _context10.prev = 10;\n            _context10.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            _context10.next = 18;\n            break;\n\n          case 15:\n            _context10.prev = 15;\n            _context10.t0 = _context10["catch"](10);\n            (0, _chai.expect)(_context10.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]).associateBy(function (eachElement) {\n              return eachElement.id;\n            });\n            yieldableCase3 = koconutCase3.maxBy(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutEntry);\n            _context10.next = 23;\n            return yieldableCase3["yield"]();\n\n          case 23:\n            resultCase3 = _context10.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _module.Entry(\'A-1\', new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000)));\n\n          case 25:\n          case "end":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[10, 15]]);\n  })));\n  it(_module.KoconutMap.prototype.maxByOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconutCase1.maxByOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutEntry);\n            _context11.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context11.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _module.Entry(\'Carol\', 51));\n            koconutCase2 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase2 = koconutCase2.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).maxByOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutEntry);\n            _context11.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context11.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]).associateBy(function (eachElement) {\n              return eachElement.id;\n            });\n            yieldableCase3 = koconutCase3.maxByOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutEntry);\n            _context11.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context11.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _module.Entry(\'A-1\', new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000)));\n\n          case 21:\n          case "end":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  })));\n  it(_module.KoconutMap.prototype.maxOf.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconutCase1.maxOf(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context12.sent;\n            (0, _chai.expect)(resultCase1).eqls(51);\n            koconutCase2 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase2 = koconutCase2.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).maxOf(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.prev = 10;\n            _context12.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            _context12.next = 18;\n            break;\n\n          case 15:\n            _context12.prev = 15;\n            _context12.t0 = _context12["catch"](10);\n            (0, _chai.expect)(_context12.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]).associateBy(function (eachElement) {\n              return eachElement.id;\n            });\n            yieldableCase3 = koconutCase3.maxOf(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 23;\n            return yieldableCase3["yield"]();\n\n          case 23:\n            resultCase3 = _context12.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000));\n\n          case 25:\n          case "end":\n            return _context12.stop();\n        }\n      }\n    }, _callee12, null, [[10, 15]]);\n  })));\n  it(_module.KoconutMap.prototype.maxOfOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconutCase1.maxOfOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context13.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context13.sent;\n            (0, _chai.expect)(resultCase1).eqls(51);\n            koconutCase2 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase2 = koconutCase2.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).maxOfOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context13.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context13.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]).associateBy(function (eachElement) {\n              return eachElement.id;\n            });\n            yieldableCase3 = koconutCase3.maxOfOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context13.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context13.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000));\n\n          case 21:\n          case "end":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  })));\n  it(_module.KoconutMap.prototype.maxOfWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator["default"].wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconut.maxOfWith(function (eachEntry) {\n              return eachEntry.value;\n            }, function (front, rear) {\n              return front - rear;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context14.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context14.sent;\n            (0, _chai.expect)(resultCase1).equals(51);\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).maxOfWith(function (eachEntry) {\n              return eachEntry.value;\n            }, function (front, rear) {\n              return front = rear;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context14.prev = 9;\n            _context14.next = 12;\n            return yieldableCase2.process();\n\n          case 12:\n            _context14.next = 17;\n            break;\n\n          case 14:\n            _context14.prev = 14;\n            _context14.t0 = _context14["catch"](9);\n            (0, _chai.expect)(_context14.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case "end":\n            return _context14.stop();\n        }\n      }\n    }, _callee14, null, [[9, 14]]);\n  })));\n  it(_module.KoconutMap.prototype.maxOfWithOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconut.maxOfWithOrNull(function (eachEntry) {\n              return eachEntry.value;\n            }, function (front, rear) {\n              return front - rear;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context15.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context15.sent;\n            (0, _chai.expect)(resultCase1).equals(51);\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).maxOfWithOrNull(function (eachEntry) {\n              return eachEntry.value;\n            }, function (front, rear) {\n              return front = rear;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context15.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context15.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context15.stop();\n        }\n      }\n    }, _callee15);\n  })));\n  it(_module.KoconutMap.prototype.maxWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator["default"].wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconut.maxWith(function (front, rear) {\n              return front.value - rear.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context16.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context16.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _module.Entry(\'Carol\', 51));\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).maxWith(function (front, rear) {\n              return front.value - rear.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context16.prev = 9;\n            _context16.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            _context16.next = 17;\n            break;\n\n          case 14:\n            _context16.prev = 14;\n            _context16.t0 = _context16["catch"](9);\n            (0, _chai.expect)(_context16.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case "end":\n            return _context16.stop();\n        }\n      }\n    }, _callee16, null, [[9, 14]]);\n  })));\n  it(_module.KoconutMap.prototype.maxWithOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee17() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconut.maxWithOrNull(function (front, rear) {\n              return front.value - rear.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context17.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _module.Entry(\'Carol\', 51));\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).maxWithOrNull(function (front, rear) {\n              return front.value - rear.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context17.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context17.stop();\n        }\n      }\n    }, _callee17);\n  })));\n  it(_module.KoconutMap.prototype.minBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee18() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee18$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconutCase1.minBy(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutEntry);\n            _context18.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context18.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _module.Entry(\'Bob\', 28));\n            koconutCase2 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase2 = koconutCase2.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).minBy(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutEntry);\n            _context18.prev = 10;\n            _context18.next = 13;\n            return yieldableCase2["yield"]();\n\n          case 13:\n            _context18.next = 18;\n            break;\n\n          case 15:\n            _context18.prev = 15;\n            _context18.t0 = _context18["catch"](10);\n            (0, _chai.expect)(_context18.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]).associateBy(function (eachElement) {\n              return eachElement.id;\n            });\n            yieldableCase3 = koconutCase3.minBy(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutEntry);\n            _context18.next = 23;\n            return yieldableCase3["yield"]();\n\n          case 23:\n            resultCase3 = _context18.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _module.Entry(\'A-2\', new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200)));\n\n          case 25:\n          case "end":\n            return _context18.stop();\n        }\n      }\n    }, _callee18, null, [[10, 15]]);\n  })));\n  it(_module.KoconutMap.prototype.minByOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee19() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee19$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconutCase1.minByOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutEntry);\n            _context19.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context19.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _module.Entry(\'Bob\', 28));\n            koconutCase2 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase2 = koconutCase2.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).minByOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutEntry);\n            _context19.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context19.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]).associateBy(function (eachElement) {\n              return eachElement.id;\n            });\n            yieldableCase3 = koconutCase3.minByOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutEntry);\n            _context19.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context19.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _module.Entry(\'A-2\', new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200)));\n\n          case 21:\n          case "end":\n            return _context19.stop();\n        }\n      }\n    }, _callee19);\n  })));\n  it(_module.KoconutMap.prototype.minOf.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee20() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee20$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconutCase1.minOf(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context20.sent;\n            (0, _chai.expect)(resultCase1).eqls(28);\n            koconutCase2 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase2 = koconutCase2.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).minOf(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.prev = 10;\n            _context20.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            _context20.next = 18;\n            break;\n\n          case 15:\n            _context20.prev = 15;\n            _context20.t0 = _context20["catch"](10);\n            (0, _chai.expect)(_context20.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]).associateBy(function (eachElement) {\n              return eachElement.id;\n            });\n            yieldableCase3 = koconutCase3.minOf(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 23;\n            return yieldableCase3["yield"]();\n\n          case 23:\n            resultCase3 = _context20.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n\n          case 25:\n          case "end":\n            return _context20.stop();\n        }\n      }\n    }, _callee20, null, [[10, 15]]);\n  })));\n  it(_module.KoconutMap.prototype.minOfOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee21() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee21$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            koconutCase1 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconutCase1.minOfOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context21.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context21.sent;\n            (0, _chai.expect)(resultCase1).eqls(28);\n            koconutCase2 = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase2 = koconutCase2.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).minOfOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context21.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context21.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]).associateBy(function (eachElement) {\n              return eachElement.id;\n            });\n            yieldableCase3 = koconutCase3.minOfOrNull(function (eachEntry) {\n              return eachEntry.value;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context21.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context21.sent;\n            (0, _chai.expect)(resultCase3).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n\n          case 21:\n          case "end":\n            return _context21.stop();\n        }\n      }\n    }, _callee21);\n  })));\n  it(_module.KoconutMap.prototype.minOfWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee22() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator["default"].wrap(function _callee22$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconut.minOfWith(function (eachEntry) {\n              return eachEntry.value;\n            }, function (front, rear) {\n              return front - rear;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context22.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context22.sent;\n            (0, _chai.expect)(resultCase1).equals(28);\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).minOfWith(function (eachEntry) {\n              return eachEntry.value;\n            }, function (front, rear) {\n              return front = rear;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context22.prev = 9;\n            _context22.next = 12;\n            return yieldableCase2.process();\n\n          case 12:\n            _context22.next = 17;\n            break;\n\n          case 14:\n            _context22.prev = 14;\n            _context22.t0 = _context22["catch"](9);\n            (0, _chai.expect)(_context22.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case "end":\n            return _context22.stop();\n        }\n      }\n    }, _callee22, null, [[9, 14]]);\n  })));\n  it(_module.KoconutMap.prototype.minOfWithOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee23() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee23$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconut.minOfWithOrNull(function (eachEntry) {\n              return eachEntry.value;\n            }, function (front, rear) {\n              return front - rear;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context23.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context23.sent;\n            (0, _chai.expect)(resultCase1).equals(28);\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).minOfWithOrNull(function (eachEntry) {\n              return eachEntry.value;\n            }, function (front, rear) {\n              return front = rear;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context23.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context23.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context23.stop();\n        }\n      }\n    }, _callee23);\n  })));\n  it(_module.KoconutMap.prototype.minWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee24() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator["default"].wrap(function _callee24$(_context24) {\n      while (1) {\n        switch (_context24.prev = _context24.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconut.minWith(function (front, rear) {\n              return front.value - rear.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context24.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context24.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _module.Entry(\'Bob\', 28));\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).minWith(function (front, rear) {\n              return front.value - rear.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context24.prev = 9;\n            _context24.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            _context24.next = 17;\n            break;\n\n          case 14:\n            _context24.prev = 14;\n            _context24.t0 = _context24["catch"](9);\n            (0, _chai.expect)(_context24.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case "end":\n            return _context24.stop();\n        }\n      }\n    }, _callee24, null, [[9, 14]]);\n  })));\n  it(_module.KoconutMap.prototype.minWithOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee25() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee25$(_context25) {\n      while (1) {\n        switch (_context25.prev = _context25.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'Alice\', 42], [\'Bob\', 28], [\'Carol\', 51]);\n            yieldableCase1 = koconut.minWithOrNull(function (front, rear) {\n              return front.value - rear.value;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context25.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context25.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _module.Entry(\'Bob\', 28));\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.value > 100;\n            }).minWithOrNull(function (front, rear) {\n              return front.value - rear.value;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context25.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context25.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context25.stop();\n        }\n      }\n    }, _callee25);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Caster"), function () {\n  it(_module.KoconutMap.prototype.asArray.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee26() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee26$(_context26) {\n      while (1) {\n        switch (_context26.prev = _context26.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3).associate(function (eachElement) {\n              return new _module.Pair(eachElement, eachElement);\n            });\n            yieldable = koconut.asArray();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context26.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context26.sent;\n            (0, _chai.expect)(result).eqls([new _module.Entry(1, 1), new _module.Entry(2, 2), new _module.Entry(3, 3)]);\n\n          case 7:\n          case "end":\n            return _context26.stop();\n        }\n      }\n    }, _callee26);\n  })));\n  it(_module.KoconutMap.prototype.asSet.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee27() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee27$(_context27) {\n      while (1) {\n        switch (_context27.prev = _context27.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 1, 2, 2, 3, 3).associate(function (eachElement) {\n              return new _module.Pair(eachElement, eachElement);\n            });\n            yieldable = koconut.asSet();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context27.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context27.sent;\n            (0, _chai.expect)(result).eqls(new Set([new _module.Entry(1, 1), new _module.Entry(2, 2), new _module.Entry(3, 3)]));\n\n          case 7:\n          case "end":\n            return _context27.stop();\n        }\n      }\n    }, _callee27);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Inspector"), function () {\n  it(_module.KoconutMap.prototype.all.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee28() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee28$(_context28) {\n      while (1) {\n        switch (_context28.prev = _context28.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconut.all(function (eachEntry) {\n              return eachEntry.value / eachEntry.key == 2;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context28.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context28.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            yieldableCase2 = koconut.all(function (eachEntry) {\n              return eachEntry.value < 8;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context28.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context28.sent;\n            (0, _chai.expect)(resultCase2).equals(false);\n\n          case 13:\n          case "end":\n            return _context28.stop();\n        }\n      }\n    }, _callee28);\n  })));\n  it(_module.KoconutMap.prototype.any.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee29() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee29$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * eachElement];\n            });\n            yieldableCase1 = koconut.any(function (eachEntry) {\n              return eachEntry.value == 1;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context29.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context29.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            yieldableCase2 = koconut.any(function (eachEntry) {\n              return eachEntry.value < 0;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context29.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context29.sent;\n            (0, _chai.expect)(resultCase2).equals(false);\n\n          case 13:\n          case "end":\n            return _context29.stop();\n        }\n      }\n    }, _callee29);\n  })));\n  it(_module.KoconutMap.prototype.isEmpty.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee30() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee30$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconut.isEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context30.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context30.sent;\n            (0, _chai.expect)(resultCase1).equals(false);\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.key > 10;\n            }).isEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context30.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context30.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 13:\n          case "end":\n            return _context30.stop();\n        }\n      }\n    }, _callee30);\n  })));\n  it(_module.KoconutMap.prototype.isNotEmpty.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee31() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee31$(_context31) {\n      while (1) {\n        switch (_context31.prev = _context31.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconut.isNotEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context31.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context31.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.key > 10;\n            }).isNotEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context31.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context31.sent;\n            (0, _chai.expect)(resultCase2).equals(false);\n\n          case 13:\n          case "end":\n            return _context31.stop();\n        }\n      }\n    }, _callee31);\n  })));\n  it(_module.KoconutMap.prototype.isNullOrEmpty.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee32() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee32$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconut.isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context32.sent;\n            (0, _chai.expect)(resultCase1).equals(false);\n            yieldableCase2 = koconut.filter(function (eachEntry) {\n              return eachEntry.key > 10;\n            }).isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context32.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 13:\n          case "end":\n            return _context32.stop();\n        }\n      }\n    }, _callee32);\n  })));\n  it(_module.KoconutMap.prototype.contains.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee33() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee33$(_context33) {\n      while (1) {\n        switch (_context33.prev = _context33.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.of(1, 2, 3).associate(function (eachElement) {\n              return new _module.Pair(eachElement, eachElement);\n            });\n            yieldableCase1 = koconutCase1.contains(2);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context33.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]).associate(function (eachElement) {\n              return [eachElement, eachElement.firstName + eachElement.lastName];\n            });\n            yieldableCase2 = koconutCase2.contains(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context33.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n            koconutCase3 = _module.KoconutArray.of(new _TestDataClasses.Dog(\'Brie\', 3, 0), new _TestDataClasses.Dog(\'Mike\', 5, 1), new _TestDataClasses.Dog(\'unknown\', 3, 0)).associate(function (eachElement) {\n              return [eachElement, eachElement.name];\n            });\n            yieldableCase3 = koconutCase3.contains(new _TestDataClasses.Dog(\'unknown\', -1, 4));\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context33.sent;\n            (0, _chai.expect)(resultCase3).equal(false);\n\n          case 21:\n          case "end":\n            return _context33.stop();\n        }\n      }\n    }, _callee33);\n  })));\n  it(_module.KoconutMap.prototype.containsKey.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee34() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee34$(_context34) {\n      while (1) {\n        switch (_context34.prev = _context34.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.of(1, 2, 3).associate(function (eachElement) {\n              return new _module.Pair(eachElement, eachElement);\n            });\n            yieldableCase1 = koconutCase1.containsKey(2);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context34.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]).associate(function (eachElement) {\n              return [eachElement, eachElement.firstName + eachElement.lastName];\n            });\n            yieldableCase2 = koconutCase2.containsKey(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context34.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 14:\n          case "end":\n            return _context34.stop();\n        }\n      }\n    }, _callee34);\n  })));\n  it(_module.KoconutMap.prototype.containsValue.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee35() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee35$(_context35) {\n      while (1) {\n        switch (_context35.prev = _context35.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.of(1, 2, 3).associate(function (eachElement) {\n              return new _module.Pair(eachElement, eachElement);\n            });\n            yieldableCase1 = koconutCase1.containsValue(2);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context35.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context35.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]).associate(function (eachElement) {\n              return [eachElement.firstName + eachElement.lastName, eachElement];\n            });\n            yieldableCase2 = koconutCase2.containsValue(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context35.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context35.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n            koconutCase3 = _module.KoconutArray.of(new _TestDataClasses.Dog(\'Brie\', 3, 0), new _TestDataClasses.Dog(\'Mike\', 5, 1), new _TestDataClasses.Dog(\'unknown\', 3, 0)).associate(function (eachElement) {\n              return [eachElement.name, eachElement];\n            });\n            yieldableCase3 = koconutCase3.containsValue(new _TestDataClasses.Dog(\'unknown\', -1, 4));\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context35.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context35.sent;\n            (0, _chai.expect)(resultCase3).equal(false);\n\n          case 21:\n          case "end":\n            return _context35.stop();\n        }\n      }\n    }, _callee35);\n  })));\n  it(_module.KoconutMap.prototype.none.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee36() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee36$(_context36) {\n      while (1) {\n        switch (_context36.prev = _context36.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement];\n            });\n            yieldableCase1 = koconut.filter(function (eachEntry) {\n              return eachEntry.key > 10;\n            }).none();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context36.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context36.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            yieldableCase2 = koconut.none(function (eachEntry) {\n              return eachEntry.key > 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context36.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context36.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 13:\n          case "end":\n            return _context36.stop();\n        }\n      }\n    }, _callee36);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Iterator"), function () {\n  it(_module.KoconutMap.prototype.forEach.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee37() {\n    var koconut, yieldable;\n    return _regenerator["default"].wrap(function _callee37$(_context37) {\n      while (1) {\n        switch (_context37.prev = _context37.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldable = koconut.forEach(function (eachEntry) {\n              (0, _chai.expect)(eachEntry.value / eachEntry.key).equals(2);\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context37.next = 5;\n            return yieldable.process();\n\n          case 5:\n          case "end":\n            return _context37.stop();\n        }\n      }\n    }, _callee37);\n  })));\n  it(_module.KoconutMap.prototype.onEach.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee38() {\n    var koconut, yieldable;\n    return _regenerator["default"].wrap(function _callee38$(_context38) {\n      while (1) {\n        switch (_context38.prev = _context38.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement];\n            });\n            yieldable = koconut.onEach(function (eachEntry) {\n              (0, _chai.expect)(eachEntry.value - eachEntry.key).equals(0);\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context38.next = 5;\n            return yieldable.process();\n\n          case 5:\n          case "end":\n            return _context38.stop();\n        }\n      }\n    }, _callee38);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Manipulator"), function () {\n  it(_module.KoconutMap.prototype.filter.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee39() {\n    var koconut, yieldable, result, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee39$(_context39) {\n      while (1) {\n        switch (_context39.prev = _context39.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldable = koconut.filter(function (eachEntry) {\n              return eachEntry.key % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context39.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context39.sent;\n            expectedResultMap = new Map([[2, 4], [4, 8]]);\n            (0, _chai.expect)(result).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context39.stop();\n        }\n      }\n    }, _callee39);\n  })));\n  it(_module.KoconutMap.prototype.filterNot.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee40() {\n    var koconut, yieldable, result, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee40$(_context40) {\n      while (1) {\n        switch (_context40.prev = _context40.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldable = koconut.filterNot(function (eachEntry) {\n              return eachEntry.value < 6;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context40.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context40.sent;\n            expectedResultMap = new Map([[3, 6], [4, 8], [5, 10]]);\n            (0, _chai.expect)(result).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context40.stop();\n        }\n      }\n    }, _callee40);\n  })));\n  it(_module.KoconutMap.prototype.filterTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee41() {\n    var koconut, destination, yieldable, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee41$(_context41) {\n      while (1) {\n        switch (_context41.prev = _context41.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            destination = new Map();\n            yieldable = koconut.filterTo(destination, function (eachEntry) {\n              return eachEntry.key % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context41.next = 6;\n            return yieldable.process();\n\n          case 6:\n            expectedResultMap = new Map([[2, 4], [4, 8]]);\n            (0, _chai.expect)(destination).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context41.stop();\n        }\n      }\n    }, _callee41);\n  })));\n  it(_module.KoconutMap.prototype.filterNotTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee42() {\n    var koconut, destination, yieldable, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee42$(_context42) {\n      while (1) {\n        switch (_context42.prev = _context42.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            destination = new Map();\n            yieldable = koconut.filterNotTo(destination, function (eachEntry) {\n              return eachEntry.value < 6;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context42.next = 6;\n            return yieldable.process();\n\n          case 6:\n            expectedResultMap = new Map([[3, 6], [4, 8], [5, 10]]);\n            (0, _chai.expect)(destination).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context42.stop();\n        }\n      }\n    }, _callee42);\n  })));\n  it(_module.KoconutMap.prototype.filterKeys.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee43() {\n    var koconut, yieldable, result, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee43$(_context43) {\n      while (1) {\n        switch (_context43.prev = _context43.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldable = koconut.filterKeys(function (eachKey) {\n              return eachKey % 3 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context43.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context43.sent;\n            expectedResultMap = new Map([[3, 6]]);\n            (0, _chai.expect)(result).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context43.stop();\n        }\n      }\n    }, _callee43);\n  })));\n  it(_module.KoconutMap.prototype.filterValues.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee44() {\n    var koconut, yieldable, result, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee44$(_context44) {\n      while (1) {\n        switch (_context44.prev = _context44.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldable = koconut.filterValues(function (eachElement) {\n              return eachElement > 6;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context44.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context44.sent;\n            expectedResultMap = new Map([[4, 8], [5, 10]]);\n            (0, _chai.expect)(result).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context44.stop();\n        }\n      }\n    }, _callee44);\n  })));\n  it(_module.KoconutMap.prototype.minus.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee45() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee45$(_context45) {\n      while (1) {\n        switch (_context45.prev = _context45.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.of(1, 2, 3).associate(function (eachElement) {\n              return [eachElement, eachElement];\n            });\n            yieldableCase1 = koconutCase1.minus(1);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutMap);\n            _context45.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context45.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Map([[2, 2], [3, 3]]));\n            koconutCase2 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]).associate(function (eachElement) {\n              return [eachElement, eachElement.firstName + eachElement.lastName];\n            });\n            yieldableCase2 = koconutCase2.minus(new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\'));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutMap);\n            _context45.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context45.sent;\n            (0, _chai.expect)(resultCase2).eqls(new Map([[new _TestDataClasses.Person(\'Grace\', \'Hopper\'), \'GraceHopper\'], [new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), \'JacobBernoulli\']]));\n\n          case 14:\n          case "end":\n            return _context45.stop();\n        }\n      }\n    }, _callee45);\n  })));\n  it(_module.KoconutMap.prototype.plus.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee46() {\n    var koconut, expectedResultMap, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4, yieldableCase5, resultCase5, yieldableCase6, resultCase6, yieldableCase7, resultCase7, yieldableCase8, resultCase8, yieldableCase9, resultCase9;\n    return _regenerator["default"].wrap(function _callee46$(_context46) {\n      while (1) {\n        switch (_context46.prev = _context46.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3).associate(function (eachElement) {\n              return [eachElement, eachElement];\n            });\n            expectedResultMap = new Map([[1, 1], [2, 2], [3, 3], [4, 4]]);\n            yieldableCase1 = koconut.plus(new _module.Pair(4, 4));\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 6;\n            return yieldableCase1["yield"]();\n\n          case 6:\n            resultCase1 = _context46.sent;\n            (0, _chai.expect)(resultCase1).eqls(expectedResultMap);\n            yieldableCase2 = koconut.plus(new _module.KoconutPair(4, 4));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context46.sent;\n            (0, _chai.expect)(resultCase2).eqls(expectedResultMap);\n            yieldableCase3 = koconut.plus(new _module.Entry(4, 4));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 18;\n            return yieldableCase3["yield"]();\n\n          case 18:\n            resultCase3 = _context46.sent;\n            (0, _chai.expect)(resultCase3).eqls(expectedResultMap);\n            yieldableCase4 = koconut.plus(new _module.KoconutEntry(4, 4));\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 24;\n            return yieldableCase4["yield"]();\n\n          case 24:\n            resultCase4 = _context46.sent;\n            (0, _chai.expect)(resultCase4).eqls(expectedResultMap);\n            expectedResultMap.set(5, 5);\n            yieldableCase5 = koconut.plus(new _module.Pair(4, 4), new _module.Pair(5, 5));\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 31;\n            return yieldableCase5["yield"]();\n\n          case 31:\n            resultCase5 = _context46.sent;\n            (0, _chai.expect)(resultCase5).eqls(expectedResultMap);\n            yieldableCase6 = koconut.plus(new _module.KoconutPair(4, 4), new _module.KoconutPair(5, 5));\n            (0, _chai.expect)(yieldableCase6).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 37;\n            return yieldableCase6["yield"]();\n\n          case 37:\n            resultCase6 = _context46.sent;\n            (0, _chai.expect)(resultCase6).eqls(expectedResultMap);\n            yieldableCase7 = koconut.plus(new _module.Entry(4, 4), new _module.Entry(5, 5));\n            (0, _chai.expect)(yieldableCase7).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 43;\n            return yieldableCase7["yield"]();\n\n          case 43:\n            resultCase7 = _context46.sent;\n            (0, _chai.expect)(resultCase7).eqls(expectedResultMap);\n            yieldableCase8 = koconut.plus(new _module.KoconutEntry(4, 4), new _module.KoconutEntry(5, 5));\n            (0, _chai.expect)(yieldableCase8).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 49;\n            return yieldableCase8["yield"]();\n\n          case 49:\n            resultCase8 = _context46.sent;\n            (0, _chai.expect)(resultCase8).eqls(expectedResultMap);\n            yieldableCase9 = koconut.plus([4, 4], [5, 5]);\n            (0, _chai.expect)(yieldableCase9).to.be.instanceOf(_module.KoconutMap);\n            _context46.next = 55;\n            return yieldableCase9["yield"]();\n\n          case 55:\n            resultCase9 = _context46.sent;\n            (0, _chai.expect)(resultCase9).eqls(expectedResultMap);\n\n          case 57:\n          case "end":\n            return _context46.stop();\n        }\n      }\n    }, _callee46);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Selector"), function () {\n  it(_module.KoconutMap.prototype.get.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee47() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee47$(_context47) {\n      while (1) {\n        switch (_context47.prev = _context47.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconutCase1.get(2);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context47.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context47.sent;\n            (0, _chai.expect)(resultCase1).equals(4);\n            koconutCase2 = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase2 = koconutCase2.filterKeys(function (eachKey) {\n              return eachKey > 3;\n            }).get(1);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context47.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context47.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]).associate(function (eachElement) {\n              return [eachElement, eachElement.firstName + eachElement.lastName];\n            });\n            yieldableCase3 = koconutCase3.get(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context47.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context47.sent;\n            (0, _chai.expect)(resultCase3).equals(\'GraceHopper\');\n            koconutCase4 = _module.KoconutMap.of([new _TestDataClasses.Dog(\'unknown\', 0, 0), 1], [new _TestDataClasses.Dog(\'unknown\', 2, 0), 2], [new _TestDataClasses.Dog(\'unknown\', 0, 1), 3]);\n            yieldableCase4 = koconutCase4.get(new _TestDataClasses.Dog(\'Brie\', 1, 1));\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context47.next = 26;\n            return yieldableCase4["yield"]();\n\n          case 26:\n            resultCase4 = _context47.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(3);\n\n          case 28:\n          case "end":\n            return _context47.stop();\n        }\n      }\n    }, _callee47);\n  })));\n  it(_module.KoconutMap.prototype.getOrDefault.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee48() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee48$(_context48) {\n      while (1) {\n        switch (_context48.prev = _context48.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconutCase1.getOrDefault(2, 100);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context48.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context48.sent;\n            (0, _chai.expect)(resultCase1).equals(4);\n            koconutCase2 = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase2 = koconutCase2.filterKeys(function (eachKey) {\n              return eachKey > 3;\n            }).getOrDefault(1, 100);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context48.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context48.sent;\n            (0, _chai.expect)(resultCase2).equals(100);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]).associate(function (eachElement) {\n              return [eachElement, eachElement.firstName + eachElement.lastName];\n            });\n            yieldableCase3 = koconutCase3.getOrDefault(new _TestDataClasses.Person(\'Grace\', \'Hopper\'), \'SteveJobs\');\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context48.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context48.sent;\n            (0, _chai.expect)(resultCase3).equals(\'GraceHopper\');\n            koconutCase4 = _module.KoconutMap.of([new _TestDataClasses.Dog(\'unknown\', 0, 0), 1], [new _TestDataClasses.Dog(\'unknown\', 2, 0), 2], [new _TestDataClasses.Dog(\'unknown\', 0, 1), 3]);\n            yieldableCase4 = koconutCase4.getOrDefault(new _TestDataClasses.Dog(\'Brie\', 1, 2), 10);\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context48.next = 26;\n            return yieldableCase4["yield"]();\n\n          case 26:\n            resultCase4 = _context48.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(10);\n\n          case 28:\n          case "end":\n            return _context48.stop();\n        }\n      }\n    }, _callee48);\n  })));\n  it(_module.KoconutMap.prototype.getOrElse.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee49() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee49$(_context49) {\n      while (1) {\n        switch (_context49.prev = _context49.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconutCase1.getOrElse(2, function () {\n              return 100;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context49.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context49.sent;\n            (0, _chai.expect)(resultCase1).equals(4);\n            koconutCase2 = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase2 = koconutCase2.filterKeys(function (eachKey) {\n              return eachKey > 3;\n            }).getOrElse(1, function () {\n              return 100;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context49.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context49.sent;\n            (0, _chai.expect)(resultCase2).equals(100);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]).associate(function (eachElement) {\n              return [eachElement, eachElement.firstName + eachElement.lastName];\n            });\n            yieldableCase3 = koconutCase3.getOrElse(new _TestDataClasses.Person(\'Grace\', \'Hopper\'), function () {\n              return \'SteveJobs\';\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context49.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context49.sent;\n            (0, _chai.expect)(resultCase3).equals(\'GraceHopper\');\n            koconutCase4 = _module.KoconutMap.of([new _TestDataClasses.Dog(\'unknown\', 0, 0), 1], [new _TestDataClasses.Dog(\'unknown\', 2, 0), 2], [new _TestDataClasses.Dog(\'unknown\', 0, 1), 3]);\n            yieldableCase4 = koconutCase4.getOrElse(new _TestDataClasses.Dog(\'Brie\', 1, 2), function () {\n              return 10;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context49.next = 26;\n            return yieldableCase4["yield"]();\n\n          case 26:\n            resultCase4 = _context49.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(10);\n\n          case 28:\n          case "end":\n            return _context49.stop();\n        }\n      }\n    }, _callee49);\n  })));\n  it(_module.KoconutMap.prototype.getValue.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee50() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee50$(_context50) {\n      while (1) {\n        switch (_context50.prev = _context50.next) {\n          case 0:\n            koconutCase1 = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase1 = koconutCase1.getValue(2);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context50.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context50.sent;\n            (0, _chai.expect)(resultCase1).equals(4);\n            koconutCase2 = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldableCase2 = koconutCase2.filterKeys(function (eachKey) {\n              return eachKey > 3;\n            }).getValue(1);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context50.prev = 10;\n            _context50.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            _context50.next = 18;\n            break;\n\n          case 15:\n            _context50.prev = 15;\n            _context50.t0 = _context50["catch"](10);\n            (0, _chai.expect)(_context50.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 18:\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]).associate(function (eachElement) {\n              return [eachElement, eachElement.firstName + eachElement.lastName];\n            });\n            yieldableCase3 = koconutCase3.getValue(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context50.next = 23;\n            return yieldableCase3["yield"]();\n\n          case 23:\n            resultCase3 = _context50.sent;\n            (0, _chai.expect)(resultCase3).equals(\'GraceHopper\');\n            koconutCase4 = _module.KoconutMap.of([new _TestDataClasses.Dog(\'unknown\', 0, 0), 1], [new _TestDataClasses.Dog(\'unknown\', 2, 0), 2], [new _TestDataClasses.Dog(\'unknown\', 0, 1), 3]);\n            yieldableCase4 = koconutCase4.getValue(new _TestDataClasses.Dog(\'Brie\', 1, 1));\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context50.next = 30;\n            return yieldableCase4["yield"]();\n\n          case 30:\n            resultCase4 = _context50.sent;\n            (0, _chai.expect)(resultCase4).to.be.eqls(3);\n\n          case 32:\n          case "end":\n            return _context50.stop();\n        }\n      }\n    }, _callee50, null, [[10, 15]]);\n  })));\n});\ndescribe("".concat(_module.KoconutMap.name, " -- Transformer"), function () {\n  it(_module.KoconutMap.prototype.flatMap.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee51() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee51$(_context51) {\n      while (1) {\n        switch (_context51.prev = _context51.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldable = koconut.flatMap(function (eachEntry) {\n              return [eachEntry.key, eachEntry.value];\n            }).distinct().sortedBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context51.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context51.sent;\n            (0, _chai.expect)(result).eqls([1, 2, 3, 4, 5, 6, 8, 10]);\n\n          case 7:\n          case "end":\n            return _context51.stop();\n        }\n      }\n    }, _callee51);\n  })));\n  it(_module.KoconutMap.prototype.flatMapTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee52() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee52$(_context52) {\n      while (1) {\n        switch (_context52.prev = _context52.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            destination = new Array();\n            yieldable = koconut.flatMapTo(destination, function (eachEntry) {\n              return [eachEntry.key, eachEntry.value];\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context52.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([1, 2, 2, 4, 3, 6, 4, 8, 5, 10]);\n\n          case 7:\n          case "end":\n            return _context52.stop();\n        }\n      }\n    }, _callee52);\n  })));\n  it(_module.KoconutMap.prototype.map.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee53() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee53$(_context53) {\n      while (1) {\n        switch (_context53.prev = _context53.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldable = koconut.map(function (eachEntry) {\n              return eachEntry.key + eachEntry.value;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context53.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context53.sent;\n            (0, _chai.expect)(result).eqls([3, 6, 9, 12, 15]);\n\n          case 7:\n          case "end":\n            return _context53.stop();\n        }\n      }\n    }, _callee53);\n  })));\n  it(_module.KoconutMap.prototype.mapKeys.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee54() {\n    var koconut, yieldable, result, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee54$(_context54) {\n      while (1) {\n        switch (_context54.prev = _context54.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'beer\', 2.7], [\'bisquit\', 5.8]);\n            yieldable = koconut.mapKeys(function (eachEntry) {\n              return eachEntry.key.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context54.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context54.sent;\n            expectedResultMap = new Map([[4, 2.7], [7, 5.8]]);\n            (0, _chai.expect)(result).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context54.stop();\n        }\n      }\n    }, _callee54);\n  })));\n  it(_module.KoconutMap.prototype.mapKeysTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee55() {\n    var koconut, destination, yieldable, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee55$(_context55) {\n      while (1) {\n        switch (_context55.prev = _context55.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'beer\', 2.7], [\'bisquit\', 5.8]);\n            destination = new Map();\n            yieldable = koconut.mapKeysTo(destination, function (eachEntry) {\n              return eachEntry.key.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context55.next = 6;\n            return yieldable.process();\n\n          case 6:\n            expectedResultMap = new Map([[4, 2.7], [7, 5.8]]);\n            (0, _chai.expect)(destination).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context55.stop();\n        }\n      }\n    }, _callee55);\n  })));\n  it(_module.KoconutMap.prototype.mapNotNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee56() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee56$(_context56) {\n      while (1) {\n        switch (_context56.prev = _context56.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            yieldable = koconut.mapNotNull(function (eachEntry) {\n              if (eachEntry.key > 3) return eachEntry.key + eachEntry.value;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context56.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context56.sent;\n            (0, _chai.expect)(result).eqls([12, 15]);\n\n          case 7:\n          case "end":\n            return _context56.stop();\n        }\n      }\n    }, _callee56);\n  })));\n  it(_module.KoconutMap.prototype.mapNotNullTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee57() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee57$(_context57) {\n      while (1) {\n        switch (_context57.prev = _context57.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            destination = new Array();\n            yieldable = koconut.mapNotNullTo(destination, function (eachEntry) {\n              if (eachEntry.key > 3) return eachEntry.key + eachEntry.value;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context57.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([12, 15]);\n\n          case 7:\n          case "end":\n            return _context57.stop();\n        }\n      }\n    }, _callee57);\n  })));\n  it(_module.KoconutMap.prototype.mapTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee58() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee58$(_context58) {\n      while (1) {\n        switch (_context58.prev = _context58.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5).associate(function (eachElement) {\n              return [eachElement, eachElement * 2];\n            });\n            destination = new Array();\n            yieldable = koconut.mapTo(destination, function (eachEntry) {\n              return eachEntry.key + eachEntry.value;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context58.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([3, 6, 9, 12, 15]);\n\n          case 7:\n          case "end":\n            return _context58.stop();\n        }\n      }\n    }, _callee58);\n  })));\n  it(_module.KoconutMap.prototype.mapValues.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee59() {\n    var koconut, yieldable, result, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee59$(_context59) {\n      while (1) {\n        switch (_context59.prev = _context59.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'beverage\', 2.7], [\'meal\', 12.4]);\n            yieldable = koconut.mapValues(function (eachEntry) {\n              return "".concat(eachEntry.value, "$");\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context59.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context59.sent;\n            expectedResultMap = new Map([[\'beverage\', \'2.7$\'], [\'meal\', \'12.4$\']]);\n            (0, _chai.expect)(result).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context59.stop();\n        }\n      }\n    }, _callee59);\n  })));\n  it(_module.KoconutMap.prototype.mapValuesTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee60() {\n    var koconut, destination, yieldable, expectedResultMap;\n    return _regenerator["default"].wrap(function _callee60$(_context60) {\n      while (1) {\n        switch (_context60.prev = _context60.next) {\n          case 0:\n            koconut = _module.KoconutMap.of([\'beverage\', 2.7], [\'meal\', 12.4]);\n            destination = new Map();\n            yieldable = koconut.mapValuesTo(destination, function (eachEntry) {\n              return "".concat(eachEntry.value, "$");\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context60.next = 6;\n            return yieldable.process();\n\n          case 6:\n            expectedResultMap = new Map([[\'beverage\', \'2.7$\'], [\'meal\', \'12.4$\']]);\n            (0, _chai.expect)(destination).eqls(expectedResultMap);\n\n          case 8:\n          case "end":\n            return _context60.stop();\n        }\n      }\n    }, _callee60);\n  })));\n});\n\n//# sourceURL=webpack://koconut/./coverage/nodejs/KoconutMap.spec.js?')},"./coverage/nodejs/KoconutPrimitive.spec.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _chai = __webpack_require__(/*! chai */ "./node_modules/chai/index.js");\n\nvar _module = __webpack_require__(/*! ../../dist/module */ "./dist/module.js");\n\ndescribe("".concat(_module.KoconutPrimitive.name, " -- Processor"), function () {\n  it(_module.KoconutPrimitive.prototype["let"].name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n    var koconut, result;\n    return _regenerator["default"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            koconut = new _module.KoconutPrimitive(5);\n            (0, _chai.expect)(koconut).to.be.instanceOf(_module.KoconutPrimitive);\n            _context.next = 4;\n            return koconut["let"](function (result) {\n              return result + 2;\n            });\n\n          case 4:\n            result = _context.sent;\n            (0, _chai.expect)(result).to.be.eqls(7);\n\n          case 6:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n  it(_module.KoconutPrimitive.prototype.process.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n    var array, koconut;\n    return _regenerator["default"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            array = [1, 2, 3, 4, 5];\n            koconut = _module.KoconutArray.from(array);\n            (0, _chai.expect)(koconut).to.be.instanceOf(_module.KoconutArray);\n            _context2.next = 5;\n            return koconut.onEachIndexed(function (index, eachElement) {\n              (0, _chai.expect)(eachElement).to.be.equals(index + 1);\n            }).process();\n\n          case 5:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n  it(_module.KoconutPrimitive.prototype.also.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n    var koconut, result;\n    return _regenerator["default"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            koconut = _module.KoconutArray.of(1, 2, 3, 4, 5);\n            (0, _chai.expect)(koconut).to.be.instanceOf(_module.KoconutArray);\n            _context3.next = 4;\n            return koconut.also(function (result) {\n              result.push(6, 7, 8);\n            });\n\n          case 4:\n            result = _context3.sent;\n            (0, _chai.expect)(result).to.be.eqls([1, 2, 3, 4, 5, 6, 7, 8]);\n\n          case 6:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })));\n  it(_module.KoconutPrimitive.prototype.retrieve.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n    var koconut, result;\n    return _regenerator["default"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            koconut = new _module.KoconutPrimitive(5);\n            (0, _chai.expect)(koconut).to.be.instanceOf(_module.KoconutPrimitive);\n            _context4.next = 4;\n            return koconut.retrieve();\n\n          case 4:\n            result = _context4.sent;\n            (0, _chai.expect)(result).to.be.eqls(koconut);\n\n          case 6:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })));\n  it(_module.KoconutPrimitive.prototype["yield"].name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {\n    var koconut, result;\n    return _regenerator["default"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            koconut = new _module.KoconutPrimitive(5);\n            (0, _chai.expect)(koconut).to.be.instanceOf(_module.KoconutPrimitive);\n            _context5.next = 4;\n            return koconut["yield"]();\n\n          case 4:\n            result = _context5.sent;\n            (0, _chai.expect)(result).to.be.equals(5);\n\n          case 6:\n          case "end":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  })));\n});\n\n//# sourceURL=webpack://koconut/./coverage/nodejs/KoconutPrimitive.spec.js?')},"./coverage/nodejs/KoconutSequence.spec.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));\n\nvar _chai = __webpack_require__(/*! chai */ \"./node_modules/chai/index.js\");\n\nvar _module = __webpack_require__(/*! ../../dist/module */ \"./dist/module.js\");\n\nvar _TestDataClasses = __webpack_require__(/*! ./TestDataClasses */ \"./coverage/nodejs/TestDataClasses.js\");\n\ndescribe(\"\".concat(_module.KoconutSequence.name, \" -- Calculator\"), function () {\n  it(_module.KoconutSequence.prototype.count.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            koconut = _module.KoconutSequence.of(1, 2, 3, 4, 5);\n            yieldableCase1 = koconut.count();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context.sent;\n            (0, _chai.expect)(resultCase1).to.equals(5);\n            yieldableCase2 = koconut.count(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context.sent;\n            (0, _chai.expect)(resultCase2).to.equals(2);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n  it(_module.KoconutSequence.prototype.maxBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee2() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxBy(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context2.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context2.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500));\n            yieldableCase2 = koconut.maxBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context2.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context2.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxBy(function (eachElement) {\n              return eachElement;\n            });\n            _context2.prev = 14;\n            _context2.next = 17;\n            return yieldableCase3.process();\n\n          case 17:\n            _context2.next = 22;\n            break;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.t0 = _context2[\"catch\"](14);\n            (0, _chai.expect)(_context2.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[14, 19]]);\n  })));\n  it(_module.KoconutSequence.prototype.maxByOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee3() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxByOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context3.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context3.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500));\n            yieldableCase2 = koconut.maxByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context3.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context3.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context3.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context3.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })));\n  it(_module.KoconutSequence.prototype.maxOf.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee4() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxOf(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context4.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context4.sent;\n            (0, _chai.expect)(resultCase1).equals('iPhone -- June');\n            yieldableCase2 = koconut.maxOf(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context4.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context4.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000));\n\n          case 13:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })));\n  it(_module.KoconutSequence.prototype.maxOfOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee5() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxOfOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context5.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context5.sent;\n            (0, _chai.expect)(resultCase1).equals('iPhone -- June');\n            yieldableCase2 = koconut.maxOfOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context5.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context5.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price < 500;\n            }).maxOfOrNull(function (eachElement) {\n              return eachElement.price;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context5.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context5.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n\n          case 19:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  })));\n  it(_module.KoconutSequence.prototype.maxOfWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee6() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldable = koconut.maxOfWith(function (eachElement) {\n              return eachElement.name;\n            }, function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context6.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context6.sent;\n            (0, _chai.expect)(result).equals('Mac Book Air -- September');\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  })));\n  it(_module.KoconutSequence.prototype.maxOfWithOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee7() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldable = koconut.maxOfWithOrNull(function (eachElement) {\n              return eachElement.name;\n            }, function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context7.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context7.sent;\n            (0, _chai.expect)(result).equals('Mac Book Air -- September');\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  })));\n  it(_module.KoconutSequence.prototype.maxWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee8() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context8.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context8.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context8.prev = 9;\n            _context8.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            _context8.next = 17;\n            break;\n\n          case 14:\n            _context8.prev = 14;\n            _context8.t0 = _context8[\"catch\"](9);\n            (0, _chai.expect)(_context8.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[9, 14]]);\n  })));\n  it(_module.KoconutSequence.prototype.maxWithOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee9() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.maxWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context9.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context9.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  })));\n  it(_module.KoconutSequence.prototype.minBy.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee10() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3;\n    return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minBy(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context10.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase2 = koconut.minBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context10.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minBy(function (eachElement) {\n              return eachElement;\n            });\n            _context10.prev = 14;\n            _context10.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            _context10.next = 22;\n            break;\n\n          case 19:\n            _context10.prev = 19;\n            _context10.t0 = _context10[\"catch\"](14);\n            (0, _chai.expect)(_context10.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[14, 19]]);\n  })));\n  it(_module.KoconutSequence.prototype.minByOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee11() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minByOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context11.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context11.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase2 = koconut.minByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context11.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context11.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            _context11.next = 16;\n            return yieldableCase3[\"yield\"]();\n\n          case 16:\n            resultCase3 = _context11.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n\n          case 18:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  })));\n  it(_module.KoconutSequence.prototype.minOf.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee12() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minOf(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context12.sent;\n            (0, _chai.expect)(resultCase1).equals('Mac Book Air -- September');\n            yieldableCase2 = koconut.minOf(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context12.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n\n          case 13:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  })));\n  it(_module.KoconutSequence.prototype.minOfOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee13() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator[\"default\"].wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minOfOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context13.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context13.sent;\n            (0, _chai.expect)(resultCase1).equals('Mac Book Air -- September');\n            yieldableCase2 = koconut.minOfOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context13.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context13.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price < 500;\n            }).minOfOrNull(function (eachElement) {\n              return eachElement.price;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context13.next = 17;\n            return yieldableCase3[\"yield\"]();\n\n          case 17:\n            resultCase3 = _context13.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n\n          case 19:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  })));\n  it(_module.KoconutSequence.prototype.minOfWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee14() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldable = koconut.minOfWith(function (eachElement) {\n              return eachElement.name;\n            }, function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context14.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context14.sent;\n            (0, _chai.expect)(result).equals('iPhone -- June');\n\n          case 7:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  })));\n  it(_module.KoconutSequence.prototype.minOfWithOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee15() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldable = koconut.minOfWithOrNull(function (eachElement) {\n              return eachElement.name;\n            }, function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context15.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context15.sent;\n            (0, _chai.expect)(result).equals('iPhone -- June');\n\n          case 7:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, _callee15);\n  })));\n  it(_module.KoconutSequence.prototype.minWith.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee16() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator[\"default\"].wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context16.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context16.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context16.prev = 9;\n            _context16.next = 12;\n            return yieldableCase2[\"yield\"]();\n\n          case 12:\n            _context16.next = 17;\n            break;\n\n          case 14:\n            _context16.prev = 14;\n            _context16.t0 = _context16[\"catch\"](9);\n            (0, _chai.expect)(_context16.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee16, null, [[9, 14]]);\n  })));\n  it(_module.KoconutSequence.prototype.minWithOrNull.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee17() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator[\"default\"].wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            koconut = _module.KoconutSequence.from([new _TestDataClasses.ProductInfo('A-1', 'Mac Book Pro -- May', 2000), new _TestDataClasses.ProductInfo('A-2', 'Mac Book Air -- September', 1200), new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500)]);\n            yieldableCase1 = koconut.minWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 5;\n            return yieldableCase1[\"yield\"]();\n\n          case 5:\n            resultCase1 = _context17.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo('A-3', 'iPhone -- June', 1500));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 11;\n            return yieldableCase2[\"yield\"]();\n\n          case 11:\n            resultCase2 = _context17.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee17);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutSequence.name, \" -- Iterator\"), function () {\n  it(_module.KoconutSequence.prototype.forEach.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee18() {\n    var koconut, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee18$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            koconut = _module.KoconutSequence.of(1, 2, 3, 4, 5);\n            yieldable = koconut.forEach(function (eachElement) {\n              (0, _chai.expect)(eachElement).to.be.a('number');\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context18.next = 5;\n            return yieldable.process();\n\n          case 5:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee18);\n  })));\n  it(_module.KoconutSequence.prototype.forEachIndexed.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee19() {\n    var koconut, yieldable;\n    return _regenerator[\"default\"].wrap(function _callee19$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            koconut = _module.KoconutSequence.of(1, 2, 3, 4, 5);\n            yieldable = koconut.forEachIndexed(function (eachIndex, eachElement) {\n              (0, _chai.expect)(eachElement - eachIndex).equals(1);\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context19.next = 5;\n            return yieldable.process();\n\n          case 5:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee19);\n  })));\n});\ndescribe(\"\".concat(_module.KoconutSequence.name, \" -- Caster\"), function () {\n  it(_module.KoconutSequence.prototype.asArray.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee20() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee20$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            koconut = _module.KoconutSequence.of(1, 2, 3, 4, 5);\n            yieldable = koconut.asArray();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context20.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context20.sent;\n            (0, _chai.expect)(result).eqls([1, 2, 3, 4, 5]);\n\n          case 7:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _callee20);\n  })));\n  it(_module.KoconutSequence.prototype.asSet.name, (0, _asyncToGenerator2[\"default\"])(_regenerator[\"default\"].mark(function _callee21() {\n    var koconut, yieldable, result;\n    return _regenerator[\"default\"].wrap(function _callee21$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            koconut = _module.KoconutSequence.of(1, 1, 2, 2, 3, 3);\n            yieldable = koconut.asSet();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context21.next = 5;\n            return yieldable[\"yield\"]();\n\n          case 5:\n            result = _context21.sent;\n            (0, _chai.expect)(result).eqls(new Set([1, 2, 3]));\n\n          case 7:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, _callee21);\n  })));\n});\n\n//# sourceURL=webpack://koconut/./coverage/nodejs/KoconutSequence.spec.js?")},"./coverage/nodejs/KoconutSet.spec.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _chai = __webpack_require__(/*! chai */ "./node_modules/chai/index.js");\n\nvar _module = __webpack_require__(/*! ../../dist/module */ "./dist/module.js");\n\nvar _TestDataClasses = __webpack_require__(/*! ./TestDataClasses */ "./coverage/nodejs/TestDataClasses.js");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\n_module.KoconutDeprecation.isRunningOnDevUnitTesting = true;\ndescribe("".concat(_module.KoconutSet.name, " -- Creator"), function () {\n  it(_module.KoconutSet.from.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n    var koconut, result;\n    return _regenerator["default"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            koconut = _module.KoconutSet.from();\n            _context.next = 3;\n            return koconut["yield"]();\n\n          case 3:\n            result = _context.sent;\n            (0, _chai.expect)(result).eqls(new Set());\n\n          case 5:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n  it(_module.KoconutSet.generate.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n    var koconutCase1, resultCase1, koconutCase2;\n    return _regenerator["default"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.generate(5, function (index) {\n              return "".concat(index);\n            });\n            _context2.next = 3;\n            return koconutCase1["yield"]();\n\n          case 3:\n            resultCase1 = _context2.sent;\n            (0, _chai.expect)(resultCase1).to.be.eqls(new Set([\'0\', \'1\', \'2\', \'3\', \'4\']));\n            koconutCase2 = _module.KoconutSet.generate(-1, function (index) {\n              return "".concat(index);\n            });\n            _context2.prev = 6;\n            _context2.next = 9;\n            return koconutCase2.process();\n\n          case 9:\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2["catch"](6);\n            (0, _chai.expect)(_context2.t0).to.be.instanceOf(_module.KoconutInvalidArgumentException);\n\n          case 14:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[6, 11]]);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Processor"), function () {\n  it(_module.KoconutSet.prototype.retrieve.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            koconut = _module.KoconutSet.of(1, 2, 3, 4, 5);\n            _context3.next = 3;\n            return koconut.retrieve();\n\n          case 3:\n            yieldable = _context3.sent;\n            _context3.next = 6;\n            return yieldable["yield"]();\n\n          case 6:\n            result = _context3.sent;\n            (0, _chai.expect)(result).eqls(new Set([1, 2, 3, 4, 5]));\n\n          case 8:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Property Getter"), function () {\n  it(_module.KoconutSet.prototype.size.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.size();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context4.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context4.sent;\n            (0, _chai.expect)(result).to.equals(5);\n\n          case 7:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  })));\n  it(_module.KoconutSet.prototype.indices.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.indices();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context5.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context5.sent;\n            (0, _chai.expect)(result).to.eql([0, 1, 2, 3, 4]);\n\n          case 7:\n          case "end":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Accumulator"), function () {\n  it(_module.KoconutSet.prototype.fold.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.fold(1, function (acc, eachElement) {\n              return acc * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context6.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context6.sent;\n            (0, _chai.expect)(result).equals(120);\n\n          case 7:\n          case "end":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  })));\n  it(_module.KoconutSet.prototype.foldIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.foldIndexed(0, function (eachIndex, acc, eachElement) {\n              return acc + eachIndex + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context7.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context7.sent;\n            (0, _chai.expect)(result).equals(25);\n\n          case 7:\n          case "end":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Calculator"), function () {\n  it(_module.KoconutSet.prototype.count.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.count();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context8.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context8.sent;\n            (0, _chai.expect)(resultCase1).to.equals(5);\n            yieldableCase2 = koconut.count(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context8.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context8.sent;\n            (0, _chai.expect)(resultCase2).to.equals(2);\n\n          case 13:\n          case "end":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  })));\n  it(_module.KoconutSet.prototype.maxBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3;\n    return _regenerator["default"].wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.maxBy(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context9.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500));\n            yieldableCase2 = koconut.maxBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context9.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context9.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxBy(function (eachElement) {\n              return eachElement;\n            });\n            _context9.prev = 14;\n            _context9.next = 17;\n            return yieldableCase3.process();\n\n          case 17:\n            _context9.next = 22;\n            break;\n\n          case 19:\n            _context9.prev = 19;\n            _context9.t0 = _context9["catch"](14);\n            (0, _chai.expect)(_context9.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n          case "end":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[14, 19]]);\n  })));\n  it(_module.KoconutSet.prototype.maxByOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.maxByOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context10.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500));\n            yieldableCase2 = koconut.maxByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context10.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context10.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            resultCase3 = _context10.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n\n          case 19:\n          case "end":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  })));\n  it(_module.KoconutSet.prototype.maxOf.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.maxOf(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context11.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context11.sent;\n            (0, _chai.expect)(resultCase1).equals(\'iPhone -- June\');\n            yieldableCase2 = koconut.maxOf(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context11.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context11.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000));\n\n          case 13:\n          case "end":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  })));\n  it(_module.KoconutSet.prototype.maxOfOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.maxOfOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context12.sent;\n            (0, _chai.expect)(resultCase1).equals(\'iPhone -- June\');\n            yieldableCase2 = koconut.maxOfOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context12.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price < 500;\n            }).maxOfOrNull(function (eachElement) {\n              return eachElement.price;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context12.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            resultCase3 = _context12.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n\n          case 19:\n          case "end":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  })));\n  it(_module.KoconutSet.prototype.maxOfWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldable = koconut.maxOfWith(function (eachElement) {\n              return eachElement.name;\n            }, function (prev, rear) {\n              return prev.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context13.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context13.sent;\n            (0, _chai.expect)(result).equals(\'Mac Book Air -- September\');\n\n          case 7:\n          case "end":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  })));\n  it(_module.KoconutSet.prototype.maxOfWithOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldable = koconut.maxOfWithOrNull(function (eachElement) {\n              return eachElement.name;\n            }, function (prev, rear) {\n              return prev.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context14.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context14.sent;\n            (0, _chai.expect)(result).equals(\'Mac Book Air -- September\');\n\n          case 7:\n          case "end":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  })));\n  it(_module.KoconutSet.prototype.maxWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator["default"].wrap(function _callee15$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.maxWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context15.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context15.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context15.prev = 9;\n            _context15.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            _context15.next = 17;\n            break;\n\n          case 14:\n            _context15.prev = 14;\n            _context15.t0 = _context15["catch"](9);\n            (0, _chai.expect)(_context15.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case "end":\n            return _context15.stop();\n        }\n      }\n    }, _callee15, null, [[9, 14]]);\n  })));\n  it(_module.KoconutSet.prototype.maxWithOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee16$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.maxWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context16.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context16.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).maxWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context16.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context16.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context16.stop();\n        }\n      }\n    }, _callee16);\n  })));\n  it(_module.KoconutSet.prototype.minBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee17() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3;\n    return _regenerator["default"].wrap(function _callee17$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.minBy(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context17.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n            yieldableCase2 = koconut.minBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context17.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context17.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minBy(function (eachElement) {\n              return eachElement;\n            });\n            _context17.prev = 14;\n            _context17.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            _context17.next = 22;\n            break;\n\n          case 19:\n            _context17.prev = 19;\n            _context17.t0 = _context17["catch"](14);\n            (0, _chai.expect)(_context17.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n          case "end":\n            return _context17.stop();\n        }\n      }\n    }, _callee17, null, [[14, 19]]);\n  })));\n  it(_module.KoconutSet.prototype.minByOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee18() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee18$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.minByOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context18.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context18.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n            yieldableCase2 = koconut.minByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context18.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context18.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minByOrNull(function (eachElement) {\n              return eachElement;\n            });\n            _context18.next = 16;\n            return yieldableCase3["yield"]();\n\n          case 16:\n            resultCase3 = _context18.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n\n          case 18:\n          case "end":\n            return _context18.stop();\n        }\n      }\n    }, _callee18);\n  })));\n  it(_module.KoconutSet.prototype.minOf.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee19() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee19$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.minOf(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context19.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context19.sent;\n            (0, _chai.expect)(resultCase1).equals(\'Mac Book Air -- September\');\n            yieldableCase2 = koconut.minOf(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context19.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context19.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n\n          case 13:\n          case "end":\n            return _context19.stop();\n        }\n      }\n    }, _callee19);\n  })));\n  it(_module.KoconutSet.prototype.minOfOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee20() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee20$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.minOfOrNull(function (eachElement) {\n              return eachElement.name;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context20.sent;\n            (0, _chai.expect)(resultCase1).equals(\'Mac Book Air -- September\');\n            yieldableCase2 = koconut.minOfOrNull(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context20.sent;\n            (0, _chai.expect)(resultCase2).eqls(new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200));\n            yieldableCase3 = koconut.filter(function (eachElement) {\n              return eachElement.price < 500;\n            }).minOfOrNull(function (eachElement) {\n              return eachElement.price;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context20.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            resultCase3 = _context20.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n\n          case 19:\n          case "end":\n            return _context20.stop();\n        }\n      }\n    }, _callee20);\n  })));\n  it(_module.KoconutSet.prototype.minOfWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee21() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee21$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldable = koconut.minOfWith(function (eachElement) {\n              return eachElement.name;\n            }, function (prev, rear) {\n              return prev.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context21.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context21.sent;\n            (0, _chai.expect)(result).equals(\'iPhone -- June\');\n\n          case 7:\n          case "end":\n            return _context21.stop();\n        }\n      }\n    }, _callee21);\n  })));\n  it(_module.KoconutSet.prototype.minOfWithOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee22() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee22$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldable = koconut.minOfWithOrNull(function (eachElement) {\n              return eachElement.name;\n            }, function (prev, rear) {\n              return prev.length - rear.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context22.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context22.sent;\n            (0, _chai.expect)(result).equals(\'iPhone -- June\');\n\n          case 7:\n          case "end":\n            return _context22.stop();\n        }\n      }\n    }, _callee22);\n  })));\n  it(_module.KoconutSet.prototype.minWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee23() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2;\n    return _regenerator["default"].wrap(function _callee23$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.minWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context23.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context23.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context23.prev = 9;\n            _context23.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            _context23.next = 17;\n            break;\n\n          case 14:\n            _context23.prev = 14;\n            _context23.t0 = _context23["catch"](9);\n            (0, _chai.expect)(_context23.t0).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n          case "end":\n            return _context23.stop();\n        }\n      }\n    }, _callee23, null, [[9, 14]]);\n  })));\n  it(_module.KoconutSet.prototype.minWithOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee24() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee24$(_context24) {\n      while (1) {\n        switch (_context24.prev = _context24.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase1 = koconut.minWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context24.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context24.sent;\n            (0, _chai.expect)(resultCase1).eqls(new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500));\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement.price > 3000;\n            }).minWithOrNull(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context24.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context24.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context24.stop();\n        }\n      }\n    }, _callee24);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Caster"), function () {\n  it(_module.KoconutSet.prototype.asArray.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee25() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee25$(_context25) {\n      while (1) {\n        switch (_context25.prev = _context25.next) {\n          case 0:\n            koconut = _module.KoconutSet.of(1, 2, 3, 4, 5);\n            yieldable = koconut.asArray();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context25.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context25.sent;\n            (0, _chai.expect)(result).eqls([1, 2, 3, 4, 5]);\n\n          case 7:\n          case "end":\n            return _context25.stop();\n        }\n      }\n    }, _callee25);\n  })));\n  it(_module.KoconutSet.prototype.asSet.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee26() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee26$(_context26) {\n      while (1) {\n        switch (_context26.prev = _context26.next) {\n          case 0:\n            koconut = _module.KoconutSet.of(1, 1, 2, 2, 3, 3);\n            yieldable = koconut.asSet();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context26.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context26.sent;\n            (0, _chai.expect)(result).eqls(new Set([1, 2, 3]));\n\n          case 7:\n          case "end":\n            return _context26.stop();\n        }\n      }\n    }, _callee26);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Inspector"), function () {\n  it(_module.KoconutSet.prototype.all.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee27() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee27$(_context27) {\n      while (1) {\n        switch (_context27.prev = _context27.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.all(function (element) {\n              return element > 2;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context27.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context27.sent;\n            (0, _chai.expect)(resultCase1).to.equal(false);\n            yieldableCase2 = koconut.all(function (element) {\n              return element < 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context27.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context27.sent;\n            (0, _chai.expect)(resultCase2).to.equals(true);\n\n          case 13:\n          case "end":\n            return _context27.stop();\n        }\n      }\n    }, _callee27);\n  })));\n  it(_module.KoconutSet.prototype.any.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee28() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee28$(_context28) {\n      while (1) {\n        switch (_context28.prev = _context28.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.any(function (element) {\n              return element >= 4;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context28.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context28.sent;\n            (0, _chai.expect)(resultCase1).to.equals(true);\n            yieldableCase2 = koconut.any(function (element) {\n              return element > 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context28.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context28.sent;\n            (0, _chai.expect)(resultCase2).to.equals(false);\n\n          case 13:\n          case "end":\n            return _context28.stop();\n        }\n      }\n    }, _callee28);\n  })));\n  it(_module.KoconutSet.prototype.isEmpty.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee29() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee29$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            koconut = _module.KoconutSet.of(1, 2, 3, 4, 5);\n            yieldableCase1 = koconut.isEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context29.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context29.sent;\n            (0, _chai.expect)(resultCase1).equals(false);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).isEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context29.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context29.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 13:\n          case "end":\n            return _context29.stop();\n        }\n      }\n    }, _callee29);\n  })));\n  it(_module.KoconutSet.prototype.isNotEmpty.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee30() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee30$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            koconut = _module.KoconutSet.of(1, 2, 3, 4, 5);\n            yieldableCase1 = koconut.isNotEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context30.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context30.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).isNotEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context30.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context30.sent;\n            (0, _chai.expect)(resultCase2).equals(false);\n\n          case 13:\n          case "end":\n            return _context30.stop();\n        }\n      }\n    }, _callee30);\n  })));\n  it(_module.KoconutSet.prototype.isNullOrEmpty.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee31() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee31$(_context31) {\n      while (1) {\n        switch (_context31.prev = _context31.next) {\n          case 0:\n            koconut = _module.KoconutSet.of(1, 2, 3, 4, 5);\n            yieldableCase1 = koconut.isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context31.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context31.sent;\n            (0, _chai.expect)(resultCase1).equals(false);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context31.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context31.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 13:\n          case "end":\n            return _context31.stop();\n        }\n      }\n    }, _callee31);\n  })));\n  it(_module.KoconutSet.prototype.contains.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee32() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee32$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.contains(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context32.sent;\n            (0, _chai.expect)(resultCase1).to.equals(true);\n            yieldableCase2 = koconut.contains(6);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context32.sent;\n            (0, _chai.expect)(resultCase2).to.equals(false);\n            koconutCase3 = _module.KoconutArray.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase3 = koconutCase3.contains(new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\'));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutBoolean);\n            _context32.next = 18;\n            return yieldableCase3["yield"]();\n\n          case 18:\n            resultCase3 = _context32.sent;\n            (0, _chai.expect)(resultCase3).to.equal(true);\n\n          case 20:\n          case "end":\n            return _context32.stop();\n        }\n      }\n    }, _callee32);\n  })));\n  it(_module.KoconutSet.prototype.containsAll.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee33() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee33$(_context33) {\n      while (1) {\n        switch (_context33.prev = _context33.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abc\');\n            yieldableCase1 = koconut.containsAll(\'ab\');\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context33.sent;\n            (0, _chai.expect)(resultCase1).to.equals(true);\n            yieldableCase2 = koconut.containsAll(\'abcd\');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context33.sent;\n            (0, _chai.expect)(resultCase2).to.equals(false);\n            koconutCase3 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase3 = koconutCase3.containsAll([new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\')]);\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 18;\n            return yieldableCase3["yield"]();\n\n          case 18:\n            resultCase3 = _context33.sent;\n            (0, _chai.expect)(resultCase3).to.equals(true);\n            koconutCase4 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase4 = koconutCase4.containsAll([new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Steve\', \'Jobs\')]);\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutBoolean);\n            _context33.next = 25;\n            return yieldableCase4["yield"]();\n\n          case 25:\n            resultCase4 = _context33.sent;\n            (0, _chai.expect)(resultCase4).to.equals(false);\n\n          case 27:\n          case "end":\n            return _context33.stop();\n        }\n      }\n    }, _callee33);\n  })));\n  it(_module.KoconutSet.prototype.none.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee34() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee34$(_context34) {\n      while (1) {\n        switch (_context34.prev = _context34.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.none();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context34.sent;\n            (0, _chai.expect)(resultCase1).equals(false);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).none();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context34.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n            yieldableCase3 = koconut.none(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            resultCase3 = _context34.sent;\n            (0, _chai.expect)(resultCase3).equals(false);\n            yieldableCase4 = koconut.none(function (eachElement) {\n              return eachElement % 10 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutBoolean);\n            _context34.next = 23;\n            return yieldableCase4["yield"]();\n\n          case 23:\n            resultCase4 = _context34.sent;\n            (0, _chai.expect)(resultCase4).equals(true);\n\n          case 25:\n          case "end":\n            return _context34.stop();\n        }\n      }\n    }, _callee34);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Iterator"), function () {\n  it(_module.KoconutSet.prototype.forEach.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee35() {\n    var koconut, yieldable;\n    return _regenerator["default"].wrap(function _callee35$(_context35) {\n      while (1) {\n        switch (_context35.prev = _context35.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.forEach(function (eachElement) {\n              (0, _chai.expect)(eachElement).to.be.a(\'number\');\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context35.next = 5;\n            return yieldable.process();\n\n          case 5:\n          case "end":\n            return _context35.stop();\n        }\n      }\n    }, _callee35);\n  })));\n  it(_module.KoconutSet.prototype.forEachIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee36() {\n    var koconut, yieldable;\n    return _regenerator["default"].wrap(function _callee36$(_context36) {\n      while (1) {\n        switch (_context36.prev = _context36.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.forEachIndexed(function (eachIndex, eachElement) {\n              (0, _chai.expect)(eachElement - eachIndex).equals(1);\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context36.next = 5;\n            return yieldable.process();\n\n          case 5:\n          case "end":\n            return _context36.stop();\n        }\n      }\n    }, _callee36);\n  })));\n  it(_module.KoconutSet.prototype.onEach.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee37() {\n    var koconut, yieldable;\n    return _regenerator["default"].wrap(function _callee37$(_context37) {\n      while (1) {\n        switch (_context37.prev = _context37.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.onEach(function (eachElement) {\n              (0, _chai.expect)(eachElement).to.be.a(\'number\');\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context37.next = 5;\n            return yieldable.process();\n\n          case 5:\n          case "end":\n            return _context37.stop();\n        }\n      }\n    }, _callee37);\n  })));\n  it(_module.KoconutSet.prototype.onEachIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee38() {\n    var koconut, yieldable;\n    return _regenerator["default"].wrap(function _callee38$(_context38) {\n      while (1) {\n        switch (_context38.prev = _context38.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.onEachIndexed(function (eachIndex, eachElement) {\n              (0, _chai.expect)(eachElement - eachIndex).equals(1);\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context38.next = 5;\n            return yieldable.process();\n\n          case 5:\n          case "end":\n            return _context38.stop();\n        }\n      }\n    }, _callee38);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Manipulator"), function () {\n  it(_module.KoconutSet.prototype.distinct.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee39() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator["default"].wrap(function _callee39$(_context39) {\n      while (1) {\n        switch (_context39.prev = _context39.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from(\'aAbBcCaA\');\n            yieldableCase1 = koconutCase1.distinct();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context39.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context39.sent;\n            (0, _chai.expect)(Array.from(resultCase1).join(\'\')).equals(\'aAbBcC\');\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase2 = koconutCase2.distinct();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context39.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context39.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')];\n            (0, _chai.expect)(Array.from(resultCase2)).to.eql(expectedResultArrayCase2);\n\n          case 15:\n          case "end":\n            return _context39.stop();\n        }\n      }\n    }, _callee39);\n  })));\n  it(_module.KoconutSet.prototype.distinctBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee40() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator["default"].wrap(function _callee40$(_context40) {\n      while (1) {\n        switch (_context40.prev = _context40.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from(\'aAbBcCaA\');\n            yieldableCase1 = koconutCase1.distinctBy(function (element) {\n              return element.toUpperCase();\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context40.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context40.sent;\n            (0, _chai.expect)(Array.from(resultCase1).join(\'\')).equals(\'abc\');\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase2 = koconutCase2.distinctBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context40.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context40.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')];\n            (0, _chai.expect)(Array.from(resultCase2)).to.eql(expectedResultArrayCase2);\n\n          case 15:\n          case "end":\n            return _context40.stop();\n        }\n      }\n    }, _callee40);\n  })));\n  it(_module.KoconutSet.prototype.drop.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee41() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee41$(_context41) {\n      while (1) {\n        switch (_context41.prev = _context41.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'ABCDEFG\');\n            yieldable = koconut.drop(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context41.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context41.sent;\n            (0, _chai.expect)(Array.from(result).join(\'\')).equals(\'DEFG\');\n\n          case 7:\n          case "end":\n            return _context41.stop();\n        }\n      }\n    }, _callee41);\n  })));\n  it(_module.KoconutSet.prototype.dropLast.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee42() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee42$(_context42) {\n      while (1) {\n        switch (_context42.prev = _context42.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'ABCDEFG\');\n            yieldable = koconut.dropLast(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context42.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context42.sent;\n            (0, _chai.expect)(Array.from(result).join(\'\')).equals(\'ABCD\');\n\n          case 7:\n          case "end":\n            return _context42.stop();\n        }\n      }\n    }, _callee42);\n  })));\n  it(_module.KoconutSet.prototype.dropLastWhile.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee43() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee43$(_context43) {\n      while (1) {\n        switch (_context43.prev = _context43.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'ABCDEFG\');\n            yieldable = koconut.dropLastWhile(function (eachElement) {\n              return eachElement > \'C\';\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context43.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context43.sent;\n            (0, _chai.expect)(Array.from(result).join(\'\')).equals(\'ABC\');\n\n          case 7:\n          case "end":\n            return _context43.stop();\n        }\n      }\n    }, _callee43);\n  })));\n  it(_module.KoconutSet.prototype.dropWhile.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee44() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee44$(_context44) {\n      while (1) {\n        switch (_context44.prev = _context44.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'ABCDEFG\');\n            yieldable = koconut.dropWhile(function (eachElement) {\n              return eachElement < \'D\';\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context44.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context44.sent;\n            (0, _chai.expect)(Array.from(result).join(\'\')).equals(\'DEFG\');\n\n          case 7:\n          case "end":\n            return _context44.stop();\n        }\n      }\n    }, _callee44);\n  })));\n  it(_module.KoconutSet.prototype.filter.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee45() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee45$(_context45) {\n      while (1) {\n        switch (_context45.prev = _context45.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldable = koconut.filter(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context45.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context45.sent;\n            (0, _chai.expect)(result).eqls(new Set([2, 4, 6]));\n\n          case 7:\n          case "end":\n            return _context45.stop();\n        }\n      }\n    }, _callee45);\n  })));\n  it(_module.KoconutSet.prototype.filterNot.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee46() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee46$(_context46) {\n      while (1) {\n        switch (_context46.prev = _context46.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldable = koconut.filterNot(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context46.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context46.sent;\n            (0, _chai.expect)(result).eqls(new Set([1, 2, 4, 5, 7]));\n\n          case 7:\n          case "end":\n            return _context46.stop();\n        }\n      }\n    }, _callee46);\n  })));\n  it(_module.KoconutSet.prototype.filterTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee47() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee47$(_context47) {\n      while (1) {\n        switch (_context47.prev = _context47.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            destination = new Set();\n            yieldable = koconut.filterTo(destination, function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context47.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([2, 4, 6]));\n\n          case 7:\n          case "end":\n            return _context47.stop();\n        }\n      }\n    }, _callee47);\n  })));\n  it(_module.KoconutSet.prototype.filterNotTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee48() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee48$(_context48) {\n      while (1) {\n        switch (_context48.prev = _context48.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            destination = new Set();\n            yieldable = koconut.filterNotTo(destination, function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context48.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([1, 2, 4, 5, 7]));\n\n          case 7:\n          case "end":\n            return _context48.stop();\n        }\n      }\n    }, _callee48);\n  })));\n  it(_module.KoconutSet.prototype.filterIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee49() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee49$(_context49) {\n      while (1) {\n        switch (_context49.prev = _context49.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([0, 1, 2, 3, 4, 8, 6]);\n            yieldable = koconut.filterIndexed(function (eachIndex, eachElement) {\n              return eachIndex == eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context49.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context49.sent;\n            (0, _chai.expect)(result).eqls(new Set([0, 1, 2, 3, 4, 6]));\n\n          case 7:\n          case "end":\n            return _context49.stop();\n        }\n      }\n    }, _callee49);\n  })));\n  it(_module.KoconutSet.prototype.filterIndexedTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee50() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee50$(_context50) {\n      while (1) {\n        switch (_context50.prev = _context50.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([0, 1, 2, 3, 4, 8, 6]);\n            destination = new Set();\n            yieldable = koconut.filterIndexedTo(destination, function (eachIndex, eachElement) {\n              return eachIndex == eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context50.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([0, 1, 2, 3, 4, 6]));\n\n          case 7:\n          case "end":\n            return _context50.stop();\n        }\n      }\n    }, _callee50);\n  })));\n  it(_module.KoconutSet.prototype.filterNotNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee51() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee51$(_context51) {\n      while (1) {\n        switch (_context51.prev = _context51.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, null, 4]);\n            yieldable = koconut.filterNotNull();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context51.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context51.sent;\n            (0, _chai.expect)(result).eqls(new Set([1, 2, 4]));\n\n          case 7:\n          case "end":\n            return _context51.stop();\n        }\n      }\n    }, _callee51);\n  })));\n  it(_module.KoconutSet.prototype.filterNotNullTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee52() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee52$(_context52) {\n      while (1) {\n        switch (_context52.prev = _context52.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, null, 4]);\n            destination = new Set();\n            yieldable = koconut.filterNotNullTo(destination);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context52.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([1, 2, 4]));\n\n          case 7:\n          case "end":\n            return _context52.stop();\n        }\n      }\n    }, _callee52);\n  })));\n  it(_module.KoconutSet.prototype.sortedBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee53() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, expectedResultArrayCase3;\n    return _regenerator["default"].wrap(function _callee53$(_context53) {\n      while (1) {\n        switch (_context53.prev = _context53.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([\'aaa\', \'cc\', \'bbbb\']);\n            yieldableCase1 = koconutCase1.sortedBy(function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context53.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context53.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([\'cc\', \'aaa\', \'bbbb\']));\n            koconutCase2 = _module.KoconutSet.from(\'dcba\');\n            yieldableCase2 = koconutCase2.sortedBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context53.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context53.sent;\n            (0, _chai.expect)(resultCase2).eqls(new Set([\'a\', \'b\', \'c\', \'d\']));\n            koconutCase3 = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase3 = koconutCase3.sortedBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutSet);\n            _context53.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context53.sent;\n            expectedResultArrayCase3 = [new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500), new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000)];\n            (0, _chai.expect)(resultCase3).eqls(new Set(expectedResultArrayCase3));\n\n          case 22:\n          case "end":\n            return _context53.stop();\n        }\n      }\n    }, _callee53);\n  })));\n  it(_module.KoconutSet.prototype.sortedByDescending.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee54() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, expectedResultArrayCase3;\n    return _regenerator["default"].wrap(function _callee54$(_context54) {\n      while (1) {\n        switch (_context54.prev = _context54.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([\'aaa\', \'cc\', \'bbbb\']);\n            yieldableCase1 = koconutCase1.sortedByDescending(function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context54.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context54.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([\'bbbb\', \'aaa\', \'cc\']));\n            koconutCase2 = _module.KoconutSet.from(\'dcba\');\n            yieldableCase2 = koconutCase2.sortedByDescending(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context54.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context54.sent;\n            (0, _chai.expect)(resultCase2).eqls(new Set([\'d\', \'c\', \'b\', \'a\']));\n            koconutCase3 = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase3 = koconutCase3.sortedByDescending(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutSet);\n            _context54.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context54.sent;\n            expectedResultArrayCase3 = [new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200)];\n            (0, _chai.expect)(resultCase3).eqls(new Set(expectedResultArrayCase3));\n\n          case 22:\n          case "end":\n            return _context54.stop();\n        }\n      }\n    }, _callee54);\n  })));\n  it(_module.KoconutSet.prototype.sortedWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee55() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator["default"].wrap(function _callee55$(_context55) {\n      while (1) {\n        switch (_context55.prev = _context55.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([\'aaa\', \'cc\', \'bbbb\']);\n            yieldableCase1 = koconutCase1.sortedWith(function (front, rear) {\n              return front.length - rear.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context55.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context55.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([\'cc\', \'aaa\', \'bbbb\']));\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase2 = koconutCase2.sortedWith(function (front, rear) {\n              return front.name.length - rear.name.length;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context55.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context55.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500), new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200)];\n            (0, _chai.expect)(resultCase2).eqls(new Set(expectedResultArrayCase2));\n\n          case 15:\n          case "end":\n            return _context55.stop();\n        }\n      }\n    }, _callee55);\n  })));\n  it(_module.KoconutSet.prototype.take.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee56() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee56$(_context56) {\n      while (1) {\n        switch (_context56.prev = _context56.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcdefg\');\n            yieldable = koconut.take(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context56.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context56.sent;\n            (0, _chai.expect)(result).eqls(new Set([\'a\', \'b\', \'c\']));\n\n          case 7:\n          case "end":\n            return _context56.stop();\n        }\n      }\n    }, _callee56);\n  })));\n  it(_module.KoconutSet.prototype.takeLast.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee57() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee57$(_context57) {\n      while (1) {\n        switch (_context57.prev = _context57.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcdefg\');\n            yieldable = koconut.takeLast(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context57.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context57.sent;\n            (0, _chai.expect)(result).eqls(new Set([\'e\', \'f\', \'g\']));\n\n          case 7:\n          case "end":\n            return _context57.stop();\n        }\n      }\n    }, _callee57);\n  })));\n  it(_module.KoconutSet.prototype.takeLastWhile.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee58() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee58$(_context58) {\n      while (1) {\n        switch (_context58.prev = _context58.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcdefg\');\n            yieldable = koconut.takeLastWhile(function (eachElement) {\n              return eachElement > \'c\';\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context58.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context58.sent;\n            (0, _chai.expect)(result).eqls(new Set([\'d\', \'e\', \'f\', \'g\']));\n\n          case 7:\n          case "end":\n            return _context58.stop();\n        }\n      }\n    }, _callee58);\n  })));\n  it(_module.KoconutSet.prototype.takeWhile.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee59() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee59$(_context59) {\n      while (1) {\n        switch (_context59.prev = _context59.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcdefg\');\n            yieldable = koconut.takeWhile(function (eachElement) {\n              return eachElement < \'f\';\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context59.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context59.sent;\n            (0, _chai.expect)(result).eqls(new Set([\'a\', \'b\', \'c\', \'d\', \'e\']));\n\n          case 7:\n          case "end":\n            return _context59.stop();\n        }\n      }\n    }, _callee59);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Selector"), function () {\n  it(_module.KoconutSet.prototype.elementAt.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee60() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee60$(_context60) {\n      while (1) {\n        switch (_context60.prev = _context60.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3]);\n            yieldable = koconut.elementAt(0);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context60.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context60.sent;\n            (0, _chai.expect)(result).equals(1);\n\n          case 7:\n          case "end":\n            return _context60.stop();\n        }\n      }\n    }, _callee60);\n  })));\n  it(_module.KoconutSet.prototype.elementAtOrElse.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee61() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee61$(_context61) {\n      while (1) {\n        switch (_context61.prev = _context61.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3]);\n            yieldableCase1 = koconut.elementAtOrElse(0, function (index) {\n              return index + 1;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context61.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context61.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.elementAtOrElse(3, function (index) {\n              return index + 1;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context61.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context61.sent;\n            (0, _chai.expect)(resultCase2).equals(4);\n\n          case 13:\n          case "end":\n            return _context61.stop();\n        }\n      }\n    }, _callee61);\n  })));\n  it(_module.KoconutSet.prototype.elementAtOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee62() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee62$(_context62) {\n      while (1) {\n        switch (_context62.prev = _context62.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3]);\n            yieldableCase1 = koconut.elementAtOrNull(0);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context62.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context62.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.elementAtOrNull(3);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context62.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context62.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context62.stop();\n        }\n      }\n    }, _callee62);\n  })));\n  it(_module.KoconutSet.prototype.find.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee63() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee63$(_context63) {\n      while (1) {\n        switch (_context63.prev = _context63.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldable = koconut.find(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context63.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context63.sent;\n            (0, _chai.expect)(result).equals(2);\n\n          case 7:\n          case "end":\n            return _context63.stop();\n        }\n      }\n    }, _callee63);\n  })));\n  it(_module.KoconutSet.prototype.findLast.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee64() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee64$(_context64) {\n      while (1) {\n        switch (_context64.prev = _context64.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldable = koconut.findLast(function (eachElement) {\n              return eachElement % 2 == 1;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context64.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context64.sent;\n            (0, _chai.expect)(result).equals(7);\n\n          case 7:\n          case "end":\n            return _context64.stop();\n        }\n      }\n    }, _callee64);\n  })));\n  it(_module.KoconutSet.prototype.first.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee65() {\n    var koconutCase1, yieldableCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee65$(_context65) {\n      while (1) {\n        switch (_context65.prev = _context65.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconutCase1.filter(function (eachElement) {\n              return eachElement > 10;\n            }).first();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context65.prev = 3;\n            _context65.next = 6;\n            return yieldableCase1.process();\n\n          case 6:\n            _context65.next = 11;\n            break;\n\n          case 8:\n            _context65.prev = 8;\n            _context65.t0 = _context65["catch"](3);\n            (0, _chai.expect)(_context65.t0).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 11:\n            koconutCase2 = _module.KoconutSet.from(\'abc\');\n            yieldableCase2 = koconutCase2.first(function (eachElement) {\n              return eachElement > \'d\';\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context65.prev = 14;\n            _context65.next = 17;\n            return yieldableCase2.process();\n\n          case 17:\n            _context65.next = 22;\n            break;\n\n          case 19:\n            _context65.prev = 19;\n            _context65.t1 = _context65["catch"](14);\n            (0, _chai.expect)(_context65.t1).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n            koconutCase3 = _module.KoconutSet.from([1, 2, 3]);\n            yieldableCase3 = koconutCase3.first();\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context65.next = 27;\n            return yieldableCase3["yield"]();\n\n          case 27:\n            resultCase3 = _context65.sent;\n            (0, _chai.expect)(resultCase3).equals(1);\n            koconutCase4 = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase4 = koconutCase4.first(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context65.next = 34;\n            return yieldableCase4["yield"]();\n\n          case 34:\n            resultCase4 = _context65.sent;\n            (0, _chai.expect)(resultCase4).equals(3);\n\n          case 36:\n          case "end":\n            return _context65.stop();\n        }\n      }\n    }, _callee65, null, [[3, 8], [14, 19]]);\n  })));\n  it(_module.KoconutSet.prototype.firstOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee66() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee66$(_context66) {\n      while (1) {\n        switch (_context66.prev = _context66.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconutCase1.filter(function (eachElement) {\n              return eachElement > 10;\n            }).firstOrNull();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context66.sent;\n            (0, _chai.expect)(resultCase1).equals(null);\n            koconutCase2 = _module.KoconutSet.from(\'abc\');\n            yieldableCase2 = koconutCase2.firstOrNull(function (eachElement) {\n              return eachElement > \'d\';\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context66.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            koconutCase3 = _module.KoconutSet.from([1, 2, 3]);\n            yieldableCase3 = koconutCase3.firstOrNull();\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context66.sent;\n            (0, _chai.expect)(resultCase3).equals(1);\n            koconutCase4 = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase4 = koconutCase4.first(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context66.next = 26;\n            return yieldableCase4["yield"]();\n\n          case 26:\n            resultCase4 = _context66.sent;\n            (0, _chai.expect)(resultCase4).equals(3);\n\n          case 28:\n          case "end":\n            return _context66.stop();\n        }\n      }\n    }, _callee66);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Transformer"), function () {\n  it(_module.KoconutSet.prototype.associate.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee67() {\n    var koconut, expectedResultEntryArray, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee67$(_context67) {\n      while (1) {\n        switch (_context67.prev = _context67.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([\'Grace Hopper\', \'Jacob Bernoulli\', \'Johann Bernoulli\', \'Jinyoung Luvya\']);\n            expectedResultEntryArray = [[\'Hopper\', \'Grace\'], [\'Bernoulli\', \'Johann\'], [\'Luvya\', \'Jinyoung\']];\n            yieldableCase1 = koconut.associate(function (eachElement) {\n              var _eachElement$split = eachElement.split(\' \'),\n                  _eachElement$split2 = (0, _slicedToArray2["default"])(_eachElement$split, 2),\n                  firstName = _eachElement$split2[0],\n                  lastName = _eachElement$split2[1];\n\n              return [lastName, firstName];\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutMap);\n            _context67.next = 6;\n            return yieldableCase1["yield"]();\n\n          case 6:\n            resultCase1 = _context67.sent;\n            (0, _chai.expect)(Array.from(resultCase1.entries())).to.eql(expectedResultEntryArray);\n            yieldableCase2 = koconut.associate(function (eachElement) {\n              var _eachElement$split3 = eachElement.split(\' \'),\n                  _eachElement$split4 = (0, _slicedToArray2["default"])(_eachElement$split3, 2),\n                  firstName = _eachElement$split4[0],\n                  lastName = _eachElement$split4[1];\n\n              return new _module.Pair(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutMap);\n            _context67.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context67.sent;\n            (0, _chai.expect)(Array.from(resultCase2.entries())).to.eql(expectedResultEntryArray);\n            yieldableCase3 = koconut.associate(function (eachElement) {\n              var _eachElement$split5 = eachElement.split(\' \'),\n                  _eachElement$split6 = (0, _slicedToArray2["default"])(_eachElement$split5, 2),\n                  firstName = _eachElement$split6[0],\n                  lastName = _eachElement$split6[1];\n\n              return new _module.KoconutPair(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutMap);\n            _context67.next = 18;\n            return yieldableCase3["yield"]();\n\n          case 18:\n            resultCase3 = _context67.sent;\n            (0, _chai.expect)(Array.from(resultCase3.entries())).to.eql(expectedResultEntryArray);\n\n          case 20:\n          case "end":\n            return _context67.stop();\n        }\n      }\n    }, _callee67);\n  })));\n  it(_module.KoconutSet.prototype.associateBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee68() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, expectedResultEntryArrayCase2;\n    return _regenerator["default"].wrap(function _callee68$(_context68) {\n      while (1) {\n        switch (_context68.prev = _context68.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase1 = koconut.associateBy(function (eachElement) {\n              return eachElement.lastName;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutMap);\n            _context68.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context68.sent;\n            (0, _chai.expect)(resultCase1 === null || resultCase1 === void 0 ? void 0 : resultCase1.get(\'Hopper\')).to.eql(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(resultCase1 === null || resultCase1 === void 0 ? void 0 : resultCase1.get(\'Bernoulli\')).to.eql(new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'));\n            (0, _chai.expect)(resultCase1 === null || resultCase1 === void 0 ? void 0 : resultCase1.get(\'Luvya\')).to.eql(new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\'));\n            yieldableCase2 = koconut.associateBy(function (eachElement) {\n              return eachElement.lastName;\n            }, function (eachElement) {\n              return eachElement.firstName;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutMap);\n            _context68.next = 13;\n            return yieldableCase2["yield"]();\n\n          case 13:\n            resultCase2 = _context68.sent;\n            expectedResultEntryArrayCase2 = [[\'Hopper\', \'Grace\'], [\'Bernoulli\', \'Jacob\'], [\'Luvya\', \'Jinyoung\']];\n            (0, _chai.expect)(Array.from(resultCase2.entries())).to.eql(expectedResultEntryArrayCase2);\n\n          case 16:\n          case "end":\n            return _context68.stop();\n        }\n      }\n    }, _callee68);\n  })));\n  it(_module.KoconutSet.prototype.associateByTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee69() {\n    var koconut, destinationCase1, yieldableCase1, destinationCase2, yieldableCase2, expectedResultEntryArrayCase2;\n    return _regenerator["default"].wrap(function _callee69$(_context69) {\n      while (1) {\n        switch (_context69.prev = _context69.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            destinationCase1 = new Map();\n            yieldableCase1 = koconut.associateByTo(destinationCase1, function (eachElement) {\n              return eachElement.lastName;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context69.next = 6;\n            return yieldableCase1.process();\n\n          case 6:\n            (0, _chai.expect)(destinationCase1.get(\'Hopper\')).to.eql(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(destinationCase1.get(\'Bernoulli\')).to.eql(new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'));\n            (0, _chai.expect)(destinationCase1.get(\'Luvya\')).to.eql(new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\'));\n            destinationCase2 = new Map();\n            yieldableCase2 = koconut.associateByTo(destinationCase2, function (eachElement) {\n              return eachElement.lastName;\n            }, function (eachElement) {\n              return eachElement.firstName;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context69.next = 14;\n            return yieldableCase2.process();\n\n          case 14:\n            expectedResultEntryArrayCase2 = [[\'Hopper\', \'Grace\'], [\'Bernoulli\', \'Jacob\'], [\'Luvya\', \'Jinyoung\']];\n            (0, _chai.expect)(Array.from(destinationCase2.entries())).to.eql(expectedResultEntryArrayCase2);\n\n          case 16:\n          case "end":\n            return _context69.stop();\n        }\n      }\n    }, _callee69);\n  })));\n  it(_module.KoconutSet.prototype.associateTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee70() {\n    var koconut, expectedResultEntryArray, destinationCase1, yieldableCase1, destinationCase2, yieldableCase2, destinationCase3, yieldableCase3;\n    return _regenerator["default"].wrap(function _callee70$(_context70) {\n      while (1) {\n        switch (_context70.prev = _context70.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([\'Grace Hopper\', \'Jacob Bernoulli\', \'Johann Bernoulli\', \'Jinyoung Luvya\']);\n            expectedResultEntryArray = [[\'Hopper\', \'Grace\'], [\'Bernoulli\', \'Johann\'], [\'Luvya\', \'Jinyoung\']];\n            destinationCase1 = new Map();\n            yieldableCase1 = koconut.associateTo(destinationCase1, function (eachElement) {\n              var _eachElement$split7 = eachElement.split(\' \'),\n                  _eachElement$split8 = (0, _slicedToArray2["default"])(_eachElement$split7, 2),\n                  firstName = _eachElement$split8[0],\n                  lastName = _eachElement$split8[1];\n\n              return [lastName, firstName];\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context70.next = 7;\n            return yieldableCase1.process();\n\n          case 7:\n            (0, _chai.expect)(Array.from(destinationCase1.entries())).to.eql(expectedResultEntryArray);\n            destinationCase2 = new Map();\n            yieldableCase2 = koconut.associateTo(destinationCase2, function (eachElement) {\n              var _eachElement$split9 = eachElement.split(\' \'),\n                  _eachElement$split10 = (0, _slicedToArray2["default"])(_eachElement$split9, 2),\n                  firstName = _eachElement$split10[0],\n                  lastName = _eachElement$split10[1];\n\n              return new _module.Pair(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context70.next = 13;\n            return yieldableCase2.process();\n\n          case 13:\n            (0, _chai.expect)(Array.from(destinationCase2.entries())).to.eql(expectedResultEntryArray);\n            destinationCase3 = new Map();\n            yieldableCase3 = koconut.associateTo(destinationCase3, function (eachElement) {\n              var _eachElement$split11 = eachElement.split(\' \'),\n                  _eachElement$split12 = (0, _slicedToArray2["default"])(_eachElement$split11, 2),\n                  firstName = _eachElement$split12[0],\n                  lastName = _eachElement$split12[1];\n\n              return new _module.KoconutPair(lastName, firstName);\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutSet);\n            _context70.next = 19;\n            return yieldableCase3.process();\n\n          case 19:\n            (0, _chai.expect)(Array.from(destinationCase3.entries())).to.eql(expectedResultEntryArray);\n\n          case 20:\n          case "end":\n            return _context70.stop();\n        }\n      }\n    }, _callee70);\n  })));\n  it(_module.KoconutSet.prototype.associateWith.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee71() {\n    var koconut, yieldable, result, expectedResultEntryArray;\n    return _regenerator["default"].wrap(function _callee71$(_context71) {\n      while (1) {\n        switch (_context71.prev = _context71.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([\'a\', \'ab\', \'abc\', \'abcd\']);\n            yieldable = koconut.associateWith(function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutMap);\n            _context71.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context71.sent;\n            expectedResultEntryArray = [[\'a\', 1], [\'ab\', 2], [\'abc\', 3], [\'abcd\', 4]];\n            (0, _chai.expect)(Array.from(result.entries())).to.eql(expectedResultEntryArray);\n\n          case 8:\n          case "end":\n            return _context71.stop();\n        }\n      }\n    }, _callee71);\n  })));\n  it(_module.KoconutSet.prototype.associateWithTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee72() {\n    var koconut, destination, yieldable, expectedResultEntryArray;\n    return _regenerator["default"].wrap(function _callee72$(_context72) {\n      while (1) {\n        switch (_context72.prev = _context72.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([\'Grace Hopper\', \'Jacob Bernoulli\', \'Johann Bernoulli\', \'Jinyoung Luvya\']);\n            destination = new Map();\n            yieldable = koconut.associateWithTo(destination, function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context72.next = 6;\n            return yieldable.process();\n\n          case 6:\n            expectedResultEntryArray = [[\'Grace Hopper\', 12], [\'Jacob Bernoulli\', 15], [\'Johann Bernoulli\', 16], [\'Jinyoung Luvya\', 14]];\n            (0, _chai.expect)(Array.from(destination.entries())).to.eql(expectedResultEntryArray);\n\n          case 8:\n          case "end":\n            return _context72.stop();\n        }\n      }\n    }, _callee72);\n  })));\n  it(_module.KoconutSet.prototype.chunked.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee73() {\n    var koconut, yieldableCase1, resultCase1, expectedResultArrayCase1, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator["default"].wrap(function _callee73$(_context73) {\n      while (1) {\n        switch (_context73.prev = _context73.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'one two three four five six seven eight nine ten\'.split(\' \'));\n            yieldableCase1 = koconut.chunked(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context73.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context73.sent;\n            expectedResultArrayCase1 = [[\'one\', \'two\', \'three\'], [\'four\', \'five\', \'six\'], [\'seven\', \'eight\', \'nine\'], [\'ten\']];\n            (0, _chai.expect)(resultCase1).to.eql(expectedResultArrayCase1);\n            yieldableCase2 = koconut.chunked(3, function (eachElements) {\n              return eachElements.join(\' \');\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context73.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context73.sent;\n            expectedResultArrayCase2 = [\'one two three\', \'four five six\', \'seven eight nine\', \'ten\'];\n            (0, _chai.expect)(resultCase2).to.eql(expectedResultArrayCase2);\n\n          case 15:\n          case "end":\n            return _context73.stop();\n        }\n      }\n    }, _callee73);\n  })));\n  it(_module.KoconutSet.prototype.flatMap.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee74() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee74$(_context74) {\n      while (1) {\n        switch (_context74.prev = _context74.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([\'abc\', \'de\']);\n            yieldable = koconut.flatMap(function (eachElement) {\n              return eachElement.split(\'\');\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context74.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context74.sent;\n            (0, _chai.expect)(result).eqls([\'a\', \'b\', \'c\', \'d\', \'e\']);\n\n          case 7:\n          case "end":\n            return _context74.stop();\n        }\n      }\n    }, _callee74);\n  })));\n  it(_module.KoconutSet.prototype.flatMapIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee75() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee75$(_context75) {\n      while (1) {\n        switch (_context75.prev = _context75.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([\'abc\', \'def\', \'ghi\', \'jkl\']);\n            yieldable = koconut.flatMapIndexed(function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement.split(\'\');else return [];\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context75.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context75.sent;\n            (0, _chai.expect)(result).eqls([\'a\', \'b\', \'c\', \'g\', \'h\', \'i\']);\n\n          case 7:\n          case "end":\n            return _context75.stop();\n        }\n      }\n    }, _callee75);\n  })));\n  it(_module.KoconutSet.prototype.flatMapTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee76() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee76$(_context76) {\n      while (1) {\n        switch (_context76.prev = _context76.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([\'abc\', \'de\']);\n            destination = new Set();\n            yieldable = koconut.flatMapTo(destination, function (eachElement) {\n              return eachElement.split(\'\');\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context76.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([\'a\', \'b\', \'c\', \'d\', \'e\']));\n\n          case 7:\n          case "end":\n            return _context76.stop();\n        }\n      }\n    }, _callee76);\n  })));\n  it(_module.KoconutSet.prototype.flatMapIndexedTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee77() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee77$(_context77) {\n      while (1) {\n        switch (_context77.prev = _context77.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([\'abc\', \'def\', \'ghi\', \'jkl\']);\n            destination = new Array();\n            yieldable = koconut.flatMapIndexedTo(destination, function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement.split(\'\');else return [];\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context77.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls([\'a\', \'b\', \'c\', \'g\', \'h\', \'i\']);\n\n          case 7:\n          case "end":\n            return _context77.stop();\n        }\n      }\n    }, _callee77);\n  })));\n  it(_module.KoconutSet.prototype.groupBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee78() {\n    var koconutCase1, yieldableCase1, resultCase1, expectedResultEntryArrayCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultEntryArrayCase2;\n    return _regenerator["default"].wrap(function _callee78$(_context78) {\n      while (1) {\n        switch (_context78.prev = _context78.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([\'a\', \'abc\', \'ab\', \'def\', \'abcd\']);\n            yieldableCase1 = koconutCase1.groupBy(function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutMap);\n            _context78.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context78.sent;\n            expectedResultEntryArrayCase1 = [[1, [\'a\']], [3, [\'abc\', \'def\']], [2, [\'ab\']], [4, [\'abcd\']]];\n            (0, _chai.expect)(Array.from(resultCase1.entries())).eqls(expectedResultEntryArrayCase1);\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase2 = koconutCase2.groupBy(function (eachElement) {\n              return eachElement.lastName;\n            }, function (eachElement) {\n              return eachElement.firstName;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutMap);\n            _context78.next = 13;\n            return yieldableCase2["yield"]();\n\n          case 13:\n            resultCase2 = _context78.sent;\n            expectedResultEntryArrayCase2 = [[\'Hopper\', [\'Grace\']], [\'Bernoulli\', [\'Jacob\']], [\'Luvya\', [\'Jinyoung\']]];\n            (0, _chai.expect)(Array.from(resultCase2.entries())).eqls(expectedResultEntryArrayCase2);\n\n          case 16:\n          case "end":\n            return _context78.stop();\n        }\n      }\n    }, _callee78);\n  })));\n  it(_module.KoconutSet.prototype.groupByTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee79() {\n    var koconutCase1, destinationCase1, yieldableCase1, expectedResultEntryArrayCase1, koconutCase2, destinationCase2, yieldableCase2, expectedResultEntryArrayCase2;\n    return _regenerator["default"].wrap(function _callee79$(_context79) {\n      while (1) {\n        switch (_context79.prev = _context79.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([\'a\', \'abc\', \'ab\', \'def\', \'abcd\']);\n            destinationCase1 = new Map();\n            yieldableCase1 = koconutCase1.groupByTo(destinationCase1, function (eachElement) {\n              return eachElement.length;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context79.next = 6;\n            return yieldableCase1.process();\n\n          case 6:\n            expectedResultEntryArrayCase1 = [[1, [\'a\']], [3, [\'abc\', \'def\']], [2, [\'ab\']], [4, [\'abcd\']]];\n            (0, _chai.expect)(Array.from(destinationCase1.entries())).eqls(expectedResultEntryArrayCase1);\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            destinationCase2 = new Map();\n            yieldableCase2 = koconutCase2.groupByTo(destinationCase2, function (eachElement) {\n              return eachElement.lastName;\n            }, function (eachElement) {\n              return eachElement.firstName;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context79.next = 14;\n            return yieldableCase2.process();\n\n          case 14:\n            expectedResultEntryArrayCase2 = [[\'Hopper\', [\'Grace\']], [\'Bernoulli\', [\'Jacob\']], [\'Luvya\', [\'Jinyoung\']]];\n            (0, _chai.expect)(Array.from(destinationCase2.entries())).eqls(expectedResultEntryArrayCase2);\n\n          case 16:\n          case "end":\n            return _context79.stop();\n        }\n      }\n    }, _callee79);\n  })));\n  it(_module.KoconutSet.prototype.map.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee80() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee80$(_context80) {\n      while (1) {\n        switch (_context80.prev = _context80.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3]);\n            yieldable = koconut.map(function (eachElement) {\n              return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context80.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context80.sent;\n            (0, _chai.expect)(result).eqls([1, 4, 9]);\n\n          case 7:\n          case "end":\n            return _context80.stop();\n        }\n      }\n    }, _callee80);\n  })));\n  it(_module.KoconutSet.prototype.mapIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee81() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee81$(_context81) {\n      while (1) {\n        switch (_context81.prev = _context81.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3]);\n            yieldable = koconut.mapIndexed(function (eachIndex, eachElement) {\n              return eachIndex + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context81.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context81.sent;\n            (0, _chai.expect)(result).eqls([1, 3, 5]);\n\n          case 7:\n          case "end":\n            return _context81.stop();\n        }\n      }\n    }, _callee81);\n  })));\n  it(_module.KoconutSet.prototype.mapIndexedNotNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee82() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee82$(_context82) {\n      while (1) {\n        switch (_context82.prev = _context82.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.mapIndexedNotNull(function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement * eachElement;\n            });\n            _context82.next = 4;\n            return yieldable.process();\n\n          case 4:\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context82.next = 7;\n            return yieldable["yield"]();\n\n          case 7:\n            result = _context82.sent;\n            (0, _chai.expect)(result).eqls([1, 9, 25]);\n\n          case 9:\n          case "end":\n            return _context82.stop();\n        }\n      }\n    }, _callee82);\n  })));\n  it(_module.KoconutSet.prototype.mapIndexedNotNullTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee83() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee83$(_context83) {\n      while (1) {\n        switch (_context83.prev = _context83.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            destination = new Set();\n            yieldable = koconut.mapIndexedNotNullTo(destination, function (eachIndex, eachElement) {\n              if (eachIndex % 2 == 0) return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context83.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([1, 9, 25]));\n\n          case 7:\n          case "end":\n            return _context83.stop();\n        }\n      }\n    }, _callee83);\n  })));\n  it(_module.KoconutSet.prototype.mapIndexedTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee84() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee84$(_context84) {\n      while (1) {\n        switch (_context84.prev = _context84.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3]);\n            destination = new Set();\n            yieldable = koconut.mapIndexedTo(destination, function (eachIndex, eachElement) {\n              return eachIndex + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context84.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([1, 3, 5]));\n\n          case 7:\n          case "end":\n            return _context84.stop();\n        }\n      }\n    }, _callee84);\n  })));\n  it(_module.KoconutSet.prototype.mapNotNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee85() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee85$(_context85) {\n      while (1) {\n        switch (_context85.prev = _context85.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.mapNotNull(function (eachElement) {\n              if (eachElement % 2 == 0) return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context85.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context85.sent;\n            (0, _chai.expect)(result).eqls([4, 16]);\n\n          case 7:\n          case "end":\n            return _context85.stop();\n        }\n      }\n    }, _callee85);\n  })));\n  it(_module.KoconutSet.prototype.mapNotNullTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee86() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee86$(_context86) {\n      while (1) {\n        switch (_context86.prev = _context86.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            destination = new Set();\n            yieldable = koconut.mapNotNullTo(destination, function (eachElement) {\n              if (eachElement % 2 == 0) return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context86.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([4, 16]));\n\n          case 7:\n          case "end":\n            return _context86.stop();\n        }\n      }\n    }, _callee86);\n  })));\n  it(_module.KoconutSet.prototype.mapTo.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee87() {\n    var koconut, destination, yieldable;\n    return _regenerator["default"].wrap(function _callee87$(_context87) {\n      while (1) {\n        switch (_context87.prev = _context87.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3]);\n            destination = new Set();\n            yieldable = koconut.mapTo(destination, function (eachElement) {\n              return eachElement * eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context87.next = 6;\n            return yieldable.process();\n\n          case 6:\n            (0, _chai.expect)(destination).eqls(new Set([1, 4, 9]));\n\n          case 7:\n          case "end":\n            return _context87.stop();\n        }\n      }\n    }, _callee87);\n  })));\n});\ndescribe("".concat(_module.KoconutSet.name, " -- Function"), function () {\n  it(_module.KoconutSet.prototype.indexOf.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee88() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee88$(_context88) {\n      while (1) {\n        switch (_context88.prev = _context88.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.indexOf(2);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context88.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context88.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            koconutCase2 = _module.KoconutSet.from(\'abc\');\n            yieldableCase2 = koconutCase2.indexOf(\'d\');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context88.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context88.sent;\n            (0, _chai.expect)(resultCase2).equals(-1);\n            koconutCase3 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase3 = koconutCase3.indexOf(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context88.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context88.sent;\n            (0, _chai.expect)(resultCase3).equals(0);\n\n          case 21:\n          case "end":\n            return _context88.stop();\n        }\n      }\n    }, _callee88);\n  })));\n  it(_module.KoconutSet.prototype.indexOfFirst.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee89() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee89$(_context89) {\n      while (1) {\n        switch (_context89.prev = _context89.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconut.indexOfFirst(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context89.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context89.sent;\n            (0, _chai.expect)(resultCase1).equals(2);\n            yieldableCase2 = koconut.indexOfFirst(function (eachElement) {\n              return eachElement > 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context89.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context89.sent;\n            (0, _chai.expect)(resultCase2).equals(-1);\n\n          case 13:\n          case "end":\n            return _context89.stop();\n        }\n      }\n    }, _callee89);\n  })));\n  it(_module.KoconutSet.prototype.indexOfLast.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee90() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee90$(_context90) {\n      while (1) {\n        switch (_context90.prev = _context90.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconut.indexOfLast(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context90.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context90.sent;\n            (0, _chai.expect)(resultCase1).equals(5);\n            yieldableCase2 = koconut.indexOfLast(function (eachElement) {\n              return eachElement > 10;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context90.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context90.sent;\n            (0, _chai.expect)(resultCase2).equals(-1);\n\n          case 13:\n          case "end":\n            return _context90.stop();\n        }\n      }\n    }, _callee90);\n  })));\n  it(_module.KoconutSet.prototype.intersect.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee91() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee91$(_context91) {\n      while (1) {\n        switch (_context91.prev = _context91.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconutCase1.intersect([5, 6, 7, 8, 9]);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context91.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context91.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([5, 6, 7]));\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase2 = koconutCase2.intersect([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- April\', 2000), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- July\', 1500)]);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context91.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context91.sent;\n            (0, _chai.expect)(Array.from(resultCase2)).eqls([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n\n          case 14:\n          case "end":\n            return _context91.stop();\n        }\n      }\n    }, _callee91);\n  })));\n  it(_module.KoconutSet.prototype.isNotEmpty.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee92() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee92$(_context92) {\n      while (1) {\n        switch (_context92.prev = _context92.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.isNotEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context92.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context92.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement >= 10;\n            }).isNotEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context92.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context92.sent;\n            (0, _chai.expect)(resultCase2).equals(false);\n\n          case 13:\n          case "end":\n            return _context92.stop();\n        }\n      }\n    }, _callee92);\n  })));\n  it(_module.KoconutSet.prototype.isNullOrEmpty.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee93() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee93$(_context93) {\n      while (1) {\n        switch (_context93.prev = _context93.next) {\n          case 0:\n            koconutCase1 = new _module.KoconutSet();\n            yieldableCase1 = koconutCase1.isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context93.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context93.sent;\n            (0, _chai.expect)(resultCase1).equals(true);\n            koconutCase2 = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase2 = koconutCase2.filter(function (eachElement) {\n              return eachElement > 10;\n            }).isNullOrEmpty();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context93.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context93.sent;\n            (0, _chai.expect)(resultCase2).equals(true);\n\n          case 14:\n          case "end":\n            return _context93.stop();\n        }\n      }\n    }, _callee93);\n  })));\n  it(_module.KoconutSet.prototype.join.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee94() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3;\n    return _regenerator["default"].wrap(function _callee94$(_context94) {\n      while (1) {\n        switch (_context94.prev = _context94.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcdefg\');\n            yieldableCase1 = koconut.join();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context94.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context94.sent;\n            (0, _chai.expect)(resultCase1).equals(\'a, b, c, d, e, f, g\');\n            yieldableCase2 = koconut.join(\'•\', \'<\', \'>\');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context94.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context94.sent;\n            (0, _chai.expect)(resultCase2).equals(\'<a•b•c•d•e•f•g>\');\n            yieldableCase3 = koconut.join(\' - \', \'< \', \' >\', 5, \' ~\', function (eachElement) {\n              return eachElement.toUpperCase();\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context94.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            resultCase3 = _context94.sent;\n            (0, _chai.expect)(resultCase3).equals(\'< A - B - C - D - E ~ >\');\n\n          case 19:\n          case "end":\n            return _context94.stop();\n        }\n      }\n    }, _callee94);\n  })));\n  it(_module.KoconutSet.prototype.last.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee95() {\n    var koconutCase1, yieldableCase1, koconutCase2, yieldableCase2, koconutCase3, yieldableCase3, resultCase3, koconutCase4, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee95$(_context95) {\n      while (1) {\n        switch (_context95.prev = _context95.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconutCase1.filter(function (eachElement) {\n              return eachElement > 10;\n            }).last();\n            (0, _chai.expect)(koconutCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context95.prev = 3;\n            _context95.next = 6;\n            return yieldableCase1.process();\n\n          case 6:\n            _context95.next = 11;\n            break;\n\n          case 8:\n            _context95.prev = 8;\n            _context95.t0 = _context95["catch"](3);\n            (0, _chai.expect)(_context95.t0).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 11:\n            koconutCase2 = _module.KoconutSet.from(\'abc\');\n            yieldableCase2 = koconutCase2.last(function (eachElement) {\n              return eachElement > \'d\';\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context95.prev = 14;\n            _context95.next = 17;\n            return yieldableCase2.process();\n\n          case 17:\n            _context95.next = 22;\n            break;\n\n          case 19:\n            _context95.prev = 19;\n            _context95.t1 = _context95["catch"](14);\n            (0, _chai.expect)(_context95.t1).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 22:\n            koconutCase3 = _module.KoconutSet.from([1, 2, 3]);\n            yieldableCase3 = koconutCase3.last();\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context95.next = 27;\n            return yieldableCase3["yield"]();\n\n          case 27:\n            resultCase3 = _context95.sent;\n            (0, _chai.expect)(resultCase3).equals(3);\n            koconutCase4 = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase4 = koconutCase4.last(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context95.next = 34;\n            return yieldableCase4["yield"]();\n\n          case 34:\n            resultCase4 = _context95.sent;\n            (0, _chai.expect)(resultCase4).equals(6);\n\n          case 36:\n          case "end":\n            return _context95.stop();\n        }\n      }\n    }, _callee95, null, [[3, 8], [14, 19]]);\n  })));\n  it(_module.KoconutSet.prototype.lastIndexOf.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee96() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee96$(_context96) {\n      while (1) {\n        switch (_context96.prev = _context96.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 1, 2, 1, 2]);\n            yieldableCase1 = koconutCase1.lastIndexOf(1);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context96.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context96.sent;\n            (0, _chai.expect)(resultCase1).equals(0);\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase2 = koconutCase2.lastIndexOf(new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context96.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context96.sent;\n            (0, _chai.expect)(resultCase2).equals(1);\n\n          case 14:\n          case "end":\n            return _context96.stop();\n        }\n      }\n    }, _callee96);\n  })));\n  it(_module.KoconutSet.prototype.lastOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee97() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee97$(_context97) {\n      while (1) {\n        switch (_context97.prev = _context97.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).lastOrNull();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context97.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context97.sent;\n            (0, _chai.expect)(resultCase1).equals(null);\n            yieldableCase2 = koconut.lastOrNull();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context97.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context97.sent;\n            (0, _chai.expect)(resultCase2).equals(5);\n            yieldableCase3 = koconut.lastOrNull(function (eachElement) {\n              return eachElement > 10;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context97.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            resultCase3 = _context97.sent;\n            (0, _chai.expect)(resultCase3).equals(null);\n            yieldableCase4 = koconut.lastOrNull(function (eachElement) {\n              return eachElement % 3 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context97.next = 23;\n            return yieldableCase4["yield"]();\n\n          case 23:\n            resultCase4 = _context97.sent;\n            (0, _chai.expect)(resultCase4).equals(3);\n\n          case 25:\n          case "end":\n            return _context97.stop();\n        }\n      }\n    }, _callee97);\n  })));\n  it(_module.KoconutSet.prototype.minus.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee98() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, koconutCase3, yieldableCase3, resultCase3, expectedResultArrayCase3, koconutCase4, yieldableCase4, resultCase4, expectedResultArrayCase4;\n    return _regenerator["default"].wrap(function _callee98$(_context98) {\n      while (1) {\n        switch (_context98.prev = _context98.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.minus(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context98.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context98.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([1, 2, 4, 5]));\n            koconutCase2 = _module.KoconutSet.from(\'abcde\');\n            yieldableCase2 = koconutCase2.minus(\'abc\');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context98.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context98.sent;\n            (0, _chai.expect)(resultCase2).eqls(new Set(\'de\'.split(\'\')));\n            koconutCase3 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase3 = koconutCase3.minus(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutSet);\n            _context98.next = 19;\n            return yieldableCase3["yield"]();\n\n          case 19:\n            resultCase3 = _context98.sent;\n            expectedResultArrayCase3 = [new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')];\n            (0, _chai.expect)(resultCase3).eql(new Set(expectedResultArrayCase3));\n            koconutCase4 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase4 = koconutCase4.minus([new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\')]);\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutSet);\n            _context98.next = 27;\n            return yieldableCase4["yield"]();\n\n          case 27:\n            resultCase4 = _context98.sent;\n            expectedResultArrayCase4 = [new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')];\n            (0, _chai.expect)(resultCase4).eql(new Set(expectedResultArrayCase4));\n\n          case 30:\n          case "end":\n            return _context98.stop();\n        }\n      }\n    }, _callee98);\n  })));\n  it(_module.KoconutSet.prototype.minusElement.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee99() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator["default"].wrap(function _callee99$(_context99) {\n      while (1) {\n        switch (_context99.prev = _context99.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.minusElement(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context99.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context99.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([1, 2, 4, 5]));\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase2 = koconutCase2.minusElement(new _TestDataClasses.Person(\'Grace\', \'Hopper\'));\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context99.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context99.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')];\n            (0, _chai.expect)(resultCase2).eql(new Set(expectedResultArrayCase2));\n\n          case 15:\n          case "end":\n            return _context99.stop();\n        }\n      }\n    }, _callee99);\n  })));\n  it(_module.KoconutSet.prototype.partition.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee100() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee100$(_context100) {\n      while (1) {\n        switch (_context100.prev = _context100.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.partition(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPair);\n            _context100.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context100.sent;\n            (0, _chai.expect)(result).eqls(new _module.Pair(new Set([2, 4]), new Set([1, 3, 5])));\n\n          case 7:\n          case "end":\n            return _context100.stop();\n        }\n      }\n    }, _callee100);\n  })));\n  it(_module.KoconutSet.prototype.plus.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee101() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee101$(_context101) {\n      while (1) {\n        switch (_context101.prev = _context101.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.plus(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context101.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context101.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([1, 2, 3, 4, 5, 3]));\n            koconutCase2 = _module.KoconutSet.from(\'abcde\');\n            yieldableCase2 = koconutCase2.plus(\'abc\');\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context101.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context101.sent;\n            (0, _chai.expect)(resultCase2).eqls(new Set(\'abcdeabc\'.split(\'\')));\n\n          case 14:\n          case "end":\n            return _context101.stop();\n        }\n      }\n    }, _callee101);\n  })));\n  it(_module.KoconutSet.prototype.plusElement.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee102() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee102$(_context102) {\n      while (1) {\n        switch (_context102.prev = _context102.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.plusElement(3);\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context102.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context102.sent;\n            (0, _chai.expect)(result).eqls(new Set([1, 2, 3, 4, 5, 3]));\n\n          case 7:\n          case "end":\n            return _context102.stop();\n        }\n      }\n    }, _callee102);\n  })));\n  it(_module.KoconutSet.prototype.random.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee103() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee103$(_context103) {\n      while (1) {\n        switch (_context103.prev = _context103.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.random();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context103.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context103.sent;\n            _context103.t0 = _chai.expect;\n            _context103.next = 9;\n            return koconut["yield"]();\n\n          case 9:\n            _context103.t1 = _context103.sent.has(result);\n            (0, _context103.t0)(_context103.t1).equals(true);\n\n          case 11:\n          case "end":\n            return _context103.stop();\n        }\n      }\n    }, _callee103);\n  })));\n  it(_module.KoconutSet.prototype.randomOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee104() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee104$(_context104) {\n      while (1) {\n        switch (_context104.prev = _context104.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.randomOrNull();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context104.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context104.sent;\n            _context104.t0 = _chai.expect;\n            _context104.next = 9;\n            return koconut["yield"]();\n\n          case 9:\n            _context104.t1 = _context104.sent.has(resultCase1);\n            (0, _context104.t0)(_context104.t1).equals(true);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).randomOrNull();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context104.next = 15;\n            return yieldableCase2["yield"]();\n\n          case 15:\n            resultCase2 = _context104.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 17:\n          case "end":\n            return _context104.stop();\n        }\n      }\n    }, _callee104);\n  })));\n  it(_module.KoconutSet.prototype.reduce.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee105() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee105$(_context105) {\n      while (1) {\n        switch (_context105.prev = _context105.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldable = koconut.reduce(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context105.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context105.sent;\n            (0, _chai.expect)(result).equals(\'abcd\');\n\n          case 7:\n          case "end":\n            return _context105.stop();\n        }\n      }\n    }, _callee105);\n  })));\n  it(_module.KoconutSet.prototype.reduceIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee106() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee106$(_context106) {\n      while (1) {\n        switch (_context106.prev = _context106.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldable = koconut.reduceIndexed(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutPrimitive);\n            _context106.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context106.sent;\n            (0, _chai.expect)(result).equals(\'ab1c2d3\');\n\n          case 7:\n          case "end":\n            return _context106.stop();\n        }\n      }\n    }, _callee106);\n  })));\n  it(_module.KoconutSet.prototype.reduceIndexedOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee107() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee107$(_context107) {\n      while (1) {\n        switch (_context107.prev = _context107.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldableCase1 = koconut.reduceIndexedOrNull(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context107.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context107.sent;\n            (0, _chai.expect)(resultCase1).equals(\'ab1c2d3\');\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > \'e\';\n            }).reduceIndexedOrNull(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context107.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context107.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context107.stop();\n        }\n      }\n    }, _callee107);\n  })));\n  it(_module.KoconutSet.prototype.reduceOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee108() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee108$(_context108) {\n      while (1) {\n        switch (_context108.prev = _context108.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldableCase1 = koconut.reduceOrNull(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context108.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context108.sent;\n            (0, _chai.expect)(resultCase1).equals(\'abcd\');\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > \'e\';\n            }).reduceOrNull(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context108.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context108.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n\n          case 13:\n          case "end":\n            return _context108.stop();\n        }\n      }\n    }, _callee108);\n  })));\n  it(_module.KoconutSet.prototype.reversed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee109() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee109$(_context109) {\n      while (1) {\n        switch (_context109.prev = _context109.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldable = koconut.reversed();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context109.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context109.sent;\n            (0, _chai.expect)(result).eqls(new Set([5, 4, 3, 2, 1]));\n\n          case 7:\n          case "end":\n            return _context109.stop();\n        }\n      }\n    }, _callee109);\n  })));\n  it(_module.KoconutSet.prototype.runningFold.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee110() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee110$(_context110) {\n      while (1) {\n        switch (_context110.prev = _context110.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldable = koconut.runningFold(\'W\', function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context110.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context110.sent;\n            (0, _chai.expect)(result).eqls([\'W\', \'Wa\', \'Wab\', \'Wabc\', \'Wabcd\']);\n\n          case 7:\n          case "end":\n            return _context110.stop();\n        }\n      }\n    }, _callee110);\n  })));\n  it(_module.KoconutSet.prototype.runningFoldIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee111() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee111$(_context111) {\n      while (1) {\n        switch (_context111.prev = _context111.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldable = koconut.runningFoldIndexed(\'W\', function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context111.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context111.sent;\n            (0, _chai.expect)(result).eqls([\'W\', \'Wa0\', \'Wa0b1\', \'Wa0b1c2\', \'Wa0b1c2d3\']);\n\n          case 7:\n          case "end":\n            return _context111.stop();\n        }\n      }\n    }, _callee111);\n  })));\n  it(_module.KoconutSet.prototype.runningReduce.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee112() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee112$(_context112) {\n      while (1) {\n        switch (_context112.prev = _context112.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldable = koconut.runningReduce(function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context112.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context112.sent;\n            (0, _chai.expect)(result).eqls([\'a\', \'ab\', \'abc\', \'abcd\']);\n\n          case 7:\n          case "end":\n            return _context112.stop();\n        }\n      }\n    }, _callee112);\n  })));\n  it(_module.KoconutSet.prototype.runningReduceIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee113() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee113$(_context113) {\n      while (1) {\n        switch (_context113.prev = _context113.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldable = koconut.runningReduceIndexed(function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context113.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context113.sent;\n            (0, _chai.expect)(result).eqls([\'a\', \'ab1\', \'ab1c2\', \'ab1c2d3\']);\n\n          case 7:\n          case "end":\n            return _context113.stop();\n        }\n      }\n    }, _callee113);\n  })));\n  it(_module.KoconutSet.prototype.scan.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee114() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee114$(_context114) {\n      while (1) {\n        switch (_context114.prev = _context114.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldable = koconut.scan(\'W\', function (acc, eachElement) {\n              return acc + eachElement;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context114.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context114.sent;\n            (0, _chai.expect)(result).eqls([\'W\', \'Wa\', \'Wab\', \'Wabc\', \'Wabcd\']);\n\n          case 7:\n          case "end":\n            return _context114.stop();\n        }\n      }\n    }, _callee114);\n  })));\n  it(_module.KoconutSet.prototype.scanIndexed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee115() {\n    var koconut, yieldable, result;\n    return _regenerator["default"].wrap(function _callee115$(_context115) {\n      while (1) {\n        switch (_context115.prev = _context115.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcd\');\n            yieldable = koconut.scanIndexed(\'W\', function (eachIndex, acc, eachElement) {\n              return acc + eachElement + eachIndex;\n            });\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context115.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context115.sent;\n            (0, _chai.expect)(result).eqls([\'W\', \'Wa0\', \'Wa0b1\', \'Wa0b1c2\', \'Wa0b1c2d3\']);\n\n          case 7:\n          case "end":\n            return _context115.stop();\n        }\n      }\n    }, _callee115);\n  })));\n  it(_module.KoconutSet.prototype.shuffled.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee116() {\n    var koconut, yieldable, result, _iterator, _step, eachShuffledElement;\n\n    return _regenerator["default"].wrap(function _callee116$(_context116) {\n      while (1) {\n        switch (_context116.prev = _context116.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4]);\n            yieldable = koconut.shuffled();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutSet);\n            _context116.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context116.sent;\n            _iterator = _createForOfIteratorHelper(result);\n            _context116.prev = 7;\n\n            _iterator.s();\n\n          case 9:\n            if ((_step = _iterator.n()).done) {\n              _context116.next = 18;\n              break;\n            }\n\n            eachShuffledElement = _step.value;\n            _context116.t0 = _chai.expect;\n            _context116.next = 14;\n            return koconut["yield"]();\n\n          case 14:\n            _context116.t1 = _context116.sent.has(eachShuffledElement);\n            (0, _context116.t0)(_context116.t1).equals(true);\n\n          case 16:\n            _context116.next = 9;\n            break;\n\n          case 18:\n            _context116.next = 23;\n            break;\n\n          case 20:\n            _context116.prev = 20;\n            _context116.t2 = _context116["catch"](7);\n\n            _iterator.e(_context116.t2);\n\n          case 23:\n            _context116.prev = 23;\n\n            _iterator.f();\n\n            return _context116.finish(23);\n\n          case 26:\n          case "end":\n            return _context116.stop();\n        }\n      }\n    }, _callee116, null, [[7, 20, 23, 26]]);\n  })));\n  it(_module.KoconutSet.prototype.single.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee117() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, yieldableCase3, resultCase3, yieldableCase4, yieldableCase5;\n    return _regenerator["default"].wrap(function _callee117$(_context117) {\n      while (1) {\n        switch (_context117.prev = _context117.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.single();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context117.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).single();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.prev = 9;\n            _context117.next = 12;\n            return yieldableCase2.process();\n\n          case 12:\n            _context117.next = 17;\n            break;\n\n          case 14:\n            _context117.prev = 14;\n            _context117.t0 = _context117["catch"](9);\n            (0, _chai.expect)(_context117.t0).instanceOf(_module.KoconutNoSuchElementException);\n\n          case 17:\n            yieldableCase3 = koconut.single(function (eachElement) {\n              return eachElement % 5 == 0;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.next = 21;\n            return yieldableCase3["yield"]();\n\n          case 21:\n            resultCase3 = _context117.sent;\n            (0, _chai.expect)(resultCase3).equals(5);\n            yieldableCase4 = koconut.single(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.prev = 25;\n            _context117.next = 28;\n            return yieldableCase4.process();\n\n          case 28:\n            _context117.next = 33;\n            break;\n\n          case 30:\n            _context117.prev = 30;\n            _context117.t1 = _context117["catch"](25);\n            (0, _chai.expect)(_context117.t1).to.be.instanceOf(_module.KoconutConflictException);\n\n          case 33:\n            yieldableCase5 = koconut.single(function (eachElement) {\n              return eachElement % 10 == 0;\n            });\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutPrimitive);\n            _context117.prev = 35;\n            _context117.next = 38;\n            return yieldableCase5.process();\n\n          case 38:\n            _context117.next = 43;\n            break;\n\n          case 40:\n            _context117.prev = 40;\n            _context117.t2 = _context117["catch"](35);\n            (0, _chai.expect)(_context117.t2).to.be.instanceOf(_module.KoconutNoSuchElementException);\n\n          case 43:\n          case "end":\n            return _context117.stop();\n        }\n      }\n    }, _callee117, null, [[9, 14], [25, 30], [35, 40]]);\n  })));\n  it(_module.KoconutSet.prototype.singleOrNull.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee118() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4, yieldableCase5, resultCase5;\n    return _regenerator["default"].wrap(function _callee118$(_context118) {\n      while (1) {\n        switch (_context118.prev = _context118.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.singleOrNull();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context118.sent;\n            (0, _chai.expect)(resultCase1).equals(1);\n            yieldableCase2 = koconut.filter(function (eachElement) {\n              return eachElement > 10;\n            }).singleOrNull();\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context118.sent;\n            (0, _chai.expect)(resultCase2).equals(null);\n            yieldableCase3 = koconut.singleOrNull(function (eachElement) {\n              return eachElement % 5 == 0;\n            });\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            resultCase3 = _context118.sent;\n            (0, _chai.expect)(resultCase3).equals(5);\n            yieldableCase4 = koconut.singleOrNull(function (eachElement) {\n              return eachElement % 2 == 0;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 23;\n            return yieldableCase4["yield"]();\n\n          case 23:\n            resultCase4 = _context118.sent;\n            (0, _chai.expect)(resultCase4).equals(null);\n            yieldableCase5 = koconut.singleOrNull(function (eachElement) {\n              return eachElement % 10 == 0;\n            });\n            (0, _chai.expect)(yieldableCase5).to.be.instanceOf(_module.KoconutPrimitive);\n            _context118.next = 29;\n            return yieldableCase5["yield"]();\n\n          case 29:\n            resultCase5 = _context118.sent;\n            (0, _chai.expect)(resultCase5).equals(null);\n\n          case 31:\n          case "end":\n            return _context118.stop();\n        }\n      }\n    }, _callee118);\n  })));\n  it(_module.KoconutSet.prototype.subtract.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee119() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee119$(_context119) {\n      while (1) {\n        switch (_context119.prev = _context119.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.subtract([1, 3, 5]);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context119.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context119.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([2, 4]));\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase2 = koconutCase2.subtract([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\')]);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context119.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context119.sent;\n            (0, _chai.expect)(resultCase2).eqls(new Set([new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]));\n\n          case 14:\n          case "end":\n            return _context119.stop();\n        }\n      }\n    }, _callee119);\n  })));\n  it(_module.KoconutSet.prototype.sumBy.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee120() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee120$(_context120) {\n      while (1) {\n        switch (_context120.prev = _context120.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.sumBy(function (eachElement) {\n              return eachElement;\n            });\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutPrimitive);\n            _context120.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context120.sent;\n            (0, _chai.expect)(resultCase1).equals(15);\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.ProductInfo(\'A-1\', \'Mac Book Pro -- May\', 2000), new _TestDataClasses.ProductInfo(\'A-2\', \'Mac Book Air -- September\', 1200), new _TestDataClasses.ProductInfo(\'A-3\', \'iPhone -- June\', 1500)]);\n            yieldableCase2 = koconutCase2.sumBy(function (eachElement) {\n              return eachElement.price;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutPrimitive);\n            _context120.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context120.sent;\n            (0, _chai.expect)(resultCase2).equals(4700);\n\n          case 14:\n          case "end":\n            return _context120.stop();\n        }\n      }\n    }, _callee120);\n  })));\n  it(_module.KoconutSet.prototype.union.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee121() {\n    var koconutCase1, yieldableCase1, resultCase1, koconutCase2, yieldableCase2, resultCase2, expectedResultArrayCase2;\n    return _regenerator["default"].wrap(function _callee121$(_context121) {\n      while (1) {\n        switch (_context121.prev = _context121.next) {\n          case 0:\n            koconutCase1 = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconutCase1.union([4, 5, 6, 7, 8]);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutSet);\n            _context121.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context121.sent;\n            (0, _chai.expect)(resultCase1).eqls(new Set([1, 2, 3, 4, 5, 6, 7, 8]));\n            koconutCase2 = _module.KoconutSet.from([new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Johann\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\')]);\n            yieldableCase2 = koconutCase2.union([new _TestDataClasses.Person(\'Steve\', \'Jobs\'), new _TestDataClasses.Person(\'SangHun\', \'Luvya\')]);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutSet);\n            _context121.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context121.sent;\n            expectedResultArrayCase2 = [new _TestDataClasses.Person(\'Grace\', \'Hopper\'), new _TestDataClasses.Person(\'Jacob\', \'Bernoulli\'), new _TestDataClasses.Person(\'Jinyoung\', \'Luvya\'), new _TestDataClasses.Person(\'Steve\', \'Jobs\')];\n            (0, _chai.expect)(resultCase2).eqls(new Set(expectedResultArrayCase2));\n\n          case 15:\n          case "end":\n            return _context121.stop();\n        }\n      }\n    }, _callee121);\n  })));\n  it(_module.KoconutSet.prototype.windowed.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee122() {\n    var koconut, yieldableCase1, resultCase1, yieldableCase2, resultCase2, yieldableCase3, resultCase3, yieldableCase4, resultCase4;\n    return _regenerator["default"].wrap(function _callee122$(_context122) {\n      while (1) {\n        switch (_context122.prev = _context122.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5, 6, 7]);\n            yieldableCase1 = koconut.windowed(3);\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context122.sent;\n            (0, _chai.expect)(resultCase1).eqls([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7]]);\n            yieldableCase2 = koconut.windowed(3, 2);\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 11;\n            return yieldableCase2["yield"]();\n\n          case 11:\n            resultCase2 = _context122.sent;\n            (0, _chai.expect)(resultCase2).eqls([[1, 2, 3], [3, 4, 5], [5, 6, 7]]);\n            yieldableCase3 = koconut.windowed(3, 2, true);\n            (0, _chai.expect)(yieldableCase3).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 17;\n            return yieldableCase3["yield"]();\n\n          case 17:\n            resultCase3 = _context122.sent;\n            (0, _chai.expect)(resultCase3).eqls([[1, 2, 3], [3, 4, 5], [5, 6, 7], [7]]);\n            yieldableCase4 = koconut.windowed(3, 2, false, function (eachElements) {\n              var sum = 0;\n\n              var _iterator2 = _createForOfIteratorHelper(eachElements),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var eachElement = _step2.value;\n                  sum += eachElement;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              return sum;\n            });\n            (0, _chai.expect)(yieldableCase4).to.be.instanceOf(_module.KoconutArray);\n            _context122.next = 23;\n            return yieldableCase4["yield"]();\n\n          case 23:\n            resultCase4 = _context122.sent;\n            (0, _chai.expect)(resultCase4).eqls([6, 12, 18]);\n\n          case 25:\n          case "end":\n            return _context122.stop();\n        }\n      }\n    }, _callee122);\n  })));\n  it(_module.KoconutSet.prototype.withIndex.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee123() {\n    var koconut, yieldable, result, expectedResultEntryArray;\n    return _regenerator["default"].wrap(function _callee123$(_context123) {\n      while (1) {\n        switch (_context123.prev = _context123.next) {\n          case 0:\n            koconut = _module.KoconutSet.from(\'abcde\');\n            yieldable = koconut.withIndex();\n            (0, _chai.expect)(yieldable).to.be.instanceOf(_module.KoconutArray);\n            _context123.next = 5;\n            return yieldable["yield"]();\n\n          case 5:\n            result = _context123.sent;\n            expectedResultEntryArray = [new _module.Entry(0, \'a\'), new _module.Entry(1, \'b\'), new _module.Entry(2, \'c\'), new _module.Entry(3, \'d\'), new _module.Entry(4, \'e\')];\n            (0, _chai.expect)(result).eqls(expectedResultEntryArray);\n\n          case 8:\n          case "end":\n            return _context123.stop();\n        }\n      }\n    }, _callee123);\n  })));\n  it(_module.KoconutSet.prototype.zip.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee124() {\n    var koconut, yieldableCase1, resultCase1, expectedResultPairArrayCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee124$(_context124) {\n      while (1) {\n        switch (_context124.prev = _context124.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.zip(\'abcdefg\');\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context124.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context124.sent;\n            expectedResultPairArrayCase1 = [new _module.Pair(1, \'a\'), new _module.Pair(2, \'b\'), new _module.Pair(3, \'c\'), new _module.Pair(4, \'d\'), new _module.Pair(5, \'e\')];\n            (0, _chai.expect)(resultCase1).eqls(expectedResultPairArrayCase1);\n            yieldableCase2 = koconut.zip(\'abc\', function (eachElement, eachOtherElement) {\n              return eachElement + eachOtherElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context124.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context124.sent;\n            (0, _chai.expect)(resultCase2).eqls([\'1a\', \'2b\', \'3c\']);\n\n          case 14:\n          case "end":\n            return _context124.stop();\n        }\n      }\n    }, _callee124);\n  })));\n  it(_module.KoconutSet.prototype.zipWithNext.name, (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee125() {\n    var koconut, yieldableCase1, resultCase1, expectedResultPairArrayCase1, yieldableCase2, resultCase2;\n    return _regenerator["default"].wrap(function _callee125$(_context125) {\n      while (1) {\n        switch (_context125.prev = _context125.next) {\n          case 0:\n            koconut = _module.KoconutSet.from([1, 2, 3, 4, 5]);\n            yieldableCase1 = koconut.zipWithNext();\n            (0, _chai.expect)(yieldableCase1).to.be.instanceOf(_module.KoconutArray);\n            _context125.next = 5;\n            return yieldableCase1["yield"]();\n\n          case 5:\n            resultCase1 = _context125.sent;\n            expectedResultPairArrayCase1 = [new _module.Pair(1, 2), new _module.Pair(2, 3), new _module.Pair(3, 4), new _module.Pair(4, 5)];\n            (0, _chai.expect)(resultCase1).eqls(expectedResultPairArrayCase1);\n            yieldableCase2 = koconut.zipWithNext(function (eachFirstElement, eachSecondElement) {\n              return eachFirstElement * eachSecondElement;\n            });\n            (0, _chai.expect)(yieldableCase2).to.be.instanceOf(_module.KoconutArray);\n            _context125.next = 12;\n            return yieldableCase2["yield"]();\n\n          case 12:\n            resultCase2 = _context125.sent;\n            (0, _chai.expect)(resultCase2).eqls([2, 6, 12, 20]);\n\n          case 14:\n          case "end":\n            return _context125.stop();\n        }\n      }\n    }, _callee125);\n  })));\n});\n\n//# sourceURL=webpack://koconut/./coverage/nodejs/KoconutSet.spec.js?')},"./coverage/nodejs/TestDataClasses.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.Worker = exports.ProductInfo = exports.Person = exports.Dog = void 0;\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _module = __webpack_require__(/*! ../../dist/module */ "./dist/module.js");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n"use strict";\n\n_module.KoconutDeprecation.isRunningOnDevUnitTesting = true;\n\nvar Person = function () {\n  function Person(firstName, lastName) {\n    (0, _classCallCheck2["default"])(this, Person);\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n\n  (0, _createClass2["default"])(Person, [{\n    key: "equalsTo",\n    value: function equalsTo(other) {\n      return this.lastName == other.lastName;\n    }\n  }]);\n  return Person;\n}();\n\nexports.Person = Person;\n\nvar Dog = function () {\n  function Dog(name, age, id) {\n    (0, _classCallCheck2["default"])(this, Dog);\n    this.name = name;\n    this.age = age;\n    this.id = id;\n  }\n\n  (0, _createClass2["default"])(Dog, [{\n    key: "equalsTo",\n    value: function equalsTo(other) {\n      return new _module.KoconutBoolean(this.id == other.id);\n    }\n  }]);\n  return Dog;\n}();\n\nexports.Dog = Dog;\n\nvar Worker = function (_Person) {\n  (0, _inherits2["default"])(Worker, _Person);\n\n  var _super = _createSuper(Worker);\n\n  function Worker(firstName, lastName, pay) {\n    var _this;\n\n    (0, _classCallCheck2["default"])(this, Worker);\n    _this = _super.call(this, firstName, lastName);\n    _this.pay = pay;\n    return _this;\n  }\n\n  (0, _createClass2["default"])(Worker, [{\n    key: "compareTo",\n    value: function compareTo(other) {\n      return new _module.KoconutPrimitive(this.pay - other.pay);\n    }\n  }]);\n  return Worker;\n}(Person);\n\nexports.Worker = Worker;\n\nvar ProductInfo = function () {\n  function ProductInfo(id, name, price) {\n    (0, _classCallCheck2["default"])(this, ProductInfo);\n    this.id = id;\n    this.name = name;\n    this.price = price;\n  }\n\n  (0, _createClass2["default"])(ProductInfo, [{\n    key: "equalsTo",\n    value: function equalsTo(other) {\n      return this.id == other.id;\n    }\n  }, {\n    key: "compareTo",\n    value: function compareTo(other) {\n      return this.price - other.price;\n    }\n  }]);\n  return ProductInfo;\n}();\n\nexports.ProductInfo = ProductInfo;\n\n//# sourceURL=webpack://koconut/./coverage/nodejs/TestDataClasses.js?')},"./dist/components/KoconutOption.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutOption = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));\n\nvar _module = __webpack_require__(/*! ../module */ "./dist/module.js");\n\nvar KoconutOption = function () {\n  function KoconutOption() {\n    (0, _classCallCheck2["default"])(this, KoconutOption);\n  }\n\n  (0, _createClass2["default"])(KoconutOption, null, [{\n    key: "locale",\n    get: function get() {\n      if (this._locale == null) this.locale = _module.KoconutLocale.fromString(new Intl.DateTimeFormat().resolvedOptions().locale);\n      return this._locale;\n    },\n    set: function set(locale) {\n      this._locale = locale;\n    }\n  }]);\n  return KoconutOption;\n}();\n\nexports.KoconutOption = KoconutOption;\n(0, _defineProperty2["default"])(KoconutOption, "isDeprecationWarningEnabled", true);\n(0, _defineProperty2["default"])(KoconutOption, "doesDeprecationWarningShowCallStack", true);\n\n//# sourceURL=webpack://koconut/./dist/components/KoconutOption.js?')},"./dist/components/KoconutPrimitive.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutPrimitive = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));\n\nvar _module = __webpack_require__(/*! ../module */ "./dist/module.js");\n\n"use strict";\n\nvar KoconutPrimitive = function () {\n  function KoconutPrimitive() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    (0, _classCallCheck2["default"])(this, KoconutPrimitive);\n    (0, _defineProperty2["default"])(this, "isValidated", false);\n    this.data = data;\n  }\n\n  (0, _createClass2["default"])(KoconutPrimitive, [{\n    key: "setPrevYieldable",\n    value: function setPrevYieldable(prevYieldable) {\n      this.prevYieldable = prevYieldable;\n      return this;\n    }\n  }, {\n    key: "setProcessor",\n    value: function setProcessor(processor) {\n      this.processor = processor;\n      return this;\n    }\n  }, {\n    key: "validate",\n    value: function () {\n      var _validate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(data) {\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function validate(_x) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n  }, {\n    key: "process",\n    value: function () {\n      var _process = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.prevYieldable != null)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.prevYieldable["yield"]();\n\n              case 3:\n                this.data = _context2.sent;\n\n                if (!(!(this instanceof _module.KoconutSequence) && this.data instanceof _module.Sequence)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 7;\n                return this.data.done();\n\n              case 7:\n                if (!(this.processor != null)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 10;\n                return this.processor();\n\n              case 10:\n                this.data = _context2.sent;\n\n              case 11:\n                if (this.isValidated) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                _context2.next = 14;\n                return this.validate(this.data);\n\n              case 14:\n                this.isValidated = true;\n\n              case 15:\n                delete this.prevYieldable;\n                delete this.processor;\n\n              case 17:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function process() {\n        return _process.apply(this, arguments);\n      }\n\n      return process;\n    }()\n  }, {\n    key: "retrieve",\n    value: function () {\n      var _retrieve = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n        return _regenerator["default"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.process();\n\n              case 2:\n                return _context3.abrupt("return", this);\n\n              case 3:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function retrieve() {\n        return _retrieve.apply(this, arguments);\n      }\n\n      return retrieve;\n    }()\n  }, {\n    key: "yield",\n    value: function () {\n      var _yield2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n        return _regenerator["default"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.process();\n\n              case 2:\n                return _context4.abrupt("return", this.data);\n\n              case 3:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _yield() {\n        return _yield2.apply(this, arguments);\n      }\n\n      return _yield;\n    }()\n  }, {\n    key: "let",\n    value: function () {\n      var _let2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(block) {\n        return _regenerator["default"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.t0 = block;\n                _context5.next = 3;\n                return this["yield"]();\n\n              case 3:\n                _context5.t1 = _context5.sent;\n                _context5.next = 6;\n                return (0, _context5.t0)(_context5.t1);\n\n              case 6:\n                return _context5.abrupt("return", _context5.sent);\n\n              case 7:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _let(_x2) {\n        return _let2.apply(this, arguments);\n      }\n\n      return _let;\n    }()\n  }, {\n    key: "also",\n    value: function () {\n      var _also = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(block) {\n        return _regenerator["default"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.t0 = block;\n                _context6.next = 3;\n                return this["yield"]();\n\n              case 3:\n                _context6.t1 = _context6.sent;\n                _context6.next = 6;\n                return (0, _context6.t0)(_context6.t1);\n\n              case 6:\n                return _context6.abrupt("return", this.data);\n\n              case 7:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function also(_x3) {\n        return _also.apply(this, arguments);\n      }\n\n      return also;\n    }()\n  }]);\n  return KoconutPrimitive;\n}();\n\nexports.KoconutPrimitive = KoconutPrimitive;\n\n//# sourceURL=webpack://koconut/./dist/components/KoconutPrimitive.js?')},"./dist/components/callback/KoconutCallbacks.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n"use strict";\n\n//# sourceURL=webpack://koconut/./dist/components/callback/KoconutCallbacks.js?')},"./dist/components/container/KoconutIterable.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutIterable = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));\n\nvar _module = __webpack_require__(/*! ../../module */ "./dist/module.js");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar KoconutIterable = function (_KoconutPrimitive) {\n  (0, _inherits2["default"])(KoconutIterable, _KoconutPrimitive);\n\n  var _super = _createSuper(KoconutIterable);\n\n  function KoconutIterable() {\n    var _this;\n\n    (0, _classCallCheck2["default"])(this, KoconutIterable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "mSize", 0);\n    return _this;\n  }\n\n  (0, _createClass2["default"])(KoconutIterable, [{\n    key: "count",\n    value: function count() {\n      var _this2 = this;\n\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (predicate) predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n        var count, _iterator, _step, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                count = 0;\n                _iterator = _createForOfIteratorHelper(_this2.combinedDataWrapper);\n                _context.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 16;\n                  break;\n                }\n\n                eachCombinedDatum = _step.value;\n\n                if (predicate) {\n                  _context.next = 10;\n                  break;\n                }\n\n                count++;\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return predicate(eachCombinedDatum);\n\n              case 12:\n                if (!_context.sent) {\n                  _context.next = 14;\n                  break;\n                }\n\n                count++;\n\n              case 14:\n                _context.next = 4;\n                break;\n\n              case 16:\n                _context.next = 21;\n                break;\n\n              case 18:\n                _context.prev = 18;\n                _context.t0 = _context["catch"](2);\n\n                _iterator.e(_context.t0);\n\n              case 21:\n                _context.prev = 21;\n\n                _iterator.f();\n\n                return _context.finish(21);\n\n              case 24:\n                return _context.abrupt("return", count);\n\n              case 25:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 18, 21, 24]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxBy",\n    value: function maxBy(selector) {\n      var _this3 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _module.KoconutDeprecation.showDeprecationWarning(\'1.2.0\', this.maxByOrNull);\n\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n        var dataToReturn, lastComparableDatum, _iterator2, _step2, eachCombinedDatum, eachComparableDatum, shouldBeChanged, eachCompareResult, numberResult;\n\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dataToReturn = null;\n                lastComparableDatum = null;\n                _iterator2 = _createForOfIteratorHelper(_this3.combinedDataWrapper);\n                _context2.prev = 3;\n\n                _iterator2.s();\n\n              case 5:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                eachCombinedDatum = _step2.value;\n                _context2.next = 9;\n                return selector(eachCombinedDatum);\n\n              case 9:\n                eachComparableDatum = _context2.sent;\n                shouldBeChanged = lastComparableDatum == null;\n\n                if (shouldBeChanged) {\n                  _context2.next = 26;\n                  break;\n                }\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                eachCompareResult = eachComparableDatum.compareTo(lastComparableDatum);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                _context2.next = 18;\n                return eachCompareResult["yield"]();\n\n              case 18:\n                numberResult = _context2.sent;\n                _context2.next = 22;\n                break;\n\n              case 21:\n                numberResult = eachCompareResult;\n\n              case 22:\n                if (numberResult > 0) shouldBeChanged = true;\n                _context2.next = 26;\n                break;\n\n              case 25:\n                shouldBeChanged = lastComparableDatum < eachComparableDatum;\n\n              case 26:\n                if (shouldBeChanged) {\n                  dataToReturn = eachCombinedDatum;\n                  lastComparableDatum = eachComparableDatum;\n                }\n\n              case 27:\n                _context2.next = 5;\n                break;\n\n              case 29:\n                _context2.next = 34;\n                break;\n\n              case 31:\n                _context2.prev = 31;\n                _context2.t0 = _context2["catch"](3);\n\n                _iterator2.e(_context2.t0);\n\n              case 34:\n                _context2.prev = 34;\n\n                _iterator2.f();\n\n                return _context2.finish(34);\n\n              case 37:\n                if (!(dataToReturn == null)) {\n                  _context2.next = 39;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is empty");\n\n              case 39:\n                return _context2.abrupt("return", dataToReturn);\n\n              case 40:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 31, 34, 37]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxByOrNull",\n    value: function maxByOrNull(selector) {\n      var _this4 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n        var dataToReturn, lastComparableDatum, _iterator3, _step3, eachCombinedDatum, eachComparableDatum, shouldBeChanged, eachCompareResult, numberResult;\n\n        return _regenerator["default"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dataToReturn = null;\n                lastComparableDatum = null;\n                _iterator3 = _createForOfIteratorHelper(_this4.combinedDataWrapper);\n                _context3.prev = 3;\n\n                _iterator3.s();\n\n              case 5:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                eachCombinedDatum = _step3.value;\n                _context3.next = 9;\n                return selector(eachCombinedDatum);\n\n              case 9:\n                eachComparableDatum = _context3.sent;\n                shouldBeChanged = lastComparableDatum == null;\n\n                if (shouldBeChanged) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                eachCompareResult = eachComparableDatum.compareTo(lastComparableDatum);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                _context3.next = 18;\n                return eachCompareResult["yield"]();\n\n              case 18:\n                numberResult = _context3.sent;\n                _context3.next = 22;\n                break;\n\n              case 21:\n                numberResult = eachCompareResult;\n\n              case 22:\n                if (numberResult > 0) shouldBeChanged = true;\n                _context3.next = 26;\n                break;\n\n              case 25:\n                shouldBeChanged = lastComparableDatum < eachComparableDatum;\n\n              case 26:\n                if (shouldBeChanged) {\n                  dataToReturn = eachCombinedDatum;\n                  lastComparableDatum = eachComparableDatum;\n                }\n\n              case 27:\n                _context3.next = 5;\n                break;\n\n              case 29:\n                _context3.next = 34;\n                break;\n\n              case 31:\n                _context3.prev = 31;\n                _context3.t0 = _context3["catch"](3);\n\n                _iterator3.e(_context3.t0);\n\n              case 34:\n                _context3.prev = 34;\n\n                _iterator3.f();\n\n                return _context3.finish(34);\n\n              case 37:\n                return _context3.abrupt("return", dataToReturn);\n\n              case 38:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[3, 31, 34, 37]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxOf",\n    value: function maxOf(selector) {\n      var _this5 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n        var lastComparableDatumToReturn, _iterator4, _step4, eachCombinedDatum, eachComparableDatum, shouldBeChanged, eachCompareResult, numberResult;\n\n        return _regenerator["default"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                lastComparableDatumToReturn = null;\n                _iterator4 = _createForOfIteratorHelper(_this5.combinedDataWrapper);\n                _context4.prev = 2;\n\n                _iterator4.s();\n\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context4.next = 28;\n                  break;\n                }\n\n                eachCombinedDatum = _step4.value;\n                _context4.next = 8;\n                return selector(eachCombinedDatum);\n\n              case 8:\n                eachComparableDatum = _context4.sent;\n                shouldBeChanged = lastComparableDatumToReturn == null;\n\n                if (shouldBeChanged) {\n                  _context4.next = 25;\n                  break;\n                }\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n                  _context4.next = 24;\n                  break;\n                }\n\n                eachCompareResult = eachComparableDatum.compareTo(lastComparableDatumToReturn);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                _context4.next = 17;\n                return eachCompareResult["yield"]();\n\n              case 17:\n                numberResult = _context4.sent;\n                _context4.next = 21;\n                break;\n\n              case 20:\n                numberResult = eachCompareResult;\n\n              case 21:\n                if (numberResult > 0) shouldBeChanged = true;\n                _context4.next = 25;\n                break;\n\n              case 24:\n                shouldBeChanged = lastComparableDatumToReturn < eachComparableDatum;\n\n              case 25:\n                if (shouldBeChanged) lastComparableDatumToReturn = eachComparableDatum;\n\n              case 26:\n                _context4.next = 4;\n                break;\n\n              case 28:\n                _context4.next = 33;\n                break;\n\n              case 30:\n                _context4.prev = 30;\n                _context4.t0 = _context4["catch"](2);\n\n                _iterator4.e(_context4.t0);\n\n              case 33:\n                _context4.prev = 33;\n\n                _iterator4.f();\n\n                return _context4.finish(33);\n\n              case 36:\n                if (!(lastComparableDatumToReturn == null)) {\n                  _context4.next = 38;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is empty");\n\n              case 38:\n                return _context4.abrupt("return", lastComparableDatumToReturn);\n\n              case 39:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 30, 33, 36]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxOfOrNull",\n    value: function maxOfOrNull(selector) {\n      var _this6 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {\n        var lastComparableDatumToReturn, _iterator5, _step5, eachCombinedDatum, eachComparableDatum, shouldBeChanged, eachCompareResult, numberResult;\n\n        return _regenerator["default"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                lastComparableDatumToReturn = null;\n                _iterator5 = _createForOfIteratorHelper(_this6.combinedDataWrapper);\n                _context5.prev = 2;\n\n                _iterator5.s();\n\n              case 4:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context5.next = 28;\n                  break;\n                }\n\n                eachCombinedDatum = _step5.value;\n                _context5.next = 8;\n                return selector(eachCombinedDatum);\n\n              case 8:\n                eachComparableDatum = _context5.sent;\n                shouldBeChanged = lastComparableDatumToReturn == null;\n\n                if (shouldBeChanged) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n                  _context5.next = 24;\n                  break;\n                }\n\n                eachCompareResult = eachComparableDatum.compareTo(lastComparableDatumToReturn);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                _context5.next = 17;\n                return eachCompareResult["yield"]();\n\n              case 17:\n                numberResult = _context5.sent;\n                _context5.next = 21;\n                break;\n\n              case 20:\n                numberResult = eachCompareResult;\n\n              case 21:\n                if (numberResult > 0) shouldBeChanged = true;\n                _context5.next = 25;\n                break;\n\n              case 24:\n                shouldBeChanged = lastComparableDatumToReturn < eachComparableDatum;\n\n              case 25:\n                if (shouldBeChanged) lastComparableDatumToReturn = eachComparableDatum;\n\n              case 26:\n                _context5.next = 4;\n                break;\n\n              case 28:\n                _context5.next = 33;\n                break;\n\n              case 30:\n                _context5.prev = 30;\n                _context5.t0 = _context5["catch"](2);\n\n                _iterator5.e(_context5.t0);\n\n              case 33:\n                _context5.prev = 33;\n\n                _iterator5.f();\n\n                return _context5.finish(33);\n\n              case 36:\n                return _context5.abrupt("return", lastComparableDatumToReturn);\n\n              case 37:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[2, 30, 33, 36]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxOfWith",\n    value: function maxOfWith(selector, comparator) {\n      var _this7 = this;\n\n      var selectorThisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var comparatorThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      selector = selector.bind(selectorThisArg);\n      comparator = comparator.bind(comparatorThisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {\n        var lastComparableDatumToReturn, _iterator6, _step6, eachCombinedDatum, eachComparableDatum;\n\n        return _regenerator["default"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                lastComparableDatumToReturn = null;\n                _iterator6 = _createForOfIteratorHelper(_this7.combinedDataWrapper);\n                _context6.prev = 2;\n\n                _iterator6.s();\n\n              case 4:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                eachCombinedDatum = _step6.value;\n                _context6.next = 8;\n                return selector(eachCombinedDatum);\n\n              case 8:\n                eachComparableDatum = _context6.sent;\n                _context6.t0 = lastComparableDatumToReturn == null;\n\n                if (_context6.t0) {\n                  _context6.next = 15;\n                  break;\n                }\n\n                _context6.next = 13;\n                return comparator(lastComparableDatumToReturn, eachComparableDatum);\n\n              case 13:\n                _context6.t1 = _context6.sent;\n                _context6.t0 = _context6.t1 < 0;\n\n              case 15:\n                if (!_context6.t0) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                lastComparableDatumToReturn = eachComparableDatum;\n\n              case 17:\n                _context6.next = 4;\n                break;\n\n              case 19:\n                _context6.next = 24;\n                break;\n\n              case 21:\n                _context6.prev = 21;\n                _context6.t2 = _context6["catch"](2);\n\n                _iterator6.e(_context6.t2);\n\n              case 24:\n                _context6.prev = 24;\n\n                _iterator6.f();\n\n                return _context6.finish(24);\n\n              case 27:\n                if (!(lastComparableDatumToReturn == null)) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is empty");\n\n              case 29:\n                return _context6.abrupt("return", lastComparableDatumToReturn);\n\n              case 30:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[2, 21, 24, 27]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxOfWithOrNull",\n    value: function maxOfWithOrNull(selector, comparator) {\n      var _this8 = this;\n\n      var selectorThisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var comparatorThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      selector = selector.bind(selectorThisArg);\n      comparator = comparator.bind(comparatorThisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7() {\n        var lastComparableDatumToReturn, _iterator7, _step7, eachCombinedDatum, eachComparableDatum;\n\n        return _regenerator["default"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                lastComparableDatumToReturn = null;\n                _iterator7 = _createForOfIteratorHelper(_this8.combinedDataWrapper);\n                _context7.prev = 2;\n\n                _iterator7.s();\n\n              case 4:\n                if ((_step7 = _iterator7.n()).done) {\n                  _context7.next = 19;\n                  break;\n                }\n\n                eachCombinedDatum = _step7.value;\n                _context7.next = 8;\n                return selector(eachCombinedDatum);\n\n              case 8:\n                eachComparableDatum = _context7.sent;\n                _context7.t0 = lastComparableDatumToReturn == null;\n\n                if (_context7.t0) {\n                  _context7.next = 15;\n                  break;\n                }\n\n                _context7.next = 13;\n                return comparator(lastComparableDatumToReturn, eachComparableDatum);\n\n              case 13:\n                _context7.t1 = _context7.sent;\n                _context7.t0 = _context7.t1 < 0;\n\n              case 15:\n                if (!_context7.t0) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                lastComparableDatumToReturn = eachComparableDatum;\n\n              case 17:\n                _context7.next = 4;\n                break;\n\n              case 19:\n                _context7.next = 24;\n                break;\n\n              case 21:\n                _context7.prev = 21;\n                _context7.t2 = _context7["catch"](2);\n\n                _iterator7.e(_context7.t2);\n\n              case 24:\n                _context7.prev = 24;\n\n                _iterator7.f();\n\n                return _context7.finish(24);\n\n              case 27:\n                return _context7.abrupt("return", lastComparableDatumToReturn);\n\n              case 28:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[2, 21, 24, 27]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxWith",\n    value: function maxWith(comparator) {\n      var _this9 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      comparator = comparator.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8() {\n        var dataToReturn, _iterator8, _step8, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                dataToReturn = null;\n                _iterator8 = _createForOfIteratorHelper(_this9.combinedDataWrapper);\n                _context8.prev = 2;\n\n                _iterator8.s();\n\n              case 4:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context8.next = 16;\n                  break;\n                }\n\n                eachCombinedDatum = _step8.value;\n                _context8.t0 = dataToReturn == null;\n\n                if (_context8.t0) {\n                  _context8.next = 12;\n                  break;\n                }\n\n                _context8.next = 10;\n                return comparator(dataToReturn, eachCombinedDatum);\n\n              case 10:\n                _context8.t1 = _context8.sent;\n                _context8.t0 = _context8.t1 < 0;\n\n              case 12:\n                if (!_context8.t0) {\n                  _context8.next = 14;\n                  break;\n                }\n\n                dataToReturn = eachCombinedDatum;\n\n              case 14:\n                _context8.next = 4;\n                break;\n\n              case 16:\n                _context8.next = 21;\n                break;\n\n              case 18:\n                _context8.prev = 18;\n                _context8.t2 = _context8["catch"](2);\n\n                _iterator8.e(_context8.t2);\n\n              case 21:\n                _context8.prev = 21;\n\n                _iterator8.f();\n\n                return _context8.finish(21);\n\n              case 24:\n                if (!(dataToReturn == null)) {\n                  _context8.next = 26;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is empty");\n\n              case 26:\n                return _context8.abrupt("return", dataToReturn);\n\n              case 27:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[2, 18, 21, 24]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxWithOrNull",\n    value: function maxWithOrNull(comparator) {\n      var _this10 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      comparator = comparator.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9() {\n        var dataToReturn, _iterator9, _step9, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                dataToReturn = null;\n                _iterator9 = _createForOfIteratorHelper(_this10.combinedDataWrapper);\n                _context9.prev = 2;\n\n                _iterator9.s();\n\n              case 4:\n                if ((_step9 = _iterator9.n()).done) {\n                  _context9.next = 16;\n                  break;\n                }\n\n                eachCombinedDatum = _step9.value;\n                _context9.t0 = dataToReturn == null;\n\n                if (_context9.t0) {\n                  _context9.next = 12;\n                  break;\n                }\n\n                _context9.next = 10;\n                return comparator(dataToReturn, eachCombinedDatum);\n\n              case 10:\n                _context9.t1 = _context9.sent;\n                _context9.t0 = _context9.t1 < 0;\n\n              case 12:\n                if (!_context9.t0) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                dataToReturn = eachCombinedDatum;\n\n              case 14:\n                _context9.next = 4;\n                break;\n\n              case 16:\n                _context9.next = 21;\n                break;\n\n              case 18:\n                _context9.prev = 18;\n                _context9.t2 = _context9["catch"](2);\n\n                _iterator9.e(_context9.t2);\n\n              case 21:\n                _context9.prev = 21;\n\n                _iterator9.f();\n\n                return _context9.finish(21);\n\n              case 24:\n                return _context9.abrupt("return", dataToReturn);\n\n              case 25:\n              case "end":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[2, 18, 21, 24]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minBy",\n    value: function minBy(selector) {\n      var _this11 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _module.KoconutDeprecation.showDeprecationWarning(\'1.2.0\', this.minByOrNull);\n\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10() {\n        var dataToReturn, lastComparableDatum, _iterator10, _step10, eachCombinedDatum, eachComparableDatum, shouldBeChanged, eachCompareResult, numberResult;\n\n        return _regenerator["default"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                dataToReturn = null;\n                lastComparableDatum = null;\n                _iterator10 = _createForOfIteratorHelper(_this11.combinedDataWrapper);\n                _context10.prev = 3;\n\n                _iterator10.s();\n\n              case 5:\n                if ((_step10 = _iterator10.n()).done) {\n                  _context10.next = 29;\n                  break;\n                }\n\n                eachCombinedDatum = _step10.value;\n                _context10.next = 9;\n                return selector(eachCombinedDatum);\n\n              case 9:\n                eachComparableDatum = _context10.sent;\n                shouldBeChanged = lastComparableDatum == null;\n\n                if (shouldBeChanged) {\n                  _context10.next = 26;\n                  break;\n                }\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n                  _context10.next = 25;\n                  break;\n                }\n\n                eachCompareResult = eachComparableDatum.compareTo(lastComparableDatum);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context10.next = 21;\n                  break;\n                }\n\n                _context10.next = 18;\n                return eachCompareResult["yield"]();\n\n              case 18:\n                numberResult = _context10.sent;\n                _context10.next = 22;\n                break;\n\n              case 21:\n                numberResult = eachCompareResult;\n\n              case 22:\n                if (numberResult < 0) shouldBeChanged = true;\n                _context10.next = 26;\n                break;\n\n              case 25:\n                shouldBeChanged = lastComparableDatum > eachComparableDatum;\n\n              case 26:\n                if (shouldBeChanged) {\n                  dataToReturn = eachCombinedDatum;\n                  lastComparableDatum = eachComparableDatum;\n                }\n\n              case 27:\n                _context10.next = 5;\n                break;\n\n              case 29:\n                _context10.next = 34;\n                break;\n\n              case 31:\n                _context10.prev = 31;\n                _context10.t0 = _context10["catch"](3);\n\n                _iterator10.e(_context10.t0);\n\n              case 34:\n                _context10.prev = 34;\n\n                _iterator10.f();\n\n                return _context10.finish(34);\n\n              case 37:\n                if (!(dataToReturn == null)) {\n                  _context10.next = 39;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is empty");\n\n              case 39:\n                return _context10.abrupt("return", dataToReturn);\n\n              case 40:\n              case "end":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[3, 31, 34, 37]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minByOrNull",\n    value: function minByOrNull(selector) {\n      var _this12 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11() {\n        var dataToReturn, lastComparableDatum, _iterator11, _step11, eachCombinedDatum, eachComparableDatum, shouldBeChanged, eachCompareResult, numberResult;\n\n        return _regenerator["default"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                dataToReturn = null;\n                lastComparableDatum = null;\n                _iterator11 = _createForOfIteratorHelper(_this12.combinedDataWrapper);\n                _context11.prev = 3;\n\n                _iterator11.s();\n\n              case 5:\n                if ((_step11 = _iterator11.n()).done) {\n                  _context11.next = 29;\n                  break;\n                }\n\n                eachCombinedDatum = _step11.value;\n                _context11.next = 9;\n                return selector(eachCombinedDatum);\n\n              case 9:\n                eachComparableDatum = _context11.sent;\n                shouldBeChanged = lastComparableDatum == null;\n\n                if (shouldBeChanged) {\n                  _context11.next = 26;\n                  break;\n                }\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n                  _context11.next = 25;\n                  break;\n                }\n\n                eachCompareResult = eachComparableDatum.compareTo(lastComparableDatum);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context11.next = 21;\n                  break;\n                }\n\n                _context11.next = 18;\n                return eachCompareResult["yield"]();\n\n              case 18:\n                numberResult = _context11.sent;\n                _context11.next = 22;\n                break;\n\n              case 21:\n                numberResult = eachCompareResult;\n\n              case 22:\n                if (numberResult < 0) shouldBeChanged = true;\n                _context11.next = 26;\n                break;\n\n              case 25:\n                shouldBeChanged = lastComparableDatum > eachComparableDatum;\n\n              case 26:\n                if (shouldBeChanged) {\n                  dataToReturn = eachCombinedDatum;\n                  lastComparableDatum = eachComparableDatum;\n                }\n\n              case 27:\n                _context11.next = 5;\n                break;\n\n              case 29:\n                _context11.next = 34;\n                break;\n\n              case 31:\n                _context11.prev = 31;\n                _context11.t0 = _context11["catch"](3);\n\n                _iterator11.e(_context11.t0);\n\n              case 34:\n                _context11.prev = 34;\n\n                _iterator11.f();\n\n                return _context11.finish(34);\n\n              case 37:\n                return _context11.abrupt("return", dataToReturn);\n\n              case 38:\n              case "end":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, null, [[3, 31, 34, 37]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minOf",\n    value: function minOf(selector) {\n      var _this13 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12() {\n        var lastComparableDatumToReturn, _iterator12, _step12, eachCombinedDatum, eachComparableDatum, shouldBeChanged, eachCompareResult, numberResult;\n\n        return _regenerator["default"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                lastComparableDatumToReturn = null;\n                _iterator12 = _createForOfIteratorHelper(_this13.combinedDataWrapper);\n                _context12.prev = 2;\n\n                _iterator12.s();\n\n              case 4:\n                if ((_step12 = _iterator12.n()).done) {\n                  _context12.next = 28;\n                  break;\n                }\n\n                eachCombinedDatum = _step12.value;\n                _context12.next = 8;\n                return selector(eachCombinedDatum);\n\n              case 8:\n                eachComparableDatum = _context12.sent;\n                shouldBeChanged = lastComparableDatumToReturn == null;\n\n                if (shouldBeChanged) {\n                  _context12.next = 25;\n                  break;\n                }\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n                  _context12.next = 24;\n                  break;\n                }\n\n                eachCompareResult = eachComparableDatum.compareTo(lastComparableDatumToReturn);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context12.next = 20;\n                  break;\n                }\n\n                _context12.next = 17;\n                return eachCompareResult["yield"]();\n\n              case 17:\n                numberResult = _context12.sent;\n                _context12.next = 21;\n                break;\n\n              case 20:\n                numberResult = eachCompareResult;\n\n              case 21:\n                if (numberResult < 0) shouldBeChanged = true;\n                _context12.next = 25;\n                break;\n\n              case 24:\n                shouldBeChanged = lastComparableDatumToReturn > eachComparableDatum;\n\n              case 25:\n                if (shouldBeChanged) lastComparableDatumToReturn = eachComparableDatum;\n\n              case 26:\n                _context12.next = 4;\n                break;\n\n              case 28:\n                _context12.next = 33;\n                break;\n\n              case 30:\n                _context12.prev = 30;\n                _context12.t0 = _context12["catch"](2);\n\n                _iterator12.e(_context12.t0);\n\n              case 33:\n                _context12.prev = 33;\n\n                _iterator12.f();\n\n                return _context12.finish(33);\n\n              case 36:\n                if (!(lastComparableDatumToReturn == null)) {\n                  _context12.next = 38;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is empty");\n\n              case 38:\n                return _context12.abrupt("return", lastComparableDatumToReturn);\n\n              case 39:\n              case "end":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, null, [[2, 30, 33, 36]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minOfOrNull",\n    value: function minOfOrNull(selector) {\n      var _this14 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13() {\n        var lastComparableDatumToReturn, _iterator13, _step13, eachCombinedDatum, eachComparableDatum, shouldBeChanged, eachCompareResult, numberResult;\n\n        return _regenerator["default"].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                lastComparableDatumToReturn = null;\n                _iterator13 = _createForOfIteratorHelper(_this14.combinedDataWrapper);\n                _context13.prev = 2;\n\n                _iterator13.s();\n\n              case 4:\n                if ((_step13 = _iterator13.n()).done) {\n                  _context13.next = 28;\n                  break;\n                }\n\n                eachCombinedDatum = _step13.value;\n                _context13.next = 8;\n                return selector(eachCombinedDatum);\n\n              case 8:\n                eachComparableDatum = _context13.sent;\n                shouldBeChanged = lastComparableDatumToReturn == null;\n\n                if (shouldBeChanged) {\n                  _context13.next = 25;\n                  break;\n                }\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n                  _context13.next = 24;\n                  break;\n                }\n\n                eachCompareResult = eachComparableDatum.compareTo(lastComparableDatumToReturn);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context13.next = 20;\n                  break;\n                }\n\n                _context13.next = 17;\n                return eachCompareResult["yield"]();\n\n              case 17:\n                numberResult = _context13.sent;\n                _context13.next = 21;\n                break;\n\n              case 20:\n                numberResult = eachCompareResult;\n\n              case 21:\n                if (numberResult < 0) shouldBeChanged = true;\n                _context13.next = 25;\n                break;\n\n              case 24:\n                shouldBeChanged = lastComparableDatumToReturn > eachComparableDatum;\n\n              case 25:\n                if (shouldBeChanged) lastComparableDatumToReturn = eachComparableDatum;\n\n              case 26:\n                _context13.next = 4;\n                break;\n\n              case 28:\n                _context13.next = 33;\n                break;\n\n              case 30:\n                _context13.prev = 30;\n                _context13.t0 = _context13["catch"](2);\n\n                _iterator13.e(_context13.t0);\n\n              case 33:\n                _context13.prev = 33;\n\n                _iterator13.f();\n\n                return _context13.finish(33);\n\n              case 36:\n                return _context13.abrupt("return", lastComparableDatumToReturn);\n\n              case 37:\n              case "end":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, null, [[2, 30, 33, 36]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minOfWith",\n    value: function minOfWith(selector, comparator) {\n      var _this15 = this;\n\n      var selectorThisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var comparatorThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      selector = selector.bind(selectorThisArg);\n      comparator = comparator.bind(comparatorThisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14() {\n        var lastComparableDatumToReturn, _iterator14, _step14, eachCombinedDatum, eachComparableDatum;\n\n        return _regenerator["default"].wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                lastComparableDatumToReturn = null;\n                _iterator14 = _createForOfIteratorHelper(_this15.combinedDataWrapper);\n                _context14.prev = 2;\n\n                _iterator14.s();\n\n              case 4:\n                if ((_step14 = _iterator14.n()).done) {\n                  _context14.next = 19;\n                  break;\n                }\n\n                eachCombinedDatum = _step14.value;\n                _context14.next = 8;\n                return selector(eachCombinedDatum);\n\n              case 8:\n                eachComparableDatum = _context14.sent;\n                _context14.t0 = lastComparableDatumToReturn == null;\n\n                if (_context14.t0) {\n                  _context14.next = 15;\n                  break;\n                }\n\n                _context14.next = 13;\n                return comparator(lastComparableDatumToReturn, eachComparableDatum);\n\n              case 13:\n                _context14.t1 = _context14.sent;\n                _context14.t0 = _context14.t1 > 0;\n\n              case 15:\n                if (!_context14.t0) {\n                  _context14.next = 17;\n                  break;\n                }\n\n                lastComparableDatumToReturn = eachComparableDatum;\n\n              case 17:\n                _context14.next = 4;\n                break;\n\n              case 19:\n                _context14.next = 24;\n                break;\n\n              case 21:\n                _context14.prev = 21;\n                _context14.t2 = _context14["catch"](2);\n\n                _iterator14.e(_context14.t2);\n\n              case 24:\n                _context14.prev = 24;\n\n                _iterator14.f();\n\n                return _context14.finish(24);\n\n              case 27:\n                if (!(lastComparableDatumToReturn == null)) {\n                  _context14.next = 29;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is empty");\n\n              case 29:\n                return _context14.abrupt("return", lastComparableDatumToReturn);\n\n              case 30:\n              case "end":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, null, [[2, 21, 24, 27]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minOfWithOrNull",\n    value: function minOfWithOrNull(selector, comparator) {\n      var _this16 = this;\n\n      var selectorThisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var comparatorThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      selector = selector.bind(selectorThisArg);\n      comparator = comparator.bind(comparatorThisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15() {\n        var lastComparableDatumToReturn, _iterator15, _step15, eachCombinedDatum, eachComparableDatum;\n\n        return _regenerator["default"].wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                lastComparableDatumToReturn = null;\n                _iterator15 = _createForOfIteratorHelper(_this16.combinedDataWrapper);\n                _context15.prev = 2;\n\n                _iterator15.s();\n\n              case 4:\n                if ((_step15 = _iterator15.n()).done) {\n                  _context15.next = 19;\n                  break;\n                }\n\n                eachCombinedDatum = _step15.value;\n                _context15.next = 8;\n                return selector(eachCombinedDatum);\n\n              case 8:\n                eachComparableDatum = _context15.sent;\n                _context15.t0 = lastComparableDatumToReturn == null;\n\n                if (_context15.t0) {\n                  _context15.next = 15;\n                  break;\n                }\n\n                _context15.next = 13;\n                return comparator(lastComparableDatumToReturn, eachComparableDatum);\n\n              case 13:\n                _context15.t1 = _context15.sent;\n                _context15.t0 = _context15.t1 > 0;\n\n              case 15:\n                if (!_context15.t0) {\n                  _context15.next = 17;\n                  break;\n                }\n\n                lastComparableDatumToReturn = eachComparableDatum;\n\n              case 17:\n                _context15.next = 4;\n                break;\n\n              case 19:\n                _context15.next = 24;\n                break;\n\n              case 21:\n                _context15.prev = 21;\n                _context15.t2 = _context15["catch"](2);\n\n                _iterator15.e(_context15.t2);\n\n              case 24:\n                _context15.prev = 24;\n\n                _iterator15.f();\n\n                return _context15.finish(24);\n\n              case 27:\n                return _context15.abrupt("return", lastComparableDatumToReturn);\n\n              case 28:\n              case "end":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, null, [[2, 21, 24, 27]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minWith",\n    value: function minWith(comparator) {\n      var _this17 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      comparator = comparator.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16() {\n        var dataToReturn, _iterator16, _step16, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                dataToReturn = null;\n                _iterator16 = _createForOfIteratorHelper(_this17.combinedDataWrapper);\n                _context16.prev = 2;\n\n                _iterator16.s();\n\n              case 4:\n                if ((_step16 = _iterator16.n()).done) {\n                  _context16.next = 16;\n                  break;\n                }\n\n                eachCombinedDatum = _step16.value;\n                _context16.t0 = dataToReturn == null;\n\n                if (_context16.t0) {\n                  _context16.next = 12;\n                  break;\n                }\n\n                _context16.next = 10;\n                return comparator(dataToReturn, eachCombinedDatum);\n\n              case 10:\n                _context16.t1 = _context16.sent;\n                _context16.t0 = _context16.t1 > 0;\n\n              case 12:\n                if (!_context16.t0) {\n                  _context16.next = 14;\n                  break;\n                }\n\n                dataToReturn = eachCombinedDatum;\n\n              case 14:\n                _context16.next = 4;\n                break;\n\n              case 16:\n                _context16.next = 21;\n                break;\n\n              case 18:\n                _context16.prev = 18;\n                _context16.t2 = _context16["catch"](2);\n\n                _iterator16.e(_context16.t2);\n\n              case 21:\n                _context16.prev = 21;\n\n                _iterator16.f();\n\n                return _context16.finish(21);\n\n              case 24:\n                if (!(dataToReturn == null)) {\n                  _context16.next = 26;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is empty");\n\n              case 26:\n                return _context16.abrupt("return", dataToReturn);\n\n              case 27:\n              case "end":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, null, [[2, 18, 21, 24]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minWithOrNull",\n    value: function minWithOrNull(comparator) {\n      var _this18 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      comparator = comparator.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee17() {\n        var dataToReturn, _iterator17, _step17, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                dataToReturn = null;\n                _iterator17 = _createForOfIteratorHelper(_this18.combinedDataWrapper);\n                _context17.prev = 2;\n\n                _iterator17.s();\n\n              case 4:\n                if ((_step17 = _iterator17.n()).done) {\n                  _context17.next = 16;\n                  break;\n                }\n\n                eachCombinedDatum = _step17.value;\n                _context17.t0 = dataToReturn == null;\n\n                if (_context17.t0) {\n                  _context17.next = 12;\n                  break;\n                }\n\n                _context17.next = 10;\n                return comparator(dataToReturn, eachCombinedDatum);\n\n              case 10:\n                _context17.t1 = _context17.sent;\n                _context17.t0 = _context17.t1 > 0;\n\n              case 12:\n                if (!_context17.t0) {\n                  _context17.next = 14;\n                  break;\n                }\n\n                dataToReturn = eachCombinedDatum;\n\n              case 14:\n                _context17.next = 4;\n                break;\n\n              case 16:\n                _context17.next = 21;\n                break;\n\n              case 18:\n                _context17.prev = 18;\n                _context17.t2 = _context17["catch"](2);\n\n                _iterator17.e(_context17.t2);\n\n              case 21:\n                _context17.prev = 21;\n\n                _iterator17.f();\n\n                return _context17.finish(21);\n\n              case 24:\n                return _context17.abrupt("return", dataToReturn);\n\n              case 25:\n              case "end":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, null, [[2, 18, 21, 24]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "asArray",\n    value: function asArray() {\n      var _this19 = this;\n\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee18() {\n        return _regenerator["default"].wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                return _context18.abrupt("return", Array.from(_this19.combinedDataWrapper));\n\n              case 1:\n              case "end":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "asSet",\n    value: function asSet() {\n      var _this20 = this;\n\n      var koconutToReturn = new _module.KoconutSet();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee19() {\n        return _regenerator["default"].wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                return _context19.abrupt("return", new Set(_this20.combinedDataWrapper));\n\n              case 1:\n              case "end":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "all",\n    value: function all(predicate) {\n      var _this21 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee20() {\n        var _iterator18, _step18, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _iterator18 = _createForOfIteratorHelper(_this21.combinedDataWrapper);\n                _context20.prev = 1;\n\n                _iterator18.s();\n\n              case 3:\n                if ((_step18 = _iterator18.n()).done) {\n                  _context20.next = 11;\n                  break;\n                }\n\n                eachCombinedDatum = _step18.value;\n                _context20.next = 7;\n                return predicate(eachCombinedDatum);\n\n              case 7:\n                if (_context20.sent) {\n                  _context20.next = 9;\n                  break;\n                }\n\n                return _context20.abrupt("return", false);\n\n              case 9:\n                _context20.next = 3;\n                break;\n\n              case 11:\n                _context20.next = 16;\n                break;\n\n              case 13:\n                _context20.prev = 13;\n                _context20.t0 = _context20["catch"](1);\n\n                _iterator18.e(_context20.t0);\n\n              case 16:\n                _context20.prev = 16;\n\n                _iterator18.f();\n\n                return _context20.finish(16);\n\n              case 19:\n                return _context20.abrupt("return", true);\n\n              case 20:\n              case "end":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, null, [[1, 13, 16, 19]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "any",\n    value: function any(predicate) {\n      var _this22 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee21() {\n        var _iterator19, _step19, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _iterator19 = _createForOfIteratorHelper(_this22.combinedDataWrapper);\n                _context21.prev = 1;\n\n                _iterator19.s();\n\n              case 3:\n                if ((_step19 = _iterator19.n()).done) {\n                  _context21.next = 11;\n                  break;\n                }\n\n                eachCombinedDatum = _step19.value;\n                _context21.next = 7;\n                return predicate(eachCombinedDatum);\n\n              case 7:\n                if (!_context21.sent) {\n                  _context21.next = 9;\n                  break;\n                }\n\n                return _context21.abrupt("return", true);\n\n              case 9:\n                _context21.next = 3;\n                break;\n\n              case 11:\n                _context21.next = 16;\n                break;\n\n              case 13:\n                _context21.prev = 13;\n                _context21.t0 = _context21["catch"](1);\n\n                _iterator19.e(_context21.t0);\n\n              case 16:\n                _context21.prev = 16;\n\n                _iterator19.f();\n\n                return _context21.finish(16);\n\n              case 19:\n                return _context21.abrupt("return", false);\n\n              case 20:\n              case "end":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, null, [[1, 13, 16, 19]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "isEmpty",\n    value: function isEmpty() {\n      var _this23 = this;\n\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee22() {\n        return _regenerator["default"].wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                return _context22.abrupt("return", _this23.combinedDataWrapper != null && _this23.mSize == 0);\n\n              case 1:\n              case "end":\n                return _context22.stop();\n            }\n          }\n        }, _callee22);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "isNotEmpty",\n    value: function isNotEmpty() {\n      var _this24 = this;\n\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee23() {\n        return _regenerator["default"].wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                return _context23.abrupt("return", _this24.mSize != 0);\n\n              case 1:\n              case "end":\n                return _context23.stop();\n            }\n          }\n        }, _callee23);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "isNullOrEmpty",\n    value: function isNullOrEmpty() {\n      var _this25 = this;\n\n      _module.KoconutDeprecation.showDeprecationWarning(\'1.3.0\', this.isEmpty);\n\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee24() {\n        return _regenerator["default"].wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                return _context24.abrupt("return", _this25.mSize == 0);\n\n              case 1:\n              case "end":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "none",\n    value: function none() {\n      var _this26 = this;\n\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (predicate) predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee25() {\n        var _iterator20, _step20, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                if (!(_this26.mSize == 0)) {\n                  _context25.next = 2;\n                  break;\n                }\n\n                return _context25.abrupt("return", true);\n\n              case 2:\n                if (!predicate) {\n                  _context25.next = 23;\n                  break;\n                }\n\n                _iterator20 = _createForOfIteratorHelper(_this26.combinedDataWrapper);\n                _context25.prev = 4;\n\n                _iterator20.s();\n\n              case 6:\n                if ((_step20 = _iterator20.n()).done) {\n                  _context25.next = 14;\n                  break;\n                }\n\n                eachCombinedDatum = _step20.value;\n                _context25.next = 10;\n                return predicate(eachCombinedDatum);\n\n              case 10:\n                if (!_context25.sent) {\n                  _context25.next = 12;\n                  break;\n                }\n\n                return _context25.abrupt("return", false);\n\n              case 12:\n                _context25.next = 6;\n                break;\n\n              case 14:\n                _context25.next = 19;\n                break;\n\n              case 16:\n                _context25.prev = 16;\n                _context25.t0 = _context25["catch"](4);\n\n                _iterator20.e(_context25.t0);\n\n              case 19:\n                _context25.prev = 19;\n\n                _iterator20.f();\n\n                return _context25.finish(19);\n\n              case 22:\n                return _context25.abrupt("return", true);\n\n              case 23:\n                return _context25.abrupt("return", false);\n\n              case 24:\n              case "end":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, null, [[4, 16, 19, 22]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "forEach",\n    value: function forEach(action) {\n      var _this27 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      action = action.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee26() {\n        var _iterator21, _step21, eachCombinedDatum, signal;\n\n        return _regenerator["default"].wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                if (!(_this27.combinedDataWrapper != null)) {\n                  _context26.next = 21;\n                  break;\n                }\n\n                _iterator21 = _createForOfIteratorHelper(_this27.combinedDataWrapper);\n                _context26.prev = 2;\n\n                _iterator21.s();\n\n              case 4:\n                if ((_step21 = _iterator21.n()).done) {\n                  _context26.next = 13;\n                  break;\n                }\n\n                eachCombinedDatum = _step21.value;\n                _context26.next = 8;\n                return action(eachCombinedDatum);\n\n              case 8:\n                signal = _context26.sent;\n\n                if (!(signal == false || signal == _module.KoconutLoopSignal.BREAK)) {\n                  _context26.next = 11;\n                  break;\n                }\n\n                return _context26.abrupt("break", 13);\n\n              case 11:\n                _context26.next = 4;\n                break;\n\n              case 13:\n                _context26.next = 18;\n                break;\n\n              case 15:\n                _context26.prev = 15;\n                _context26.t0 = _context26["catch"](2);\n\n                _iterator21.e(_context26.t0);\n\n              case 18:\n                _context26.prev = 18;\n\n                _iterator21.f();\n\n                return _context26.finish(18);\n\n              case 21:\n              case "end":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, null, [[2, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "onEach",\n    value: function onEach(action, thisArg) {\n      var _this28 = this;\n\n      action = action.bind(thisArg);\n      var koconutToReturn = new KoconutIterable();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee27() {\n        var _iterator22, _step22, eachCombinedDatum, signal;\n\n        return _regenerator["default"].wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                if (!(_this28.combinedDataWrapper != null)) {\n                  _context27.next = 21;\n                  break;\n                }\n\n                _iterator22 = _createForOfIteratorHelper(_this28.combinedDataWrapper);\n                _context27.prev = 2;\n\n                _iterator22.s();\n\n              case 4:\n                if ((_step22 = _iterator22.n()).done) {\n                  _context27.next = 13;\n                  break;\n                }\n\n                eachCombinedDatum = _step22.value;\n                _context27.next = 8;\n                return action(eachCombinedDatum);\n\n              case 8:\n                signal = _context27.sent;\n\n                if (!(signal == false || signal == _module.KoconutLoopSignal.BREAK)) {\n                  _context27.next = 11;\n                  break;\n                }\n\n                return _context27.abrupt("break", 13);\n\n              case 11:\n                _context27.next = 4;\n                break;\n\n              case 13:\n                _context27.next = 18;\n                break;\n\n              case 15:\n                _context27.prev = 15;\n                _context27.t0 = _context27["catch"](2);\n\n                _iterator22.e(_context27.t0);\n\n              case 18:\n                _context27.prev = 18;\n\n                _iterator22.f();\n\n                return _context27.finish(18);\n\n              case 21:\n                return _context27.abrupt("return", _this28.data);\n\n              case 22:\n              case "end":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, null, [[2, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filter",\n    value: function filter(predicate, thisArg) {\n      var _this29 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutIterable();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee28() {\n        var processedArray, _iterator23, _step23, eachCombinedDatum, processedMap;\n\n        return _regenerator["default"].wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                processedArray = new Array();\n\n                if (!(_this29.combinedDataWrapper != null)) {\n                  _context28.next = 21;\n                  break;\n                }\n\n                _iterator23 = _createForOfIteratorHelper(_this29.combinedDataWrapper);\n                _context28.prev = 3;\n\n                _iterator23.s();\n\n              case 5:\n                if ((_step23 = _iterator23.n()).done) {\n                  _context28.next = 13;\n                  break;\n                }\n\n                eachCombinedDatum = _step23.value;\n                _context28.next = 9;\n                return predicate(eachCombinedDatum);\n\n              case 9:\n                if (!_context28.sent) {\n                  _context28.next = 11;\n                  break;\n                }\n\n                processedArray.push(eachCombinedDatum);\n\n              case 11:\n                _context28.next = 5;\n                break;\n\n              case 13:\n                _context28.next = 18;\n                break;\n\n              case 15:\n                _context28.prev = 15;\n                _context28.t0 = _context28["catch"](3);\n\n                _iterator23.e(_context28.t0);\n\n              case 18:\n                _context28.prev = 18;\n\n                _iterator23.f();\n\n                return _context28.finish(18);\n\n              case 21:\n                if (!(_this29.data instanceof Array)) {\n                  _context28.next = 25;\n                  break;\n                }\n\n                return _context28.abrupt("return", processedArray);\n\n              case 25:\n                if (!(_this29.data instanceof Set)) {\n                  _context28.next = 29;\n                  break;\n                }\n\n                return _context28.abrupt("return", new Set(processedArray));\n\n              case 29:\n                processedMap = new Map();\n                processedArray.forEach(function (eachProcessedDatum) {\n                  var eachEntry = eachProcessedDatum;\n                  processedMap.set(eachEntry.key, eachEntry.value);\n                });\n                return _context28.abrupt("return", processedMap);\n\n              case 32:\n              case "end":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterNot",\n    value: function filterNot(predicate, thisArg) {\n      var _this30 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutIterable();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee29() {\n        var processedArray, _iterator24, _step24, eachCombinedDatum, processedMap;\n\n        return _regenerator["default"].wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                processedArray = new Array();\n\n                if (!(_this30.combinedDataWrapper != null)) {\n                  _context29.next = 21;\n                  break;\n                }\n\n                _iterator24 = _createForOfIteratorHelper(_this30.combinedDataWrapper);\n                _context29.prev = 3;\n\n                _iterator24.s();\n\n              case 5:\n                if ((_step24 = _iterator24.n()).done) {\n                  _context29.next = 13;\n                  break;\n                }\n\n                eachCombinedDatum = _step24.value;\n                _context29.next = 9;\n                return predicate(eachCombinedDatum);\n\n              case 9:\n                if (_context29.sent) {\n                  _context29.next = 11;\n                  break;\n                }\n\n                processedArray.push(eachCombinedDatum);\n\n              case 11:\n                _context29.next = 5;\n                break;\n\n              case 13:\n                _context29.next = 18;\n                break;\n\n              case 15:\n                _context29.prev = 15;\n                _context29.t0 = _context29["catch"](3);\n\n                _iterator24.e(_context29.t0);\n\n              case 18:\n                _context29.prev = 18;\n\n                _iterator24.f();\n\n                return _context29.finish(18);\n\n              case 21:\n                if (!(_this30.data instanceof Array)) {\n                  _context29.next = 25;\n                  break;\n                }\n\n                return _context29.abrupt("return", processedArray);\n\n              case 25:\n                if (!(_this30.data instanceof Set)) {\n                  _context29.next = 29;\n                  break;\n                }\n\n                return _context29.abrupt("return", new Set(processedArray));\n\n              case 29:\n                processedMap = new Map();\n                processedArray.forEach(function (eachProcessedDatum) {\n                  var eachEntry = eachProcessedDatum;\n                  processedMap.set(eachEntry.key, eachEntry.value);\n                });\n                return _context29.abrupt("return", processedMap);\n\n              case 32:\n              case "end":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "flatMap",\n    value: function flatMap(transform) {\n      var _this31 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee30() {\n        var processedArray, _iterator25, _step25, eachCombinedDatum, _iterator26, _step26, eachSubElement;\n\n        return _regenerator["default"].wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                processedArray = new Array();\n\n                if (!(_this31.combinedDataWrapper != null)) {\n                  _context30.next = 23;\n                  break;\n                }\n\n                _iterator25 = _createForOfIteratorHelper(_this31.combinedDataWrapper);\n                _context30.prev = 3;\n\n                _iterator25.s();\n\n              case 5:\n                if ((_step25 = _iterator25.n()).done) {\n                  _context30.next = 15;\n                  break;\n                }\n\n                eachCombinedDatum = _step25.value;\n                _context30.t0 = _createForOfIteratorHelper;\n                _context30.next = 10;\n                return transform(eachCombinedDatum);\n\n              case 10:\n                _context30.t1 = _context30.sent;\n                _iterator26 = (0, _context30.t0)(_context30.t1);\n\n                try {\n                  for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n                    eachSubElement = _step26.value;\n                    processedArray.push(eachSubElement);\n                  }\n                } catch (err) {\n                  _iterator26.e(err);\n                } finally {\n                  _iterator26.f();\n                }\n\n              case 13:\n                _context30.next = 5;\n                break;\n\n              case 15:\n                _context30.next = 20;\n                break;\n\n              case 17:\n                _context30.prev = 17;\n                _context30.t2 = _context30["catch"](3);\n\n                _iterator25.e(_context30.t2);\n\n              case 20:\n                _context30.prev = 20;\n\n                _iterator25.f();\n\n                return _context30.finish(20);\n\n              case 23:\n                return _context30.abrupt("return", processedArray);\n\n              case 24:\n              case "end":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, null, [[3, 17, 20, 23]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "flatMapTo",\n    value: function flatMapTo(destination, transform, thisArg) {\n      var _this32 = this;\n\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutIterable();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee31() {\n        var flattenIterable;\n        return _regenerator["default"].wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                flattenIterable = _this32.flatMap(transform, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context31.next = 6;\n                  break;\n                }\n\n                _context31.next = 4;\n                return flattenIterable.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context31.next = 8;\n                break;\n\n              case 6:\n                _context31.next = 8;\n                return flattenIterable.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context31.abrupt("return", _this32.data);\n\n              case 9:\n              case "end":\n                return _context31.stop();\n            }\n          }\n        }, _callee31);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "map",\n    value: function map(transform) {\n      var _this33 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee32() {\n        var processedArray, _iterator27, _step27, eachCombinedDatum;\n\n        return _regenerator["default"].wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                processedArray = new Array();\n\n                if (!(_this33.combinedDataWrapper != null)) {\n                  _context32.next = 22;\n                  break;\n                }\n\n                _iterator27 = _createForOfIteratorHelper(_this33.combinedDataWrapper);\n                _context32.prev = 3;\n\n                _iterator27.s();\n\n              case 5:\n                if ((_step27 = _iterator27.n()).done) {\n                  _context32.next = 14;\n                  break;\n                }\n\n                eachCombinedDatum = _step27.value;\n                _context32.t0 = processedArray;\n                _context32.next = 10;\n                return transform(eachCombinedDatum);\n\n              case 10:\n                _context32.t1 = _context32.sent;\n\n                _context32.t0.push.call(_context32.t0, _context32.t1);\n\n              case 12:\n                _context32.next = 5;\n                break;\n\n              case 14:\n                _context32.next = 19;\n                break;\n\n              case 16:\n                _context32.prev = 16;\n                _context32.t2 = _context32["catch"](3);\n\n                _iterator27.e(_context32.t2);\n\n              case 19:\n                _context32.prev = 19;\n\n                _iterator27.f();\n\n                return _context32.finish(19);\n\n              case 22:\n                return _context32.abrupt("return", processedArray);\n\n              case 23:\n              case "end":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, null, [[3, 16, 19, 22]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapTo",\n    value: function mapTo(destination, transform, thisArg) {\n      var _this34 = this;\n\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutIterable();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee33() {\n        var mappedIterable;\n        return _regenerator["default"].wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                mappedIterable = _this34.map(transform, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context33.next = 6;\n                  break;\n                }\n\n                _context33.next = 4;\n                return mappedIterable.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context33.next = 8;\n                break;\n\n              case 6:\n                _context33.next = 8;\n                return mappedIterable.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context33.abrupt("return", _this34.data);\n\n              case 9:\n              case "end":\n                return _context33.stop();\n            }\n          }\n        }, _callee33);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapNotNull",\n    value: function mapNotNull(transform) {\n      var _this35 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee34() {\n        var processedArray, _iterator28, _step28, eachCombinedDatum, dataToAdd;\n\n        return _regenerator["default"].wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                processedArray = new Array();\n\n                if (!(_this35.combinedDataWrapper != null)) {\n                  _context34.next = 21;\n                  break;\n                }\n\n                _iterator28 = _createForOfIteratorHelper(_this35.combinedDataWrapper);\n                _context34.prev = 3;\n\n                _iterator28.s();\n\n              case 5:\n                if ((_step28 = _iterator28.n()).done) {\n                  _context34.next = 13;\n                  break;\n                }\n\n                eachCombinedDatum = _step28.value;\n                _context34.next = 9;\n                return transform(eachCombinedDatum);\n\n              case 9:\n                dataToAdd = _context34.sent;\n                if (dataToAdd != null && dataToAdd != undefined) processedArray.push(dataToAdd);\n\n              case 11:\n                _context34.next = 5;\n                break;\n\n              case 13:\n                _context34.next = 18;\n                break;\n\n              case 15:\n                _context34.prev = 15;\n                _context34.t0 = _context34["catch"](3);\n\n                _iterator28.e(_context34.t0);\n\n              case 18:\n                _context34.prev = 18;\n\n                _iterator28.f();\n\n                return _context34.finish(18);\n\n              case 21:\n                return _context34.abrupt("return", processedArray);\n\n              case 22:\n              case "end":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapNotNullTo",\n    value: function mapNotNullTo(destination, transform, thisArg) {\n      var _this36 = this;\n\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutIterable();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee35() {\n        var mappedIterable;\n        return _regenerator["default"].wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                mappedIterable = _this36.mapNotNull(transform, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context35.next = 6;\n                  break;\n                }\n\n                _context35.next = 4;\n                return mappedIterable.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context35.next = 8;\n                break;\n\n              case 6:\n                _context35.next = 8;\n                return mappedIterable.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context35.abrupt("return", _this36.data);\n\n              case 9:\n              case "end":\n                return _context35.stop();\n            }\n          }\n        }, _callee35);\n      })));\n      return koconutToReturn;\n    }\n  }]);\n  return KoconutIterable;\n}(_module.KoconutPrimitive);\n\nexports.KoconutIterable = KoconutIterable;\n\n//# sourceURL=webpack://koconut/./dist/components/container/KoconutIterable.js?')},"./dist/components/container/base/KoconutBoolean.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutBoolean = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _get2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _module = __webpack_require__(/*! ../../../module */ "./dist/module.js");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar KoconutBoolean = function (_KoconutPrimitive) {\n  (0, _inherits2["default"])(KoconutBoolean, _KoconutPrimitive);\n\n  var _super = _createSuper(KoconutBoolean);\n\n  function KoconutBoolean() {\n    var _this;\n\n    var _boolean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    (0, _classCallCheck2["default"])(this, KoconutBoolean);\n    _this = _super.call(this);\n    _this.data = _boolean == null ? false : _boolean;\n    return _this;\n  }\n\n  (0, _createClass2["default"])(KoconutBoolean, [{\n    key: "compareTo",\n    value: function compareTo(other) {\n      var _this2 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n        var otherBoolean;\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                otherBoolean = false;\n\n                if (!(other instanceof _module.KoconutPrimitive)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return other["yield"]();\n\n              case 4:\n                otherBoolean = _context.sent;\n                _context.next = 8;\n                break;\n\n              case 7:\n                otherBoolean = other;\n\n              case 8:\n                return _context.abrupt("return", Number(_this2.data) - Number(otherBoolean));\n\n              case 9:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "retrieve",\n    value: function () {\n      var _retrieve = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutBoolean.prototype), "retrieve", this).call(this);\n\n              case 2:\n                return _context2.abrupt("return", this);\n\n              case 3:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function retrieve() {\n        return _retrieve.apply(this, arguments);\n      }\n\n      return retrieve;\n    }()\n  }, {\n    key: "valueOf",\n    value: function valueOf() {\n      return this.data;\n    }\n  }, {\n    key: "not",\n    value: function not() {\n      var _this3 = this;\n\n      var koconutToReturn = new KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n        return _regenerator["default"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt("return", !_this3.data);\n\n              case 1:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "and",\n    value: function and(other) {\n      var _this4 = this;\n\n      var koconutToReturn = new KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n        var otherBoolean;\n        return _regenerator["default"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                otherBoolean = false;\n\n                if (!(other instanceof _module.KoconutPrimitive)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 4;\n                return other["yield"]();\n\n              case 4:\n                otherBoolean = _context4.sent;\n                _context4.next = 8;\n                break;\n\n              case 7:\n                otherBoolean = other;\n\n              case 8:\n                return _context4.abrupt("return", _this4.data && otherBoolean);\n\n              case 9:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "nand",\n    value: function nand(other) {\n      return this.and(other).not();\n    }\n  }, {\n    key: "or",\n    value: function or(other) {\n      var _this5 = this;\n\n      var koconutToReturn = new KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {\n        var otherBoolean;\n        return _regenerator["default"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                otherBoolean = false;\n\n                if (!(other instanceof _module.KoconutPrimitive)) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                _context5.next = 4;\n                return other["yield"]();\n\n              case 4:\n                otherBoolean = _context5.sent;\n                _context5.next = 8;\n                break;\n\n              case 7:\n                otherBoolean = other;\n\n              case 8:\n                return _context5.abrupt("return", _this5.data || otherBoolean);\n\n              case 9:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "nor",\n    value: function nor(other) {\n      return this.or(other).not();\n    }\n  }, {\n    key: "xor",\n    value: function xor(other) {\n      var _this6 = this;\n\n      var koconutToReturn = new KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {\n        var otherBoolean;\n        return _regenerator["default"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                otherBoolean = false;\n\n                if (!(other instanceof _module.KoconutPrimitive)) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                _context6.next = 4;\n                return other["yield"]();\n\n              case 4:\n                otherBoolean = _context6.sent;\n                _context6.next = 8;\n                break;\n\n              case 7:\n                otherBoolean = other;\n\n              case 8:\n                return _context6.abrupt("return", _this6.data != otherBoolean);\n\n              case 9:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "xnor",\n    value: function xnor(other) {\n      return this.xor(other).not();\n    }\n  }, {\n    key: "eqv",\n    value: function eqv(other) {\n      return this.xor(other).not();\n    }\n  }], [{\n    key: "fromPrimitive",\n    value: function fromPrimitive(primitive) {\n      var koconutToReturn = new KoconutBoolean(primitive[\'data\']);\n      koconutToReturn.processor = primitive[\'processor\'];\n      koconutToReturn.prevYieldable = primitive[\'prevYieldable\'];\n      return koconutToReturn;\n    }\n  }]);\n  return KoconutBoolean;\n}(_module.KoconutPrimitive);\n\nexports.KoconutBoolean = KoconutBoolean;\n\n//# sourceURL=webpack://koconut/./dist/components/container/base/KoconutBoolean.js?')},"./dist/components/container/base/KoconutEntry.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutEntry = exports.Entry = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _get2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _module = __webpack_require__(/*! ../../../module */ "./dist/module.js");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar Entry = function () {\n  function Entry(keyElement, valueElement) {\n    (0, _classCallCheck2["default"])(this, Entry);\n    this.keyElement = keyElement;\n    this.valueElement = valueElement;\n  }\n\n  (0, _createClass2["default"])(Entry, [{\n    key: "key",\n    get: function get() {\n      return this.keyElement;\n    }\n  }, {\n    key: "value",\n    get: function get() {\n      return this.valueElement;\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      return JSON.stringify({\n        keyElement: this.key,\n        valueElement: this.valueElement\n      });\n    }\n  }, {\n    key: "toArray",\n    value: function toArray() {\n      return [this.key, this.value];\n    }\n  }, {\n    key: "toPair",\n    value: function toPair() {\n      return new _module.Pair(this.key, this.value);\n    }\n  }, {\n    key: "equalsTo",\n    value: function equalsTo(other) {\n      if (_module.KoconutTypeChecker.checkIsEquatable(this.key) && _module.KoconutTypeChecker.checkIsEquatable(other.key)) {\n        var equalityResult = this.key.equalsTo(other.key);\n        if (equalityResult instanceof _module.KoconutBoolean) return _module.KoconutBoolean[\'fromPrimitive\'](equalityResult);else return equalityResult;\n      } else return this.key == other.key;\n    }\n  }], [{\n    key: "from",\n    value: function from(entry) {\n      return new Entry(entry[0], entry[1]);\n    }\n  }]);\n  return Entry;\n}();\n\nexports.Entry = Entry;\n\nvar KoconutEntry = function (_KoconutPrimitive) {\n  (0, _inherits2["default"])(KoconutEntry, _KoconutPrimitive);\n\n  var _super = _createSuper(KoconutEntry);\n\n  function KoconutEntry() {\n    var _this;\n\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    (0, _classCallCheck2["default"])(this, KoconutEntry);\n    if (key != null && value != null) _this = _super.call(this, new Entry(key, value));else _this = _super.call(this);\n    return (0, _possibleConstructorReturn2["default"])(_this);\n  }\n\n  (0, _createClass2["default"])(KoconutEntry, [{\n    key: "retrieve",\n    value: function () {\n      var _retrieve = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutEntry.prototype), "retrieve", this).call(this);\n\n              case 2:\n                return _context.abrupt("return", this);\n\n              case 3:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function retrieve() {\n        return _retrieve.apply(this, arguments);\n      }\n\n      return retrieve;\n    }()\n  }, {\n    key: "equalsTo",\n    value: function equalsTo(other) {\n      if (this.data != null && other.data != null) return this.data.equalsTo(other.data);\n      return false;\n    }\n  }]);\n  return KoconutEntry;\n}(_module.KoconutPrimitive);\n\nexports.KoconutEntry = KoconutEntry;\n\n//# sourceURL=webpack://koconut/./dist/components/container/base/KoconutEntry.js?')},"./dist/components/container/base/KoconutPair.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.Pair = exports.KoconutPair = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _get2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _module = __webpack_require__(/*! ../../../module */ "./dist/module.js");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar Pair = function () {\n  function Pair(firstElement, secondElement) {\n    (0, _classCallCheck2["default"])(this, Pair);\n    this.firstElement = firstElement;\n    this.secondElement = secondElement;\n  }\n\n  (0, _createClass2["default"])(Pair, [{\n    key: "first",\n    get: function get() {\n      return this.firstElement;\n    }\n  }, {\n    key: "second",\n    get: function get() {\n      return this.secondElement;\n    }\n  }, {\n    key: "toString",\n    value: function toString() {\n      return JSON.stringify({\n        first: this.first,\n        second: this.second\n      });\n    }\n  }, {\n    key: "toArray",\n    value: function toArray() {\n      return [this.first, this.second];\n    }\n  }, {\n    key: "toEntry",\n    value: function toEntry() {\n      return new _module.Entry(this.first, this.second);\n    }\n  }, {\n    key: "equalsTo",\n    value: function equalsTo(other) {\n      var _this = this;\n\n      if (_module.KoconutTypeChecker.checkIsEquatable(this.firstElement) && _module.KoconutTypeChecker.checkIsEquatable(other.firstElement)) {\n        var firstCompareResult = this.firstElement.equalsTo(other.firstElement);\n\n        if (firstCompareResult instanceof _module.KoconutBoolean) {\n          var koconutToReturn = new _module.KoconutBoolean();\n          koconutToReturn.setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n            var thisValue, compareResult;\n            return _regenerator["default"].wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    thisValue = koconutToReturn[\'data\'];\n\n                    if (thisValue) {\n                      _context.next = 3;\n                      break;\n                    }\n\n                    return _context.abrupt("return", false);\n\n                  case 3:\n                    if (!(_module.KoconutTypeChecker.checkIsEquatable(_this.secondElement) && _module.KoconutTypeChecker.checkIsEquatable(other.secondElement))) {\n                      _context.next = 14;\n                      break;\n                    }\n\n                    compareResult = _this.secondElement.equalsTo(other.secondElement);\n\n                    if (!(compareResult instanceof _module.KoconutBoolean)) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    _context.next = 8;\n                    return compareResult["yield"]();\n\n                  case 8:\n                    return _context.abrupt("return", _context.sent);\n\n                  case 11:\n                    return _context.abrupt("return", compareResult);\n\n                  case 12:\n                    _context.next = 15;\n                    break;\n\n                  case 14:\n                    return _context.abrupt("return", _this.secondElement == other.secondElement);\n\n                  case 15:\n                  case "end":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })));\n          return koconutToReturn;\n        } else {\n          if (!firstCompareResult) return false;\n\n          if (_module.KoconutTypeChecker.checkIsEquatable(this.secondElement) && _module.KoconutTypeChecker.checkIsEquatable(other.secondElement)) {\n            var secondCompareResult = this.secondElement.equalsTo(other.secondElement);\n            if (secondCompareResult instanceof _module.KoconutBoolean) return _module.KoconutBoolean[\'fromPrimitive\'](secondCompareResult);else return secondCompareResult;\n          } else return this.secondElement == other.secondElement;\n        }\n      } else {\n        if (this.firstElement != other.firstElement) return false;\n\n        if (_module.KoconutTypeChecker.checkIsEquatable(this.secondElement) && _module.KoconutTypeChecker.checkIsEquatable(other.secondElement)) {\n          var compareResult = this.secondElement.equalsTo(other.secondElement);\n          if (compareResult instanceof _module.KoconutBoolean) return _module.KoconutBoolean[\'fromPrimitive\'](compareResult);else return compareResult;\n        } else return this.secondElement == other.secondElement;\n      }\n    }\n  }], [{\n    key: "from",\n    value: function from(pair) {\n      return new Pair(pair[0], pair[1]);\n    }\n  }]);\n  return Pair;\n}();\n\nexports.Pair = Pair;\n\nvar KoconutPair = function (_KoconutPrimitive) {\n  (0, _inherits2["default"])(KoconutPair, _KoconutPrimitive);\n\n  var _super = _createSuper(KoconutPair);\n\n  function KoconutPair() {\n    var _this2;\n\n    var first = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var second = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    (0, _classCallCheck2["default"])(this, KoconutPair);\n    if (first != null && second != null) _this2 = _super.call(this, new Pair(first, second));else _this2 = _super.call(this);\n    return (0, _possibleConstructorReturn2["default"])(_this2);\n  }\n\n  (0, _createClass2["default"])(KoconutPair, [{\n    key: "retrieve",\n    value: function () {\n      var _retrieve = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutPair.prototype), "retrieve", this).call(this);\n\n              case 2:\n                return _context2.abrupt("return", this);\n\n              case 3:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function retrieve() {\n        return _retrieve.apply(this, arguments);\n      }\n\n      return retrieve;\n    }()\n  }, {\n    key: "equalsTo",\n    value: function equalsTo(other) {\n      if (this.data != null && other.data != null) return this.data.equalsTo(other.data);\n      return false;\n    }\n  }]);\n  return KoconutPair;\n}(_module.KoconutPrimitive);\n\nexports.KoconutPair = KoconutPair;\n\n//# sourceURL=webpack://koconut/./dist/components/container/base/KoconutPair.js?')},"./dist/components/container/collection/KoconutCollection.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutCollection = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));\n\nvar _get2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));\n\nvar _module = __webpack_require__(/*! ../../../module */ "./dist/module.js");\n\nvar _KoconutEntry = __webpack_require__(/*! ../base/KoconutEntry */ "./dist/components/container/base/KoconutEntry.js");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n"use strict";\n\nvar KoconutCollection = function (_KoconutIterable) {\n  (0, _inherits2["default"])(KoconutCollection, _KoconutIterable);\n\n  var _super = _createSuper(KoconutCollection);\n\n  function KoconutCollection() {\n    var _this;\n\n    (0, _classCallCheck2["default"])(this, KoconutCollection);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "mIndices", new Array());\n    return _this;\n  }\n\n  (0, _createClass2["default"])(KoconutCollection, [{\n    key: "validate",\n    value: function () {\n      var _validate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(data) {\n        var _this2 = this;\n\n        var dataArray;\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (data != null) {\n                  dataArray = Array.from(data);\n                  this.mSize = dataArray.length;\n                  Object.keys(dataArray).map(function (eachString) {\n                    return parseInt(eachString);\n                  }).forEach(function (eachIndex) {\n                    return _this2.mIndices.push(eachIndex);\n                  });\n                  this.combinedDataWrapper = data;\n                }\n\n              case 1:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function validate(_x) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n  }, {\n    key: "size",\n    value: function size() {\n      var _this3 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt("return", _this3.mSize);\n\n              case 1:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "indices",\n    value: function indices() {\n      var _this4 = this;\n\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n        return _regenerator["default"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt("return", _this4.mIndices);\n\n              case 1:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "fold",\n    value: function fold(initial, operation) {\n      var _this5 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n        var dataToReturn, _iterator, _step, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                dataToReturn = initial;\n                _iterator = _createForOfIteratorHelper(_this5.data);\n                _context4.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                eachDatum = _step.value;\n                _context4.next = 8;\n                return operation(dataToReturn, eachDatum);\n\n              case 8:\n                dataToReturn = _context4.sent;\n\n              case 9:\n                _context4.next = 4;\n                break;\n\n              case 11:\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4["catch"](2);\n\n                _iterator.e(_context4.t0);\n\n              case 16:\n                _context4.prev = 16;\n\n                _iterator.f();\n\n                return _context4.finish(16);\n\n              case 19:\n                return _context4.abrupt("return", dataToReturn);\n\n              case 20:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 13, 16, 19]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "foldIndexed",\n    value: function foldIndexed(initial, operation) {\n      var _this6 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {\n        var dataToReturn, _iterator2, _step2, _step2$value, eachIndex, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                dataToReturn = initial;\n                _iterator2 = _createForOfIteratorHelper(Array.from(_this6.data).entries());\n                _context5.prev = 2;\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                _step2$value = (0, _slicedToArray2["default"])(_step2.value, 2), eachIndex = _step2$value[0], eachDatum = _step2$value[1];\n                _context5.next = 8;\n                return operation(eachIndex, dataToReturn, eachDatum);\n\n              case 8:\n                dataToReturn = _context5.sent;\n\n              case 9:\n                _context5.next = 4;\n                break;\n\n              case 11:\n                _context5.next = 16;\n                break;\n\n              case 13:\n                _context5.prev = 13;\n                _context5.t0 = _context5["catch"](2);\n\n                _iterator2.e(_context5.t0);\n\n              case 16:\n                _context5.prev = 16;\n\n                _iterator2.f();\n\n                return _context5.finish(16);\n\n              case 19:\n                return _context5.abrupt("return", dataToReturn);\n\n              case 20:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[2, 13, 16, 19]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "contains",\n    value: function contains(element) {\n      var _this7 = this;\n\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {\n        var _iterator3, _step3, eachDatum, isContained, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iterator3 = _createForOfIteratorHelper(_this7.data);\n                _context6.prev = 1;\n\n                _iterator3.s();\n\n              case 3:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context6.next = 22;\n                  break;\n                }\n\n                eachDatum = _step3.value;\n                isContained = false;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachDatum)) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                equalityResult = eachDatum.equalsTo(element);\n\n                if (!(equalityResult instanceof _module.KoconutPrimitive)) {\n                  _context6.next = 14;\n                  break;\n                }\n\n                _context6.next = 11;\n                return equalityResult["yield"]();\n\n              case 11:\n                isContained = _context6.sent;\n                _context6.next = 15;\n                break;\n\n              case 14:\n                isContained = equalityResult;\n\n              case 15:\n                _context6.next = 18;\n                break;\n\n              case 17:\n                isContained = eachDatum == element;\n\n              case 18:\n                if (!isContained) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                return _context6.abrupt("return", true);\n\n              case 20:\n                _context6.next = 3;\n                break;\n\n              case 22:\n                _context6.next = 27;\n                break;\n\n              case 24:\n                _context6.prev = 24;\n                _context6.t0 = _context6["catch"](1);\n\n                _iterator3.e(_context6.t0);\n\n              case 27:\n                _context6.prev = 27;\n\n                _iterator3.f();\n\n                return _context6.finish(27);\n\n              case 30:\n                return _context6.abrupt("return", false);\n\n              case 31:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[1, 24, 27, 30]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "containsAll",\n    value: function containsAll(elements) {\n      var _this8 = this;\n\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7() {\n        var dataArray, _iterator4, _step4, eachElementToCheck, isIncluded, _iterator5, _step5, eachDatum, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                dataArray = Array.from(_this8.data);\n                _iterator4 = _createForOfIteratorHelper(elements);\n                _context7.prev = 2;\n\n                _iterator4.s();\n\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context7.next = 43;\n                  break;\n                }\n\n                eachElementToCheck = _step4.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachElementToCheck)) {\n                  _context7.next = 39;\n                  break;\n                }\n\n                isIncluded = false;\n                _iterator5 = _createForOfIteratorHelper(dataArray);\n                _context7.prev = 9;\n\n                _iterator5.s();\n\n              case 11:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context7.next = 27;\n                  break;\n                }\n\n                eachDatum = _step5.value;\n                equalityResult = eachElementToCheck.equalsTo(eachDatum);\n                _context7.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context7.t1) {\n                  _context7.next = 19;\n                  break;\n                }\n\n                _context7.next = 18;\n                return equalityResult["yield"]();\n\n              case 18:\n                _context7.t1 = _context7.sent;\n\n              case 19:\n                _context7.t0 = _context7.t1;\n\n                if (_context7.t0) {\n                  _context7.next = 22;\n                  break;\n                }\n\n                _context7.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 22:\n                if (!_context7.t0) {\n                  _context7.next = 25;\n                  break;\n                }\n\n                isIncluded = true;\n                return _context7.abrupt("break", 27);\n\n              case 25:\n                _context7.next = 11;\n                break;\n\n              case 27:\n                _context7.next = 32;\n                break;\n\n              case 29:\n                _context7.prev = 29;\n                _context7.t2 = _context7["catch"](9);\n\n                _iterator5.e(_context7.t2);\n\n              case 32:\n                _context7.prev = 32;\n\n                _iterator5.f();\n\n                return _context7.finish(32);\n\n              case 35:\n                if (isIncluded) {\n                  _context7.next = 37;\n                  break;\n                }\n\n                return _context7.abrupt("return", false);\n\n              case 37:\n                _context7.next = 41;\n                break;\n\n              case 39:\n                if (dataArray.includes(eachElementToCheck)) {\n                  _context7.next = 41;\n                  break;\n                }\n\n                return _context7.abrupt("return", false);\n\n              case 41:\n                _context7.next = 4;\n                break;\n\n              case 43:\n                _context7.next = 48;\n                break;\n\n              case 45:\n                _context7.prev = 45;\n                _context7.t3 = _context7["catch"](2);\n\n                _iterator4.e(_context7.t3);\n\n              case 48:\n                _context7.prev = 48;\n\n                _iterator4.f();\n\n                return _context7.finish(48);\n\n              case 51:\n                return _context7.abrupt("return", true);\n\n              case 52:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[2, 45, 48, 51], [9, 29, 32, 35]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "forEachIndexed",\n    value: function forEachIndexed(action) {\n      var _this9 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      action = action.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8() {\n        var eachIndex, _iterator6, _step6, eachCombinedDatum, signal;\n\n        return _regenerator["default"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                eachIndex = 0;\n                _iterator6 = _createForOfIteratorHelper(_this9.data);\n                _context8.prev = 2;\n\n                _iterator6.s();\n\n              case 4:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                eachCombinedDatum = _step6.value;\n                _context8.next = 8;\n                return action(eachIndex++, eachCombinedDatum);\n\n              case 8:\n                signal = _context8.sent;\n\n                if (!(signal == false || signal == _module.KoconutLoopSignal.BREAK)) {\n                  _context8.next = 11;\n                  break;\n                }\n\n                return _context8.abrupt("break", 13);\n\n              case 11:\n                _context8.next = 4;\n                break;\n\n              case 13:\n                _context8.next = 18;\n                break;\n\n              case 15:\n                _context8.prev = 15;\n                _context8.t0 = _context8["catch"](2);\n\n                _iterator6.e(_context8.t0);\n\n              case 18:\n                _context8.prev = 18;\n\n                _iterator6.f();\n\n                return _context8.finish(18);\n\n              case 21:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[2, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "onEach",\n    value: function onEach(action, thisArg) {\n      return KoconutCollection.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutCollection.prototype), "onEach", this).call(this, action, thisArg));\n    }\n  }, {\n    key: "onEachIndexed",\n    value: function onEachIndexed(action, thisArg) {\n      var _this10 = this;\n\n      action = action.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9() {\n        var eachIndex, _iterator7, _step7, eachDatum, signal;\n\n        return _regenerator["default"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                eachIndex = 0;\n                _iterator7 = _createForOfIteratorHelper(_this10.data);\n                _context9.prev = 2;\n\n                _iterator7.s();\n\n              case 4:\n                if ((_step7 = _iterator7.n()).done) {\n                  _context9.next = 13;\n                  break;\n                }\n\n                eachDatum = _step7.value;\n                _context9.next = 8;\n                return action(eachIndex++, eachDatum);\n\n              case 8:\n                signal = _context9.sent;\n\n                if (!(signal == false || signal == _module.KoconutLoopSignal.BREAK)) {\n                  _context9.next = 11;\n                  break;\n                }\n\n                return _context9.abrupt("break", 13);\n\n              case 11:\n                _context9.next = 4;\n                break;\n\n              case 13:\n                _context9.next = 18;\n                break;\n\n              case 15:\n                _context9.prev = 15;\n                _context9.t0 = _context9["catch"](2);\n\n                _iterator7.e(_context9.t0);\n\n              case 18:\n                _context9.prev = 18;\n\n                _iterator7.f();\n\n                return _context9.finish(18);\n\n              case 21:\n                return _context9.abrupt("return", _this10.data);\n\n              case 22:\n              case "end":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[2, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "distinct",\n    value: function distinct() {\n      var _this11 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10() {\n        var processedArray, _iterator8, _step8, eachDatum, isConflict, _iterator9, _step9, eachPrevEquatableDatum, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                processedArray = new Array();\n                _iterator8 = _createForOfIteratorHelper(_this11.data);\n                _context10.prev = 2;\n\n                _iterator8.s();\n\n              case 4:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context10.next = 42;\n                  break;\n                }\n\n                eachDatum = _step8.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachDatum)) {\n                  _context10.next = 38;\n                  break;\n                }\n\n                isConflict = false;\n                _iterator9 = _createForOfIteratorHelper(processedArray);\n                _context10.prev = 9;\n\n                _iterator9.s();\n\n              case 11:\n                if ((_step9 = _iterator9.n()).done) {\n                  _context10.next = 27;\n                  break;\n                }\n\n                eachPrevEquatableDatum = _step9.value;\n                equalityResult = eachDatum.equalsTo(eachPrevEquatableDatum);\n                _context10.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context10.t1) {\n                  _context10.next = 19;\n                  break;\n                }\n\n                _context10.next = 18;\n                return equalityResult["yield"]();\n\n              case 18:\n                _context10.t1 = _context10.sent;\n\n              case 19:\n                _context10.t0 = _context10.t1;\n\n                if (_context10.t0) {\n                  _context10.next = 22;\n                  break;\n                }\n\n                _context10.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 22:\n                if (!_context10.t0) {\n                  _context10.next = 25;\n                  break;\n                }\n\n                isConflict = true;\n                return _context10.abrupt("break", 27);\n\n              case 25:\n                _context10.next = 11;\n                break;\n\n              case 27:\n                _context10.next = 32;\n                break;\n\n              case 29:\n                _context10.prev = 29;\n                _context10.t2 = _context10["catch"](9);\n\n                _iterator9.e(_context10.t2);\n\n              case 32:\n                _context10.prev = 32;\n\n                _iterator9.f();\n\n                return _context10.finish(32);\n\n              case 35:\n                if (!isConflict) processedArray.push(eachDatum);\n                _context10.next = 40;\n                break;\n\n              case 38:\n                processedArray = Array.from(new Set(_this11.data));\n                return _context10.abrupt("break", 42);\n\n              case 40:\n                _context10.next = 4;\n                break;\n\n              case 42:\n                _context10.next = 47;\n                break;\n\n              case 44:\n                _context10.prev = 44;\n                _context10.t3 = _context10["catch"](2);\n\n                _iterator8.e(_context10.t3);\n\n              case 47:\n                _context10.prev = 47;\n\n                _iterator8.f();\n\n                return _context10.finish(47);\n\n              case 50:\n                if (!(_this11.data instanceof Array)) {\n                  _context10.next = 54;\n                  break;\n                }\n\n                return _context10.abrupt("return", processedArray);\n\n              case 54:\n                return _context10.abrupt("return", new Set(processedArray));\n\n              case 55:\n              case "end":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[2, 44, 47, 50], [9, 29, 32, 35]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "distinctBy",\n    value: function distinctBy(selector, thisArg) {\n      var _this12 = this;\n\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11() {\n        var processedArray, keyArray, equatableKeyArray, _iterator10, _step10, eachDatum, eachKey, isConflict, _iterator11, _step11, eachPrevEquatableKey, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                processedArray = new Array();\n                keyArray = new Array();\n                equatableKeyArray = new Array();\n                _iterator10 = _createForOfIteratorHelper(_this12.data);\n                _context11.prev = 4;\n\n                _iterator10.s();\n\n              case 6:\n                if ((_step10 = _iterator10.n()).done) {\n                  _context11.next = 46;\n                  break;\n                }\n\n                eachDatum = _step10.value;\n                _context11.next = 10;\n                return selector(eachDatum);\n\n              case 10:\n                eachKey = _context11.sent;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachKey)) {\n                  _context11.next = 43;\n                  break;\n                }\n\n                isConflict = false;\n                _iterator11 = _createForOfIteratorHelper(equatableKeyArray);\n                _context11.prev = 14;\n\n                _iterator11.s();\n\n              case 16:\n                if ((_step11 = _iterator11.n()).done) {\n                  _context11.next = 32;\n                  break;\n                }\n\n                eachPrevEquatableKey = _step11.value;\n                equalityResult = eachPrevEquatableKey.equalsTo(eachKey);\n                _context11.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context11.t1) {\n                  _context11.next = 24;\n                  break;\n                }\n\n                _context11.next = 23;\n                return equalityResult["yield"]();\n\n              case 23:\n                _context11.t1 = _context11.sent;\n\n              case 24:\n                _context11.t0 = _context11.t1;\n\n                if (_context11.t0) {\n                  _context11.next = 27;\n                  break;\n                }\n\n                _context11.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 27:\n                if (!_context11.t0) {\n                  _context11.next = 30;\n                  break;\n                }\n\n                isConflict = true;\n                return _context11.abrupt("break", 32);\n\n              case 30:\n                _context11.next = 16;\n                break;\n\n              case 32:\n                _context11.next = 37;\n                break;\n\n              case 34:\n                _context11.prev = 34;\n                _context11.t2 = _context11["catch"](14);\n\n                _iterator11.e(_context11.t2);\n\n              case 37:\n                _context11.prev = 37;\n\n                _iterator11.f();\n\n                return _context11.finish(37);\n\n              case 40:\n                if (!isConflict) {\n                  equatableKeyArray.push(eachKey);\n                  processedArray.push(eachDatum);\n                }\n\n                _context11.next = 44;\n                break;\n\n              case 43:\n                if (!keyArray.includes(eachKey)) {\n                  keyArray.push(eachKey);\n                  processedArray.push(eachDatum);\n                }\n\n              case 44:\n                _context11.next = 6;\n                break;\n\n              case 46:\n                _context11.next = 51;\n                break;\n\n              case 48:\n                _context11.prev = 48;\n                _context11.t3 = _context11["catch"](4);\n\n                _iterator10.e(_context11.t3);\n\n              case 51:\n                _context11.prev = 51;\n\n                _iterator10.f();\n\n                return _context11.finish(51);\n\n              case 54:\n                if (!(_this12.data instanceof Array)) {\n                  _context11.next = 58;\n                  break;\n                }\n\n                return _context11.abrupt("return", processedArray);\n\n              case 58:\n                return _context11.abrupt("return", new Set(processedArray));\n\n              case 59:\n              case "end":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, null, [[4, 48, 51, 54], [14, 34, 37, 40]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "drop",\n    value: function drop(n) {\n      var _this13 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12() {\n        var processedArray;\n        return _regenerator["default"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!(n < 0)) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutInvalidArgumentException("Given argument ".concat(n, " is invalid, \'n\' must be larger than 0."));\n\n              case 2:\n                processedArray = new Array();\n                processedArray = Array.from(_this13.data).slice(n);\n\n                if (!(_this13.data instanceof Array)) {\n                  _context12.next = 8;\n                  break;\n                }\n\n                return _context12.abrupt("return", processedArray);\n\n              case 8:\n                return _context12.abrupt("return", new Set(processedArray));\n\n              case 9:\n              case "end":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "dropLast",\n    value: function dropLast(n) {\n      var _this14 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13() {\n        var processedArray;\n        return _regenerator["default"].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(n < 0)) {\n                  _context13.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutInvalidArgumentException("Given argument ".concat(n, " is invalid, \'n\' must be larger than 0."));\n\n              case 2:\n                processedArray = new Array();\n                processedArray = Array.from(_this14.data).slice(0, -n);\n\n                if (!(_this14.data instanceof Array)) {\n                  _context13.next = 8;\n                  break;\n                }\n\n                return _context13.abrupt("return", processedArray);\n\n              case 8:\n                return _context13.abrupt("return", new Set(processedArray));\n\n              case 9:\n              case "end":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "dropLastWhile",\n    value: function dropLastWhile(predicate, thisArg) {\n      var _this15 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14() {\n        var processedArray, dataArray, indexNumber, eachIndex;\n        return _regenerator["default"].wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this15.data);\n                indexNumber = 0;\n                eachIndex = dataArray.length - 1;\n\n              case 4:\n                if (!(eachIndex >= 0)) {\n                  _context14.next = 13;\n                  break;\n                }\n\n                _context14.next = 7;\n                return predicate(dataArray[eachIndex]);\n\n              case 7:\n                if (_context14.sent) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                indexNumber = eachIndex;\n                return _context14.abrupt("break", 13);\n\n              case 10:\n                eachIndex--;\n                _context14.next = 4;\n                break;\n\n              case 13:\n                processedArray = dataArray.slice(0, indexNumber + 1);\n\n                if (!(_this15.data instanceof Array)) {\n                  _context14.next = 18;\n                  break;\n                }\n\n                return _context14.abrupt("return", processedArray);\n\n              case 18:\n                return _context14.abrupt("return", new Set(processedArray));\n\n              case 19:\n              case "end":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "dropWhile",\n    value: function dropWhile(predicate, thisArg) {\n      var _this16 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15() {\n        var processedArray, dataArray, indexNumber, eachIndex;\n        return _regenerator["default"].wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this16.data);\n                indexNumber = dataArray.length;\n                _context15.t0 = _regenerator["default"].keys(dataArray);\n\n              case 4:\n                if ((_context15.t1 = _context15.t0()).done) {\n                  _context15.next = 13;\n                  break;\n                }\n\n                eachIndex = _context15.t1.value;\n                _context15.next = 8;\n                return predicate(dataArray[eachIndex]);\n\n              case 8:\n                if (_context15.sent) {\n                  _context15.next = 11;\n                  break;\n                }\n\n                indexNumber = parseInt(eachIndex);\n                return _context15.abrupt("break", 13);\n\n              case 11:\n                _context15.next = 4;\n                break;\n\n              case 13:\n                processedArray = dataArray.slice(indexNumber);\n\n                if (!(_this16.data instanceof Array)) {\n                  _context15.next = 18;\n                  break;\n                }\n\n                return _context15.abrupt("return", processedArray);\n\n              case 18:\n                return _context15.abrupt("return", new Set(processedArray));\n\n              case 19:\n              case "end":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filter",\n    value: function filter(predicate, thisArg) {\n      return KoconutCollection.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutCollection.prototype), "filter", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterNot",\n    value: function filterNot(predicate, thisArg) {\n      return KoconutCollection.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutCollection.prototype), "filterNot", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterTo",\n    value: function filterTo(destination, predicate, thisArg) {\n      var _this17 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16() {\n        var filteredCollection;\n        return _regenerator["default"].wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                filteredCollection = _this17.filter(predicate, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context16.next = 6;\n                  break;\n                }\n\n                _context16.next = 4;\n                return filteredCollection.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context16.next = 8;\n                break;\n\n              case 6:\n                _context16.next = 8;\n                return filteredCollection.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context16.abrupt("return", _this17.data);\n\n              case 9:\n              case "end":\n                return _context16.stop();\n            }\n          }\n        }, _callee16);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterNotTo",\n    value: function filterNotTo(destination, predicate, thisArg) {\n      var _this18 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee17() {\n        var filteredCollection;\n        return _regenerator["default"].wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                filteredCollection = _this18.filterNot(predicate, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context17.next = 6;\n                  break;\n                }\n\n                _context17.next = 4;\n                return filteredCollection.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context17.next = 8;\n                break;\n\n              case 6:\n                _context17.next = 8;\n                return filteredCollection.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context17.abrupt("return", _this18.data);\n\n              case 9:\n              case "end":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterIndexed",\n    value: function filterIndexed(predicate, thisArg) {\n      var _this19 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee18() {\n        var processedArray, _iterator12, _step12, _step12$value, eachIndex, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                processedArray = new Array();\n                _iterator12 = _createForOfIteratorHelper(Array.from(_this19.data).entries());\n                _context18.prev = 2;\n\n                _iterator12.s();\n\n              case 4:\n                if ((_step12 = _iterator12.n()).done) {\n                  _context18.next = 12;\n                  break;\n                }\n\n                _step12$value = (0, _slicedToArray2["default"])(_step12.value, 2), eachIndex = _step12$value[0], eachDatum = _step12$value[1];\n                _context18.next = 8;\n                return predicate(eachIndex, eachDatum);\n\n              case 8:\n                if (!_context18.sent) {\n                  _context18.next = 10;\n                  break;\n                }\n\n                processedArray.push(eachDatum);\n\n              case 10:\n                _context18.next = 4;\n                break;\n\n              case 12:\n                _context18.next = 17;\n                break;\n\n              case 14:\n                _context18.prev = 14;\n                _context18.t0 = _context18["catch"](2);\n\n                _iterator12.e(_context18.t0);\n\n              case 17:\n                _context18.prev = 17;\n\n                _iterator12.f();\n\n                return _context18.finish(17);\n\n              case 20:\n                if (!(_this19.data instanceof Array)) {\n                  _context18.next = 24;\n                  break;\n                }\n\n                return _context18.abrupt("return", processedArray);\n\n              case 24:\n                return _context18.abrupt("return", new Set(processedArray));\n\n              case 25:\n              case "end":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, null, [[2, 14, 17, 20]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterIndexedTo",\n    value: function filterIndexedTo(destination, predicate, thisArg) {\n      var _this20 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee19() {\n        var filteredCollection;\n        return _regenerator["default"].wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                filteredCollection = _this20.filterIndexed(predicate, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context19.next = 6;\n                  break;\n                }\n\n                _context19.next = 4;\n                return filteredCollection.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context19.next = 8;\n                break;\n\n              case 6:\n                _context19.next = 8;\n                return filteredCollection.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context19.abrupt("return", _this20.data);\n\n              case 9:\n              case "end":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterNotNull",\n    value: function filterNotNull() {\n      var _this21 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee20() {\n        var processedArray, _iterator13, _step13, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                processedArray = new Array();\n                _iterator13 = _createForOfIteratorHelper(_this21.data);\n\n                try {\n                  for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n                    eachDatum = _step13.value;\n                    if (eachDatum != null) processedArray.push(eachDatum);\n                  }\n                } catch (err) {\n                  _iterator13.e(err);\n                } finally {\n                  _iterator13.f();\n                }\n\n                if (!(_this21.data instanceof Array)) {\n                  _context20.next = 7;\n                  break;\n                }\n\n                return _context20.abrupt("return", processedArray);\n\n              case 7:\n                return _context20.abrupt("return", new Set(processedArray));\n\n              case 8:\n              case "end":\n                return _context20.stop();\n            }\n          }\n        }, _callee20);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterNotNullTo",\n    value: function filterNotNullTo(destination) {\n      var _this22 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee21() {\n        var filteredCollection;\n        return _regenerator["default"].wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                filteredCollection = _this22.filterNotNull();\n\n                if (!(destination instanceof Array)) {\n                  _context21.next = 6;\n                  break;\n                }\n\n                _context21.next = 4;\n                return filteredCollection.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context21.next = 8;\n                break;\n\n              case 6:\n                _context21.next = 8;\n                return filteredCollection.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context21.abrupt("return", _this22.data);\n\n              case 9:\n              case "end":\n                return _context21.stop();\n            }\n          }\n        }, _callee21);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "sortedBy",\n    value: function sortedBy(selector, thisArg) {\n      var _this23 = this;\n\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee22() {\n        var processedArray, dataArray, eachIndex, currentComparable, startIndex, middleIndex, endIndex, targetComparable, isCurrentGreater, eachCompareResult, numberResult;\n        return _regenerator["default"].wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this23.data);\n                _context22.t0 = _regenerator["default"].keys(dataArray);\n\n              case 3:\n                if ((_context22.t1 = _context22.t0()).done) {\n                  _context22.next = 38;\n                  break;\n                }\n\n                eachIndex = _context22.t1.value;\n\n                if (!Object.prototype.hasOwnProperty.call(dataArray, eachIndex)) {\n                  _context22.next = 36;\n                  break;\n                }\n\n                _context22.next = 8;\n                return selector(dataArray[eachIndex]);\n\n              case 8:\n                currentComparable = _context22.sent;\n                startIndex = 0;\n                middleIndex = void 0;\n                endIndex = processedArray.length;\n\n              case 12:\n                if (!(startIndex < endIndex)) {\n                  _context22.next = 35;\n                  break;\n                }\n\n                middleIndex = Math.floor((startIndex + endIndex) / 2);\n                _context22.next = 16;\n                return selector(processedArray[middleIndex]);\n\n              case 16:\n                targetComparable = _context22.sent;\n                isCurrentGreater = false;\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(currentComparable)) {\n                  _context22.next = 31;\n                  break;\n                }\n\n                eachCompareResult = currentComparable.compareTo(targetComparable);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context22.next = 27;\n                  break;\n                }\n\n                _context22.next = 24;\n                return eachCompareResult["yield"]();\n\n              case 24:\n                numberResult = _context22.sent;\n                _context22.next = 28;\n                break;\n\n              case 27:\n                numberResult = eachCompareResult;\n\n              case 28:\n                if (numberResult > 0) isCurrentGreater = true;\n                _context22.next = 32;\n                break;\n\n              case 31:\n                isCurrentGreater = targetComparable < currentComparable;\n\n              case 32:\n                if (isCurrentGreater) startIndex = middleIndex + 1;else endIndex = middleIndex;\n                _context22.next = 12;\n                break;\n\n              case 35:\n                processedArray.splice(endIndex, 0, dataArray[eachIndex]);\n\n              case 36:\n                _context22.next = 3;\n                break;\n\n              case 38:\n                if (!(_this23.data instanceof Array)) {\n                  _context22.next = 42;\n                  break;\n                }\n\n                return _context22.abrupt("return", processedArray);\n\n              case 42:\n                return _context22.abrupt("return", new Set(processedArray));\n\n              case 43:\n              case "end":\n                return _context22.stop();\n            }\n          }\n        }, _callee22);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "sortedByDescending",\n    value: function sortedByDescending(selector, thisArg) {\n      var _this24 = this;\n\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee23() {\n        var processedArray, dataArray, eachIndex, currentComparable, startIndex, middleIndex, endIndex, targetComparable, isCurrentLesser, eachCompareResult, numberResult;\n        return _regenerator["default"].wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this24.data);\n                _context23.t0 = _regenerator["default"].keys(dataArray);\n\n              case 3:\n                if ((_context23.t1 = _context23.t0()).done) {\n                  _context23.next = 38;\n                  break;\n                }\n\n                eachIndex = _context23.t1.value;\n\n                if (!Object.prototype.hasOwnProperty.call(dataArray, eachIndex)) {\n                  _context23.next = 36;\n                  break;\n                }\n\n                _context23.next = 8;\n                return selector(dataArray[eachIndex]);\n\n              case 8:\n                currentComparable = _context23.sent;\n                startIndex = 0;\n                middleIndex = void 0;\n                endIndex = processedArray.length;\n\n              case 12:\n                if (!(startIndex < endIndex)) {\n                  _context23.next = 35;\n                  break;\n                }\n\n                middleIndex = Math.floor((startIndex + endIndex) / 2);\n                _context23.next = 16;\n                return selector(processedArray[middleIndex]);\n\n              case 16:\n                targetComparable = _context23.sent;\n                isCurrentLesser = false;\n\n                if (!_module.KoconutTypeChecker.checkIsComparable(currentComparable)) {\n                  _context23.next = 31;\n                  break;\n                }\n\n                eachCompareResult = currentComparable.compareTo(targetComparable);\n                numberResult = 0;\n\n                if (!(eachCompareResult instanceof _module.KoconutPrimitive)) {\n                  _context23.next = 27;\n                  break;\n                }\n\n                _context23.next = 24;\n                return eachCompareResult["yield"]();\n\n              case 24:\n                numberResult = _context23.sent;\n                _context23.next = 28;\n                break;\n\n              case 27:\n                numberResult = eachCompareResult;\n\n              case 28:\n                if (numberResult < 0) isCurrentLesser = true;\n                _context23.next = 32;\n                break;\n\n              case 31:\n                isCurrentLesser = targetComparable > currentComparable;\n\n              case 32:\n                if (isCurrentLesser) startIndex = middleIndex + 1;else endIndex = middleIndex;\n                _context23.next = 12;\n                break;\n\n              case 35:\n                processedArray.splice(endIndex, 0, dataArray[eachIndex]);\n\n              case 36:\n                _context23.next = 3;\n                break;\n\n              case 38:\n                if (!(_this24.data instanceof Array)) {\n                  _context23.next = 42;\n                  break;\n                }\n\n                return _context23.abrupt("return", processedArray);\n\n              case 42:\n                return _context23.abrupt("return", new Set(processedArray));\n\n              case 43:\n              case "end":\n                return _context23.stop();\n            }\n          }\n        }, _callee23);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "sortedWith",\n    value: function sortedWith(comparator, thisArg) {\n      var _this25 = this;\n\n      comparator = comparator.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee24() {\n        var processedArray, dataArray, eachIndex, startIndex, middleIndex, endIndex;\n        return _regenerator["default"].wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this25.data);\n                _context24.t0 = _regenerator["default"].keys(dataArray);\n\n              case 3:\n                if ((_context24.t1 = _context24.t0()).done) {\n                  _context24.next = 24;\n                  break;\n                }\n\n                eachIndex = _context24.t1.value;\n\n                if (!Object.prototype.hasOwnProperty.call(dataArray, eachIndex)) {\n                  _context24.next = 22;\n                  break;\n                }\n\n                startIndex = 0;\n                middleIndex = void 0;\n                endIndex = processedArray.length;\n\n              case 9:\n                if (!(startIndex < endIndex)) {\n                  _context24.next = 21;\n                  break;\n                }\n\n                middleIndex = Math.floor((startIndex + endIndex) / 2);\n                _context24.next = 13;\n                return comparator(dataArray[eachIndex], processedArray[middleIndex]);\n\n              case 13:\n                _context24.t2 = _context24.sent;\n\n                if (!(_context24.t2 >= 0)) {\n                  _context24.next = 18;\n                  break;\n                }\n\n                startIndex = middleIndex + 1;\n                _context24.next = 19;\n                break;\n\n              case 18:\n                endIndex = middleIndex;\n\n              case 19:\n                _context24.next = 9;\n                break;\n\n              case 21:\n                processedArray.splice(endIndex, 0, dataArray[eachIndex]);\n\n              case 22:\n                _context24.next = 3;\n                break;\n\n              case 24:\n                if (!(_this25.data instanceof Array)) {\n                  _context24.next = 28;\n                  break;\n                }\n\n                return _context24.abrupt("return", processedArray);\n\n              case 28:\n                return _context24.abrupt("return", new Set(processedArray));\n\n              case 29:\n              case "end":\n                return _context24.stop();\n            }\n          }\n        }, _callee24);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "take",\n    value: function take(n) {\n      var _this26 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee25() {\n        var processedArray;\n        return _regenerator["default"].wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                processedArray = Array.from(_this26.data).slice(0, n);\n\n                if (!(_this26.data instanceof Array)) {\n                  _context25.next = 5;\n                  break;\n                }\n\n                return _context25.abrupt("return", processedArray);\n\n              case 5:\n                return _context25.abrupt("return", new Set(processedArray));\n\n              case 6:\n              case "end":\n                return _context25.stop();\n            }\n          }\n        }, _callee25);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "takeLast",\n    value: function takeLast(n) {\n      var _this27 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee26() {\n        var processedArray;\n        return _regenerator["default"].wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                processedArray = Array.from(_this27.data).slice(_this27.mSize - n, _this27.mSize);\n\n                if (!(_this27.data instanceof Array)) {\n                  _context26.next = 5;\n                  break;\n                }\n\n                return _context26.abrupt("return", processedArray);\n\n              case 5:\n                return _context26.abrupt("return", new Set(processedArray));\n\n              case 6:\n              case "end":\n                return _context26.stop();\n            }\n          }\n        }, _callee26);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "takeLastWhile",\n    value: function takeLastWhile(predicate, thisArg) {\n      var _this28 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee27() {\n        var processedArray, dataArray, targetIndex;\n        return _regenerator["default"].wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this28.data);\n                targetIndex = _this28.mSize - 1;\n\n              case 3:\n                if (!(targetIndex >= 0)) {\n                  _context27.next = 11;\n                  break;\n                }\n\n                _context27.next = 6;\n                return predicate(dataArray[targetIndex]);\n\n              case 6:\n                if (_context27.sent) {\n                  _context27.next = 8;\n                  break;\n                }\n\n                return _context27.abrupt("break", 11);\n\n              case 8:\n                targetIndex--;\n                _context27.next = 3;\n                break;\n\n              case 11:\n                processedArray = dataArray.slice(targetIndex + 1, _this28.mSize);\n\n                if (!(_this28.data instanceof Array)) {\n                  _context27.next = 16;\n                  break;\n                }\n\n                return _context27.abrupt("return", processedArray);\n\n              case 16:\n                return _context27.abrupt("return", new Set(processedArray));\n\n              case 17:\n              case "end":\n                return _context27.stop();\n            }\n          }\n        }, _callee27);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "takeWhile",\n    value: function takeWhile(predicate, thisArg) {\n      var _this29 = this;\n\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee28() {\n        var processedArray, predicateIndex, _iterator14, _step14, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                processedArray = new Array();\n                predicateIndex = 0;\n                _iterator14 = _createForOfIteratorHelper(_this29.data);\n                _context28.prev = 3;\n\n                _iterator14.s();\n\n              case 5:\n                if ((_step14 = _iterator14.n()).done) {\n                  _context28.next = 14;\n                  break;\n                }\n\n                eachDatum = _step14.value;\n                _context28.next = 9;\n                return predicate(eachDatum);\n\n              case 9:\n                if (_context28.sent) {\n                  _context28.next = 11;\n                  break;\n                }\n\n                return _context28.abrupt("break", 14);\n\n              case 11:\n                predicateIndex++;\n\n              case 12:\n                _context28.next = 5;\n                break;\n\n              case 14:\n                _context28.next = 19;\n                break;\n\n              case 16:\n                _context28.prev = 16;\n                _context28.t0 = _context28["catch"](3);\n\n                _iterator14.e(_context28.t0);\n\n              case 19:\n                _context28.prev = 19;\n\n                _iterator14.f();\n\n                return _context28.finish(19);\n\n              case 22:\n                processedArray = Array.from(_this29.data).slice(0, predicateIndex);\n\n                if (!(_this29.data instanceof Array)) {\n                  _context28.next = 27;\n                  break;\n                }\n\n                return _context28.abrupt("return", processedArray);\n\n              case 27:\n                return _context28.abrupt("return", new Set(processedArray));\n\n              case 28:\n              case "end":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, null, [[3, 16, 19, 22]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "elementAt",\n    value: function elementAt(index) {\n      var _this30 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee29() {\n        return _regenerator["default"].wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                if (!(index < 0 || index >= _this30.mSize)) {\n                  _context29.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutIndexOutOfBoundsException("Cannot search for data at index of ".concat(index));\n\n              case 2:\n                return _context29.abrupt("return", Array.from(_this30.data)[index]);\n\n              case 3:\n              case "end":\n                return _context29.stop();\n            }\n          }\n        }, _callee29);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "elementAtOrElse",\n    value: function elementAtOrElse(index, defaultValue) {\n      var _this31 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      defaultValue = defaultValue.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee30() {\n        return _regenerator["default"].wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                if (!(index < 0 || index >= _this31.mSize)) {\n                  _context30.next = 6;\n                  break;\n                }\n\n                _context30.next = 3;\n                return defaultValue(index);\n\n              case 3:\n                return _context30.abrupt("return", _context30.sent);\n\n              case 6:\n                return _context30.abrupt("return", Array.from(_this31.data)[index]);\n\n              case 7:\n              case "end":\n                return _context30.stop();\n            }\n          }\n        }, _callee30);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "elementAtOrNull",\n    value: function elementAtOrNull(index) {\n      var _this32 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee31() {\n        return _regenerator["default"].wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                if (!(index < 0 || index >= _this32.mSize)) {\n                  _context31.next = 2;\n                  break;\n                }\n\n                return _context31.abrupt("return", null);\n\n              case 2:\n                return _context31.abrupt("return", Array.from(_this32.data)[index]);\n\n              case 3:\n              case "end":\n                return _context31.stop();\n            }\n          }\n        }, _callee31);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "find",\n    value: function find(predicate) {\n      var _this33 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee32() {\n        var _iterator15, _step15, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _iterator15 = _createForOfIteratorHelper(_this33.data);\n                _context32.prev = 1;\n\n                _iterator15.s();\n\n              case 3:\n                if ((_step15 = _iterator15.n()).done) {\n                  _context32.next = 11;\n                  break;\n                }\n\n                eachDatum = _step15.value;\n                _context32.next = 7;\n                return predicate(eachDatum);\n\n              case 7:\n                if (!_context32.sent) {\n                  _context32.next = 9;\n                  break;\n                }\n\n                return _context32.abrupt("return", eachDatum);\n\n              case 9:\n                _context32.next = 3;\n                break;\n\n              case 11:\n                _context32.next = 16;\n                break;\n\n              case 13:\n                _context32.prev = 13;\n                _context32.t0 = _context32["catch"](1);\n\n                _iterator15.e(_context32.t0);\n\n              case 16:\n                _context32.prev = 16;\n\n                _iterator15.f();\n\n                return _context32.finish(16);\n\n              case 19:\n                return _context32.abrupt("return", null);\n\n              case 20:\n              case "end":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, null, [[1, 13, 16, 19]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "findLast",\n    value: function findLast(predicate) {\n      var _this34 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee33() {\n        var dataArray, eachIndex;\n        return _regenerator["default"].wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                dataArray = Array.from(_this34.data);\n                eachIndex = dataArray.length - 1;\n\n              case 2:\n                if (!(eachIndex >= 0)) {\n                  _context33.next = 10;\n                  break;\n                }\n\n                _context33.next = 5;\n                return predicate(dataArray[eachIndex]);\n\n              case 5:\n                if (!_context33.sent) {\n                  _context33.next = 7;\n                  break;\n                }\n\n                return _context33.abrupt("return", dataArray[eachIndex]);\n\n              case 7:\n                eachIndex--;\n                _context33.next = 2;\n                break;\n\n              case 10:\n                return _context33.abrupt("return", null);\n\n              case 11:\n              case "end":\n                return _context33.stop();\n            }\n          }\n        }, _callee33);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "first",\n    value: function first() {\n      var _this35 = this;\n\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (predicate) predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee34() {\n        var _iterator16, _step16, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                if (!(_this35.data == null || _this35.mSize == 0)) {\n                  _context34.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is null or empty");\n\n              case 2:\n                if (!predicate) {\n                  _context34.next = 23;\n                  break;\n                }\n\n                _iterator16 = _createForOfIteratorHelper(_this35.data);\n                _context34.prev = 4;\n\n                _iterator16.s();\n\n              case 6:\n                if ((_step16 = _iterator16.n()).done) {\n                  _context34.next = 14;\n                  break;\n                }\n\n                eachDatum = _step16.value;\n                _context34.next = 10;\n                return predicate(eachDatum);\n\n              case 10:\n                if (!_context34.sent) {\n                  _context34.next = 12;\n                  break;\n                }\n\n                return _context34.abrupt("return", eachDatum);\n\n              case 12:\n                _context34.next = 6;\n                break;\n\n              case 14:\n                _context34.next = 19;\n                break;\n\n              case 16:\n                _context34.prev = 16;\n                _context34.t0 = _context34["catch"](4);\n\n                _iterator16.e(_context34.t0);\n\n              case 19:\n                _context34.prev = 19;\n\n                _iterator16.f();\n\n                return _context34.finish(19);\n\n              case 22:\n                throw new _module.KoconutNoSuchElementException("No such element is found");\n\n              case 23:\n                return _context34.abrupt("return", Array.from(_this35.data)[0]);\n\n              case 24:\n              case "end":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, null, [[4, 16, 19, 22]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "firstOrNull",\n    value: function firstOrNull() {\n      var _this36 = this;\n\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (predicate) predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee35() {\n        var _iterator17, _step17, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                if (!(_this36.data == null || _this36.mSize == 0)) {\n                  _context35.next = 2;\n                  break;\n                }\n\n                return _context35.abrupt("return", null);\n\n              case 2:\n                if (!predicate) {\n                  _context35.next = 23;\n                  break;\n                }\n\n                _iterator17 = _createForOfIteratorHelper(_this36.data);\n                _context35.prev = 4;\n\n                _iterator17.s();\n\n              case 6:\n                if ((_step17 = _iterator17.n()).done) {\n                  _context35.next = 14;\n                  break;\n                }\n\n                eachDatum = _step17.value;\n                _context35.next = 10;\n                return predicate(eachDatum);\n\n              case 10:\n                if (!_context35.sent) {\n                  _context35.next = 12;\n                  break;\n                }\n\n                return _context35.abrupt("return", eachDatum);\n\n              case 12:\n                _context35.next = 6;\n                break;\n\n              case 14:\n                _context35.next = 19;\n                break;\n\n              case 16:\n                _context35.prev = 16;\n                _context35.t0 = _context35["catch"](4);\n\n                _iterator17.e(_context35.t0);\n\n              case 19:\n                _context35.prev = 19;\n\n                _iterator17.f();\n\n                return _context35.finish(19);\n\n              case 22:\n                return _context35.abrupt("return", null);\n\n              case 23:\n                return _context35.abrupt("return", Array.from(_this36.data)[0]);\n\n              case 24:\n              case "end":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, null, [[4, 16, 19, 22]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "indexOf",\n    value: function indexOf(elementToFind) {\n      var _this37 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee36() {\n        var _iterator18, _step18, _step18$value, index, element, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _iterator18 = _createForOfIteratorHelper(Array.from(_this37.data).entries());\n                _context36.prev = 1;\n\n                _iterator18.s();\n\n              case 3:\n                if ((_step18 = _iterator18.n()).done) {\n                  _context36.next = 23;\n                  break;\n                }\n\n                _step18$value = (0, _slicedToArray2["default"])(_step18.value, 2), index = _step18$value[0], element = _step18$value[1];\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(element)) {\n                  _context36.next = 19;\n                  break;\n                }\n\n                equalityResult = element.equalsTo(elementToFind);\n                _context36.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context36.t1) {\n                  _context36.next = 12;\n                  break;\n                }\n\n                _context36.next = 11;\n                return equalityResult["yield"]();\n\n              case 11:\n                _context36.t1 = _context36.sent;\n\n              case 12:\n                _context36.t0 = _context36.t1;\n\n                if (_context36.t0) {\n                  _context36.next = 15;\n                  break;\n                }\n\n                _context36.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 15:\n                if (!_context36.t0) {\n                  _context36.next = 17;\n                  break;\n                }\n\n                return _context36.abrupt("return", index);\n\n              case 17:\n                _context36.next = 21;\n                break;\n\n              case 19:\n                if (!(element == elementToFind)) {\n                  _context36.next = 21;\n                  break;\n                }\n\n                return _context36.abrupt("return", index);\n\n              case 21:\n                _context36.next = 3;\n                break;\n\n              case 23:\n                _context36.next = 28;\n                break;\n\n              case 25:\n                _context36.prev = 25;\n                _context36.t2 = _context36["catch"](1);\n\n                _iterator18.e(_context36.t2);\n\n              case 28:\n                _context36.prev = 28;\n\n                _iterator18.f();\n\n                return _context36.finish(28);\n\n              case 31:\n                return _context36.abrupt("return", -1);\n\n              case 32:\n              case "end":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, null, [[1, 25, 28, 31]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "indexOfFirst",\n    value: function indexOfFirst(predicate) {\n      var _this38 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee37() {\n        var _iterator19, _step19, _step19$value, index, element;\n\n        return _regenerator["default"].wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _iterator19 = _createForOfIteratorHelper(Array.from(_this38.data).entries());\n                _context37.prev = 1;\n\n                _iterator19.s();\n\n              case 3:\n                if ((_step19 = _iterator19.n()).done) {\n                  _context37.next = 11;\n                  break;\n                }\n\n                _step19$value = (0, _slicedToArray2["default"])(_step19.value, 2), index = _step19$value[0], element = _step19$value[1];\n                _context37.next = 7;\n                return predicate(element);\n\n              case 7:\n                if (!_context37.sent) {\n                  _context37.next = 9;\n                  break;\n                }\n\n                return _context37.abrupt("return", index);\n\n              case 9:\n                _context37.next = 3;\n                break;\n\n              case 11:\n                _context37.next = 16;\n                break;\n\n              case 13:\n                _context37.prev = 13;\n                _context37.t0 = _context37["catch"](1);\n\n                _iterator19.e(_context37.t0);\n\n              case 16:\n                _context37.prev = 16;\n\n                _iterator19.f();\n\n                return _context37.finish(16);\n\n              case 19:\n                return _context37.abrupt("return", -1);\n\n              case 20:\n              case "end":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, null, [[1, 13, 16, 19]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "indexOfLast",\n    value: function indexOfLast(predicate) {\n      var _this39 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee38() {\n        var dataArray, eachIndex;\n        return _regenerator["default"].wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                dataArray = Array.from(_this39.data);\n                eachIndex = dataArray.length - 1;\n\n              case 2:\n                if (!(eachIndex >= 0)) {\n                  _context38.next = 10;\n                  break;\n                }\n\n                _context38.next = 5;\n                return predicate(dataArray[eachIndex]);\n\n              case 5:\n                if (!_context38.sent) {\n                  _context38.next = 7;\n                  break;\n                }\n\n                return _context38.abrupt("return", eachIndex);\n\n              case 7:\n                eachIndex--;\n                _context38.next = 2;\n                break;\n\n              case 10:\n                return _context38.abrupt("return", -1);\n\n              case 11:\n              case "end":\n                return _context38.stop();\n            }\n          }\n        }, _callee38);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "associate",\n    value: function associate(transform) {\n      var _this40 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee39() {\n        var processedMap, _iterator20, _step20, eachDatum, eachTransformResult, eachPair, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                processedMap = new Map();\n                _iterator20 = _createForOfIteratorHelper(_this40.data);\n                _context39.prev = 2;\n\n                _iterator20.s();\n\n              case 4:\n                if ((_step20 = _iterator20.n()).done) {\n                  _context39.next = 30;\n                  break;\n                }\n\n                eachDatum = _step20.value;\n                _context39.next = 8;\n                return transform(eachDatum);\n\n              case 8:\n                eachTransformResult = _context39.sent;\n\n                if (!(eachTransformResult instanceof _module.KoconutPair)) {\n                  _context39.next = 16;\n                  break;\n                }\n\n                _context39.next = 12;\n                return eachTransformResult["yield"]();\n\n              case 12:\n                eachPair = _context39.sent;\n                if (eachPair != null) processedMap.set(eachPair.first, eachPair.second);\n                _context39.next = 28;\n                break;\n\n              case 16:\n                if (!(eachTransformResult instanceof _module.Pair)) {\n                  _context39.next = 20;\n                  break;\n                }\n\n                processedMap.set(eachTransformResult.first, eachTransformResult.second);\n                _context39.next = 28;\n                break;\n\n              case 20:\n                if (!(eachTransformResult instanceof _KoconutEntry.KoconutEntry)) {\n                  _context39.next = 27;\n                  break;\n                }\n\n                _context39.next = 23;\n                return eachTransformResult["yield"]();\n\n              case 23:\n                eachEntry = _context39.sent;\n                if (eachEntry != null) processedMap.set(eachEntry.key, eachEntry.value);\n                _context39.next = 28;\n                break;\n\n              case 27:\n                if (eachTransformResult instanceof _module.Entry) processedMap.set(eachTransformResult.key, eachTransformResult.value);else processedMap.set(eachTransformResult[0], eachTransformResult[1]);\n\n              case 28:\n                _context39.next = 4;\n                break;\n\n              case 30:\n                _context39.next = 35;\n                break;\n\n              case 32:\n                _context39.prev = 32;\n                _context39.t0 = _context39["catch"](2);\n\n                _iterator20.e(_context39.t0);\n\n              case 35:\n                _context39.prev = 35;\n\n                _iterator20.f();\n\n                return _context39.finish(35);\n\n              case 38:\n                return _context39.abrupt("return", processedMap);\n\n              case 39:\n              case "end":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, null, [[2, 32, 35, 38]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "associateBy",\n    value: function associateBy(keySelector) {\n      var _this41 = this;\n\n      var valueTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var keySelectorThisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var valueTransformThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      keySelector = keySelector.bind(keySelectorThisArg);\n      if (valueTransform) valueTransform = valueTransform.bind(valueTransformThisArg);\n      var koconutToReturn = new _module.KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee40() {\n        var processedMap, _iterator21, _step21, eachDatum, eachKey, eachValue;\n\n        return _regenerator["default"].wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                processedMap = new Map();\n                _iterator21 = _createForOfIteratorHelper(_this41.data);\n                _context40.prev = 2;\n\n                _iterator21.s();\n\n              case 4:\n                if ((_step21 = _iterator21.n()).done) {\n                  _context40.next = 20;\n                  break;\n                }\n\n                eachDatum = _step21.value;\n                _context40.next = 8;\n                return keySelector(eachDatum);\n\n              case 8:\n                eachKey = _context40.sent;\n\n                if (!valueTransform) {\n                  _context40.next = 15;\n                  break;\n                }\n\n                _context40.next = 12;\n                return valueTransform(eachDatum);\n\n              case 12:\n                _context40.t0 = _context40.sent;\n                _context40.next = 16;\n                break;\n\n              case 15:\n                _context40.t0 = eachDatum;\n\n              case 16:\n                eachValue = _context40.t0;\n                processedMap.set(eachKey, eachValue);\n\n              case 18:\n                _context40.next = 4;\n                break;\n\n              case 20:\n                _context40.next = 25;\n                break;\n\n              case 22:\n                _context40.prev = 22;\n                _context40.t1 = _context40["catch"](2);\n\n                _iterator21.e(_context40.t1);\n\n              case 25:\n                _context40.prev = 25;\n\n                _iterator21.f();\n\n                return _context40.finish(25);\n\n              case 28:\n                return _context40.abrupt("return", processedMap);\n\n              case 29:\n              case "end":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, null, [[2, 22, 25, 28]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "associateByTo",\n    value: function associateByTo(destination, keySelector, valueTransform, keySelectorThisArg, valueTransformThisArg) {\n      var _this42 = this;\n\n      keySelector = keySelector.bind(keySelectorThisArg);\n      if (valueTransform) valueTransform = valueTransform.bind(valueTransformThisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee41() {\n        return _regenerator["default"].wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                _context41.next = 2;\n                return _this42.associateBy(keySelector, valueTransform, keySelectorThisArg, valueTransformThisArg).forEach(function (eachEntry) {\n                  destination.set(eachEntry.key, eachEntry.value);\n                }).process();\n\n              case 2:\n                return _context41.abrupt("return", _this42.data);\n\n              case 3:\n              case "end":\n                return _context41.stop();\n            }\n          }\n        }, _callee41);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "associateTo",\n    value: function associateTo(destination, transform, thisArg) {\n      var _this43 = this;\n\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee42() {\n        return _regenerator["default"].wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return _this43.associate(transform, thisArg).forEach(function (eachEntry) {\n                  destination.set(eachEntry.key, eachEntry.value);\n                }).process();\n\n              case 2:\n                return _context42.abrupt("return", _this43.data);\n\n              case 3:\n              case "end":\n                return _context42.stop();\n            }\n          }\n        }, _callee42);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "associateWith",\n    value: function associateWith(valueSelector) {\n      var _this44 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      valueSelector = valueSelector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee43() {\n        var processedMap, _iterator22, _step22, eachDatum, eachValue;\n\n        return _regenerator["default"].wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                processedMap = new Map();\n                _iterator22 = _createForOfIteratorHelper(_this44.data);\n                _context43.prev = 2;\n\n                _iterator22.s();\n\n              case 4:\n                if ((_step22 = _iterator22.n()).done) {\n                  _context43.next = 12;\n                  break;\n                }\n\n                eachDatum = _step22.value;\n                _context43.next = 8;\n                return valueSelector(eachDatum);\n\n              case 8:\n                eachValue = _context43.sent;\n                processedMap.set(eachDatum, eachValue);\n\n              case 10:\n                _context43.next = 4;\n                break;\n\n              case 12:\n                _context43.next = 17;\n                break;\n\n              case 14:\n                _context43.prev = 14;\n                _context43.t0 = _context43["catch"](2);\n\n                _iterator22.e(_context43.t0);\n\n              case 17:\n                _context43.prev = 17;\n\n                _iterator22.f();\n\n                return _context43.finish(17);\n\n              case 20:\n                return _context43.abrupt("return", processedMap);\n\n              case 21:\n              case "end":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, null, [[2, 14, 17, 20]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "associateWithTo",\n    value: function associateWithTo(destination, valueSelector, thisArg) {\n      var _this45 = this;\n\n      valueSelector = valueSelector.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee44() {\n        return _regenerator["default"].wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                _context44.next = 2;\n                return _this45.associateWith(valueSelector, thisArg).forEach(function (eachEntry) {\n                  destination.set(eachEntry.key, eachEntry.value);\n                }).process();\n\n              case 2:\n                return _context44.abrupt("return", _this45.data);\n\n              case 3:\n              case "end":\n                return _context44.stop();\n            }\n          }\n        }, _callee44);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "chunked",\n    value: function chunked(size) {\n      var _this46 = this;\n\n      var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (transform) transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee45() {\n        var processedArray, currentIndex, dataArray, transformedArray, eachProcessedIndex;\n        return _regenerator["default"].wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                if (!(size <= 0)) {\n                  _context45.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutInvalidArgumentException("Size must be greater than 0. Given size : ".concat(size, "."));\n\n              case 2:\n                processedArray = new Array();\n                currentIndex = 0;\n                dataArray = Array.from(_this46.data);\n\n                while (currentIndex < dataArray.length) {\n                  processedArray.push(dataArray.slice(currentIndex, currentIndex + size));\n                  currentIndex += size;\n                }\n\n                if (!transform) {\n                  _context45.next = 20;\n                  break;\n                }\n\n                transformedArray = new Array();\n                _context45.t0 = _regenerator["default"].keys(processedArray);\n\n              case 9:\n                if ((_context45.t1 = _context45.t0()).done) {\n                  _context45.next = 19;\n                  break;\n                }\n\n                eachProcessedIndex = _context45.t1.value;\n\n                if (!Object.prototype.hasOwnProperty.call(processedArray, eachProcessedIndex)) {\n                  _context45.next = 17;\n                  break;\n                }\n\n                _context45.t2 = transformedArray;\n                _context45.next = 15;\n                return transform(processedArray[eachProcessedIndex]);\n\n              case 15:\n                _context45.t3 = _context45.sent;\n\n                _context45.t2.push.call(_context45.t2, _context45.t3);\n\n              case 17:\n                _context45.next = 9;\n                break;\n\n              case 19:\n                return _context45.abrupt("return", transformedArray);\n\n              case 20:\n                return _context45.abrupt("return", processedArray);\n\n              case 21:\n              case "end":\n                return _context45.stop();\n            }\n          }\n        }, _callee45);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "flatMapIndexed",\n    value: function flatMapIndexed(transform) {\n      var _this47 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee46() {\n        var processedArray, eachIndex, _iterator23, _step23, eachDatum, _iterator24, _step24, eachSubElement;\n\n        return _regenerator["default"].wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                processedArray = new Array();\n                eachIndex = 0;\n                _iterator23 = _createForOfIteratorHelper(_this47.data);\n                _context46.prev = 3;\n\n                _iterator23.s();\n\n              case 5:\n                if ((_step23 = _iterator23.n()).done) {\n                  _context46.next = 15;\n                  break;\n                }\n\n                eachDatum = _step23.value;\n                _context46.t0 = _createForOfIteratorHelper;\n                _context46.next = 10;\n                return transform(eachIndex++, eachDatum);\n\n              case 10:\n                _context46.t1 = _context46.sent;\n                _iterator24 = (0, _context46.t0)(_context46.t1);\n\n                try {\n                  for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n                    eachSubElement = _step24.value;\n                    processedArray.push(eachSubElement);\n                  }\n                } catch (err) {\n                  _iterator24.e(err);\n                } finally {\n                  _iterator24.f();\n                }\n\n              case 13:\n                _context46.next = 5;\n                break;\n\n              case 15:\n                _context46.next = 20;\n                break;\n\n              case 17:\n                _context46.prev = 17;\n                _context46.t2 = _context46["catch"](3);\n\n                _iterator23.e(_context46.t2);\n\n              case 20:\n                _context46.prev = 20;\n\n                _iterator23.f();\n\n                return _context46.finish(20);\n\n              case 23:\n                return _context46.abrupt("return", processedArray);\n\n              case 24:\n              case "end":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, null, [[3, 17, 20, 23]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "flatMapTo",\n    value: function flatMapTo(destination, transform, thisArg) {\n      return KoconutCollection.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutCollection.prototype), "flatMapTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "flatMapIndexedTo",\n    value: function flatMapIndexedTo(destination, transform, thisArg) {\n      var _this48 = this;\n\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee47() {\n        var flattenCollection;\n        return _regenerator["default"].wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                flattenCollection = _this48.flatMapIndexed(transform, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context47.next = 6;\n                  break;\n                }\n\n                _context47.next = 4;\n                return flattenCollection.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context47.next = 8;\n                break;\n\n              case 6:\n                _context47.next = 8;\n                return flattenCollection.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context47.abrupt("return", _this48.data);\n\n              case 9:\n              case "end":\n                return _context47.stop();\n            }\n          }\n        }, _callee47);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "groupBy",\n    value: function groupBy(keySelector) {\n      var _this49 = this;\n\n      var valueTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var keySelectorThisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var valueTransformThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      keySelector = keySelector.bind(keySelectorThisArg);\n      if (valueTransform) valueTransform = valueTransform.bind(valueTransformThisArg);\n      var koconutToReturn = new _module.KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee48() {\n        var processedMap, _iterator25, _step25, _processedMap$get, eachDatum, eachKey, eachValue;\n\n        return _regenerator["default"].wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                processedMap = new Map();\n                _iterator25 = _createForOfIteratorHelper(_this49.data);\n                _context48.prev = 2;\n\n                _iterator25.s();\n\n              case 4:\n                if ((_step25 = _iterator25.n()).done) {\n                  _context48.next = 21;\n                  break;\n                }\n\n                eachDatum = _step25.value;\n                _context48.next = 8;\n                return keySelector(eachDatum);\n\n              case 8:\n                eachKey = _context48.sent;\n\n                if (!valueTransform) {\n                  _context48.next = 15;\n                  break;\n                }\n\n                _context48.next = 12;\n                return valueTransform(eachDatum);\n\n              case 12:\n                _context48.t0 = _context48.sent;\n                _context48.next = 16;\n                break;\n\n              case 15:\n                _context48.t0 = eachDatum;\n\n              case 16:\n                eachValue = _context48.t0;\n                if (!processedMap.has(eachKey)) processedMap.set(eachKey, new Array());\n                (_processedMap$get = processedMap.get(eachKey)) === null || _processedMap$get === void 0 ? void 0 : _processedMap$get.push(eachValue);\n\n              case 19:\n                _context48.next = 4;\n                break;\n\n              case 21:\n                _context48.next = 26;\n                break;\n\n              case 23:\n                _context48.prev = 23;\n                _context48.t1 = _context48["catch"](2);\n\n                _iterator25.e(_context48.t1);\n\n              case 26:\n                _context48.prev = 26;\n\n                _iterator25.f();\n\n                return _context48.finish(26);\n\n              case 29:\n                return _context48.abrupt("return", processedMap);\n\n              case 30:\n              case "end":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, null, [[2, 23, 26, 29]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "groupByTo",\n    value: function groupByTo(destination, keySelector, valueTransform, keySelectorThisArg, valueTransformThisArg) {\n      var _this50 = this;\n\n      keySelector = keySelector.bind(keySelectorThisArg);\n      if (valueTransform) valueTransform = valueTransform.bind(valueTransformThisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee49() {\n        var _iterator26, _step26, _destination$get, eachDatum, eachKey, eachValue;\n\n        return _regenerator["default"].wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                _iterator26 = _createForOfIteratorHelper(_this50.data);\n                _context49.prev = 1;\n\n                _iterator26.s();\n\n              case 3:\n                if ((_step26 = _iterator26.n()).done) {\n                  _context49.next = 20;\n                  break;\n                }\n\n                eachDatum = _step26.value;\n                _context49.next = 7;\n                return keySelector(eachDatum);\n\n              case 7:\n                eachKey = _context49.sent;\n\n                if (!valueTransform) {\n                  _context49.next = 14;\n                  break;\n                }\n\n                _context49.next = 11;\n                return valueTransform(eachDatum);\n\n              case 11:\n                _context49.t0 = _context49.sent;\n                _context49.next = 15;\n                break;\n\n              case 14:\n                _context49.t0 = eachDatum;\n\n              case 15:\n                eachValue = _context49.t0;\n                if (!destination.has(eachKey)) destination.set(eachKey, new Array());\n                (_destination$get = destination.get(eachKey)) === null || _destination$get === void 0 ? void 0 : _destination$get.push(eachValue);\n\n              case 18:\n                _context49.next = 3;\n                break;\n\n              case 20:\n                _context49.next = 25;\n                break;\n\n              case 22:\n                _context49.prev = 22;\n                _context49.t1 = _context49["catch"](1);\n\n                _iterator26.e(_context49.t1);\n\n              case 25:\n                _context49.prev = 25;\n\n                _iterator26.f();\n\n                return _context49.finish(25);\n\n              case 28:\n                return _context49.abrupt("return", _this50.data);\n\n              case 29:\n              case "end":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, null, [[1, 22, 25, 28]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapTo",\n    value: function mapTo(destination, transform, thisArg) {\n      return KoconutCollection.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutCollection.prototype), "mapTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapNotNullTo",\n    value: function mapNotNullTo(destination, transform, thisArg) {\n      return KoconutCollection.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutCollection.prototype), "mapNotNullTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapIndexed",\n    value: function mapIndexed(transform) {\n      var _this51 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee50() {\n        var processedArray, _iterator27, _step27, _step27$value, eachIndex, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                processedArray = new Array();\n                _iterator27 = _createForOfIteratorHelper(Array.from(_this51.data).entries());\n                _context50.prev = 2;\n\n                _iterator27.s();\n\n              case 4:\n                if ((_step27 = _iterator27.n()).done) {\n                  _context50.next = 13;\n                  break;\n                }\n\n                _step27$value = (0, _slicedToArray2["default"])(_step27.value, 2), eachIndex = _step27$value[0], eachDatum = _step27$value[1];\n                _context50.t0 = processedArray;\n                _context50.next = 9;\n                return transform(eachIndex, eachDatum);\n\n              case 9:\n                _context50.t1 = _context50.sent;\n\n                _context50.t0.push.call(_context50.t0, _context50.t1);\n\n              case 11:\n                _context50.next = 4;\n                break;\n\n              case 13:\n                _context50.next = 18;\n                break;\n\n              case 15:\n                _context50.prev = 15;\n                _context50.t2 = _context50["catch"](2);\n\n                _iterator27.e(_context50.t2);\n\n              case 18:\n                _context50.prev = 18;\n\n                _iterator27.f();\n\n                return _context50.finish(18);\n\n              case 21:\n                return _context50.abrupt("return", processedArray);\n\n              case 22:\n              case "end":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, null, [[2, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapIndexedTo",\n    value: function mapIndexedTo(destination, transform, thisArg) {\n      var _this52 = this;\n\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee51() {\n        var mappedCollection;\n        return _regenerator["default"].wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                mappedCollection = _this52.mapIndexed(transform, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context51.next = 6;\n                  break;\n                }\n\n                _context51.next = 4;\n                return mappedCollection.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context51.next = 8;\n                break;\n\n              case 6:\n                _context51.next = 8;\n                return mappedCollection.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context51.abrupt("return", _this52.data);\n\n              case 9:\n              case "end":\n                return _context51.stop();\n            }\n          }\n        }, _callee51);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapIndexedNotNull",\n    value: function mapIndexedNotNull(transform) {\n      var _this53 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee52() {\n        var processedArray, _iterator28, _step28, _step28$value, eachIndex, eachDatum, eachResultData;\n\n        return _regenerator["default"].wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                processedArray = new Array();\n                _iterator28 = _createForOfIteratorHelper(Array.from(_this53.data).entries());\n                _context52.prev = 2;\n\n                _iterator28.s();\n\n              case 4:\n                if ((_step28 = _iterator28.n()).done) {\n                  _context52.next = 12;\n                  break;\n                }\n\n                _step28$value = (0, _slicedToArray2["default"])(_step28.value, 2), eachIndex = _step28$value[0], eachDatum = _step28$value[1];\n                _context52.next = 8;\n                return transform(eachIndex, eachDatum);\n\n              case 8:\n                eachResultData = _context52.sent;\n                if (eachResultData != null && eachResultData != undefined) processedArray.push(eachResultData);\n\n              case 10:\n                _context52.next = 4;\n                break;\n\n              case 12:\n                _context52.next = 17;\n                break;\n\n              case 14:\n                _context52.prev = 14;\n                _context52.t0 = _context52["catch"](2);\n\n                _iterator28.e(_context52.t0);\n\n              case 17:\n                _context52.prev = 17;\n\n                _iterator28.f();\n\n                return _context52.finish(17);\n\n              case 20:\n                return _context52.abrupt("return", processedArray);\n\n              case 21:\n              case "end":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, null, [[2, 14, 17, 20]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapIndexedNotNullTo",\n    value: function mapIndexedNotNullTo(destination, transform, thisArg) {\n      var _this54 = this;\n\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee53() {\n        var mappedCollection;\n        return _regenerator["default"].wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                mappedCollection = _this54.mapIndexedNotNull(transform, thisArg);\n\n                if (!(destination instanceof Array)) {\n                  _context53.next = 6;\n                  break;\n                }\n\n                _context53.next = 4;\n                return mappedCollection.forEach(function (eachElement) {\n                  destination.push(eachElement);\n                }).process();\n\n              case 4:\n                _context53.next = 8;\n                break;\n\n              case 6:\n                _context53.next = 8;\n                return mappedCollection.asSet().forEach(function (eachElement) {\n                  destination.add(eachElement);\n                }).process();\n\n              case 8:\n                return _context53.abrupt("return", _this54.data);\n\n              case 9:\n              case "end":\n                return _context53.stop();\n            }\n          }\n        }, _callee53);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "intersect",\n    value: function intersect(other) {\n      var _this55 = this;\n\n      var koconutToReturn = new _module.KoconutSet();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee54() {\n        var processedSet, otherArray, _iterator29, _step29, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                processedSet = new Set();\n                otherArray = _module.KoconutArray.from(other);\n                _iterator29 = _createForOfIteratorHelper(_this55.data);\n                _context54.prev = 3;\n\n                _iterator29.s();\n\n              case 5:\n                if ((_step29 = _iterator29.n()).done) {\n                  _context54.next = 13;\n                  break;\n                }\n\n                eachDatum = _step29.value;\n                _context54.next = 9;\n                return otherArray.contains(eachDatum)["yield"]();\n\n              case 9:\n                if (!_context54.sent) {\n                  _context54.next = 11;\n                  break;\n                }\n\n                processedSet.add(eachDatum);\n\n              case 11:\n                _context54.next = 5;\n                break;\n\n              case 13:\n                _context54.next = 18;\n                break;\n\n              case 15:\n                _context54.prev = 15;\n                _context54.t0 = _context54["catch"](3);\n\n                _iterator29.e(_context54.t0);\n\n              case 18:\n                _context54.prev = 18;\n\n                _iterator29.f();\n\n                return _context54.finish(18);\n\n              case 21:\n                return _context54.abrupt("return", processedSet);\n\n              case 22:\n              case "end":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "join",\n    value: function join() {\n      var _this56 = this;\n\n      var separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \', \';\n      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \'\';\n      var postfix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \'\';\n      var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n      var truncated = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \'...\';\n      var transform = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      var thisArg = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n      if (transform) transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee55() {\n        var resultString, currentCount, length, _iterator30, _step30, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                resultString = prefix;\n                currentCount = 0;\n                length = _this56.mSize;\n                _iterator30 = _createForOfIteratorHelper(_this56.data);\n                _context55.prev = 4;\n\n                _iterator30.s();\n\n              case 6:\n                if ((_step30 = _iterator30.n()).done) {\n                  _context55.next = 24;\n                  break;\n                }\n\n                eachDatum = _step30.value;\n\n                if (!(currentCount == limit)) {\n                  _context55.next = 11;\n                  break;\n                }\n\n                resultString += truncated;\n                return _context55.abrupt("break", 24);\n\n              case 11:\n                _context55.t0 = resultString;\n\n                if (!transform) {\n                  _context55.next = 18;\n                  break;\n                }\n\n                _context55.next = 15;\n                return transform(eachDatum);\n\n              case 15:\n                _context55.t1 = _context55.sent;\n                _context55.next = 19;\n                break;\n\n              case 18:\n                _context55.t1 = eachDatum;\n\n              case 19:\n                resultString = _context55.t0 += _context55.t1;\n                currentCount++;\n                if (currentCount != length && currentCount != limit) resultString += separator;\n\n              case 22:\n                _context55.next = 6;\n                break;\n\n              case 24:\n                _context55.next = 29;\n                break;\n\n              case 26:\n                _context55.prev = 26;\n                _context55.t2 = _context55["catch"](4);\n\n                _iterator30.e(_context55.t2);\n\n              case 29:\n                _context55.prev = 29;\n\n                _iterator30.f();\n\n                return _context55.finish(29);\n\n              case 32:\n                resultString += postfix;\n                return _context55.abrupt("return", resultString);\n\n              case 34:\n              case "end":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, null, [[4, 26, 29, 32]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "last",\n    value: function last() {\n      var _this57 = this;\n\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (predicate) predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee56() {\n        var dataArray, eachIndex;\n        return _regenerator["default"].wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                if (!(_this57.data == null || _this57.mSize == 0)) {\n                  _context56.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is null or empty");\n\n              case 2:\n                dataArray = Array.from(_this57.data);\n\n                if (!predicate) {\n                  _context56.next = 14;\n                  break;\n                }\n\n                eachIndex = dataArray.length;\n\n              case 5:\n                if (!(eachIndex >= 0)) {\n                  _context56.next = 13;\n                  break;\n                }\n\n                _context56.next = 8;\n                return predicate(dataArray[eachIndex]);\n\n              case 8:\n                if (!_context56.sent) {\n                  _context56.next = 10;\n                  break;\n                }\n\n                return _context56.abrupt("return", dataArray[eachIndex]);\n\n              case 10:\n                eachIndex--;\n                _context56.next = 5;\n                break;\n\n              case 13:\n                throw new _module.KoconutNoSuchElementException("No such element is found");\n\n              case 14:\n                return _context56.abrupt("return", dataArray[dataArray.length - 1]);\n\n              case 15:\n              case "end":\n                return _context56.stop();\n            }\n          }\n        }, _callee56);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "lastIndexOf",\n    value: function lastIndexOf(element) {\n      var _this58 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee57() {\n        var dataArray, eachIndex, eachElement, equalityResult;\n        return _regenerator["default"].wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                dataArray = Array.from(_this58.data);\n                eachIndex = dataArray.length - 1;\n\n              case 2:\n                if (!(eachIndex >= 0)) {\n                  _context57.next = 23;\n                  break;\n                }\n\n                eachElement = dataArray[eachIndex];\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachElement)) {\n                  _context57.next = 18;\n                  break;\n                }\n\n                equalityResult = eachElement.equalsTo(element);\n                _context57.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context57.t1) {\n                  _context57.next = 11;\n                  break;\n                }\n\n                _context57.next = 10;\n                return equalityResult["yield"]();\n\n              case 10:\n                _context57.t1 = _context57.sent;\n\n              case 11:\n                _context57.t0 = _context57.t1;\n\n                if (_context57.t0) {\n                  _context57.next = 14;\n                  break;\n                }\n\n                _context57.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 14:\n                if (!_context57.t0) {\n                  _context57.next = 16;\n                  break;\n                }\n\n                return _context57.abrupt("return", eachIndex);\n\n              case 16:\n                _context57.next = 20;\n                break;\n\n              case 18:\n                if (!(eachElement == element)) {\n                  _context57.next = 20;\n                  break;\n                }\n\n                return _context57.abrupt("return", eachIndex);\n\n              case 20:\n                eachIndex--;\n                _context57.next = 2;\n                break;\n\n              case 23:\n                return _context57.abrupt("return", -1);\n\n              case 24:\n              case "end":\n                return _context57.stop();\n            }\n          }\n        }, _callee57);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "lastOrNull",\n    value: function lastOrNull() {\n      var _this59 = this;\n\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (predicate) predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee58() {\n        var dataArray, length, eachIndex;\n        return _regenerator["default"].wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n                dataArray = Array.from(_this59.data);\n                length = dataArray.length;\n\n                if (!(length == 0)) {\n                  _context58.next = 4;\n                  break;\n                }\n\n                return _context58.abrupt("return", null);\n\n              case 4:\n                if (!predicate) {\n                  _context58.next = 17;\n                  break;\n                }\n\n                eachIndex = length - 1;\n\n              case 6:\n                if (!(eachIndex >= 0)) {\n                  _context58.next = 14;\n                  break;\n                }\n\n                _context58.next = 9;\n                return predicate(dataArray[eachIndex]);\n\n              case 9:\n                if (!_context58.sent) {\n                  _context58.next = 11;\n                  break;\n                }\n\n                return _context58.abrupt("return", dataArray[eachIndex]);\n\n              case 11:\n                eachIndex--;\n                _context58.next = 6;\n                break;\n\n              case 14:\n                return _context58.abrupt("return", null);\n\n              case 17:\n                return _context58.abrupt("return", dataArray[length - 1]);\n\n              case 18:\n              case "end":\n                return _context58.stop();\n            }\n          }\n        }, _callee58);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minus",\n    value: function minus(elements) {\n      var _this60 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee59() {\n        var processedArray, dataToExcept, koconutDataToExceptArray, _iterator31, _step31, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                processedArray = new Array();\n                dataToExcept = new Array();\n                if (typeof elements[Symbol.iterator] === \'function\') dataToExcept = Array.from(elements);else dataToExcept.push(elements);\n                koconutDataToExceptArray = _module.KoconutArray.from(dataToExcept);\n                _iterator31 = _createForOfIteratorHelper(_this60.data);\n                _context59.prev = 5;\n\n                _iterator31.s();\n\n              case 7:\n                if ((_step31 = _iterator31.n()).done) {\n                  _context59.next = 15;\n                  break;\n                }\n\n                eachDatum = _step31.value;\n                _context59.next = 11;\n                return koconutDataToExceptArray.contains(eachDatum)["yield"]();\n\n              case 11:\n                if (_context59.sent) {\n                  _context59.next = 13;\n                  break;\n                }\n\n                processedArray.push(eachDatum);\n\n              case 13:\n                _context59.next = 7;\n                break;\n\n              case 15:\n                _context59.next = 20;\n                break;\n\n              case 17:\n                _context59.prev = 17;\n                _context59.t0 = _context59["catch"](5);\n\n                _iterator31.e(_context59.t0);\n\n              case 20:\n                _context59.prev = 20;\n\n                _iterator31.f();\n\n                return _context59.finish(20);\n\n              case 23:\n                if (!(_this60.data instanceof Array)) {\n                  _context59.next = 27;\n                  break;\n                }\n\n                return _context59.abrupt("return", processedArray);\n\n              case 27:\n                return _context59.abrupt("return", new Set(processedArray));\n\n              case 28:\n              case "end":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, null, [[5, 17, 20, 23]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minusElement",\n    value: function minusElement(element) {\n      return this.minus(element);\n    }\n  }, {\n    key: "partition",\n    value: function partition(predicate) {\n      var _this61 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPair();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee60() {\n        var processedFirstArray, processedSecondArray, _iterator32, _step32, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                processedFirstArray = new Array();\n                processedSecondArray = new Array();\n                _iterator32 = _createForOfIteratorHelper(_this61.data);\n                _context60.prev = 3;\n\n                _iterator32.s();\n\n              case 5:\n                if ((_step32 = _iterator32.n()).done) {\n                  _context60.next = 16;\n                  break;\n                }\n\n                eachDatum = _step32.value;\n                _context60.next = 9;\n                return predicate(eachDatum);\n\n              case 9:\n                if (!_context60.sent) {\n                  _context60.next = 13;\n                  break;\n                }\n\n                processedFirstArray.push(eachDatum);\n                _context60.next = 14;\n                break;\n\n              case 13:\n                processedSecondArray.push(eachDatum);\n\n              case 14:\n                _context60.next = 5;\n                break;\n\n              case 16:\n                _context60.next = 21;\n                break;\n\n              case 18:\n                _context60.prev = 18;\n                _context60.t0 = _context60["catch"](3);\n\n                _iterator32.e(_context60.t0);\n\n              case 21:\n                _context60.prev = 21;\n\n                _iterator32.f();\n\n                return _context60.finish(21);\n\n              case 24:\n                if (!(_this61.data instanceof Array)) {\n                  _context60.next = 28;\n                  break;\n                }\n\n                return _context60.abrupt("return", new _module.Pair(processedFirstArray, processedSecondArray));\n\n              case 28:\n                return _context60.abrupt("return", new _module.Pair(new Set(processedFirstArray), new Set(processedSecondArray)));\n\n              case 29:\n              case "end":\n                return _context60.stop();\n            }\n          }\n        }, _callee60, null, [[3, 18, 21, 24]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "plus",\n    value: function plus(elements) {\n      var _this62 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee61() {\n        var processedArray, elementsArray, _i, _elementsArray, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                processedArray = Array.from(_this62.data);\n\n                if (typeof elements[Symbol.iterator] === \'function\') {\n                  elementsArray = Array.from(elements);\n\n                  for (_i = 0, _elementsArray = elementsArray; _i < _elementsArray.length; _i++) {\n                    eachDatum = _elementsArray[_i];\n                    processedArray.push(eachDatum);\n                  }\n                } else processedArray.push(elements);\n\n                if (!(_this62.data instanceof Array)) {\n                  _context61.next = 6;\n                  break;\n                }\n\n                return _context61.abrupt("return", processedArray);\n\n              case 6:\n                return _context61.abrupt("return", new Set(processedArray));\n\n              case 7:\n              case "end":\n                return _context61.stop();\n            }\n          }\n        }, _callee61);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "plusElement",\n    value: function plusElement(element) {\n      return this.plus(element);\n    }\n  }, {\n    key: "random",\n    value: function random() {\n      var _this63 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee62() {\n        var dataArray;\n        return _regenerator["default"].wrap(function _callee62$(_context62) {\n          while (1) {\n            switch (_context62.prev = _context62.next) {\n              case 0:\n                if (!(_this63.data == null || _this63.mSize == 0)) {\n                  _context62.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is null or empty");\n\n              case 2:\n                dataArray = Array.from(_this63.data);\n                return _context62.abrupt("return", dataArray[Math.floor(Math.random() * dataArray.length)]);\n\n              case 4:\n              case "end":\n                return _context62.stop();\n            }\n          }\n        }, _callee62);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "randomOrNull",\n    value: function randomOrNull() {\n      var _this64 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee63() {\n        var dataArray;\n        return _regenerator["default"].wrap(function _callee63$(_context63) {\n          while (1) {\n            switch (_context63.prev = _context63.next) {\n              case 0:\n                if (!(_this64.data == null || _this64.mSize == 0)) {\n                  _context63.next = 2;\n                  break;\n                }\n\n                return _context63.abrupt("return", null);\n\n              case 2:\n                dataArray = Array.from(_this64.data);\n                return _context63.abrupt("return", dataArray[Math.floor(Math.random() * dataArray.length)]);\n\n              case 4:\n              case "end":\n                return _context63.stop();\n            }\n          }\n        }, _callee63);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "reduce",\n    value: function reduce(operation) {\n      var _this65 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee64() {\n        var dataArray, acc, eachIndex;\n        return _regenerator["default"].wrap(function _callee64$(_context64) {\n          while (1) {\n            switch (_context64.prev = _context64.next) {\n              case 0:\n                if (!(_this65.data == null || _this65.mSize == 0)) {\n                  _context64.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is null or empty");\n\n              case 2:\n                dataArray = Array.from(_this65.data);\n                acc = dataArray[0];\n                eachIndex = 1;\n\n              case 5:\n                if (!(eachIndex < dataArray.length)) {\n                  _context64.next = 12;\n                  break;\n                }\n\n                _context64.next = 8;\n                return operation(acc, dataArray[eachIndex]);\n\n              case 8:\n                acc = _context64.sent;\n\n              case 9:\n                eachIndex++;\n                _context64.next = 5;\n                break;\n\n              case 12:\n                return _context64.abrupt("return", acc);\n\n              case 13:\n              case "end":\n                return _context64.stop();\n            }\n          }\n        }, _callee64);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "reduceIndexed",\n    value: function reduceIndexed(operation) {\n      var _this66 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee65() {\n        var dataArray, acc, eachIndex;\n        return _regenerator["default"].wrap(function _callee65$(_context65) {\n          while (1) {\n            switch (_context65.prev = _context65.next) {\n              case 0:\n                if (!(_this66.data == null || _this66.mSize == 0)) {\n                  _context65.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is null or empty");\n\n              case 2:\n                dataArray = Array.from(_this66.data);\n                acc = dataArray[0];\n                eachIndex = 1;\n\n              case 5:\n                if (!(eachIndex < dataArray.length)) {\n                  _context65.next = 12;\n                  break;\n                }\n\n                _context65.next = 8;\n                return operation(eachIndex, acc, dataArray[eachIndex]);\n\n              case 8:\n                acc = _context65.sent;\n\n              case 9:\n                eachIndex++;\n                _context65.next = 5;\n                break;\n\n              case 12:\n                return _context65.abrupt("return", acc);\n\n              case 13:\n              case "end":\n                return _context65.stop();\n            }\n          }\n        }, _callee65);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "reduceIndexedOrNull",\n    value: function reduceIndexedOrNull(operation) {\n      var _this67 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee66() {\n        var dataArray, acc, eachIndex;\n        return _regenerator["default"].wrap(function _callee66$(_context66) {\n          while (1) {\n            switch (_context66.prev = _context66.next) {\n              case 0:\n                if (!(_this67.data == null || _this67.mSize == 0)) {\n                  _context66.next = 2;\n                  break;\n                }\n\n                return _context66.abrupt("return", null);\n\n              case 2:\n                dataArray = Array.from(_this67.data);\n                acc = dataArray[0];\n                eachIndex = 1;\n\n              case 5:\n                if (!(eachIndex < dataArray.length)) {\n                  _context66.next = 12;\n                  break;\n                }\n\n                _context66.next = 8;\n                return operation(eachIndex, acc, dataArray[eachIndex]);\n\n              case 8:\n                acc = _context66.sent;\n\n              case 9:\n                eachIndex++;\n                _context66.next = 5;\n                break;\n\n              case 12:\n                return _context66.abrupt("return", acc);\n\n              case 13:\n              case "end":\n                return _context66.stop();\n            }\n          }\n        }, _callee66);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "reduceOrNull",\n    value: function reduceOrNull(operation) {\n      var _this68 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee67() {\n        var dataArray, acc, eachIndex;\n        return _regenerator["default"].wrap(function _callee67$(_context67) {\n          while (1) {\n            switch (_context67.prev = _context67.next) {\n              case 0:\n                if (!(_this68.data == null || _this68.mSize == 0)) {\n                  _context67.next = 2;\n                  break;\n                }\n\n                return _context67.abrupt("return", null);\n\n              case 2:\n                dataArray = Array.from(_this68.data);\n                acc = dataArray[0];\n                eachIndex = 1;\n\n              case 5:\n                if (!(eachIndex < dataArray.length)) {\n                  _context67.next = 12;\n                  break;\n                }\n\n                _context67.next = 8;\n                return operation(acc, dataArray[eachIndex]);\n\n              case 8:\n                acc = _context67.sent;\n\n              case 9:\n                eachIndex++;\n                _context67.next = 5;\n                break;\n\n              case 12:\n                return _context67.abrupt("return", acc);\n\n              case 13:\n              case "end":\n                return _context67.stop();\n            }\n          }\n        }, _callee67);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "reversed",\n    value: function reversed() {\n      var _this69 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee68() {\n        var processedArray;\n        return _regenerator["default"].wrap(function _callee68$(_context68) {\n          while (1) {\n            switch (_context68.prev = _context68.next) {\n              case 0:\n                processedArray = Array.from(_this69.data).reverse();\n\n                if (!(_this69.data instanceof Array)) {\n                  _context68.next = 5;\n                  break;\n                }\n\n                return _context68.abrupt("return", processedArray);\n\n              case 5:\n                return _context68.abrupt("return", new Set(processedArray));\n\n              case 6:\n              case "end":\n                return _context68.stop();\n            }\n          }\n        }, _callee68);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "runningFold",\n    value: function runningFold(initial, operation) {\n      var _this70 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee69() {\n        var processedArray, _iterator33, _step33, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee69$(_context69) {\n          while (1) {\n            switch (_context69.prev = _context69.next) {\n              case 0:\n                processedArray = new Array();\n                processedArray.push(initial);\n                _iterator33 = _createForOfIteratorHelper(_this70.data);\n                _context69.prev = 3;\n\n                _iterator33.s();\n\n              case 5:\n                if ((_step33 = _iterator33.n()).done) {\n                  _context69.next = 13;\n                  break;\n                }\n\n                eachDatum = _step33.value;\n                _context69.next = 9;\n                return operation(initial, eachDatum);\n\n              case 9:\n                initial = _context69.sent;\n                processedArray.push(initial);\n\n              case 11:\n                _context69.next = 5;\n                break;\n\n              case 13:\n                _context69.next = 18;\n                break;\n\n              case 15:\n                _context69.prev = 15;\n                _context69.t0 = _context69["catch"](3);\n\n                _iterator33.e(_context69.t0);\n\n              case 18:\n                _context69.prev = 18;\n\n                _iterator33.f();\n\n                return _context69.finish(18);\n\n              case 21:\n                return _context69.abrupt("return", processedArray);\n\n              case 22:\n              case "end":\n                return _context69.stop();\n            }\n          }\n        }, _callee69, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "runningFoldIndexed",\n    value: function runningFoldIndexed(initial, operation) {\n      var _this71 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee70() {\n        var processedArray, _iterator34, _step34, _step34$value, eachIndex, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee70$(_context70) {\n          while (1) {\n            switch (_context70.prev = _context70.next) {\n              case 0:\n                processedArray = new Array();\n                processedArray.push(initial);\n                _iterator34 = _createForOfIteratorHelper(Array.from(_this71.data).entries());\n                _context70.prev = 3;\n\n                _iterator34.s();\n\n              case 5:\n                if ((_step34 = _iterator34.n()).done) {\n                  _context70.next = 13;\n                  break;\n                }\n\n                _step34$value = (0, _slicedToArray2["default"])(_step34.value, 2), eachIndex = _step34$value[0], eachDatum = _step34$value[1];\n                _context70.next = 9;\n                return operation(eachIndex, initial, eachDatum);\n\n              case 9:\n                initial = _context70.sent;\n                processedArray.push(initial);\n\n              case 11:\n                _context70.next = 5;\n                break;\n\n              case 13:\n                _context70.next = 18;\n                break;\n\n              case 15:\n                _context70.prev = 15;\n                _context70.t0 = _context70["catch"](3);\n\n                _iterator34.e(_context70.t0);\n\n              case 18:\n                _context70.prev = 18;\n\n                _iterator34.f();\n\n                return _context70.finish(18);\n\n              case 21:\n                return _context70.abrupt("return", processedArray);\n\n              case 22:\n              case "end":\n                return _context70.stop();\n            }\n          }\n        }, _callee70, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "runningReduce",\n    value: function runningReduce(operation) {\n      var _this72 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee71() {\n        var processedArray, dataArray, acc, eachIndex;\n        return _regenerator["default"].wrap(function _callee71$(_context71) {\n          while (1) {\n            switch (_context71.prev = _context71.next) {\n              case 0:\n                if (!(_this72.data == null || _this72.mSize == 0)) {\n                  _context71.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is null or empty");\n\n              case 2:\n                processedArray = new Array();\n                dataArray = Array.from(_this72.data);\n                acc = dataArray[0];\n                processedArray.push(acc);\n                eachIndex = 1;\n\n              case 7:\n                if (!(eachIndex < dataArray.length)) {\n                  _context71.next = 15;\n                  break;\n                }\n\n                _context71.next = 10;\n                return operation(acc, dataArray[eachIndex]);\n\n              case 10:\n                acc = _context71.sent;\n                processedArray.push(acc);\n\n              case 12:\n                eachIndex++;\n                _context71.next = 7;\n                break;\n\n              case 15:\n                return _context71.abrupt("return", processedArray);\n\n              case 16:\n              case "end":\n                return _context71.stop();\n            }\n          }\n        }, _callee71);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "runningReduceIndexed",\n    value: function runningReduceIndexed(operation) {\n      var _this73 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee72() {\n        var processedArray, dataArray, acc, eachIndex;\n        return _regenerator["default"].wrap(function _callee72$(_context72) {\n          while (1) {\n            switch (_context72.prev = _context72.next) {\n              case 0:\n                if (!(_this73.data == null || _this73.mSize == 0)) {\n                  _context72.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is null or empty");\n\n              case 2:\n                processedArray = new Array();\n                dataArray = Array.from(_this73.data);\n                acc = dataArray[0];\n                processedArray.push(acc);\n                eachIndex = 1;\n\n              case 7:\n                if (!(eachIndex < dataArray.length)) {\n                  _context72.next = 15;\n                  break;\n                }\n\n                _context72.next = 10;\n                return operation(eachIndex, acc, dataArray[eachIndex]);\n\n              case 10:\n                acc = _context72.sent;\n                processedArray.push(acc);\n\n              case 12:\n                eachIndex++;\n                _context72.next = 7;\n                break;\n\n              case 15:\n                return _context72.abrupt("return", processedArray);\n\n              case 16:\n              case "end":\n                return _context72.stop();\n            }\n          }\n        }, _callee72);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "scan",\n    value: function scan(initial, operation) {\n      var _this74 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee73() {\n        var processedArray, _iterator35, _step35, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee73$(_context73) {\n          while (1) {\n            switch (_context73.prev = _context73.next) {\n              case 0:\n                processedArray = new Array();\n                processedArray.push(initial);\n                _iterator35 = _createForOfIteratorHelper(_this74.data);\n                _context73.prev = 3;\n\n                _iterator35.s();\n\n              case 5:\n                if ((_step35 = _iterator35.n()).done) {\n                  _context73.next = 13;\n                  break;\n                }\n\n                eachDatum = _step35.value;\n                _context73.next = 9;\n                return operation(initial, eachDatum);\n\n              case 9:\n                initial = _context73.sent;\n                processedArray.push(initial);\n\n              case 11:\n                _context73.next = 5;\n                break;\n\n              case 13:\n                _context73.next = 18;\n                break;\n\n              case 15:\n                _context73.prev = 15;\n                _context73.t0 = _context73["catch"](3);\n\n                _iterator35.e(_context73.t0);\n\n              case 18:\n                _context73.prev = 18;\n\n                _iterator35.f();\n\n                return _context73.finish(18);\n\n              case 21:\n                return _context73.abrupt("return", processedArray);\n\n              case 22:\n              case "end":\n                return _context73.stop();\n            }\n          }\n        }, _callee73, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "scanIndexed",\n    value: function scanIndexed(initial, operation) {\n      var _this75 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      operation = operation.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee74() {\n        var processedArray, _iterator36, _step36, _step36$value, eachIndex, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee74$(_context74) {\n          while (1) {\n            switch (_context74.prev = _context74.next) {\n              case 0:\n                processedArray = new Array();\n                processedArray.push(initial);\n                _iterator36 = _createForOfIteratorHelper(Array.from(_this75.data).entries());\n                _context74.prev = 3;\n\n                _iterator36.s();\n\n              case 5:\n                if ((_step36 = _iterator36.n()).done) {\n                  _context74.next = 13;\n                  break;\n                }\n\n                _step36$value = (0, _slicedToArray2["default"])(_step36.value, 2), eachIndex = _step36$value[0], eachDatum = _step36$value[1];\n                _context74.next = 9;\n                return operation(eachIndex, initial, eachDatum);\n\n              case 9:\n                initial = _context74.sent;\n                processedArray.push(initial);\n\n              case 11:\n                _context74.next = 5;\n                break;\n\n              case 13:\n                _context74.next = 18;\n                break;\n\n              case 15:\n                _context74.prev = 15;\n                _context74.t0 = _context74["catch"](3);\n\n                _iterator36.e(_context74.t0);\n\n              case 18:\n                _context74.prev = 18;\n\n                _iterator36.f();\n\n                return _context74.finish(18);\n\n              case 21:\n                return _context74.abrupt("return", processedArray);\n\n              case 22:\n              case "end":\n                return _context74.stop();\n            }\n          }\n        }, _callee74, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "shuffled",\n    value: function shuffled() {\n      var _this76 = this;\n\n      var koconutToReturn = new KoconutCollection();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee75() {\n        var processedArray, dataArray, indexes;\n        return _regenerator["default"].wrap(function _callee75$(_context75) {\n          while (1) {\n            switch (_context75.prev = _context75.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this76.data);\n                indexes = Object.keys(dataArray).map(function (eachIndex) {\n                  return parseInt(eachIndex);\n                });\n\n                while (indexes.length > 0) {\n                  processedArray.push(dataArray[indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0]]);\n                }\n\n                if (!(_this76.data instanceof Array)) {\n                  _context75.next = 8;\n                  break;\n                }\n\n                return _context75.abrupt("return", processedArray);\n\n              case 8:\n                return _context75.abrupt("return", new Set(processedArray));\n\n              case 9:\n              case "end":\n                return _context75.stop();\n            }\n          }\n        }, _callee75);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "single",\n    value: function single() {\n      var _this77 = this;\n\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (predicate) predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee76() {\n        var dataToReturn, _iterator37, _step37, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee76$(_context76) {\n          while (1) {\n            switch (_context76.prev = _context76.next) {\n              case 0:\n                if (!(_this77.data == null || _this77.mSize == 0)) {\n                  _context76.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException("Source data is null or empty");\n\n              case 2:\n                if (!predicate) {\n                  _context76.next = 34;\n                  break;\n                }\n\n                dataToReturn = null;\n                _iterator37 = _createForOfIteratorHelper(_this77.data);\n                _context76.prev = 5;\n\n                _iterator37.s();\n\n              case 7:\n                if ((_step37 = _iterator37.n()).done) {\n                  _context76.next = 19;\n                  break;\n                }\n\n                eachDatum = _step37.value;\n                _context76.next = 11;\n                return predicate(eachDatum);\n\n              case 11:\n                if (!_context76.sent) {\n                  _context76.next = 17;\n                  break;\n                }\n\n                if (!(dataToReturn == null)) {\n                  _context76.next = 16;\n                  break;\n                }\n\n                dataToReturn = eachDatum;\n                _context76.next = 17;\n                break;\n\n              case 16:\n                throw new _module.KoconutConflictException(\'There are more than 2 elements maching the given predicate\');\n\n              case 17:\n                _context76.next = 7;\n                break;\n\n              case 19:\n                _context76.next = 24;\n                break;\n\n              case 21:\n                _context76.prev = 21;\n                _context76.t0 = _context76["catch"](5);\n\n                _iterator37.e(_context76.t0);\n\n              case 24:\n                _context76.prev = 24;\n\n                _iterator37.f();\n\n                return _context76.finish(24);\n\n              case 27:\n                if (!(dataToReturn == null)) {\n                  _context76.next = 31;\n                  break;\n                }\n\n                throw new _module.KoconutNoSuchElementException(\'No element exists matching the given predicate\');\n\n              case 31:\n                return _context76.abrupt("return", dataToReturn);\n\n              case 32:\n                _context76.next = 35;\n                break;\n\n              case 34:\n                return _context76.abrupt("return", Array.from(_this77.data)[0]);\n\n              case 35:\n              case "end":\n                return _context76.stop();\n            }\n          }\n        }, _callee76, null, [[5, 21, 24, 27]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "singleOrNull",\n    value: function singleOrNull() {\n      var _this78 = this;\n\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (predicate) predicate = predicate.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee77() {\n        var dataToReturn, _iterator38, _step38, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee77$(_context77) {\n          while (1) {\n            switch (_context77.prev = _context77.next) {\n              case 0:\n                if (!(_this78.data == null || Array.from(_this78.data).length == 0)) {\n                  _context77.next = 2;\n                  break;\n                }\n\n                return _context77.abrupt("return", null);\n\n              case 2:\n                if (!predicate) {\n                  _context77.next = 30;\n                  break;\n                }\n\n                dataToReturn = null;\n                _iterator38 = _createForOfIteratorHelper(_this78.data);\n                _context77.prev = 5;\n\n                _iterator38.s();\n\n              case 7:\n                if ((_step38 = _iterator38.n()).done) {\n                  _context77.next = 19;\n                  break;\n                }\n\n                eachDatum = _step38.value;\n                _context77.next = 11;\n                return predicate(eachDatum);\n\n              case 11:\n                if (!_context77.sent) {\n                  _context77.next = 17;\n                  break;\n                }\n\n                if (!(dataToReturn == null)) {\n                  _context77.next = 16;\n                  break;\n                }\n\n                dataToReturn = eachDatum;\n                _context77.next = 17;\n                break;\n\n              case 16:\n                return _context77.abrupt("return", null);\n\n              case 17:\n                _context77.next = 7;\n                break;\n\n              case 19:\n                _context77.next = 24;\n                break;\n\n              case 21:\n                _context77.prev = 21;\n                _context77.t0 = _context77["catch"](5);\n\n                _iterator38.e(_context77.t0);\n\n              case 24:\n                _context77.prev = 24;\n\n                _iterator38.f();\n\n                return _context77.finish(24);\n\n              case 27:\n                return _context77.abrupt("return", dataToReturn);\n\n              case 30:\n                return _context77.abrupt("return", Array.from(_this78.data)[0]);\n\n              case 31:\n              case "end":\n                return _context77.stop();\n            }\n          }\n        }, _callee77, null, [[5, 21, 24, 27]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "subtract",\n    value: function subtract(other) {\n      var _this79 = this;\n\n      var koconutToReturn = new _module.KoconutSet();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee78() {\n        var processedSet, koconutDataToExceptArray, _iterator39, _step39, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee78$(_context78) {\n          while (1) {\n            switch (_context78.prev = _context78.next) {\n              case 0:\n                processedSet = new Set();\n                koconutDataToExceptArray = _module.KoconutArray.from(other);\n                _iterator39 = _createForOfIteratorHelper(_this79.data);\n                _context78.prev = 3;\n\n                _iterator39.s();\n\n              case 5:\n                if ((_step39 = _iterator39.n()).done) {\n                  _context78.next = 13;\n                  break;\n                }\n\n                eachDatum = _step39.value;\n                _context78.next = 9;\n                return koconutDataToExceptArray.contains(eachDatum)["yield"]();\n\n              case 9:\n                if (_context78.sent) {\n                  _context78.next = 11;\n                  break;\n                }\n\n                processedSet.add(eachDatum);\n\n              case 11:\n                _context78.next = 5;\n                break;\n\n              case 13:\n                _context78.next = 18;\n                break;\n\n              case 15:\n                _context78.prev = 15;\n                _context78.t0 = _context78["catch"](3);\n\n                _iterator39.e(_context78.t0);\n\n              case 18:\n                _context78.prev = 18;\n\n                _iterator39.f();\n\n                return _context78.finish(18);\n\n              case 21:\n                return _context78.abrupt("return", processedSet);\n\n              case 22:\n              case "end":\n                return _context78.stop();\n            }\n          }\n        }, _callee78, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "sumBy",\n    value: function sumBy(selector) {\n      var _this80 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      selector = selector.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee79() {\n        var sum, _iterator40, _step40, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee79$(_context79) {\n          while (1) {\n            switch (_context79.prev = _context79.next) {\n              case 0:\n                sum = 0;\n                _iterator40 = _createForOfIteratorHelper(_this80.data);\n                _context79.prev = 2;\n\n                _iterator40.s();\n\n              case 4:\n                if ((_step40 = _iterator40.n()).done) {\n                  _context79.next = 12;\n                  break;\n                }\n\n                eachDatum = _step40.value;\n                _context79.t0 = sum;\n                _context79.next = 9;\n                return selector(eachDatum);\n\n              case 9:\n                sum = _context79.t0 += _context79.sent;\n\n              case 10:\n                _context79.next = 4;\n                break;\n\n              case 12:\n                _context79.next = 17;\n                break;\n\n              case 14:\n                _context79.prev = 14;\n                _context79.t1 = _context79["catch"](2);\n\n                _iterator40.e(_context79.t1);\n\n              case 17:\n                _context79.prev = 17;\n\n                _iterator40.f();\n\n                return _context79.finish(17);\n\n              case 20:\n                return _context79.abrupt("return", sum);\n\n              case 21:\n              case "end":\n                return _context79.stop();\n            }\n          }\n        }, _callee79, null, [[2, 14, 17, 20]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "union",\n    value: function union(other) {\n      var _this81 = this;\n\n      var koconutToReturn = new _module.KoconutSet();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee80() {\n        var processedSet, _iterator41, _step41, eachDatum;\n\n        return _regenerator["default"].wrap(function _callee80$(_context80) {\n          while (1) {\n            switch (_context80.prev = _context80.next) {\n              case 0:\n                processedSet = new Set(_this81.data);\n                _iterator41 = _createForOfIteratorHelper(other);\n\n                try {\n                  for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n                    eachDatum = _step41.value;\n                    processedSet.add(eachDatum);\n                  }\n                } catch (err) {\n                  _iterator41.e(err);\n                } finally {\n                  _iterator41.f();\n                }\n\n                _context80.next = 5;\n                return _module.KoconutSet.from(processedSet).distinct()["yield"]();\n\n              case 5:\n                return _context80.abrupt("return", _context80.sent);\n\n              case 6:\n              case "end":\n                return _context80.stop();\n            }\n          }\n        }, _callee80);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "windowed",\n    value: function windowed(size) {\n      var _this82 = this;\n\n      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var partialWindows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var transform = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var thisArg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      if (size < 0) size = -size;\n      if (step < 0) step = -step;\n      if (transform) transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee81() {\n        var processedArray, currentIndex, dataArray, eachChunkedData, transformedArray, _iterator42, _step42, eachProcessedDatum;\n\n        return _regenerator["default"].wrap(function _callee81$(_context81) {\n          while (1) {\n            switch (_context81.prev = _context81.next) {\n              case 0:\n                processedArray = new Array();\n                currentIndex = 0;\n                dataArray = Array.from(_this82.data);\n\n                while (currentIndex < dataArray.length) {\n                  eachChunkedData = dataArray.slice(currentIndex, currentIndex + size);\n                  currentIndex += step;\n                  if (partialWindows || eachChunkedData.length == size) processedArray.push(eachChunkedData);\n                }\n\n                if (!transform) {\n                  _context81.next = 27;\n                  break;\n                }\n\n                transformedArray = new Array();\n                _iterator42 = _createForOfIteratorHelper(processedArray);\n                _context81.prev = 7;\n\n                _iterator42.s();\n\n              case 9:\n                if ((_step42 = _iterator42.n()).done) {\n                  _context81.next = 18;\n                  break;\n                }\n\n                eachProcessedDatum = _step42.value;\n                _context81.t0 = transformedArray;\n                _context81.next = 14;\n                return transform(eachProcessedDatum);\n\n              case 14:\n                _context81.t1 = _context81.sent;\n\n                _context81.t0.push.call(_context81.t0, _context81.t1);\n\n              case 16:\n                _context81.next = 9;\n                break;\n\n              case 18:\n                _context81.next = 23;\n                break;\n\n              case 20:\n                _context81.prev = 20;\n                _context81.t2 = _context81["catch"](7);\n\n                _iterator42.e(_context81.t2);\n\n              case 23:\n                _context81.prev = 23;\n\n                _iterator42.f();\n\n                return _context81.finish(23);\n\n              case 26:\n                return _context81.abrupt("return", transformedArray);\n\n              case 27:\n                return _context81.abrupt("return", processedArray);\n\n              case 28:\n              case "end":\n                return _context81.stop();\n            }\n          }\n        }, _callee81, null, [[7, 20, 23, 26]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "withIndex",\n    value: function withIndex() {\n      var _this83 = this;\n\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee82() {\n        var processedArray, _iterator43, _step43, _step43$value, index, element;\n\n        return _regenerator["default"].wrap(function _callee82$(_context82) {\n          while (1) {\n            switch (_context82.prev = _context82.next) {\n              case 0:\n                processedArray = new Array();\n                _iterator43 = _createForOfIteratorHelper(Array.from(_this83.data).entries());\n\n                try {\n                  for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {\n                    _step43$value = (0, _slicedToArray2["default"])(_step43.value, 2), index = _step43$value[0], element = _step43$value[1];\n                    processedArray.push(new _module.Entry(index, element));\n                  }\n                } catch (err) {\n                  _iterator43.e(err);\n                } finally {\n                  _iterator43.f();\n                }\n\n                return _context82.abrupt("return", processedArray);\n\n              case 4:\n              case "end":\n                return _context82.stop();\n            }\n          }\n        }, _callee82);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "zip",\n    value: function zip(other) {\n      var _this84 = this;\n\n      var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (transform) transform = transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee83() {\n        var processedArray, dataArray, otherArray, minLength, eachIndex, transformedArray, _iterator44, _step44, eachProcessedData;\n\n        return _regenerator["default"].wrap(function _callee83$(_context83) {\n          while (1) {\n            switch (_context83.prev = _context83.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this84.data);\n                otherArray = Array.from(other);\n                minLength = dataArray.length < otherArray.length ? dataArray.length : otherArray.length;\n\n                for (eachIndex = 0; eachIndex < minLength; eachIndex++) {\n                  processedArray.push(new _module.Pair(dataArray[eachIndex], otherArray[eachIndex]));\n                }\n\n                if (!transform) {\n                  _context83.next = 28;\n                  break;\n                }\n\n                transformedArray = new Array();\n                _iterator44 = _createForOfIteratorHelper(processedArray);\n                _context83.prev = 8;\n\n                _iterator44.s();\n\n              case 10:\n                if ((_step44 = _iterator44.n()).done) {\n                  _context83.next = 19;\n                  break;\n                }\n\n                eachProcessedData = _step44.value;\n                _context83.t0 = transformedArray;\n                _context83.next = 15;\n                return transform(eachProcessedData.first, eachProcessedData.second);\n\n              case 15:\n                _context83.t1 = _context83.sent;\n\n                _context83.t0.push.call(_context83.t0, _context83.t1);\n\n              case 17:\n                _context83.next = 10;\n                break;\n\n              case 19:\n                _context83.next = 24;\n                break;\n\n              case 21:\n                _context83.prev = 21;\n                _context83.t2 = _context83["catch"](8);\n\n                _iterator44.e(_context83.t2);\n\n              case 24:\n                _context83.prev = 24;\n\n                _iterator44.f();\n\n                return _context83.finish(24);\n\n              case 27:\n                return _context83.abrupt("return", transformedArray);\n\n              case 28:\n                return _context83.abrupt("return", processedArray);\n\n              case 29:\n              case "end":\n                return _context83.stop();\n            }\n          }\n        }, _callee83, null, [[8, 21, 24, 27]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "zipWithNext",\n    value: function zipWithNext() {\n      var _this85 = this;\n\n      var transform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (transform) transform.bind(thisArg);\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee84() {\n        var processedArray, dataArray, eachIndex, transformedArray, _iterator45, _step45, eachProcessedDatum;\n\n        return _regenerator["default"].wrap(function _callee84$(_context84) {\n          while (1) {\n            switch (_context84.prev = _context84.next) {\n              case 0:\n                processedArray = new Array();\n                dataArray = Array.from(_this85.data);\n\n                if (dataArray.length >= 2) {\n                  for (eachIndex = 0; eachIndex < dataArray.length - 1; eachIndex++) {\n                    processedArray.push(new _module.Pair(dataArray[eachIndex], dataArray[eachIndex + 1]));\n                  }\n                }\n\n                if (!transform) {\n                  _context84.next = 26;\n                  break;\n                }\n\n                transformedArray = new Array();\n                _iterator45 = _createForOfIteratorHelper(processedArray);\n                _context84.prev = 6;\n\n                _iterator45.s();\n\n              case 8:\n                if ((_step45 = _iterator45.n()).done) {\n                  _context84.next = 17;\n                  break;\n                }\n\n                eachProcessedDatum = _step45.value;\n                _context84.t0 = transformedArray;\n                _context84.next = 13;\n                return transform(eachProcessedDatum.first, eachProcessedDatum.second);\n\n              case 13:\n                _context84.t1 = _context84.sent;\n\n                _context84.t0.push.call(_context84.t0, _context84.t1);\n\n              case 15:\n                _context84.next = 8;\n                break;\n\n              case 17:\n                _context84.next = 22;\n                break;\n\n              case 19:\n                _context84.prev = 19;\n                _context84.t2 = _context84["catch"](6);\n\n                _iterator45.e(_context84.t2);\n\n              case 22:\n                _context84.prev = 22;\n\n                _iterator45.f();\n\n                return _context84.finish(22);\n\n              case 25:\n                return _context84.abrupt("return", transformedArray);\n\n              case 26:\n                return _context84.abrupt("return", processedArray);\n\n              case 27:\n              case "end":\n                return _context84.stop();\n            }\n          }\n        }, _callee84, null, [[6, 19, 22, 25]]);\n      })));\n      return koconutToReturn;\n    }\n  }], [{\n    key: "fromIterable",\n    value: function fromIterable(iterable) {\n      var koconutToReturn = new KoconutCollection(iterable[\'data\']);\n      koconutToReturn.processor = iterable[\'processor\'];\n      koconutToReturn.prevYieldable = iterable[\'prevYieldable\'];\n      return koconutToReturn;\n    }\n  }]);\n  return KoconutCollection;\n}(_module.KoconutIterable);\n\nexports.KoconutCollection = KoconutCollection;\n\n//# sourceURL=webpack://koconut/./dist/components/container/collection/KoconutCollection.js?')},"./dist/components/container/collection/array/KoconutArray.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutArray = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _get2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _module = __webpack_require__(/*! ../../../../module */ "./dist/module.js");\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n"use strict";\n\nvar KoconutArray = function (_KoconutCollection) {\n  (0, _inherits2["default"])(KoconutArray, _KoconutCollection);\n\n  var _super = _createSuper(KoconutArray);\n\n  function KoconutArray() {\n    var _this;\n\n    var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    (0, _classCallCheck2["default"])(this, KoconutArray);\n    _this = _super.call(this);\n    _this.data = array == null ? new Array() : Array.from(array);\n    return _this;\n  }\n\n  (0, _createClass2["default"])(KoconutArray, [{\n    key: "retrieve",\n    value: function () {\n      var _retrieve = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "retrieve", this).call(this);\n\n              case 2:\n                return _context.abrupt("return", this);\n\n              case 3:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function retrieve() {\n        return _retrieve.apply(this, arguments);\n      }\n\n      return retrieve;\n    }()\n  }, {\n    key: "onEach",\n    value: function onEach(action) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "onEach", this).call(this, action, thisArg));\n    }\n  }, {\n    key: "onEachIndexed",\n    value: function onEachIndexed(action) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "onEachIndexed", this).call(this, action, thisArg));\n    }\n  }, {\n    key: "associateByTo",\n    value: function associateByTo(destination, keySelector) {\n      var valueTransform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var keySelectorThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var valueTransformThisArg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "associateByTo", this).call(this, destination, keySelector, valueTransform, keySelectorThisArg, valueTransformThisArg));\n    }\n  }, {\n    key: "associateTo",\n    value: function associateTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "associateTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "associateWithTo",\n    value: function associateWithTo(destination, valueSelector) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "associateWithTo", this).call(this, destination, valueSelector, thisArg));\n    }\n  }, {\n    key: "flatMapTo",\n    value: function flatMapTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "flatMapTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "flatMapIndexedTo",\n    value: function flatMapIndexedTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "flatMapIndexedTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "groupByTo",\n    value: function groupByTo(destination, keySelector) {\n      var valueTransform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var keySelectorThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var valueTransformThisArg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "groupByTo", this).call(this, destination, keySelector, valueTransform, keySelectorThisArg, valueTransformThisArg));\n    }\n  }, {\n    key: "mapTo",\n    value: function mapTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "mapTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapNotNullTo",\n    value: function mapNotNullTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "mapNotNullTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapIndexedTo",\n    value: function mapIndexedTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "mapIndexedTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapIndexedNotNullTo",\n    value: function mapIndexedNotNullTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "mapIndexedNotNullTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "distinct",\n    value: function distinct() {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "distinct", this).call(this));\n    }\n  }, {\n    key: "distinctBy",\n    value: function distinctBy(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "distinctBy", this).call(this, selector, thisArg));\n    }\n  }, {\n    key: "drop",\n    value: function drop(n) {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "drop", this).call(this, n));\n    }\n  }, {\n    key: "dropLast",\n    value: function dropLast(n) {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "dropLast", this).call(this, n));\n    }\n  }, {\n    key: "dropLastWhile",\n    value: function dropLastWhile(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "dropLastWhile", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "dropWhile",\n    value: function dropWhile(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "dropWhile", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filter",\n    value: function filter(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "filter", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterNot",\n    value: function filterNot(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "filterNot", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterTo",\n    value: function filterTo(destination, predicate) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "filterTo", this).call(this, destination, predicate, thisArg));\n    }\n  }, {\n    key: "filterNotTo",\n    value: function filterNotTo(destination, predicate) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "filterNotTo", this).call(this, destination, predicate, thisArg));\n    }\n  }, {\n    key: "filterIndexed",\n    value: function filterIndexed(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "filterIndexed", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterIndexedTo",\n    value: function filterIndexedTo(destination, predicate) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "filterIndexedTo", this).call(this, destination, predicate, thisArg));\n    }\n  }, {\n    key: "filterNotNull",\n    value: function filterNotNull() {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "filterNotNull", this).call(this));\n    }\n  }, {\n    key: "filterNotNullTo",\n    value: function filterNotNullTo(destination) {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "filterNotNullTo", this).call(this, destination));\n    }\n  }, {\n    key: "sortedBy",\n    value: function sortedBy(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "sortedBy", this).call(this, selector, thisArg));\n    }\n  }, {\n    key: "sortedByDescending",\n    value: function sortedByDescending(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "sortedByDescending", this).call(this, selector, thisArg));\n    }\n  }, {\n    key: "sortedWith",\n    value: function sortedWith(comparator) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "sortedWith", this).call(this, comparator, thisArg));\n    }\n  }, {\n    key: "take",\n    value: function take(n) {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "take", this).call(this, n));\n    }\n  }, {\n    key: "takeLast",\n    value: function takeLast(n) {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "takeLast", this).call(this, n));\n    }\n  }, {\n    key: "takeLastWhile",\n    value: function takeLastWhile(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "takeLastWhile", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "takeWhile",\n    value: function takeWhile(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "takeWhile", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "minus",\n    value: function minus(elements) {\n      if (typeof elements[Symbol.iterator] === \'function\') return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "minus", this).call(this, elements));else return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "minus", this).call(this, elements));\n    }\n  }, {\n    key: "minusElement",\n    value: function minusElement(element) {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "minusElement", this).call(this, element));\n    }\n  }, {\n    key: "plus",\n    value: function plus(elements) {\n      if (typeof elements[Symbol.iterator] === \'function\') return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "plus", this).call(this, elements));else return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "plus", this).call(this, elements));\n    }\n  }, {\n    key: "plusElement",\n    value: function plusElement(element) {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "plusElement", this).call(this, element));\n    }\n  }, {\n    key: "reversed",\n    value: function reversed() {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "reversed", this).call(this));\n    }\n  }, {\n    key: "shuffled",\n    value: function shuffled() {\n      return KoconutArray.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutArray.prototype), "shuffled", this).call(this));\n    }\n  }], [{\n    key: "fromCollection",\n    value: function fromCollection(collection) {\n      var koconutToReturn = new KoconutArray(collection[\'data\']);\n      koconutToReturn.processor = collection[\'processor\'];\n      koconutToReturn.prevYieldable = collection[\'prevYieldable\'];\n      return koconutToReturn;\n    }\n  }, {\n    key: "from",\n    value: function from() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new KoconutArray(source == null ? null : Array.from(source));\n    }\n  }, {\n    key: "of",\n    value: function of() {\n      for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {\n        data[_key] = arguments[_key];\n      }\n\n      return new KoconutArray(data);\n    }\n  }, {\n    key: "generate",\n    value: function generate(count, generator) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      generator = generator.bind(thisArg);\n      var koconutToReturn = new KoconutArray();\n      koconutToReturn.setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n        var processedArray, eachIndex;\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(count < 0)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutInvalidArgumentException("Count must be larger than 0. Given value : ".concat(count));\n\n              case 2:\n                processedArray = new Array();\n                eachIndex = 0;\n\n              case 4:\n                if (!(eachIndex < count)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.t0 = processedArray;\n                _context2.next = 8;\n                return generator(eachIndex);\n\n              case 8:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.push.call(_context2.t0, _context2.t1);\n\n              case 10:\n                eachIndex++;\n                _context2.next = 4;\n                break;\n\n              case 13:\n                return _context2.abrupt("return", processedArray);\n\n              case 14:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })));\n      return koconutToReturn;\n    }\n  }]);\n  return KoconutArray;\n}(_module.KoconutCollection);\n\nexports.KoconutArray = KoconutArray;\n\n//# sourceURL=webpack://koconut/./dist/components/container/collection/array/KoconutArray.js?')},"./dist/components/container/collection/sequence/KoconutSequence.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.Sequence = exports.KoconutSequence = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _classPrivateFieldSet2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldSet */ "./node_modules/@babel/runtime/helpers/classPrivateFieldSet.js"));\n\nvar _classPrivateFieldGet2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classPrivateFieldGet */ "./node_modules/@babel/runtime/helpers/classPrivateFieldGet.js"));\n\nvar _module = __webpack_require__(/*! ../../../../module */ "./dist/module.js");\n\nvar _Symbol$iterator;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n\n  privateMap.set(obj, value);\n}\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError("Cannot initialize the same private elements twice on an object");\n  }\n}\n\n"use strict";\n\nvar _mIsFinished = new WeakMap();\n\nvar _mLastPrevIndex = new WeakMap();\n\nvar _mParentSequence = new WeakMap();\n\nvar _mTransformer = new WeakMap();\n\nvar _mInnerDataArray = new WeakMap();\n\n_Symbol$iterator = Symbol.iterator;\n\nvar Sequence = function () {\n  function Sequence() {\n    var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    (0, _classCallCheck2["default"])(this, Sequence);\n\n    _classPrivateFieldInitSpec(this, _mIsFinished, {\n      writable: true,\n      value: false\n    });\n\n    _classPrivateFieldInitSpec(this, _mLastPrevIndex, {\n      writable: true,\n      value: 0\n    });\n\n    _classPrivateFieldInitSpec(this, _mParentSequence, {\n      writable: true,\n      value: null\n    });\n\n    _classPrivateFieldInitSpec(this, _mTransformer, {\n      writable: true,\n      value: null\n    });\n\n    _classPrivateFieldInitSpec(this, _mInnerDataArray, {\n      writable: true,\n      value: new Array()\n    });\n\n    if (srcSequence != null) {\n      var _iterator = _createForOfIteratorHelper(srcSequence),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var eachDatum = _step.value;\n          (0, _classPrivateFieldGet2["default"])(this, _mInnerDataArray).push(eachDatum);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n\n  (0, _createClass2["default"])(Sequence, [{\n    key: _Symbol$iterator,\n    value: function value() {\n      return (0, _classPrivateFieldGet2["default"])(this, _mInnerDataArray)[Symbol.iterator]();\n    }\n  }, {\n    key: "done",\n    value: function () {\n      var _done = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n        var index;\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                index = 0;\n                if ((0, _classPrivateFieldGet2["default"])(this, _mParentSequence)) (0, _classPrivateFieldSet2["default"])((0, _classPrivateFieldGet2["default"])(this, _mParentSequence), _mIsFinished, false);\n\n              case 2:\n                if ((0, _classPrivateFieldGet2["default"])(this, _mIsFinished)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 5;\n                return this.getDatum(index++);\n\n              case 5:\n                _context.next = 2;\n                break;\n\n              case 7:\n                (0, _classPrivateFieldSet2["default"])(this, _mParentSequence, null);\n                (0, _classPrivateFieldSet2["default"])(this, _mTransformer, null);\n                (0, _classPrivateFieldSet2["default"])(this, _mLastPrevIndex, 0);\n                return _context.abrupt("return", this);\n\n              case 11:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function done() {\n        return _done.apply(this, arguments);\n      }\n\n      return done;\n    }()\n  }, {\n    key: "getDatum",\n    value: function () {\n      var _getDatum = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(index) {\n        var fetchedResult, _this$mLastPrevIndex, result;\n\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!((0, _classPrivateFieldGet2["default"])(this, _mParentSequence) == null)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                if (index == (0, _classPrivateFieldGet2["default"])(this, _mInnerDataArray).length - 1) (0, _classPrivateFieldSet2["default"])(this, _mIsFinished, true);\n                return _context2.abrupt("return", (0, _classPrivateFieldGet2["default"])(this, _mInnerDataArray)[index]);\n\n              case 5:\n                _context2.next = 7;\n                return (0, _classPrivateFieldGet2["default"])(this, _mParentSequence).getDatum(index);\n\n              case 7:\n                fetchedResult = _context2.sent;\n\n                if (!fetchedResult) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                _context2.next = 11;\n                return (0, _classPrivateFieldGet2["default"])(this, _mTransformer)(((0, _classPrivateFieldSet2["default"])(this, _mLastPrevIndex, (_this$mLastPrevIndex = +(0, _classPrivateFieldGet2["default"])(this, _mLastPrevIndex)) + 1), _this$mLastPrevIndex), fetchedResult);\n\n              case 11:\n                result = _context2.sent;\n                if ((0, _classPrivateFieldGet2["default"])((0, _classPrivateFieldGet2["default"])(this, _mParentSequence), _mIsFinished)) (0, _classPrivateFieldSet2["default"])(this, _mIsFinished, true);\n                if (result) (0, _classPrivateFieldGet2["default"])(this, _mInnerDataArray).push(result);\n                return _context2.abrupt("return", result);\n\n              case 15:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getDatum(_x) {\n        return _getDatum.apply(this, arguments);\n      }\n\n      return getDatum;\n    }()\n  }, {\n    key: "chainSequence",\n    value: function chainSequence(prevSequence, transformer) {\n      (0, _classPrivateFieldSet2["default"])(prevSequence, _mIsFinished, false);\n      (0, _classPrivateFieldSet2["default"])(this, _mParentSequence, prevSequence);\n      (0, _classPrivateFieldSet2["default"])(this, _mTransformer, transformer);\n      return this;\n    }\n  }], [{\n    key: "of",\n    value: function of() {\n      for (var _len = arguments.length, srcSequence = new Array(_len), _key = 0; _key < _len; _key++) {\n        srcSequence[_key] = arguments[_key];\n      }\n\n      return new Sequence(srcSequence);\n    }\n  }, {\n    key: "from",\n    value: function from() {\n      var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new Sequence(srcSequence);\n    }\n  }]);\n  return Sequence;\n}();\n\nexports.Sequence = Sequence;\n\nvar KoconutSequence = function (_KoconutCollection) {\n  (0, _inherits2["default"])(KoconutSequence, _KoconutCollection);\n\n  var _super = _createSuper(KoconutSequence);\n\n  function KoconutSequence() {\n    var _this;\n\n    var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    (0, _classCallCheck2["default"])(this, KoconutSequence);\n    _this = _super.call(this);\n    _this.data = new Sequence(srcSequence);\n    return _this;\n  }\n\n  (0, _createClass2["default"])(KoconutSequence, [{\n    key: "onEach",\n    value: function onEach(action) {\n      var _this2 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      action.bind(thisArg);\n      var koconutToReturn = new KoconutSequence();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n        var continueProcess;\n        return _regenerator["default"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                continueProcess = true;\n                return _context4.abrupt("return", new Sequence()[\'chainSequence\'](_this2.data, function () {\n                  var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(_, srcDatum) {\n                    var signal;\n                    return _regenerator["default"].wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (!continueProcess) {\n                              _context3.next = 5;\n                              break;\n                            }\n\n                            _context3.next = 3;\n                            return action(srcDatum);\n\n                          case 3:\n                            signal = _context3.sent;\n                            if (signal == false || signal == _module.KoconutLoopSignal.BREAK) continueProcess = false;\n\n                          case 5:\n                            return _context3.abrupt("return", srcDatum);\n\n                          case 6:\n                          case "end":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x2, _x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 2:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "onEachIndexed",\n    value: function onEachIndexed(action) {\n      var _this3 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      action.bind(thisArg);\n      var koconutToReturn = new KoconutSequence();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {\n        var continueProcess;\n        return _regenerator["default"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                continueProcess = true;\n                return _context6.abrupt("return", new Sequence()[\'chainSequence\'](_this3.data, function () {\n                  var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(index, srcDatum) {\n                    var signal;\n                    return _regenerator["default"].wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            if (!continueProcess) {\n                              _context5.next = 5;\n                              break;\n                            }\n\n                            _context5.next = 3;\n                            return action(index, srcDatum);\n\n                          case 3:\n                            signal = _context5.sent;\n                            if (signal == false || signal == _module.KoconutLoopSignal.BREAK) continueProcess = false;\n\n                          case 5:\n                            return _context5.abrupt("return", srcDatum);\n\n                          case 6:\n                          case "end":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x4, _x5) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }()));\n\n              case 2:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filter",\n    value: function filter(predicate) {\n      var _this4 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutSequence();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8() {\n        return _regenerator["default"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt("return", new Sequence()[\'chainSequence\'](_this4.data, function () {\n                  var _ref6 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7(_, srcDatum) {\n                    return _regenerator["default"].wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            _context7.next = 2;\n                            return predicate(srcDatum);\n\n                          case 2:\n                            if (!_context7.sent) {\n                              _context7.next = 4;\n                              break;\n                            }\n\n                            return _context7.abrupt("return", srcDatum);\n\n                          case 4:\n                          case "end":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7);\n                  }));\n\n                  return function (_x6, _x7) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterIndexed",\n    value: function filterIndexed(predicate) {\n      var _this5 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutSequence();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10() {\n        return _regenerator["default"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt("return", new Sequence()[\'chainSequence\'](_this5.data, function () {\n                  var _ref8 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9(index, srcDatum) {\n                    return _regenerator["default"].wrap(function _callee9$(_context9) {\n                      while (1) {\n                        switch (_context9.prev = _context9.next) {\n                          case 0:\n                            _context9.next = 2;\n                            return predicate(index, srcDatum);\n\n                          case 2:\n                            if (!_context9.sent) {\n                              _context9.next = 4;\n                              break;\n                            }\n\n                            return _context9.abrupt("return", srcDatum);\n\n                          case 4:\n                          case "end":\n                            return _context9.stop();\n                        }\n                      }\n                    }, _callee9);\n                  }));\n\n                  return function (_x8, _x9) {\n                    return _ref8.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case "end":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      })));\n      return koconutToReturn;\n    }\n  }], [{\n    key: "of",\n    value: function of() {\n      for (var _len2 = arguments.length, srcSequence = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        srcSequence[_key2] = arguments[_key2];\n      }\n\n      return new KoconutSequence(srcSequence);\n    }\n  }, {\n    key: "from",\n    value: function from() {\n      var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new KoconutSequence(srcSequence);\n    }\n  }]);\n  return KoconutSequence;\n}(_module.KoconutCollection);\n\nexports.KoconutSequence = KoconutSequence;\n\n//# sourceURL=webpack://koconut/./dist/components/container/collection/sequence/KoconutSequence.js?')},"./dist/components/container/collection/set/KoconutSet.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutSet = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _get2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _module = __webpack_require__(/*! ../../../../module */ "./dist/module.js");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n"use strict";\n\nvar KoconutSet = function (_KoconutCollection) {\n  (0, _inherits2["default"])(KoconutSet, _KoconutCollection);\n\n  var _super = _createSuper(KoconutSet);\n\n  function KoconutSet() {\n    var _this;\n\n    var set = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    (0, _classCallCheck2["default"])(this, KoconutSet);\n    _this = _super.call(this);\n    _this.data = set == null ? new Set() : new Set(set);\n    return _this;\n  }\n\n  (0, _createClass2["default"])(KoconutSet, [{\n    key: "retrieve",\n    value: function () {\n      var _retrieve = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "retrieve", this).call(this);\n\n              case 2:\n                return _context.abrupt("return", this);\n\n              case 3:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function retrieve() {\n        return _retrieve.apply(this, arguments);\n      }\n\n      return retrieve;\n    }()\n  }, {\n    key: "validate",\n    value: function () {\n      var _validate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(data) {\n        var index, keys, _iterator, _step, eachDatum, _this$data, isConflict, _iterator2, _step2, eachPrevEquatableDatum, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(data != null)) {\n                  _context2.next = 53;\n                  break;\n                }\n\n                index = 0;\n                keys = new Array();\n                _iterator = _createForOfIteratorHelper(data);\n                _context2.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 44;\n                  break;\n                }\n\n                eachDatum = _step.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachDatum)) {\n                  _context2.next = 40;\n                  break;\n                }\n\n                isConflict = false;\n                _iterator2 = _createForOfIteratorHelper(keys);\n                _context2.prev = 11;\n\n                _iterator2.s();\n\n              case 13:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                eachPrevEquatableDatum = _step2.value;\n                equalityResult = eachDatum.equalsTo(eachPrevEquatableDatum);\n                _context2.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context2.t1) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                _context2.next = 20;\n                return equalityResult["yield"]();\n\n              case 20:\n                _context2.t1 = _context2.sent;\n\n              case 21:\n                _context2.t0 = _context2.t1;\n\n                if (_context2.t0) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                _context2.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 24:\n                if (!_context2.t0) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                isConflict = true;\n                return _context2.abrupt("break", 29);\n\n              case 27:\n                _context2.next = 13;\n                break;\n\n              case 29:\n                _context2.next = 34;\n                break;\n\n              case 31:\n                _context2.prev = 31;\n                _context2.t2 = _context2["catch"](11);\n\n                _iterator2.e(_context2.t2);\n\n              case 34:\n                _context2.prev = 34;\n\n                _iterator2.f();\n\n                return _context2.finish(34);\n\n              case 37:\n                if (!isConflict) {\n                  this.mSize++;\n                  this.mIndices.push(index++);\n                  keys.push(eachDatum);\n                } else (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data["delete"](eachDatum);\n\n                _context2.next = 42;\n                break;\n\n              case 40:\n                this.mSize++;\n                this.mIndices.push(index++);\n\n              case 42:\n                _context2.next = 6;\n                break;\n\n              case 44:\n                _context2.next = 49;\n                break;\n\n              case 46:\n                _context2.prev = 46;\n                _context2.t3 = _context2["catch"](4);\n\n                _iterator.e(_context2.t3);\n\n              case 49:\n                _context2.prev = 49;\n\n                _iterator.f();\n\n                return _context2.finish(49);\n\n              case 52:\n                this.combinedDataWrapper = data;\n\n              case 53:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 46, 49, 52], [11, 31, 34, 37]]);\n      }));\n\n      function validate(_x) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n  }, {\n    key: "onEach",\n    value: function onEach(action) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "onEach", this).call(this, action, thisArg));\n    }\n  }, {\n    key: "onEachIndexed",\n    value: function onEachIndexed(action) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "onEachIndexed", this).call(this, action, thisArg));\n    }\n  }, {\n    key: "associateByTo",\n    value: function associateByTo(destination, keySelector) {\n      var valueTransform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var keySelectorThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var valueTransformThisArg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "associateByTo", this).call(this, destination, keySelector, valueTransform, keySelectorThisArg, valueTransformThisArg));\n    }\n  }, {\n    key: "associateTo",\n    value: function associateTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "associateTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "associateWithTo",\n    value: function associateWithTo(destination, valueSelector) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "associateWithTo", this).call(this, destination, valueSelector, thisArg));\n    }\n  }, {\n    key: "flatMapTo",\n    value: function flatMapTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "flatMapTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "flatMapIndexedTo",\n    value: function flatMapIndexedTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "flatMapIndexedTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "groupByTo",\n    value: function groupByTo(destination, keySelector) {\n      var valueTransform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var keySelectorThisArg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var valueTransformThisArg = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "groupByTo", this).call(this, destination, keySelector, valueTransform, keySelectorThisArg, valueTransformThisArg));\n    }\n  }, {\n    key: "mapTo",\n    value: function mapTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "mapTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapNotNullTo",\n    value: function mapNotNullTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "mapNotNullTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapIndexedTo",\n    value: function mapIndexedTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "mapIndexedTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapIndexedNotNullTo",\n    value: function mapIndexedNotNullTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "mapIndexedNotNullTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "distinct",\n    value: function distinct() {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "distinct", this).call(this));\n    }\n  }, {\n    key: "distinctBy",\n    value: function distinctBy(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "distinctBy", this).call(this, selector, thisArg));\n    }\n  }, {\n    key: "drop",\n    value: function drop(n) {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "drop", this).call(this, n));\n    }\n  }, {\n    key: "dropLast",\n    value: function dropLast(n) {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "dropLast", this).call(this, n));\n    }\n  }, {\n    key: "dropLastWhile",\n    value: function dropLastWhile(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "dropLastWhile", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "dropWhile",\n    value: function dropWhile(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "dropWhile", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filter",\n    value: function filter(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "filter", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterNot",\n    value: function filterNot(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "filterNot", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterTo",\n    value: function filterTo(destination, predicate) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "filterTo", this).call(this, destination, predicate, thisArg));\n    }\n  }, {\n    key: "filterNotTo",\n    value: function filterNotTo(destination, predicate) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "filterNotTo", this).call(this, destination, predicate, thisArg));\n    }\n  }, {\n    key: "filterIndexed",\n    value: function filterIndexed(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "filterIndexed", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterIndexedTo",\n    value: function filterIndexedTo(destination, predicate) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "filterIndexedTo", this).call(this, destination, predicate, thisArg));\n    }\n  }, {\n    key: "filterNotNull",\n    value: function filterNotNull() {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "filterNotNull", this).call(this));\n    }\n  }, {\n    key: "filterNotNullTo",\n    value: function filterNotNullTo(destination) {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "filterNotNullTo", this).call(this, destination));\n    }\n  }, {\n    key: "sortedBy",\n    value: function sortedBy(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "sortedBy", this).call(this, selector, thisArg));\n    }\n  }, {\n    key: "sortedByDescending",\n    value: function sortedByDescending(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "sortedByDescending", this).call(this, selector, thisArg));\n    }\n  }, {\n    key: "sortedWith",\n    value: function sortedWith(comparator) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "sortedWith", this).call(this, comparator, thisArg));\n    }\n  }, {\n    key: "take",\n    value: function take(n) {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "take", this).call(this, n));\n    }\n  }, {\n    key: "takeLast",\n    value: function takeLast(n) {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "takeLast", this).call(this, n));\n    }\n  }, {\n    key: "takeLastWhile",\n    value: function takeLastWhile(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "takeLastWhile", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "takeWhile",\n    value: function takeWhile(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "takeWhile", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "minus",\n    value: function minus(elements) {\n      if (typeof elements[Symbol.iterator] === \'function\') return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "minus", this).call(this, elements));else return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "minus", this).call(this, elements));\n    }\n  }, {\n    key: "minusElement",\n    value: function minusElement(element) {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "minusElement", this).call(this, element));\n    }\n  }, {\n    key: "plus",\n    value: function plus(elements) {\n      if (typeof elements[Symbol.iterator] === \'function\') return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "plus", this).call(this, elements));else return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "plus", this).call(this, elements));\n    }\n  }, {\n    key: "plusElement",\n    value: function plusElement(element) {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "plusElement", this).call(this, element));\n    }\n  }, {\n    key: "reversed",\n    value: function reversed() {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "reversed", this).call(this));\n    }\n  }, {\n    key: "shuffled",\n    value: function shuffled() {\n      return KoconutSet.fromCollection((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutSet.prototype), "shuffled", this).call(this));\n    }\n  }], [{\n    key: "fromCollection",\n    value: function fromCollection(collection) {\n      var koconutToReturn = new KoconutSet(collection[\'data\']);\n      koconutToReturn.processor = collection[\'processor\'];\n      koconutToReturn.prevYieldable = collection[\'prevYieldable\'];\n      return koconutToReturn;\n    }\n  }, {\n    key: "from",\n    value: function from() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new KoconutSet(new Set(source));\n    }\n  }, {\n    key: "of",\n    value: function of() {\n      for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {\n        data[_key] = arguments[_key];\n      }\n\n      return new KoconutSet(new Set(data));\n    }\n  }, {\n    key: "generate",\n    value: function generate(count, generator) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      generator = generator.bind(thisArg);\n      var koconutToReturn = new KoconutSet();\n      koconutToReturn.setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n        var processedSet, eachIndex;\n        return _regenerator["default"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(count < 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutInvalidArgumentException("Count must be larger than 0. Given value : ".concat(count, "."));\n\n              case 2:\n                processedSet = new Set();\n                eachIndex = 0;\n\n              case 4:\n                if (!(eachIndex < count)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                _context3.t0 = processedSet;\n                _context3.next = 8;\n                return generator(eachIndex);\n\n              case 8:\n                _context3.t1 = _context3.sent;\n\n                _context3.t0.add.call(_context3.t0, _context3.t1);\n\n              case 10:\n                eachIndex++;\n                _context3.next = 4;\n                break;\n\n              case 13:\n                return _context3.abrupt("return", processedSet);\n\n              case 14:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n      return koconutToReturn;\n    }\n  }]);\n  return KoconutSet;\n}(_module.KoconutCollection);\n\nexports.KoconutSet = KoconutSet;\n\n//# sourceURL=webpack://koconut/./dist/components/container/collection/set/KoconutSet.js?')},"./dist/components/container/flow/KoconutFlow.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutFlow = exports.Flow = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));\n\nvar _module = __webpack_require__(/*! ../../../module */ "./dist/module.js");\n\nvar _events = __webpack_require__(/*! events */ "./node_modules/events/events.js");\n\nvar _Symbol$iterator;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n_Symbol$iterator = Symbol.iterator;\n\nvar Flow = function (_EventEmitter) {\n  (0, _inherits2["default"])(Flow, _EventEmitter);\n\n  var _super = _createSuper(Flow);\n\n  function Flow() {\n    var _this;\n\n    var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    (0, _classCallCheck2["default"])(this, Flow);\n    _this = _super.call(this);\n    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "mPentDataSize", 0);\n    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "mChainedFlow", null);\n    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "mInnerDataMap", new Map());\n\n    if (srcSequence != null) {\n      var _iterator = _createForOfIteratorHelper(srcSequence),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var eachDatum = _step.value;\n          _this.mPentDataSize++;\n          if (eachDatum instanceof _module.Entry) _this.mInnerDataMap.set(eachDatum.key, eachDatum.value);else if (eachDatum instanceof _module.Pair) _this.mInnerDataMap.set(eachDatum.first, eachDatum.second);else _this.mInnerDataMap.set(eachDatum[0], eachDatum[1]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2["default"])(Flow, [{\n    key: _Symbol$iterator,\n    value: function value() {\n      return this.dataEntries[Symbol.iterator]();\n    }\n  }, {\n    key: "sort",\n    value: function sort() {\n      this.mInnerDataMap = new Map((0, _toConsumableArray2["default"])(this.mInnerDataMap.entries()).sort());\n      return this;\n    }\n  }, {\n    key: "dataArray",\n    get: function get() {\n      return Array.from(this.sort().mInnerDataMap.entries()).map(function (eachIterableEntry) {\n        return eachIterableEntry[1];\n      });\n    }\n  }, {\n    key: "dataEntries",\n    get: function get() {\n      return Array.from(this.sort().mInnerDataMap.entries()).map(function (eachIterableEntry) {\n        return new _module.Entry(eachIterableEntry[0], eachIterableEntry[1]);\n      });\n    }\n  }, {\n    key: "setDatum",\n    value: function setDatum(id, datum) {\n      this.mInnerDataMap.set(id, datum);\n      this.emit(Flow.newDatumInsertedEvent, id, datum);\n    }\n  }, {\n    key: "onNewDatumInserted",\n    value: function onNewDatumInserted(onNewDatumInsertedListener) {\n      var _this2 = this;\n\n      var targetFlow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var count = 0;\n      this.mChainedFlow = targetFlow;\n\n      var mediatedListener = function () {\n        var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(id, datum) {\n          return _regenerator["default"].wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return onNewDatumInsertedListener(id, datum);\n\n                case 2:\n                  if (_this2.mPentDataSize - 1 == count++) {\n                    _this2.emit(Flow.dataScanningCompletedEvent);\n\n                    if (targetFlow != null) {\n                      targetFlow.mPentDataSize = targetFlow.mInnerDataMap.size;\n                      if (targetFlow.mChainedFlow == null) targetFlow.emit(Flow.dataScanningCompletedEvent);\n                    }\n                  }\n\n                case 3:\n                case "end":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function mediatedListener(_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      this.on(Flow.newDatumInsertedEvent, mediatedListener);\n      this.once(Flow.dataScanningCompletedEvent, function () {\n        return _this2.removeListener(Flow.newDatumInsertedEvent, mediatedListener);\n      });\n      if (this.mInnerDataMap.size != 0) this.mInnerDataMap.forEach(function (datum, id) {\n        return _this2.emit(Flow.newDatumInsertedEvent, id, datum);\n      });\n    }\n  }], [{\n    key: "of",\n    value: function of() {\n      for (var _len = arguments.length, srcSequence = new Array(_len), _key = 0; _key < _len; _key++) {\n        srcSequence[_key] = arguments[_key];\n      }\n\n      return new Flow(srcSequence);\n    }\n  }, {\n    key: "from",\n    value: function from() {\n      var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new Flow(srcSequence);\n    }\n  }, {\n    key: "ofSimple",\n    value: function ofSimple() {\n      for (var _len2 = arguments.length, srcSequence = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        srcSequence[_key2] = arguments[_key2];\n      }\n\n      return new Flow(srcSequence.map(function (eachDatum, eachIndex) {\n        return new _module.Entry(eachIndex, eachDatum);\n      }));\n    }\n  }, {\n    key: "fromSimple",\n    value: function fromSimple() {\n      var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (srcSequence != null) return new Flow(Array.from(srcSequence).map(function (eachDatum, eachIndex) {\n        return new _module.Entry(eachIndex, eachDatum);\n      }));else return new Flow();\n    }\n  }]);\n  return Flow;\n}(_events.EventEmitter);\n\nexports.Flow = Flow;\n(0, _defineProperty2["default"])(Flow, "newDatumInsertedEvent", \'newDatumInserted\');\n(0, _defineProperty2["default"])(Flow, "dataScanningCompletedEvent", \'dataScanningCompleted\');\n\nvar KoconutFlow = function (_KoconutIterable) {\n  (0, _inherits2["default"])(KoconutFlow, _KoconutIterable);\n\n  var _super2 = _createSuper(KoconutFlow);\n\n  function KoconutFlow() {\n    var _this3;\n\n    var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    (0, _classCallCheck2["default"])(this, KoconutFlow);\n    _this3 = _super2.call(this);\n    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "mIsChained", false);\n    _this3.data = new Flow(srcSequence);\n    return _this3;\n  }\n\n  (0, _createClass2["default"])(KoconutFlow, [{\n    key: "validate",\n    value: function () {\n      var _validate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(data) {\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (data != null) {\n                  this.combinedDataWrapper = data;\n                }\n\n              case 1:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function validate(_x3) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n  }, {\n    key: "mapFlow",\n    value: function mapFlow(transform) {\n      var _this4 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.mIsChained = true;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutFlow();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n        var processedFlow;\n        return _regenerator["default"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                processedFlow = new Flow();\n\n                if (_this4.data != null) {\n                  _this4.data[\'onNewDatumInserted\'](function () {\n                    var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(id, datum) {\n                      return _regenerator["default"].wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.t0 = processedFlow;\n                              _context3.t1 = id;\n                              _context3.next = 4;\n                              return transform(datum);\n\n                            case 4:\n                              _context3.t2 = _context3.sent;\n                              return _context3.abrupt("return", _context3.t0[\'setDatum\'].call(_context3.t0, _context3.t1, _context3.t2));\n\n                            case 6:\n                            case "end":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n\n                    return function (_x4, _x5) {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }(), processedFlow);\n                } else processedFlow.emit(Flow[\'dataScanningCompletedEvent\']);\n\n                return _context4.abrupt("return", processedFlow);\n\n              case 3:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "yield",\n    value: function () {\n      var _yield2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {\n        var _this5 = this;\n\n        return _regenerator["default"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt("return", new Promise(function () {\n                  var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(resolve) {\n                    return _regenerator["default"].wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _context5.next = 2;\n                            return _this5.process();\n\n                          case 2:\n                            if (_this5.mIsChained) resolve(_this5.data);else {\n                              if (_this5.processor == null) resolve(_this5.data[\'sort\']());else _this5.data.once(Flow[\'dataScanningCompletedEvent\'], function () {\n                                resolve(_this5.data[\'sort\']());\n                              });\n                            }\n\n                          case 3:\n                          case "end":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x6) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }()));\n\n              case 1:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function _yield() {\n        return _yield2.apply(this, arguments);\n      }\n\n      return _yield;\n    }()\n  }], [{\n    key: "from",\n    value: function from() {\n      var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new KoconutFlow(srcSequence);\n    }\n  }, {\n    key: "of",\n    value: function of() {\n      for (var _len3 = arguments.length, srcSequence = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        srcSequence[_key3] = arguments[_key3];\n      }\n\n      return new KoconutFlow(srcSequence);\n    }\n  }, {\n    key: "fromSimple",\n    value: function fromSimple() {\n      var srcSequence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new KoconutFlow(Flow.fromSimple(srcSequence));\n    }\n  }, {\n    key: "ofSimple",\n    value: function ofSimple() {\n      return new KoconutFlow(Flow.ofSimple.apply(Flow, arguments));\n    }\n  }]);\n  return KoconutFlow;\n}(_module.KoconutIterable);\n\nexports.KoconutFlow = KoconutFlow;\n\n//# sourceURL=webpack://koconut/./dist/components/container/flow/KoconutFlow.js?')},"./dist/components/container/map/KoconutMap.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutMap = void 0;\n\nvar _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));\n\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));\n\nvar _get2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/get.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));\n\nvar _module = __webpack_require__(/*! ../../../module */ "./dist/module.js");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it["return"] != null) it["return"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n"use strict";\n\nvar KoconutMap = function (_KoconutIterable) {\n  (0, _inherits2["default"])(KoconutMap, _KoconutIterable);\n\n  var _super = _createSuper(KoconutMap);\n\n  function KoconutMap() {\n    var _this;\n\n    var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    (0, _classCallCheck2["default"])(this, KoconutMap);\n    _this = _super.call(this);\n    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "mKeys", new Set());\n    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "mValues", new Array());\n    var mapObject = new Map();\n\n    if (map != null) {\n      var _iterator = _createForOfIteratorHelper(map),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var eachEntry = _step.value;\n          if (eachEntry instanceof _module.Entry) mapObject.set(eachEntry.key, eachEntry.value);else if (eachEntry instanceof _module.Pair) mapObject.set(eachEntry.first, eachEntry.second);else mapObject.set(eachEntry[0], eachEntry[1]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    _this.data = mapObject;\n    return _this;\n  }\n\n  (0, _createClass2["default"])(KoconutMap, [{\n    key: "validate",\n    value: function () {\n      var _validate = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(data) {\n        var _iterator2, _step2, _step2$value, key, value, _this$data, isConflict, _iterator3, _step3, eachPrevEquatableKey, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(data != null)) {\n                  _context.next = 53;\n                  break;\n                }\n\n                this.combinedDataWrapper = new Set();\n                _iterator2 = _createForOfIteratorHelper(data.entries());\n                _context.prev = 3;\n\n                _iterator2.s();\n\n              case 5:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 44;\n                  break;\n                }\n\n                _step2$value = (0, _slicedToArray2["default"])(_step2.value, 2), key = _step2$value[0], value = _step2$value[1];\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(key)) {\n                  _context.next = 39;\n                  break;\n                }\n\n                isConflict = false;\n                _iterator3 = _createForOfIteratorHelper(this.mKeys);\n                _context.prev = 10;\n\n                _iterator3.s();\n\n              case 12:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context.next = 28;\n                  break;\n                }\n\n                eachPrevEquatableKey = _step3.value;\n                equalityResult = key.equalsTo(eachPrevEquatableKey);\n                _context.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context.t1) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.next = 19;\n                return equalityResult["yield"]();\n\n              case 19:\n                _context.t1 = _context.sent;\n\n              case 20:\n                _context.t0 = _context.t1;\n\n                if (_context.t0) {\n                  _context.next = 23;\n                  break;\n                }\n\n                _context.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 23:\n                if (!_context.t0) {\n                  _context.next = 26;\n                  break;\n                }\n\n                isConflict = true;\n                return _context.abrupt("break", 28);\n\n              case 26:\n                _context.next = 12;\n                break;\n\n              case 28:\n                _context.next = 33;\n                break;\n\n              case 30:\n                _context.prev = 30;\n                _context.t2 = _context["catch"](10);\n\n                _iterator3.e(_context.t2);\n\n              case 33:\n                _context.prev = 33;\n\n                _iterator3.f();\n\n                return _context.finish(33);\n\n              case 36:\n                if (!isConflict) {\n                  this.mKeys.add(key);\n                  this.combinedDataWrapper.add(new _module.Entry(key, value));\n                  this.mValues.push(value);\n                } else (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data["delete"](key);\n\n                _context.next = 42;\n                break;\n\n              case 39:\n                this.mKeys.add(key);\n                this.combinedDataWrapper.add(new _module.Entry(key, value));\n                this.mValues.push(value);\n\n              case 42:\n                _context.next = 5;\n                break;\n\n              case 44:\n                _context.next = 49;\n                break;\n\n              case 46:\n                _context.prev = 46;\n                _context.t3 = _context["catch"](3);\n\n                _iterator2.e(_context.t3);\n\n              case 49:\n                _context.prev = 49;\n\n                _iterator2.f();\n\n                return _context.finish(49);\n\n              case 52:\n                this.mSize = data.size;\n\n              case 53:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 46, 49, 52], [10, 30, 33, 36]]);\n      }));\n\n      function validate(_x) {\n        return _validate.apply(this, arguments);\n      }\n\n      return validate;\n    }()\n  }, {\n    key: "retrieve",\n    value: function () {\n      var _retrieve = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {\n        return _regenerator["default"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "retrieve", this).call(this);\n\n              case 2:\n                return _context2.abrupt("return", this);\n\n              case 3:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function retrieve() {\n        return _retrieve.apply(this, arguments);\n      }\n\n      return retrieve;\n    }()\n  }, {\n    key: "entries",\n    get: function get() {\n      var _this2 = this;\n\n      var koconutToReturn = new _module.KoconutSet();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {\n        return _regenerator["default"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt("return", _this2.combinedDataWrapper);\n\n              case 1:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "keys",\n    get: function get() {\n      var _this3 = this;\n\n      var koconutToReturn = new _module.KoconutSet();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {\n        return _regenerator["default"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt("return", _this3.mKeys);\n\n              case 1:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "size",\n    get: function get() {\n      var _this4 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5() {\n        return _regenerator["default"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt("return", _this4.mSize);\n\n              case 1:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "values",\n    get: function get() {\n      var _this5 = this;\n\n      var koconutToReturn = new _module.KoconutArray();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6() {\n        return _regenerator["default"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt("return", _this5.mValues);\n\n              case 1:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxBy",\n    value: function maxBy(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromSuper = (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "maxBy", this).call(this, selector, thisArg);\n      var koconutToReturn = new _module.KoconutEntry();\n      koconutToReturn.setPrevYieldable(fromSuper[\'prevYieldable\']).setProcessor(fromSuper[\'processor\']);\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxByOrNull",\n    value: function maxByOrNull(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromSuper = (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "maxByOrNull", this).call(this, selector, thisArg);\n      var koconutToReturn = new _module.KoconutEntry();\n      koconutToReturn.setPrevYieldable(fromSuper[\'prevYieldable\']).setProcessor(fromSuper[\'processor\']);\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxWith",\n    value: function maxWith(comparator) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromSuper = (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "maxWith", this).call(this, comparator, thisArg);\n      var koconutToReturn = new _module.KoconutEntry();\n      koconutToReturn.setPrevYieldable(fromSuper[\'prevYieldable\']).setProcessor(fromSuper[\'processor\']);\n      return koconutToReturn;\n    }\n  }, {\n    key: "maxWithOrNull",\n    value: function maxWithOrNull(comparator) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromSuper = (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "maxWithOrNull", this).call(this, comparator, thisArg);\n      var koconutToReturn = new _module.KoconutEntry();\n      koconutToReturn.setPrevYieldable(fromSuper[\'prevYieldable\']).setProcessor(fromSuper[\'processor\']);\n      return koconutToReturn;\n    }\n  }, {\n    key: "minBy",\n    value: function minBy(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromSuper = (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "minBy", this).call(this, selector, thisArg);\n      var koconutToReturn = new _module.KoconutEntry();\n      koconutToReturn.setPrevYieldable(fromSuper[\'prevYieldable\']).setProcessor(fromSuper[\'processor\']);\n      return koconutToReturn;\n    }\n  }, {\n    key: "minByOrNull",\n    value: function minByOrNull(selector) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromSuper = (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "minByOrNull", this).call(this, selector, thisArg);\n      var koconutToReturn = new _module.KoconutEntry();\n      koconutToReturn.setPrevYieldable(fromSuper[\'prevYieldable\']).setProcessor(fromSuper[\'processor\']);\n      return koconutToReturn;\n    }\n  }, {\n    key: "minWith",\n    value: function minWith(comparator) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromSuper = (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "minWith", this).call(this, comparator, thisArg);\n      var koconutToReturn = new _module.KoconutEntry();\n      koconutToReturn.setPrevYieldable(fromSuper[\'prevYieldable\']).setProcessor(fromSuper[\'processor\']);\n      return koconutToReturn;\n    }\n  }, {\n    key: "minWithOrNull",\n    value: function minWithOrNull(comparator) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var fromSuper = (0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "minWithOrNull", this).call(this, comparator, thisArg);\n      var koconutToReturn = new _module.KoconutEntry();\n      koconutToReturn.setPrevYieldable(fromSuper[\'prevYieldable\']).setProcessor(fromSuper[\'processor\']);\n      return koconutToReturn;\n    }\n  }, {\n    key: "contains",\n    value: function contains(key) {\n      var _this6 = this;\n\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee7() {\n        var _iterator4, _step4, eachKey, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _iterator4 = _createForOfIteratorHelper(_this6.mKeys);\n                _context7.prev = 1;\n\n                _iterator4.s();\n\n              case 3:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context7.next = 23;\n                  break;\n                }\n\n                eachKey = _step4.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachKey)) {\n                  _context7.next = 19;\n                  break;\n                }\n\n                equalityResult = eachKey.equalsTo(key);\n                _context7.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context7.t1) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                _context7.next = 11;\n                return equalityResult["yield"]();\n\n              case 11:\n                _context7.t1 = _context7.sent;\n\n              case 12:\n                _context7.t0 = _context7.t1;\n\n                if (_context7.t0) {\n                  _context7.next = 15;\n                  break;\n                }\n\n                _context7.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 15:\n                if (!_context7.t0) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                return _context7.abrupt("return", true);\n\n              case 17:\n                _context7.next = 21;\n                break;\n\n              case 19:\n                if (!(eachKey == key)) {\n                  _context7.next = 21;\n                  break;\n                }\n\n                return _context7.abrupt("return", true);\n\n              case 21:\n                _context7.next = 3;\n                break;\n\n              case 23:\n                _context7.next = 28;\n                break;\n\n              case 25:\n                _context7.prev = 25;\n                _context7.t2 = _context7["catch"](1);\n\n                _iterator4.e(_context7.t2);\n\n              case 28:\n                _context7.prev = 28;\n\n                _iterator4.f();\n\n                return _context7.finish(28);\n\n              case 31:\n                return _context7.abrupt("return", false);\n\n              case 32:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[1, 25, 28, 31]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "containsKey",\n    value: function containsKey(key) {\n      return this.contains(key);\n    }\n  }, {\n    key: "containsValue",\n    value: function containsValue(value) {\n      var _this7 = this;\n\n      var koconutToReturn = new _module.KoconutBoolean();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee8() {\n        var _iterator5, _step5, eachValue, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _iterator5 = _createForOfIteratorHelper(_this7.mValues);\n                _context8.prev = 1;\n\n                _iterator5.s();\n\n              case 3:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context8.next = 23;\n                  break;\n                }\n\n                eachValue = _step5.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachValue)) {\n                  _context8.next = 19;\n                  break;\n                }\n\n                equalityResult = eachValue.equalsTo(value);\n                _context8.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context8.t1) {\n                  _context8.next = 12;\n                  break;\n                }\n\n                _context8.next = 11;\n                return equalityResult["yield"]();\n\n              case 11:\n                _context8.t1 = _context8.sent;\n\n              case 12:\n                _context8.t0 = _context8.t1;\n\n                if (_context8.t0) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                _context8.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 15:\n                if (!_context8.t0) {\n                  _context8.next = 17;\n                  break;\n                }\n\n                return _context8.abrupt("return", true);\n\n              case 17:\n                _context8.next = 21;\n                break;\n\n              case 19:\n                if (!(eachValue == value)) {\n                  _context8.next = 21;\n                  break;\n                }\n\n                return _context8.abrupt("return", true);\n\n              case 21:\n                _context8.next = 3;\n                break;\n\n              case 23:\n                _context8.next = 28;\n                break;\n\n              case 25:\n                _context8.prev = 25;\n                _context8.t2 = _context8["catch"](1);\n\n                _iterator5.e(_context8.t2);\n\n              case 28:\n                _context8.prev = 28;\n\n                _iterator5.f();\n\n                return _context8.finish(28);\n\n              case 31:\n                return _context8.abrupt("return", false);\n\n              case 32:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[1, 25, 28, 31]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "onEach",\n    value: function onEach(action) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutMap.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "onEach", this).call(this, action, thisArg));\n    }\n  }, {\n    key: "filter",\n    value: function filter(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutMap.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "filter", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterNot",\n    value: function filterNot(predicate) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return KoconutMap.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "filterNot", this).call(this, predicate, thisArg));\n    }\n  }, {\n    key: "filterTo",\n    value: function filterTo(destination, predicate) {\n      var _this8 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee9() {\n        var _iterator6, _step6, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _iterator6 = _createForOfIteratorHelper(_this8.combinedDataWrapper);\n                _context9.prev = 1;\n\n                _iterator6.s();\n\n              case 3:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context9.next = 11;\n                  break;\n                }\n\n                eachEntry = _step6.value;\n                _context9.next = 7;\n                return predicate(eachEntry);\n\n              case 7:\n                if (!_context9.sent) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                destination.set(eachEntry.key, eachEntry.value);\n\n              case 9:\n                _context9.next = 3;\n                break;\n\n              case 11:\n                _context9.next = 16;\n                break;\n\n              case 13:\n                _context9.prev = 13;\n                _context9.t0 = _context9["catch"](1);\n\n                _iterator6.e(_context9.t0);\n\n              case 16:\n                _context9.prev = 16;\n\n                _iterator6.f();\n\n                return _context9.finish(16);\n\n              case 19:\n                return _context9.abrupt("return", _this8.data);\n\n              case 20:\n              case "end":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[1, 13, 16, 19]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterNotTo",\n    value: function filterNotTo(destination, predicate) {\n      var _this9 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee10() {\n        var _iterator7, _step7, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _iterator7 = _createForOfIteratorHelper(_this9.combinedDataWrapper);\n                _context10.prev = 1;\n\n                _iterator7.s();\n\n              case 3:\n                if ((_step7 = _iterator7.n()).done) {\n                  _context10.next = 11;\n                  break;\n                }\n\n                eachEntry = _step7.value;\n                _context10.next = 7;\n                return predicate(eachEntry);\n\n              case 7:\n                if (_context10.sent) {\n                  _context10.next = 9;\n                  break;\n                }\n\n                destination.set(eachEntry.key, eachEntry.value);\n\n              case 9:\n                _context10.next = 3;\n                break;\n\n              case 11:\n                _context10.next = 16;\n                break;\n\n              case 13:\n                _context10.prev = 13;\n                _context10.t0 = _context10["catch"](1);\n\n                _iterator7.e(_context10.t0);\n\n              case 16:\n                _context10.prev = 16;\n\n                _iterator7.f();\n\n                return _context10.finish(16);\n\n              case 19:\n                return _context10.abrupt("return", _this9.data);\n\n              case 20:\n              case "end":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[1, 13, 16, 19]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterKeys",\n    value: function filterKeys(predicate) {\n      var _this10 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee11() {\n        var processedMap, _iterator8, _step8, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                processedMap = new Map();\n                _iterator8 = _createForOfIteratorHelper(_this10.combinedDataWrapper);\n                _context11.prev = 2;\n\n                _iterator8.s();\n\n              case 4:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context11.next = 12;\n                  break;\n                }\n\n                eachEntry = _step8.value;\n                _context11.next = 8;\n                return predicate(eachEntry.key);\n\n              case 8:\n                if (!_context11.sent) {\n                  _context11.next = 10;\n                  break;\n                }\n\n                processedMap.set(eachEntry.key, eachEntry.value);\n\n              case 10:\n                _context11.next = 4;\n                break;\n\n              case 12:\n                _context11.next = 17;\n                break;\n\n              case 14:\n                _context11.prev = 14;\n                _context11.t0 = _context11["catch"](2);\n\n                _iterator8.e(_context11.t0);\n\n              case 17:\n                _context11.prev = 17;\n\n                _iterator8.f();\n\n                return _context11.finish(17);\n\n              case 20:\n                return _context11.abrupt("return", processedMap);\n\n              case 21:\n              case "end":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, null, [[2, 14, 17, 20]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "filterValues",\n    value: function filterValues(predicate) {\n      var _this11 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      predicate = predicate.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee12() {\n        var processedMap, _iterator9, _step9, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                processedMap = new Map();\n                _iterator9 = _createForOfIteratorHelper(_this11.combinedDataWrapper);\n                _context12.prev = 2;\n\n                _iterator9.s();\n\n              case 4:\n                if ((_step9 = _iterator9.n()).done) {\n                  _context12.next = 12;\n                  break;\n                }\n\n                eachEntry = _step9.value;\n                _context12.next = 8;\n                return predicate(eachEntry.value);\n\n              case 8:\n                if (!_context12.sent) {\n                  _context12.next = 10;\n                  break;\n                }\n\n                processedMap.set(eachEntry.key, eachEntry.value);\n\n              case 10:\n                _context12.next = 4;\n                break;\n\n              case 12:\n                _context12.next = 17;\n                break;\n\n              case 14:\n                _context12.prev = 14;\n                _context12.t0 = _context12["catch"](2);\n\n                _iterator9.e(_context12.t0);\n\n              case 17:\n                _context12.prev = 17;\n\n                _iterator9.f();\n\n                return _context12.finish(17);\n\n              case 20:\n                return _context12.abrupt("return", processedMap);\n\n              case 21:\n              case "end":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, null, [[2, 14, 17, 20]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "minus",\n    value: function minus() {\n      var _this12 = this;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n        keys[_key] = arguments[_key];\n      }\n\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee13() {\n        var processedMap, koconutKeysToExceptArray, _iterator10, _step10, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                processedMap = new Map();\n                koconutKeysToExceptArray = _module.KoconutArray.from(keys);\n                _iterator10 = _createForOfIteratorHelper(_this12.combinedDataWrapper);\n                _context13.prev = 3;\n\n                _iterator10.s();\n\n              case 5:\n                if ((_step10 = _iterator10.n()).done) {\n                  _context13.next = 13;\n                  break;\n                }\n\n                eachEntry = _step10.value;\n                _context13.next = 9;\n                return koconutKeysToExceptArray.contains(eachEntry.key)["yield"]();\n\n              case 9:\n                if (_context13.sent) {\n                  _context13.next = 11;\n                  break;\n                }\n\n                processedMap.set(eachEntry.key, eachEntry.value);\n\n              case 11:\n                _context13.next = 5;\n                break;\n\n              case 13:\n                _context13.next = 18;\n                break;\n\n              case 15:\n                _context13.prev = 15;\n                _context13.t0 = _context13["catch"](3);\n\n                _iterator10.e(_context13.t0);\n\n              case 18:\n                _context13.prev = 18;\n\n                _iterator10.f();\n\n                return _context13.finish(18);\n\n              case 21:\n                return _context13.abrupt("return", processedMap);\n\n              case 22:\n              case "end":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, null, [[3, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "plus",\n    value: function plus() {\n      var _this13 = this;\n\n      for (var _len2 = arguments.length, entries = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        entries[_key2] = arguments[_key2];\n      }\n\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee14() {\n        var processedMap, _iterator11, _step11, eachElement, eachPair, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                processedMap = new Map(_this13.data);\n                _iterator11 = _createForOfIteratorHelper(entries);\n                _context14.prev = 2;\n\n                _iterator11.s();\n\n              case 4:\n                if ((_step11 = _iterator11.n()).done) {\n                  _context14.next = 31;\n                  break;\n                }\n\n                eachElement = _step11.value;\n\n                if (!(eachElement instanceof _module.Pair)) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                processedMap.set(eachElement.first, eachElement.second);\n                _context14.next = 29;\n                break;\n\n              case 10:\n                if (!(eachElement instanceof _module.KoconutPair)) {\n                  _context14.next = 17;\n                  break;\n                }\n\n                _context14.next = 13;\n                return eachElement["yield"]();\n\n              case 13:\n                eachPair = _context14.sent;\n                if (eachPair != null) processedMap.set(eachPair.first, eachPair.second);\n                _context14.next = 29;\n                break;\n\n              case 17:\n                if (!(eachElement instanceof _module.Entry)) {\n                  _context14.next = 21;\n                  break;\n                }\n\n                processedMap.set(eachElement.key, eachElement.value);\n                _context14.next = 29;\n                break;\n\n              case 21:\n                if (!(eachElement instanceof _module.KoconutEntry)) {\n                  _context14.next = 28;\n                  break;\n                }\n\n                _context14.next = 24;\n                return eachElement["yield"]();\n\n              case 24:\n                eachEntry = _context14.sent;\n                if (eachEntry != null) processedMap.set(eachEntry.key, eachEntry.value);\n                _context14.next = 29;\n                break;\n\n              case 28:\n                processedMap.set(eachElement[0], eachElement[1]);\n\n              case 29:\n                _context14.next = 4;\n                break;\n\n              case 31:\n                _context14.next = 36;\n                break;\n\n              case 33:\n                _context14.prev = 33;\n                _context14.t0 = _context14["catch"](2);\n\n                _iterator11.e(_context14.t0);\n\n              case 36:\n                _context14.prev = 36;\n\n                _iterator11.f();\n\n                return _context14.finish(36);\n\n              case 39:\n                return _context14.abrupt("return", processedMap);\n\n              case 40:\n              case "end":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, null, [[2, 33, 36, 39]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "get",\n    value: function get(key) {\n      var _this14 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee15() {\n        var _iterator12, _step12, eachEntry, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _iterator12 = _createForOfIteratorHelper(_this14.combinedDataWrapper);\n                _context15.prev = 1;\n\n                _iterator12.s();\n\n              case 3:\n                if ((_step12 = _iterator12.n()).done) {\n                  _context15.next = 23;\n                  break;\n                }\n\n                eachEntry = _step12.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachEntry.key)) {\n                  _context15.next = 19;\n                  break;\n                }\n\n                equalityResult = eachEntry.key.equalsTo(key);\n                _context15.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context15.t1) {\n                  _context15.next = 12;\n                  break;\n                }\n\n                _context15.next = 11;\n                return equalityResult["yield"]();\n\n              case 11:\n                _context15.t1 = _context15.sent;\n\n              case 12:\n                _context15.t0 = _context15.t1;\n\n                if (_context15.t0) {\n                  _context15.next = 15;\n                  break;\n                }\n\n                _context15.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 15:\n                if (!_context15.t0) {\n                  _context15.next = 17;\n                  break;\n                }\n\n                return _context15.abrupt("return", eachEntry.value);\n\n              case 17:\n                _context15.next = 21;\n                break;\n\n              case 19:\n                if (!(eachEntry.key == key)) {\n                  _context15.next = 21;\n                  break;\n                }\n\n                return _context15.abrupt("return", eachEntry.value);\n\n              case 21:\n                _context15.next = 3;\n                break;\n\n              case 23:\n                _context15.next = 28;\n                break;\n\n              case 25:\n                _context15.prev = 25;\n                _context15.t2 = _context15["catch"](1);\n\n                _iterator12.e(_context15.t2);\n\n              case 28:\n                _context15.prev = 28;\n\n                _iterator12.f();\n\n                return _context15.finish(28);\n\n              case 31:\n                return _context15.abrupt("return", null);\n\n              case 32:\n              case "end":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, null, [[1, 25, 28, 31]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "getOrDefault",\n    value: function getOrDefault(key, defaultValue) {\n      var _this15 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee16() {\n        var _iterator13, _step13, eachEntry, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _iterator13 = _createForOfIteratorHelper(_this15.combinedDataWrapper);\n                _context16.prev = 1;\n\n                _iterator13.s();\n\n              case 3:\n                if ((_step13 = _iterator13.n()).done) {\n                  _context16.next = 23;\n                  break;\n                }\n\n                eachEntry = _step13.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachEntry.key)) {\n                  _context16.next = 19;\n                  break;\n                }\n\n                equalityResult = eachEntry.key.equalsTo(key);\n                _context16.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context16.t1) {\n                  _context16.next = 12;\n                  break;\n                }\n\n                _context16.next = 11;\n                return equalityResult["yield"]();\n\n              case 11:\n                _context16.t1 = _context16.sent;\n\n              case 12:\n                _context16.t0 = _context16.t1;\n\n                if (_context16.t0) {\n                  _context16.next = 15;\n                  break;\n                }\n\n                _context16.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 15:\n                if (!_context16.t0) {\n                  _context16.next = 17;\n                  break;\n                }\n\n                return _context16.abrupt("return", eachEntry.value);\n\n              case 17:\n                _context16.next = 21;\n                break;\n\n              case 19:\n                if (!(eachEntry.key == key)) {\n                  _context16.next = 21;\n                  break;\n                }\n\n                return _context16.abrupt("return", eachEntry.value);\n\n              case 21:\n                _context16.next = 3;\n                break;\n\n              case 23:\n                _context16.next = 28;\n                break;\n\n              case 25:\n                _context16.prev = 25;\n                _context16.t2 = _context16["catch"](1);\n\n                _iterator13.e(_context16.t2);\n\n              case 28:\n                _context16.prev = 28;\n\n                _iterator13.f();\n\n                return _context16.finish(28);\n\n              case 31:\n                return _context16.abrupt("return", defaultValue);\n\n              case 32:\n              case "end":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, null, [[1, 25, 28, 31]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "getOrElse",\n    value: function getOrElse(key, defaultValue) {\n      var _this16 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      defaultValue = defaultValue.bind(thisArg);\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee17() {\n        var _iterator14, _step14, eachEntry, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _iterator14 = _createForOfIteratorHelper(_this16.combinedDataWrapper);\n                _context17.prev = 1;\n\n                _iterator14.s();\n\n              case 3:\n                if ((_step14 = _iterator14.n()).done) {\n                  _context17.next = 23;\n                  break;\n                }\n\n                eachEntry = _step14.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachEntry.key)) {\n                  _context17.next = 19;\n                  break;\n                }\n\n                equalityResult = eachEntry.key.equalsTo(key);\n                _context17.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context17.t1) {\n                  _context17.next = 12;\n                  break;\n                }\n\n                _context17.next = 11;\n                return equalityResult["yield"]();\n\n              case 11:\n                _context17.t1 = _context17.sent;\n\n              case 12:\n                _context17.t0 = _context17.t1;\n\n                if (_context17.t0) {\n                  _context17.next = 15;\n                  break;\n                }\n\n                _context17.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 15:\n                if (!_context17.t0) {\n                  _context17.next = 17;\n                  break;\n                }\n\n                return _context17.abrupt("return", eachEntry.value);\n\n              case 17:\n                _context17.next = 21;\n                break;\n\n              case 19:\n                if (!(eachEntry.key == key)) {\n                  _context17.next = 21;\n                  break;\n                }\n\n                return _context17.abrupt("return", eachEntry.value);\n\n              case 21:\n                _context17.next = 3;\n                break;\n\n              case 23:\n                _context17.next = 28;\n                break;\n\n              case 25:\n                _context17.prev = 25;\n                _context17.t2 = _context17["catch"](1);\n\n                _iterator14.e(_context17.t2);\n\n              case 28:\n                _context17.prev = 28;\n\n                _iterator14.f();\n\n                return _context17.finish(28);\n\n              case 31:\n                _context17.next = 33;\n                return defaultValue();\n\n              case 33:\n                return _context17.abrupt("return", _context17.sent);\n\n              case 34:\n              case "end":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, null, [[1, 25, 28, 31]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "getValue",\n    value: function getValue(key) {\n      var _this17 = this;\n\n      var koconutToReturn = new _module.KoconutPrimitive();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee18() {\n        var _iterator15, _step15, eachEntry, equalityResult;\n\n        return _regenerator["default"].wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _iterator15 = _createForOfIteratorHelper(_this17.combinedDataWrapper);\n                _context18.prev = 1;\n\n                _iterator15.s();\n\n              case 3:\n                if ((_step15 = _iterator15.n()).done) {\n                  _context18.next = 23;\n                  break;\n                }\n\n                eachEntry = _step15.value;\n\n                if (!_module.KoconutTypeChecker.checkIsEquatable(eachEntry.key)) {\n                  _context18.next = 19;\n                  break;\n                }\n\n                equalityResult = eachEntry.key.equalsTo(key);\n                _context18.t1 = equalityResult instanceof _module.KoconutPrimitive;\n\n                if (!_context18.t1) {\n                  _context18.next = 12;\n                  break;\n                }\n\n                _context18.next = 11;\n                return equalityResult["yield"]();\n\n              case 11:\n                _context18.t1 = _context18.sent;\n\n              case 12:\n                _context18.t0 = _context18.t1;\n\n                if (_context18.t0) {\n                  _context18.next = 15;\n                  break;\n                }\n\n                _context18.t0 = !(equalityResult instanceof _module.KoconutPrimitive) && equalityResult;\n\n              case 15:\n                if (!_context18.t0) {\n                  _context18.next = 17;\n                  break;\n                }\n\n                return _context18.abrupt("return", eachEntry.value);\n\n              case 17:\n                _context18.next = 21;\n                break;\n\n              case 19:\n                if (!(eachEntry.key == key)) {\n                  _context18.next = 21;\n                  break;\n                }\n\n                return _context18.abrupt("return", eachEntry.value);\n\n              case 21:\n                _context18.next = 3;\n                break;\n\n              case 23:\n                _context18.next = 28;\n                break;\n\n              case 25:\n                _context18.prev = 25;\n                _context18.t2 = _context18["catch"](1);\n\n                _iterator15.e(_context18.t2);\n\n              case 28:\n                _context18.prev = 28;\n\n                _iterator15.f();\n\n                return _context18.finish(28);\n\n              case 31:\n                throw new _module.KoconutNoSuchElementException("No such element matches given key ".concat(key, " is found"));\n\n              case 32:\n              case "end":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, null, [[1, 25, 28, 31]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "flatMapTo",\n    value: function flatMapTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutMap.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "flatMapTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapTo",\n    value: function mapTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutMap.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "mapTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapNotNullTo",\n    value: function mapNotNullTo(destination, transform) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return KoconutMap.fromIterable((0, _get2["default"])((0, _getPrototypeOf2["default"])(KoconutMap.prototype), "mapNotNullTo", this).call(this, destination, transform, thisArg));\n    }\n  }, {\n    key: "mapKeys",\n    value: function mapKeys(transform) {\n      var _this18 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee19() {\n        var processedMap, _iterator16, _step16, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                processedMap = new Map();\n                _iterator16 = _createForOfIteratorHelper(_this18.combinedDataWrapper);\n                _context19.prev = 2;\n\n                _iterator16.s();\n\n              case 4:\n                if ((_step16 = _iterator16.n()).done) {\n                  _context19.next = 14;\n                  break;\n                }\n\n                eachEntry = _step16.value;\n                _context19.t0 = processedMap;\n                _context19.next = 9;\n                return transform(eachEntry);\n\n              case 9:\n                _context19.t1 = _context19.sent;\n                _context19.t2 = eachEntry.value;\n\n                _context19.t0.set.call(_context19.t0, _context19.t1, _context19.t2);\n\n              case 12:\n                _context19.next = 4;\n                break;\n\n              case 14:\n                _context19.next = 19;\n                break;\n\n              case 16:\n                _context19.prev = 16;\n                _context19.t3 = _context19["catch"](2);\n\n                _iterator16.e(_context19.t3);\n\n              case 19:\n                _context19.prev = 19;\n\n                _iterator16.f();\n\n                return _context19.finish(19);\n\n              case 22:\n                return _context19.abrupt("return", processedMap);\n\n              case 23:\n              case "end":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, null, [[2, 16, 19, 22]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapKeysTo",\n    value: function mapKeysTo(destination, transform) {\n      var _this19 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee20() {\n        var _iterator17, _step17, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _iterator17 = _createForOfIteratorHelper(_this19.combinedDataWrapper);\n                _context20.prev = 1;\n\n                _iterator17.s();\n\n              case 3:\n                if ((_step17 = _iterator17.n()).done) {\n                  _context20.next = 13;\n                  break;\n                }\n\n                eachEntry = _step17.value;\n                _context20.t0 = destination;\n                _context20.next = 8;\n                return transform(eachEntry);\n\n              case 8:\n                _context20.t1 = _context20.sent;\n                _context20.t2 = eachEntry.value;\n\n                _context20.t0.set.call(_context20.t0, _context20.t1, _context20.t2);\n\n              case 11:\n                _context20.next = 3;\n                break;\n\n              case 13:\n                _context20.next = 18;\n                break;\n\n              case 15:\n                _context20.prev = 15;\n                _context20.t3 = _context20["catch"](1);\n\n                _iterator17.e(_context20.t3);\n\n              case 18:\n                _context20.prev = 18;\n\n                _iterator17.f();\n\n                return _context20.finish(18);\n\n              case 21:\n                return _context20.abrupt("return", _this19.data);\n\n              case 22:\n              case "end":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, null, [[1, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapValues",\n    value: function mapValues(transform) {\n      var _this20 = this;\n\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee21() {\n        var processedMap, _iterator18, _step18, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                processedMap = new Map();\n                _iterator18 = _createForOfIteratorHelper(_this20.combinedDataWrapper);\n                _context21.prev = 2;\n\n                _iterator18.s();\n\n              case 4:\n                if ((_step18 = _iterator18.n()).done) {\n                  _context21.next = 14;\n                  break;\n                }\n\n                eachEntry = _step18.value;\n                _context21.t0 = processedMap;\n                _context21.t1 = eachEntry.key;\n                _context21.next = 10;\n                return transform(eachEntry);\n\n              case 10:\n                _context21.t2 = _context21.sent;\n\n                _context21.t0.set.call(_context21.t0, _context21.t1, _context21.t2);\n\n              case 12:\n                _context21.next = 4;\n                break;\n\n              case 14:\n                _context21.next = 19;\n                break;\n\n              case 16:\n                _context21.prev = 16;\n                _context21.t3 = _context21["catch"](2);\n\n                _iterator18.e(_context21.t3);\n\n              case 19:\n                _context21.prev = 19;\n\n                _iterator18.f();\n\n                return _context21.finish(19);\n\n              case 22:\n                return _context21.abrupt("return", processedMap);\n\n              case 23:\n              case "end":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, null, [[2, 16, 19, 22]]);\n      })));\n      return koconutToReturn;\n    }\n  }, {\n    key: "mapValuesTo",\n    value: function mapValuesTo(destination, transform) {\n      var _this21 = this;\n\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      transform = transform.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setPrevYieldable(this).setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee22() {\n        var _iterator19, _step19, eachEntry;\n\n        return _regenerator["default"].wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _iterator19 = _createForOfIteratorHelper(_this21.combinedDataWrapper);\n                _context22.prev = 1;\n\n                _iterator19.s();\n\n              case 3:\n                if ((_step19 = _iterator19.n()).done) {\n                  _context22.next = 13;\n                  break;\n                }\n\n                eachEntry = _step19.value;\n                _context22.t0 = destination;\n                _context22.t1 = eachEntry.key;\n                _context22.next = 9;\n                return transform(eachEntry);\n\n              case 9:\n                _context22.t2 = _context22.sent;\n\n                _context22.t0.set.call(_context22.t0, _context22.t1, _context22.t2);\n\n              case 11:\n                _context22.next = 3;\n                break;\n\n              case 13:\n                _context22.next = 18;\n                break;\n\n              case 15:\n                _context22.prev = 15;\n                _context22.t3 = _context22["catch"](1);\n\n                _iterator19.e(_context22.t3);\n\n              case 18:\n                _context22.prev = 18;\n\n                _iterator19.f();\n\n                return _context22.finish(18);\n\n              case 21:\n                return _context22.abrupt("return", _this21.data);\n\n              case 22:\n              case "end":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, null, [[1, 15, 18, 21]]);\n      })));\n      return koconutToReturn;\n    }\n  }], [{\n    key: "fromIterable",\n    value: function fromIterable(iterable) {\n      var koconutToReturn = new KoconutMap(iterable[\'data\']);\n      koconutToReturn.processor = iterable[\'processor\'];\n      koconutToReturn.prevYieldable = iterable[\'prevYieldable\'];\n      return koconutToReturn;\n    }\n  }, {\n    key: "from",\n    value: function from() {\n      var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return new KoconutMap(source);\n    }\n  }, {\n    key: "of",\n    value: function of() {\n      for (var _len3 = arguments.length, data = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        data[_key3] = arguments[_key3];\n      }\n\n      return new KoconutMap(data);\n    }\n  }, {\n    key: "generate",\n    value: function generate(count, generator) {\n      var thisArg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      generator = generator.bind(thisArg);\n      var koconutToReturn = new KoconutMap();\n      koconutToReturn.setProcessor((0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee23() {\n        var processedMap, eachIndex, generatedValue, eachPair, eachEntry;\n        return _regenerator["default"].wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                if (!(count < 0)) {\n                  _context23.next = 2;\n                  break;\n                }\n\n                throw new _module.KoconutInvalidArgumentException("Count must be larger than 0. Given value : ".concat(count));\n\n              case 2:\n                processedMap = new Map();\n                eachIndex = 0;\n\n              case 4:\n                if (!(eachIndex < count)) {\n                  _context23.next = 34;\n                  break;\n                }\n\n                _context23.next = 7;\n                return generator(eachIndex);\n\n              case 7:\n                generatedValue = _context23.sent;\n\n                if (!(generatedValue instanceof _module.Pair)) {\n                  _context23.next = 12;\n                  break;\n                }\n\n                processedMap.set(generatedValue.first, generatedValue.second);\n                _context23.next = 31;\n                break;\n\n              case 12:\n                if (!(generatedValue instanceof _module.KoconutPair)) {\n                  _context23.next = 19;\n                  break;\n                }\n\n                _context23.next = 15;\n                return generatedValue["yield"]();\n\n              case 15:\n                eachPair = _context23.sent;\n                processedMap.set(eachPair.first, eachPair.second);\n                _context23.next = 31;\n                break;\n\n              case 19:\n                if (!(generatedValue instanceof _module.Entry)) {\n                  _context23.next = 23;\n                  break;\n                }\n\n                processedMap.set(generatedValue.key, generatedValue.value);\n                _context23.next = 31;\n                break;\n\n              case 23:\n                if (!(generatedValue instanceof _module.KoconutEntry)) {\n                  _context23.next = 30;\n                  break;\n                }\n\n                _context23.next = 26;\n                return generatedValue["yield"]();\n\n              case 26:\n                eachEntry = _context23.sent;\n                processedMap.set(eachEntry.key, eachEntry.value);\n                _context23.next = 31;\n                break;\n\n              case 30:\n                processedMap.set(generatedValue[0], generatedValue[1]);\n\n              case 31:\n                eachIndex++;\n                _context23.next = 4;\n                break;\n\n              case 34:\n                return _context23.abrupt("return", processedMap);\n\n              case 35:\n              case "end":\n                return _context23.stop();\n            }\n          }\n        }, _callee23);\n      })));\n      return koconutToReturn;\n    }\n  }]);\n  return KoconutMap;\n}(_module.KoconutIterable);\n\nexports.KoconutMap = KoconutMap;\n\n//# sourceURL=webpack://koconut/./dist/components/container/map/KoconutMap.js?')},"./dist/components/enum/KoconutLocale.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutLocale = void 0;\n"use strict";\n\nvar KoconutLocale;\nexports.KoconutLocale = KoconutLocale;\n\n(function (KoconutLocale) {\n  KoconutLocale["en"] = "en";\n  KoconutLocale["en_AU"] = "en-AU";\n  KoconutLocale["en_BZ"] = "en-BZ";\n  KoconutLocale["en_CA"] = "en-CA";\n  KoconutLocale["en_CB"] = "en-CB";\n  KoconutLocale["en_GB"] = "en-GB";\n  KoconutLocale["en_IE"] = "en-IE";\n  KoconutLocale["en_JM"] = "en-JM";\n  KoconutLocale["en_NZ"] = "en-NZ";\n  KoconutLocale["en_PH"] = "en-PH";\n  KoconutLocale["en_TT"] = "en-TT";\n  KoconutLocale["en_US"] = "en-US";\n  KoconutLocale["en_ZA"] = "en-ZA";\n  KoconutLocale["en_ZW"] = "en-ZW";\n  KoconutLocale["ja"] = "ja";\n  KoconutLocale["ja_JP"] = "ja-JP";\n  KoconutLocale["ko"] = "ko";\n  KoconutLocale["ko_KR"] = "ko-KR";\n})(KoconutLocale || (exports.KoconutLocale = KoconutLocale = {}));\n\nvar localeNames = Object.values(KoconutLocale);\nvar upperCaseLocaleNames = localeNames.map(function (eachName) {\n  return eachName.toString().toUpperCase();\n});\n\n(function (_KoconutLocale) {\n  function fromString(localeString) {\n    return upperCaseLocaleNames.includes(localeString.toUpperCase()) ? localeNames[upperCaseLocaleNames.indexOf(localeString.toUpperCase())] : KoconutLocale.en_US;\n  }\n\n  _KoconutLocale.fromString = fromString;\n})(KoconutLocale || (exports.KoconutLocale = KoconutLocale = {}));\n\n//# sourceURL=webpack://koconut/./dist/components/enum/KoconutLocale.js?')},"./dist/components/enum/KoconutLoopSignal.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutLoopSignal = void 0;\n"use strict";\n\nvar KoconutLoopSignal;\nexports.KoconutLoopSignal = KoconutLoopSignal;\n\n(function (KoconutLoopSignal) {\n  KoconutLoopSignal[KoconutLoopSignal["CONTINUE"] = 0] = "CONTINUE";\n  KoconutLoopSignal[KoconutLoopSignal["BREAK"] = 1] = "BREAK";\n})(KoconutLoopSignal || (exports.KoconutLoopSignal = KoconutLoopSignal = {}));\n\n//# sourceURL=webpack://koconut/./dist/components/enum/KoconutLoopSignal.js?')},"./dist/components/exception/KoconutExceptions.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutNoSuchElementException = exports.KoconutInvalidArgumentException = exports.KoconutIndexOutOfBoundsException = exports.KoconutConflictException = void 0;\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js"));\n\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/wrapNativeSuper.js"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2["default"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2["default"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === "undefined" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === "function") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n"use strict";\n\nvar KoconutError = function (_Error) {\n  (0, _inherits2["default"])(KoconutError, _Error);\n\n  var _super = _createSuper(KoconutError);\n\n  function KoconutError(message) {\n    var _this;\n\n    (0, _classCallCheck2["default"])(this, KoconutError);\n    _this = _super.call(this, message);\n    _this.name = _this.constructor.name.split(/(?=[A-Z])/).join(\' \');\n    Error.captureStackTrace((0, _assertThisInitialized2["default"])(_this), _this.constructor);\n    return _this;\n  }\n\n  return (0, _createClass2["default"])(KoconutError);\n}((0, _wrapNativeSuper2["default"])(Error));\n\nvar KoconutInvalidArgumentException = function (_KoconutError) {\n  (0, _inherits2["default"])(KoconutInvalidArgumentException, _KoconutError);\n\n  var _super2 = _createSuper(KoconutInvalidArgumentException);\n\n  function KoconutInvalidArgumentException() {\n    (0, _classCallCheck2["default"])(this, KoconutInvalidArgumentException);\n    return _super2.apply(this, arguments);\n  }\n\n  return (0, _createClass2["default"])(KoconutInvalidArgumentException);\n}(KoconutError);\n\nexports.KoconutInvalidArgumentException = KoconutInvalidArgumentException;\n\nvar KoconutIndexOutOfBoundsException = function (_KoconutError2) {\n  (0, _inherits2["default"])(KoconutIndexOutOfBoundsException, _KoconutError2);\n\n  var _super3 = _createSuper(KoconutIndexOutOfBoundsException);\n\n  function KoconutIndexOutOfBoundsException() {\n    (0, _classCallCheck2["default"])(this, KoconutIndexOutOfBoundsException);\n    return _super3.apply(this, arguments);\n  }\n\n  return (0, _createClass2["default"])(KoconutIndexOutOfBoundsException);\n}(KoconutError);\n\nexports.KoconutIndexOutOfBoundsException = KoconutIndexOutOfBoundsException;\n\nvar KoconutNoSuchElementException = function (_KoconutError3) {\n  (0, _inherits2["default"])(KoconutNoSuchElementException, _KoconutError3);\n\n  var _super4 = _createSuper(KoconutNoSuchElementException);\n\n  function KoconutNoSuchElementException() {\n    (0, _classCallCheck2["default"])(this, KoconutNoSuchElementException);\n    return _super4.apply(this, arguments);\n  }\n\n  return (0, _createClass2["default"])(KoconutNoSuchElementException);\n}(KoconutError);\n\nexports.KoconutNoSuchElementException = KoconutNoSuchElementException;\n\nvar KoconutConflictException = function (_KoconutError4) {\n  (0, _inherits2["default"])(KoconutConflictException, _KoconutError4);\n\n  var _super5 = _createSuper(KoconutConflictException);\n\n  function KoconutConflictException() {\n    (0, _classCallCheck2["default"])(this, KoconutConflictException);\n    return _super5.apply(this, arguments);\n  }\n\n  return (0, _createClass2["default"])(KoconutConflictException);\n}(KoconutError);\n\nexports.KoconutConflictException = KoconutConflictException;\n\n//# sourceURL=webpack://koconut/./dist/components/exception/KoconutExceptions.js?')},"./dist/components/protocol/KoconutComparable.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n\n//# sourceURL=webpack://koconut/./dist/components/protocol/KoconutComparable.js?')},"./dist/components/protocol/KoconutEquatable.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n\n//# sourceURL=webpack://koconut/./dist/components/protocol/KoconutEquatable.js?')},"./dist/components/protocol/KoconutYieldable.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n\n//# sourceURL=webpack://koconut/./dist/components/protocol/KoconutYieldable.js?')},"./dist/components/tool/KoconutDeprecation.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.KoconutDeprecation = exports.FontStyle = exports.FontBackgroundColour = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"));\n\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));\n\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));\n\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));\n\nvar _module = __webpack_require__(/*! ../../module */ "./dist/module.js");\n\nvar _fs = __webpack_require__(/*! fs */ "?abe1");\n\nvar FontStyle;\nexports.FontStyle = FontStyle;\n\n(function (FontStyle) {\n  FontStyle["Reset"] = "\\x1B[0m";\n  FontStyle["Bright"] = "\\x1B[1m";\n  FontStyle["Dim"] = "\\x1B[2m";\n  FontStyle["Underscore"] = "\\x1B[4m";\n  FontStyle["Blink"] = "\\x1B[5m";\n  FontStyle["Reverse"] = "\\x1B[7m";\n  FontStyle["Hidden"] = "\\x1B[8m";\n})(FontStyle || (exports.FontStyle = FontStyle = {}));\n\nvar FontTextColour;\n\n(function (FontTextColour) {\n  FontTextColour["Black"] = "\\x1B[30m";\n  FontTextColour["Red"] = "\\x1B[31m";\n  FontTextColour["Green"] = "\\x1B[32m";\n  FontTextColour["Yellow"] = "\\x1B[33m";\n  FontTextColour["Blue"] = "\\x1B[34m";\n  FontTextColour["Magenta"] = "\\x1B[35m";\n  FontTextColour["Cyan"] = "\\x1B[36m";\n  FontTextColour["White"] = "\\x1B[37m";\n})(FontTextColour || (FontTextColour = {}));\n\nvar FontBackgroundColour;\nexports.FontBackgroundColour = FontBackgroundColour;\n\n(function (FontBackgroundColour) {\n  FontBackgroundColour["Black"] = "\\x1B[40m";\n  FontBackgroundColour["Red"] = "\\x1B[41m";\n  FontBackgroundColour["Green"] = "\\x1B[42m";\n  FontBackgroundColour["Yellow"] = "\\x1B[43m";\n  FontBackgroundColour["Blue"] = "\\x1B[44m";\n  FontBackgroundColour["Magenta"] = "\\x1B[45m";\n  FontBackgroundColour["Cyan"] = "\\x1B[46m";\n  FontBackgroundColour["White"] = "\\x1B[47m";\n})(FontBackgroundColour || (exports.FontBackgroundColour = FontBackgroundColour = {}));\n\nvar deprecationWarningGenerators = {\n  english: function english(className, methodName, deprecationVersion, alternativeMethodName) {\n    return "".concat(FontTextColour.Yellow, "[Deprecation Warning] ").concat(FontStyle.Reset, ": ") + "Method named ".concat(FontTextColour.Cyan, "\'").concat(methodName, "\' ").concat(FontStyle.Reset, "of ").concat(FontTextColour.Magenta, "\'").concat(className, "\' ").concat(FontStyle.Reset, "class would be ").concat(FontTextColour.Yellow, "Deprecated").concat(FontStyle.Reset, " ") + "".concat(deprecationVersion ? "since Version : ".concat(FontTextColour.Cyan, "\'").concat(deprecationVersion, "\'").concat(FontStyle.Reset, ".") : \'in the future.\') + "".concat(alternativeMethodName ? "\\n                        You can use ".concat(FontTextColour.Cyan, "\'").concat(alternativeMethodName, "\' ").concat(FontStyle.Reset, "method alternatively.") : \'\');\n  },\n  japanese: function japanese(className, methodName, deprecationVersion, alternativeMethodName) {\n    return "".concat(FontTextColour.Yellow, "[\\u975E\\u63A8\\u5968\\u306E\\u8B66\\u544A] ").concat(FontStyle.Reset, ": ") + "".concat(FontTextColour.Magenta, "\'").concat(className, "\'").concat(FontStyle.Reset, "\\u30AF\\u30E9\\u30B9\\u306E").concat(FontTextColour.Cyan, "\'").concat(methodName, "\'").concat(FontStyle.Reset, "\\u30E1\\u30BD\\u30C3\\u30C9\\u306F") + "".concat(deprecationVersion ? "".concat(FontTextColour.Cyan, "\'").concat(deprecationVersion, "\'").concat(FontStyle.Reset, "\\u30D0\\u30FC\\u30B8\\u30E7\\u30F3\\u304B\\u3089") : " \\u5411\\u5F8C", "\\u30B5\\u30DD\\u30FC\\u30C8\\u304C").concat(FontTextColour.Yellow, "\\u4E2D\\u6B62").concat(FontStyle.Reset, "\\u3055\\u308C\\u308B\\u4E88\\u5B9A\\u3067\\u3059\\u3002") + "".concat(alternativeMethodName ? "\\n                 \\u305D\\u306E\\u6A5F\\u80FD\\u306F".concat(FontTextColour.Cyan, "\'").concat(alternativeMethodName, "\'").concat(FontStyle.Reset, "\\u30E1\\u30BD\\u30C3\\u30C9\\u306B\\u7F6E\\u63DB\\u3048\\u3066\\u4F7F\\u7528\\u3059\\u308B\\u3053\\u3068\\u3092\\u304A\\u52E7\\u3081\\u3057\\u307E\\u3059\\u3002") : "");\n  },\n  korean: function korean(className, methodName, deprecationVersion, alternativeMethodName) {\n    return "".concat(FontTextColour.Yellow, "[\\uC9C0\\uC6D0 \\uC911\\uB2E8 \\uACBD\\uACE0] ").concat(FontStyle.Reset, ": ") + "".concat(FontTextColour.Magenta, "\'").concat(className, "\' ").concat(FontStyle.Reset, "\\uD074\\uB798\\uC2A4\\uC758 ").concat(FontTextColour.Cyan, "\'").concat(methodName, "\' ").concat(FontStyle.Reset, "\\uBA54\\uC18C\\uB4DC\\uB294") + "".concat(deprecationVersion ? " ".concat(FontTextColour.Cyan, "\'").concat(deprecationVersion, "\' ").concat(FontStyle.Reset, "\\uBC84\\uC804\\uBD80\\uD130") : " \\uD5A5\\uD6C4", " \\uC9C0\\uC6D0\\uC774 ").concat(FontTextColour.Yellow, "\\uC911\\uB2E8").concat(FontStyle.Reset, " \\uB420 \\uC608\\uC815\\uC785\\uB2C8\\uB2E4.") + "".concat(alternativeMethodName ? "\\n                   \\uD574\\uB2F9 \\uAE30\\uB2A5\\uC740 ".concat(FontTextColour.Cyan, "\'").concat(alternativeMethodName, "\'").concat(FontStyle.Reset, " \\uBA54\\uC18C\\uB4DC\\uB85C \\uB300\\uCCB4\\uD558\\uC5EC \\uC0AC\\uC6A9\\uD558\\uB294 \\uAC83\\uC744 \\uAD8C\\uC7A5\\uD569\\uB2C8\\uB2E4.") : "");\n  }\n};\nvar deprecationWarningLocale = {\n  en: deprecationWarningGenerators.english,\n  \'en-AU\': deprecationWarningGenerators.english,\n  \'en-BZ\': deprecationWarningGenerators.english,\n  \'en-CA\': deprecationWarningGenerators.english,\n  \'en-CB\': deprecationWarningGenerators.english,\n  \'en-GB\': deprecationWarningGenerators.english,\n  \'en-IE\': deprecationWarningGenerators.english,\n  \'en-JM\': deprecationWarningGenerators.english,\n  \'en-NZ\': deprecationWarningGenerators.english,\n  \'en-PH\': deprecationWarningGenerators.english,\n  \'en-TT\': deprecationWarningGenerators.english,\n  \'en-US\': deprecationWarningGenerators.english,\n  \'en-ZA\': deprecationWarningGenerators.english,\n  \'en-ZW\': deprecationWarningGenerators.english,\n  ja: deprecationWarningGenerators.japanese,\n  \'ja-JP\': deprecationWarningGenerators.japanese,\n  ko: deprecationWarningGenerators.korean,\n  \'ko-KR\': deprecationWarningGenerators.korean\n};\n\nvar KoconutDeprecation = function () {\n  function KoconutDeprecation() {\n    (0, _classCallCheck2["default"])(this, KoconutDeprecation);\n  }\n\n  (0, _createClass2["default"])(KoconutDeprecation, null, [{\n    key: "showDeprecationWarning",\n    value: function showDeprecationWarning() {\n      var deprecationVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var alternative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (_module.KoconutOption.isDeprecationWarningEnabled) {\n        var _Error$stack;\n\n        var callStack = (_Error$stack = new Error().stack) === null || _Error$stack === void 0 ? void 0 : _Error$stack.split(\'\\n\').slice(2, 8);\n\n        var _trim$split$1$split = callStack.shift().trim().split(\' \')[1].split(\'.\'),\n            _trim$split$1$split2 = (0, _slicedToArray2["default"])(_trim$split$1$split, 2),\n            className = _trim$split$1$split2[0],\n            methodName = _trim$split$1$split2[1];\n\n        var warningString = deprecationWarningLocale[_module.KoconutOption.locale](className, methodName, deprecationVersion, alternative === null || alternative === void 0 ? void 0 : alternative.name);\n\n        if (_module.KoconutOption.doesDeprecationWarningShowCallStack) warningString += "\\n".concat(FontTextColour.Green).concat(callStack === null || callStack === void 0 ? void 0 : callStack.join(\'\\n\'), "\\n").concat(FontStyle.Reset);\n        console.warn(warningString);\n\n        if (this.isRunningOnDevUnitTesting) {\n          try {\n            var stringToAdd = "".concat(className, "/").concat(methodName, "/").concat(deprecationVersion);\n            if (!(0, _fs.existsSync)(this.devDeprecationListTmpDirPath)) (0, _fs.mkdirSync)(this.devDeprecationListTmpDirPath);\n            if (!(0, _fs.existsSync)(this.devDeprecationListTmpFilePath)) (0, _fs.writeFileSync)(this.devDeprecationListTmpFilePath, \'\');\n            if (!this.devDeprecationListSet) this.devDeprecationListSet = new Set((0, _fs.readFileSync)(this.devDeprecationListTmpFilePath, \'utf-8\').split(\'\\n\'));\n\n            if (!this.devDeprecationListSet.has(stringToAdd)) {\n              this.devDeprecationListSet.add(stringToAdd);\n              (0, _fs.appendFileSync)(this.devDeprecationListTmpFilePath, "\\n".concat(stringToAdd));\n            }\n          } catch (error) {\n            console.error(error);\n          }\n        }\n      }\n    }\n  }]);\n  return KoconutDeprecation;\n}();\n\nexports.KoconutDeprecation = KoconutDeprecation;\n(0, _defineProperty2["default"])(KoconutDeprecation, "isRunningOnDevUnitTesting", false);\n(0, _defineProperty2["default"])(KoconutDeprecation, "devDeprecationListTmpDirPath", \'./log\');\n(0, _defineProperty2["default"])(KoconutDeprecation, "devDeprecationListTmpFilePath", "".concat(KoconutDeprecation.devDeprecationListTmpDirPath, "/DevDeprecationList.tmp"));\n\n//# sourceURL=webpack://koconut/./dist/components/tool/KoconutDeprecation.js?')},"./dist/components/tool/KoconutOpener.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n"use strict";\n\n//# sourceURL=webpack://koconut/./dist/components/tool/KoconutOpener.js?')},"./dist/components/tool/KoconutTypeChecker.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.KoconutTypeChecker = void 0;\nvar KoconutTypeChecker = {\n  checkIsComparable: function checkIsComparable(target) {\n    if (target && target.compareTo && typeof target.compareTo === 'function') return true;else return false;\n  },\n  checkIsEquatable: function checkIsEquatable(target) {\n    if (target && target.equalsTo && typeof target.equalsTo === 'function') return true;else return false;\n  }\n};\nexports.KoconutTypeChecker = KoconutTypeChecker;\n\n//# sourceURL=webpack://koconut/./dist/components/tool/KoconutTypeChecker.js?")},"./dist/module.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\n\nvar _KoconutOption = __webpack_require__(/*! ./components/KoconutOption */ "./dist/components/KoconutOption.js");\n\nObject.keys(_KoconutOption).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutOption[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutOption[key];\n    }\n  });\n});\n\nvar _KoconutPrimitive = __webpack_require__(/*! ./components/KoconutPrimitive */ "./dist/components/KoconutPrimitive.js");\n\nObject.keys(_KoconutPrimitive).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutPrimitive[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutPrimitive[key];\n    }\n  });\n});\n\nvar _KoconutCallbacks = __webpack_require__(/*! ./components/callback/KoconutCallbacks */ "./dist/components/callback/KoconutCallbacks.js");\n\nObject.keys(_KoconutCallbacks).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutCallbacks[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutCallbacks[key];\n    }\n  });\n});\n\nvar _KoconutDeprecation = __webpack_require__(/*! ./components/tool/KoconutDeprecation */ "./dist/components/tool/KoconutDeprecation.js");\n\nObject.keys(_KoconutDeprecation).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutDeprecation[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutDeprecation[key];\n    }\n  });\n});\n\nvar _KoconutOpener = __webpack_require__(/*! ./components/tool/KoconutOpener */ "./dist/components/tool/KoconutOpener.js");\n\nObject.keys(_KoconutOpener).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutOpener[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutOpener[key];\n    }\n  });\n});\n\nvar _KoconutTypeChecker = __webpack_require__(/*! ./components/tool/KoconutTypeChecker */ "./dist/components/tool/KoconutTypeChecker.js");\n\nObject.keys(_KoconutTypeChecker).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutTypeChecker[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutTypeChecker[key];\n    }\n  });\n});\n\nvar _KoconutBoolean = __webpack_require__(/*! ./components/container/base/KoconutBoolean */ "./dist/components/container/base/KoconutBoolean.js");\n\nObject.keys(_KoconutBoolean).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutBoolean[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutBoolean[key];\n    }\n  });\n});\n\nvar _KoconutPair = __webpack_require__(/*! ./components/container/base/KoconutPair */ "./dist/components/container/base/KoconutPair.js");\n\nObject.keys(_KoconutPair).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutPair[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutPair[key];\n    }\n  });\n});\n\nvar _KoconutEntry = __webpack_require__(/*! ./components/container/base/KoconutEntry */ "./dist/components/container/base/KoconutEntry.js");\n\nObject.keys(_KoconutEntry).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutEntry[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutEntry[key];\n    }\n  });\n});\n\nvar _KoconutLocale = __webpack_require__(/*! ./components/enum/KoconutLocale */ "./dist/components/enum/KoconutLocale.js");\n\nObject.keys(_KoconutLocale).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutLocale[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutLocale[key];\n    }\n  });\n});\n\nvar _KoconutLoopSignal = __webpack_require__(/*! ./components/enum/KoconutLoopSignal */ "./dist/components/enum/KoconutLoopSignal.js");\n\nObject.keys(_KoconutLoopSignal).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutLoopSignal[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutLoopSignal[key];\n    }\n  });\n});\n\nvar _KoconutExceptions = __webpack_require__(/*! ./components/exception/KoconutExceptions */ "./dist/components/exception/KoconutExceptions.js");\n\nObject.keys(_KoconutExceptions).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutExceptions[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutExceptions[key];\n    }\n  });\n});\n\nvar _KoconutComparable = __webpack_require__(/*! ./components/protocol/KoconutComparable */ "./dist/components/protocol/KoconutComparable.js");\n\nObject.keys(_KoconutComparable).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutComparable[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutComparable[key];\n    }\n  });\n});\n\nvar _KoconutEquatable = __webpack_require__(/*! ./components/protocol/KoconutEquatable */ "./dist/components/protocol/KoconutEquatable.js");\n\nObject.keys(_KoconutEquatable).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutEquatable[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutEquatable[key];\n    }\n  });\n});\n\nvar _KoconutYieldable = __webpack_require__(/*! ./components/protocol/KoconutYieldable */ "./dist/components/protocol/KoconutYieldable.js");\n\nObject.keys(_KoconutYieldable).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutYieldable[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutYieldable[key];\n    }\n  });\n});\n\nvar _KoconutIterable = __webpack_require__(/*! ./components/container/KoconutIterable */ "./dist/components/container/KoconutIterable.js");\n\nObject.keys(_KoconutIterable).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutIterable[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutIterable[key];\n    }\n  });\n});\n\nvar _KoconutCollection = __webpack_require__(/*! ./components/container/collection/KoconutCollection */ "./dist/components/container/collection/KoconutCollection.js");\n\nObject.keys(_KoconutCollection).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutCollection[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutCollection[key];\n    }\n  });\n});\n\nvar _KoconutArray = __webpack_require__(/*! ./components/container/collection/array/KoconutArray */ "./dist/components/container/collection/array/KoconutArray.js");\n\nObject.keys(_KoconutArray).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutArray[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutArray[key];\n    }\n  });\n});\n\nvar _KoconutSequence = __webpack_require__(/*! ./components/container/collection/sequence/KoconutSequence */ "./dist/components/container/collection/sequence/KoconutSequence.js");\n\nObject.keys(_KoconutSequence).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutSequence[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutSequence[key];\n    }\n  });\n});\n\nvar _KoconutSet = __webpack_require__(/*! ./components/container/collection/set/KoconutSet */ "./dist/components/container/collection/set/KoconutSet.js");\n\nObject.keys(_KoconutSet).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutSet[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutSet[key];\n    }\n  });\n});\n\nvar _KoconutFlow = __webpack_require__(/*! ./components/container/flow/KoconutFlow */ "./dist/components/container/flow/KoconutFlow.js");\n\nObject.keys(_KoconutFlow).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutFlow[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutFlow[key];\n    }\n  });\n});\n\nvar _KoconutMap = __webpack_require__(/*! ./components/container/map/KoconutMap */ "./dist/components/container/map/KoconutMap.js");\n\nObject.keys(_KoconutMap).forEach(function (key) {\n  if (key === "default" || key === "__esModule") return;\n  if (key in exports && exports[key] === _KoconutMap[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _KoconutMap[key];\n    }\n  });\n});\n"use strict";\n\n//# sourceURL=webpack://koconut/./dist/module.js?')},"./node_modules/chai/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = __webpack_require__(/*! ./lib/chai */ "./node_modules/chai/lib/chai.js");\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/index.js?')},"./node_modules/chai/lib/chai.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = \'4.3.3\';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = __webpack_require__(/*! assertion-error */ "./node_modules/assertion-error/index.js");\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = __webpack_require__(/*! ./chai/utils */ "./node_modules/chai/lib/chai/utils/index.js");\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = __webpack_require__(/*! ./chai/config */ "./node_modules/chai/lib/chai/config.js");\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = __webpack_require__(/*! ./chai/assertion */ "./node_modules/chai/lib/chai/assertion.js");\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = __webpack_require__(/*! ./chai/core/assertions */ "./node_modules/chai/lib/chai/core/assertions.js");\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = __webpack_require__(/*! ./chai/interface/expect */ "./node_modules/chai/lib/chai/interface/expect.js");\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = __webpack_require__(/*! ./chai/interface/should */ "./node_modules/chai/lib/chai/interface/should.js");\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = __webpack_require__(/*! ./chai/interface/assert */ "./node_modules/chai/lib/chai/interface/assert.js");\nexports.use(assert);\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai.js?')},"./node_modules/chai/lib/chai/assertion.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = __webpack_require__(/*! ./config */ \"./node_modules/chai/lib/chai/config.js\");\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/assertion.js?")},"./node_modules/chai/lib/chai/config.js":module=>{eval("module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/config.js?")},"./node_modules/chai/lib/chai/core/assertions.js":module=>{eval("/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toISOString() + '..' + finish.toISOString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return _.eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/core/assertions.js?")},"./node_modules/chai/lib/chai/interface/assert.js":module=>{eval("/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/interface/assert.js?")},"./node_modules/chai/lib/chai/interface/expect.js":module=>{eval('/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail("custom error message");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, "custom error message");\n   *     expect.fail(1, 2, "custom error message", ">");\n   *     expect.fail(1, 2, undefined, ">");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || \'expect.fail()\';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/interface/expect.js?')},"./node_modules/chai/lib/chai/interface/should.js":module=>{eval("/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/interface/should.js?")},"./node_modules/chai/lib/chai/utils/addChainableMethod.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ \"./node_modules/chai/lib/chai/utils/addLengthGuard.js\");\nvar chai = __webpack_require__(/*! ../../chai */ \"./node_modules/chai/lib/chai.js\");\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\nvar proxify = __webpack_require__(/*! ./proxify */ \"./node_modules/chai/lib/chai/utils/proxify.js\");\nvar transferFlags = __webpack_require__(/*! ./transferFlags */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/addChainableMethod.js?")},"./node_modules/chai/lib/chai/utils/addLengthGuard.js":module=>{eval("var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/addLengthGuard.js?")},"./node_modules/chai/lib/chai/utils/addMethod.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ \"./node_modules/chai/lib/chai/utils/addLengthGuard.js\");\nvar chai = __webpack_require__(/*! ../../chai */ \"./node_modules/chai/lib/chai.js\");\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\nvar proxify = __webpack_require__(/*! ./proxify */ \"./node_modules/chai/lib/chai/utils/proxify.js\");\nvar transferFlags = __webpack_require__(/*! ./transferFlags */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/addMethod.js?")},"./node_modules/chai/lib/chai/utils/addProperty.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = __webpack_require__(/*! ../../chai */ \"./node_modules/chai/lib/chai.js\");\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\nvar isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ \"./node_modules/chai/lib/chai/utils/isProxyEnabled.js\");\nvar transferFlags = __webpack_require__(/*! ./transferFlags */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/addProperty.js?")},"./node_modules/chai/lib/chai/utils/compareByInspect.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = __webpack_require__(/*! ./inspect */ \"./node_modules/chai/lib/chai/utils/inspect.js\");\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/compareByInspect.js?")},"./node_modules/chai/lib/chai/utils/expectTypes.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = __webpack_require__(/*! assertion-error */ \"./node_modules/assertion-error/index.js\");\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\nvar type = __webpack_require__(/*! type-detect */ \"./node_modules/type-detect/type-detect.js\");\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/expectTypes.js?")},"./node_modules/chai/lib/chai/utils/flag.js":module=>{eval("/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/flag.js?")},"./node_modules/chai/lib/chai/utils/getActual.js":module=>{eval("/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/getActual.js?")},"./node_modules/chai/lib/chai/utils/getMessage.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\")\n  , getActual = __webpack_require__(/*! ./getActual */ \"./node_modules/chai/lib/chai/utils/getActual.js\")\n  , objDisplay = __webpack_require__(/*! ./objDisplay */ \"./node_modules/chai/lib/chai/utils/objDisplay.js\");\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/getMessage.js?")},"./node_modules/chai/lib/chai/utils/getOperator.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("var type = __webpack_require__(/*! type-detect */ \"./node_modules/type-detect/type-detect.js\");\n\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/getOperator.js?")},"./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols */ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js?')},"./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js":module=>{eval("/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js?")},"./node_modules/chai/lib/chai/utils/getProperties.js":module=>{eval("/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/getProperties.js?")},"./node_modules/chai/lib/chai/utils/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = __webpack_require__(/*! pathval */ "./node_modules/pathval/index.js");\n\n/*!\n * test utility\n */\n\nexports.test = __webpack_require__(/*! ./test */ "./node_modules/chai/lib/chai/utils/test.js");\n\n/*!\n * type utility\n */\n\nexports.type = __webpack_require__(/*! type-detect */ "./node_modules/type-detect/type-detect.js");\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = __webpack_require__(/*! ./expectTypes */ "./node_modules/chai/lib/chai/utils/expectTypes.js");\n\n/*!\n * message utility\n */\n\nexports.getMessage = __webpack_require__(/*! ./getMessage */ "./node_modules/chai/lib/chai/utils/getMessage.js");\n\n/*!\n * actual utility\n */\n\nexports.getActual = __webpack_require__(/*! ./getActual */ "./node_modules/chai/lib/chai/utils/getActual.js");\n\n/*!\n * Inspect util\n */\n\nexports.inspect = __webpack_require__(/*! ./inspect */ "./node_modules/chai/lib/chai/utils/inspect.js");\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = __webpack_require__(/*! ./objDisplay */ "./node_modules/chai/lib/chai/utils/objDisplay.js");\n\n/*!\n * Flag utility\n */\n\nexports.flag = __webpack_require__(/*! ./flag */ "./node_modules/chai/lib/chai/utils/flag.js");\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = __webpack_require__(/*! ./transferFlags */ "./node_modules/chai/lib/chai/utils/transferFlags.js");\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = __webpack_require__(/*! deep-eql */ "./node_modules/deep-eql/index.js");\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = __webpack_require__(/*! get-func-name */ "./node_modules/get-func-name/index.js");\n\n/*!\n * add Property\n */\n\nexports.addProperty = __webpack_require__(/*! ./addProperty */ "./node_modules/chai/lib/chai/utils/addProperty.js");\n\n/*!\n * add Method\n */\n\nexports.addMethod = __webpack_require__(/*! ./addMethod */ "./node_modules/chai/lib/chai/utils/addMethod.js");\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = __webpack_require__(/*! ./overwriteProperty */ "./node_modules/chai/lib/chai/utils/overwriteProperty.js");\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = __webpack_require__(/*! ./overwriteMethod */ "./node_modules/chai/lib/chai/utils/overwriteMethod.js");\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = __webpack_require__(/*! ./addChainableMethod */ "./node_modules/chai/lib/chai/utils/addChainableMethod.js");\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = __webpack_require__(/*! ./overwriteChainableMethod */ "./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js");\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = __webpack_require__(/*! ./compareByInspect */ "./node_modules/chai/lib/chai/utils/compareByInspect.js");\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols */ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js");\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = __webpack_require__(/*! ./getOwnEnumerableProperties */ "./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js");\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = __webpack_require__(/*! check-error */ "./node_modules/check-error/index.js");\n\n/*!\n * Proxify util\n */\n\nexports.proxify = __webpack_require__(/*! ./proxify */ "./node_modules/chai/lib/chai/utils/proxify.js");\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ "./node_modules/chai/lib/chai/utils/addLengthGuard.js");\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js");\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = __webpack_require__(/*! ./isNaN */ "./node_modules/chai/lib/chai/utils/isNaN.js");\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = __webpack_require__(/*! ./getOperator */ "./node_modules/chai/lib/chai/utils/getOperator.js");\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/index.js?')},"./node_modules/chai/lib/chai/utils/inspect.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = __webpack_require__(/*! get-func-name */ "./node_modules/get-func-name/index.js");\nvar loupe = __webpack_require__(/*! loupe */ "./node_modules/loupe/loupe.js");\nvar config = __webpack_require__(/*! ../config */ "./node_modules/chai/lib/chai/config.js");\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var options = {\n    colors: colors,\n    depth: (typeof depth === \'undefined\' ? 2 : depth),\n    showHidden: showHidden,\n    truncate: config.truncateThreshold ? config.truncateThreshold : Infinity,\n  };\n  return loupe.inspect(obj, options);\n}\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/inspect.js?')},"./node_modules/chai/lib/chai/utils/isNaN.js":module=>{eval("/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/isNaN.js?")},"./node_modules/chai/lib/chai/utils/isProxyEnabled.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("var config = __webpack_require__(/*! ../config */ \"./node_modules/chai/lib/chai/config.js\");\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/isProxyEnabled.js?")},"./node_modules/chai/lib/chai/utils/objDisplay.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = __webpack_require__(/*! ./inspect */ \"./node_modules/chai/lib/chai/utils/inspect.js\");\nvar config = __webpack_require__(/*! ../config */ \"./node_modules/chai/lib/chai/config.js\");\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/objDisplay.js?")},"./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = __webpack_require__(/*! ../../chai */ \"./node_modules/chai/lib/chai.js\");\nvar transferFlags = __webpack_require__(/*! ./transferFlags */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js?")},"./node_modules/chai/lib/chai/utils/overwriteMethod.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = __webpack_require__(/*! ./addLengthGuard */ \"./node_modules/chai/lib/chai/utils/addLengthGuard.js\");\nvar chai = __webpack_require__(/*! ../../chai */ \"./node_modules/chai/lib/chai.js\");\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\nvar proxify = __webpack_require__(/*! ./proxify */ \"./node_modules/chai/lib/chai/utils/proxify.js\");\nvar transferFlags = __webpack_require__(/*! ./transferFlags */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/overwriteMethod.js?")},"./node_modules/chai/lib/chai/utils/overwriteProperty.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = __webpack_require__(/*! ../../chai */ \"./node_modules/chai/lib/chai.js\");\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\nvar isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ \"./node_modules/chai/lib/chai/utils/isProxyEnabled.js\");\nvar transferFlags = __webpack_require__(/*! ./transferFlags */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/overwriteProperty.js?")},"./node_modules/chai/lib/chai/utils/proxify.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("var config = __webpack_require__(/*! ../config */ \"./node_modules/chai/lib/chai/config.js\");\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\nvar getProperties = __webpack_require__(/*! ./getProperties */ \"./node_modules/chai/lib/chai/utils/getProperties.js\");\nvar isProxyEnabled = __webpack_require__(/*! ./isProxyEnabled */ \"./node_modules/chai/lib/chai/utils/isProxyEnabled.js\");\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/proxify.js?")},"./node_modules/chai/lib/chai/utils/test.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = __webpack_require__(/*! ./flag */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/test.js?")},"./node_modules/chai/lib/chai/utils/transferFlags.js":module=>{eval("/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/chai/lib/chai/utils/transferFlags.js?")},"./node_modules/check-error/index.js":module=>{"use strict";eval("\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/check-error/index.js?")},"./node_modules/deep-eql/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = __webpack_require__(/*! type-detect */ \"./node_modules/type-detect/type-detect.js\");\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n\n\n//# sourceURL=webpack://koconut/./node_modules/deep-eql/index.js?")},"./node_modules/events/events.js":module=>{"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack://koconut/./node_modules/events/events.js?")},"./node_modules/get-func-name/index.js":module=>{"use strict";eval("\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n\n\n//# sourceURL=webpack://koconut/./node_modules/get-func-name/index.js?")},"./node_modules/loupe/loupe.js":function(__unused_webpack_module,exports,__webpack_require__){eval("(function (global, factory) {\n   true ? factory(exports) :\n  0;\n}(this, (function (exports) { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var ansiColors = {\n    bold: ['1', '22'],\n    dim: ['2', '22'],\n    italic: ['3', '23'],\n    underline: ['4', '24'],\n    // 5 & 6 are blinking\n    inverse: ['7', '27'],\n    hidden: ['8', '28'],\n    strike: ['9', '29'],\n    // 10-20 are fonts\n    // 21-29 are resets for 1-9\n    black: ['30', '39'],\n    red: ['31', '39'],\n    green: ['32', '39'],\n    yellow: ['33', '39'],\n    blue: ['34', '39'],\n    magenta: ['35', '39'],\n    cyan: ['36', '39'],\n    white: ['37', '39'],\n    brightblack: ['30;1', '39'],\n    brightred: ['31;1', '39'],\n    brightgreen: ['32;1', '39'],\n    brightyellow: ['33;1', '39'],\n    brightblue: ['34;1', '39'],\n    brightmagenta: ['35;1', '39'],\n    brightcyan: ['36;1', '39'],\n    brightwhite: ['37;1', '39'],\n    grey: ['90', '39']\n  };\n  var styles = {\n    special: 'cyan',\n    number: 'yellow',\n    bigint: 'yellow',\n    boolean: 'yellow',\n    undefined: 'grey',\n    null: 'bold',\n    string: 'green',\n    symbol: 'green',\n    date: 'magenta',\n    regexp: 'red'\n  };\n  var truncator = '…';\n\n  function colorise(value, styleType) {\n    var color = ansiColors[styles[styleType]] || ansiColors[styleType];\n\n    if (!color) {\n      return String(value);\n    }\n\n    return \"\\x1B[\".concat(color[0], \"m\").concat(String(value), \"\\x1B[\").concat(color[1], \"m\");\n  }\n\n  function normaliseOptions() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$showHidden = _ref.showHidden,\n        showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden,\n        _ref$depth = _ref.depth,\n        depth = _ref$depth === void 0 ? 2 : _ref$depth,\n        _ref$colors = _ref.colors,\n        colors = _ref$colors === void 0 ? false : _ref$colors,\n        _ref$customInspect = _ref.customInspect,\n        customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect,\n        _ref$showProxy = _ref.showProxy,\n        showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy,\n        _ref$maxArrayLength = _ref.maxArrayLength,\n        maxArrayLength = _ref$maxArrayLength === void 0 ? Infinity : _ref$maxArrayLength,\n        _ref$breakLength = _ref.breakLength,\n        breakLength = _ref$breakLength === void 0 ? Infinity : _ref$breakLength,\n        _ref$seen = _ref.seen,\n        seen = _ref$seen === void 0 ? [] : _ref$seen,\n        _ref$truncate = _ref.truncate,\n        truncate = _ref$truncate === void 0 ? Infinity : _ref$truncate,\n        _ref$stylize = _ref.stylize,\n        stylize = _ref$stylize === void 0 ? String : _ref$stylize;\n\n    var options = {\n      showHidden: Boolean(showHidden),\n      depth: Number(depth),\n      colors: Boolean(colors),\n      customInspect: Boolean(customInspect),\n      showProxy: Boolean(showProxy),\n      maxArrayLength: Number(maxArrayLength),\n      breakLength: Number(breakLength),\n      truncate: Number(truncate),\n      seen: seen,\n      stylize: stylize\n    };\n\n    if (options.colors) {\n      options.stylize = colorise;\n    }\n\n    return options;\n  }\n  function truncate(string, length) {\n    var tail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : truncator;\n    string = String(string);\n    var tailLength = tail.length;\n    var stringLength = string.length;\n\n    if (tailLength > length && stringLength > tailLength) {\n      return tail;\n    }\n\n    if (stringLength > length && stringLength > tailLength) {\n      return \"\".concat(string.slice(0, length - tailLength)).concat(tail);\n    }\n\n    return string;\n  } // eslint-disable-next-line complexity\n\n  function inspectList(list, options, inspectItem) {\n    var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ', ';\n    inspectItem = inspectItem || options.inspect;\n    var size = list.length;\n    if (size === 0) return '';\n    var originalLength = options.truncate;\n    var output = '';\n    var peek = '';\n    var truncated = '';\n\n    for (var i = 0; i < size; i += 1) {\n      var last = i + 1 === list.length;\n      var secondToLast = i + 2 === list.length;\n      truncated = \"\".concat(truncator, \"(\").concat(list.length - i, \")\");\n      var value = list[i]; // If there is more than one remaining we need to account for a separator of `, `\n\n      options.truncate = originalLength - output.length - (last ? 0 : separator.length);\n      var string = peek || inspectItem(value, options) + (last ? '' : separator);\n      var nextLength = output.length + string.length;\n      var truncatedLength = nextLength + truncated.length; // If this is the last element, and adding it would\n      // take us over length, but adding the truncator wouldn't - then break now\n\n      if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {\n        break;\n      } // If this isn't the last or second to last element to scan,\n      // but the string is already over length then break here\n\n\n      if (!last && !secondToLast && truncatedLength > originalLength) {\n        break;\n      } // Peek at the next string to determine if we should\n      // break early before adding this item to the output\n\n\n      peek = last ? '' : inspectItem(list[i + 1], options) + (secondToLast ? '' : separator); // If we have one element left, but this element and\n      // the next takes over length, the break early\n\n      if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {\n        break;\n      }\n\n      output += string; // If the next element takes us to length -\n      // but there are more after that, then we should truncate now\n\n      if (!last && !secondToLast && nextLength + peek.length >= originalLength) {\n        truncated = \"\".concat(truncator, \"(\").concat(list.length - i - 1, \")\");\n        break;\n      }\n\n      truncated = '';\n    }\n\n    return \"\".concat(output).concat(truncated);\n  }\n\n  function quoteComplexKey(key) {\n    if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {\n      return key;\n    }\n\n    return JSON.stringify(key).replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\");\n  }\n\n  function inspectProperty(_ref2, options) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        value = _ref3[1];\n\n    options.truncate -= 2;\n\n    if (typeof key === 'string') {\n      key = quoteComplexKey(key);\n    } else if (typeof key !== 'number') {\n      key = \"[\".concat(options.inspect(key, options), \"]\");\n    }\n\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \": \").concat(value);\n  }\n\n  function inspectArray(array, options) {\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return '[]';\n    options.truncate -= 4;\n    var listContents = inspectList(array, options);\n    options.truncate -= listContents.length;\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"[ \".concat(listContents).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  /* !\n   * Chai - getFuncName utility\n   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n   * MIT Licensed\n   */\n\n  /**\n   * ### .getFuncName(constructorFn)\n   *\n   * Returns the name of a function.\n   * When a non-function instance is passed, returns `null`.\n   * This also includes a polyfill function if `aFunc.name` is not defined.\n   *\n   * @name getFuncName\n   * @param {Function} funct\n   * @namespace Utils\n   * @api public\n   */\n\n  var toString = Function.prototype.toString;\n  var functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\n  function getFuncName(aFunc) {\n    if (typeof aFunc !== 'function') {\n      return null;\n    }\n\n    var name = '';\n    if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n      // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n      var match = toString.call(aFunc).match(functionNameMatch);\n      if (match) {\n        name = match[1];\n      }\n    } else {\n      // If we've got a `name` property we just use it\n      name = aFunc.name;\n    }\n\n    return name;\n  }\n\n  var getFuncName_1 = getFuncName;\n\n  var getArrayName = function getArrayName(array) {\n    // We need to special case Node.js' Buffers, which report to be Uint8Array\n    if (typeof Buffer === 'function' && array instanceof Buffer) {\n      return 'Buffer';\n    }\n\n    if (array[Symbol.toStringTag]) {\n      return array[Symbol.toStringTag];\n    }\n\n    return getFuncName_1(array.constructor);\n  };\n\n  function inspectTypedArray(array, options) {\n    var name = getArrayName(array);\n    options.truncate -= name.length + 4; // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n\n    var nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length) return \"\".concat(name, \"[]\"); // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n    // stylise the toString() value of them\n\n    var output = '';\n\n    for (var i = 0; i < array.length; i++) {\n      var string = \"\".concat(options.stylize(truncate(array[i], options.truncate), 'number')).concat(i === array.length - 1 ? '' : ', ');\n      options.truncate -= string.length;\n\n      if (array[i] !== array.length && options.truncate <= 3) {\n        output += \"\".concat(truncator, \"(\").concat(array.length - array[i] + 1, \")\");\n        break;\n      }\n\n      output += string;\n    }\n\n    var propertyContents = '';\n\n    if (nonIndexProperties.length) {\n      propertyContents = inspectList(nonIndexProperties.map(function (key) {\n        return [key, array[key]];\n      }), options, inspectProperty);\n    }\n\n    return \"\".concat(name, \"[ \").concat(output).concat(propertyContents ? \", \".concat(propertyContents) : '', \" ]\");\n  }\n\n  function inspectDate(dateObject, options) {\n    // If we need to - truncate the time portion, but never the date\n    var split = dateObject.toJSON().split('T');\n    var date = split[0];\n    return options.stylize(\"\".concat(date, \"T\").concat(truncate(split[1], options.truncate - date.length - 1)), 'date');\n  }\n\n  function inspectFunction(func, options) {\n    var name = getFuncName_1(func);\n\n    if (!name) {\n      return options.stylize('[Function]', 'special');\n    }\n\n    return options.stylize(\"[Function \".concat(truncate(name, options.truncate - 11), \"]\"), 'special');\n  }\n\n  function inspectMapEntry(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 4;\n    key = options.inspect(key, options);\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return \"\".concat(key, \" => \").concat(value);\n  } // IE11 doesn't support `map.entries()`\n\n\n  function mapToEntries(map) {\n    var entries = [];\n    map.forEach(function (value, key) {\n      entries.push([key, value]);\n    });\n    return entries;\n  }\n\n  function inspectMap(map, options) {\n    var size = map.size - 1;\n\n    if (size <= 0) {\n      return 'Map{}';\n    }\n\n    options.truncate -= 7;\n    return \"Map{ \".concat(inspectList(mapToEntries(map), options, inspectMapEntry), \" }\");\n  }\n\n  var isNaN = Number.isNaN || function (i) {\n    return i !== i;\n  }; // eslint-disable-line no-self-compare\n\n\n  function inspectNumber(number, options) {\n    if (isNaN(number)) {\n      return options.stylize('NaN', 'number');\n    }\n\n    if (number === Infinity) {\n      return options.stylize('Infinity', 'number');\n    }\n\n    if (number === -Infinity) {\n      return options.stylize('-Infinity', 'number');\n    }\n\n    if (number === 0) {\n      return options.stylize(1 / number === Infinity ? '+0' : '-0', 'number');\n    }\n\n    return options.stylize(truncate(number, options.truncate), 'number');\n  }\n\n  function inspectBigInt(number, options) {\n    var nums = truncate(number.toString(), options.truncate - 1);\n    if (nums !== truncator) nums += 'n';\n    return options.stylize(nums, 'bigint');\n  }\n\n  function inspectRegExp(value, options) {\n    var flags = value.toString().split('/')[2];\n    var sourceLength = options.truncate - (2 + flags.length);\n    var source = value.source;\n    return options.stylize(\"/\".concat(truncate(source, sourceLength), \"/\").concat(flags), 'regexp');\n  }\n\n  function arrayFromSet(set) {\n    var values = [];\n    set.forEach(function (value) {\n      values.push(value);\n    });\n    return values;\n  }\n\n  function inspectSet(set, options) {\n    if (set.size === 0) return 'Set{}';\n    options.truncate -= 7;\n    return \"Set{ \".concat(inspectList(arrayFromSet(set), options), \" }\");\n  }\n\n  var stringEscapeChars = new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" + \"\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]\", 'g');\n  var escapeCharacters = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    \"'\": \"\\\\'\",\n    '\\\\': '\\\\\\\\'\n  };\n  var hex = 16;\n  var unicodeLength = 4;\n\n  function escape(char) {\n    return escapeCharacters[char] || \"\\\\u\".concat(\"0000\".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));\n  }\n\n  function inspectString(string, options) {\n    if (stringEscapeChars.test(string)) {\n      string = string.replace(stringEscapeChars, escape);\n    }\n\n    return options.stylize(\"'\".concat(truncate(string, options.truncate - 2), \"'\"), 'string');\n  }\n\n  function inspectSymbol(value) {\n    if ('description' in Symbol.prototype) {\n      return value.description ? \"Symbol(\".concat(value.description, \")\") : 'Symbol()';\n    }\n\n    return value.toString();\n  }\n\n  var getPromiseValue = function getPromiseValue() {\n    return 'Promise{…}';\n  };\n\n  try {\n    var _process$binding = process.binding('util'),\n        getPromiseDetails = _process$binding.getPromiseDetails,\n        kPending = _process$binding.kPending,\n        kRejected = _process$binding.kRejected;\n\n    if (Array.isArray(getPromiseDetails(Promise.resolve()))) {\n      getPromiseValue = function getPromiseValue(value, options) {\n        var _getPromiseDetails = getPromiseDetails(value),\n            _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2),\n            state = _getPromiseDetails2[0],\n            innerValue = _getPromiseDetails2[1];\n\n        if (state === kPending) {\n          return 'Promise{<pending>}';\n        }\n\n        return \"Promise\".concat(state === kRejected ? '!' : '', \"{\").concat(options.inspect(innerValue, options), \"}\");\n      };\n    }\n  } catch (notNode) {\n    /* ignore */\n  }\n\n  var inspectPromise = getPromiseValue;\n\n  function inspectObject(object, options) {\n    var properties = Object.getOwnPropertyNames(object);\n    var symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];\n\n    if (properties.length === 0 && symbols.length === 0) {\n      return '{}';\n    }\n\n    options.truncate -= 4;\n    options.seen = options.seen || [];\n\n    if (options.seen.indexOf(object) >= 0) {\n      return '[Circular]';\n    }\n\n    options.seen.push(object);\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    var symbolContents = inspectList(symbols.map(function (key) {\n      return [key, object[key]];\n    }), options, inspectProperty);\n    options.seen.pop();\n    var sep = '';\n\n    if (propertyContents && symbolContents) {\n      sep = ', ';\n    }\n\n    return \"{ \".concat(propertyContents).concat(sep).concat(symbolContents, \" }\");\n  }\n\n  var toStringTag = typeof Symbol !== 'undefined' && Symbol.toStringTag ? Symbol.toStringTag : false;\n  function inspectClass(value, options) {\n    var name = '';\n\n    if (toStringTag && toStringTag in value) {\n      name = value[toStringTag];\n    }\n\n    name = name || getFuncName_1(value.constructor); // Babel transforms anonymous classes to the name `_class`\n\n    if (!name || name === '_class') {\n      name = '<Anonymous Class>';\n    }\n\n    options.truncate -= name.length;\n    return \"\".concat(name).concat(inspectObject(value, options));\n  }\n\n  function inspectArguments(args, options) {\n    if (args.length === 0) return 'Arguments[]';\n    options.truncate -= 13;\n    return \"Arguments[ \".concat(inspectList(args, options), \" ]\");\n  }\n\n  var errorKeys = ['stack', 'line', 'column', 'name', 'message', 'fileName', 'lineNumber', 'columnNumber', 'number', 'description'];\n  function inspectObject$1(error, options) {\n    var properties = Object.getOwnPropertyNames(error).filter(function (key) {\n      return errorKeys.indexOf(key) === -1;\n    });\n    var name = error.name;\n    options.truncate -= name.length;\n    var message = '';\n\n    if (typeof error.message === 'string') {\n      message = truncate(error.message, options.truncate);\n    } else {\n      properties.unshift('message');\n    }\n\n    message = message ? \": \".concat(message) : '';\n    options.truncate -= message.length + 5;\n    var propertyContents = inspectList(properties.map(function (key) {\n      return [key, error[key]];\n    }), options, inspectProperty);\n    return \"\".concat(name).concat(message).concat(propertyContents ? \" { \".concat(propertyContents, \" }\") : '');\n  }\n\n  function inspectAttribute(_ref, options) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    options.truncate -= 3;\n\n    if (!value) {\n      return \"\".concat(options.stylize(key, 'yellow'));\n    }\n\n    return \"\".concat(options.stylize(key, 'yellow'), \"=\").concat(options.stylize(\"\\\"\".concat(value, \"\\\"\"), 'string'));\n  }\n  function inspectHTMLCollection(collection, options) {\n    // eslint-disable-next-line no-use-before-define\n    return inspectList(collection, options, inspectHTML, '\\n');\n  }\n  function inspectHTML(element, options) {\n    var properties = element.getAttributeNames();\n    var name = element.tagName.toLowerCase();\n    var head = options.stylize(\"<\".concat(name), 'special');\n    var headClose = options.stylize(\">\", 'special');\n    var tail = options.stylize(\"</\".concat(name, \">\"), 'special');\n    options.truncate -= name.length * 2 + 5;\n    var propertyContents = '';\n\n    if (properties.length > 0) {\n      propertyContents += ' ';\n      propertyContents += inspectList(properties.map(function (key) {\n        return [key, element.getAttribute(key)];\n      }), options, inspectAttribute, ' ');\n    }\n\n    options.truncate -= propertyContents.length;\n    var truncate = options.truncate;\n    var children = inspectHTMLCollection(element.children, options);\n\n    if (children && children.length > truncate) {\n      children = \"\".concat(truncator, \"(\").concat(element.children.length, \")\");\n    }\n\n    return \"\".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);\n  }\n\n  var symbolsSupported = typeof Symbol === 'function' && typeof Symbol.for === 'function';\n  var chaiInspect = symbolsSupported ? Symbol.for('chai/inspect') : '@@chai/inspect';\n  var nodeInspect = false;\n\n  try {\n    // eslint-disable-next-line global-require\n    var nodeUtil = __webpack_require__(/*! util */ \"?0ac7\");\n\n    nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;\n  } catch (noNodeInspect) {\n    nodeInspect = false;\n  }\n\n  var constructorMap = new WeakMap();\n  var stringTagMap = {};\n  var baseTypesMap = {\n    undefined: function undefined$1(value, options) {\n      return options.stylize('undefined', 'undefined');\n    },\n    null: function _null(value, options) {\n      return options.stylize(null, 'null');\n    },\n    boolean: function boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    Boolean: function Boolean(value, options) {\n      return options.stylize(value, 'boolean');\n    },\n    number: inspectNumber,\n    Number: inspectNumber,\n    bigint: inspectBigInt,\n    BigInt: inspectBigInt,\n    string: inspectString,\n    String: inspectString,\n    function: inspectFunction,\n    Function: inspectFunction,\n    symbol: inspectSymbol,\n    // A Symbol polyfill will return `Symbol` not `symbol` from typedetect\n    Symbol: inspectSymbol,\n    Array: inspectArray,\n    Date: inspectDate,\n    Map: inspectMap,\n    Set: inspectSet,\n    RegExp: inspectRegExp,\n    Promise: inspectPromise,\n    // WeakSet, WeakMap are totally opaque to us\n    WeakSet: function WeakSet(value, options) {\n      return options.stylize('WeakSet{…}', 'special');\n    },\n    WeakMap: function WeakMap(value, options) {\n      return options.stylize('WeakMap{…}', 'special');\n    },\n    Arguments: inspectArguments,\n    Int8Array: inspectTypedArray,\n    Uint8Array: inspectTypedArray,\n    Uint8ClampedArray: inspectTypedArray,\n    Int16Array: inspectTypedArray,\n    Uint16Array: inspectTypedArray,\n    Int32Array: inspectTypedArray,\n    Uint32Array: inspectTypedArray,\n    Float32Array: inspectTypedArray,\n    Float64Array: inspectTypedArray,\n    Generator: function Generator() {\n      return '';\n    },\n    DataView: function DataView() {\n      return '';\n    },\n    ArrayBuffer: function ArrayBuffer() {\n      return '';\n    },\n    Error: inspectObject$1,\n    HTMLCollection: inspectHTMLCollection,\n    NodeList: inspectHTMLCollection\n  }; // eslint-disable-next-line complexity\n\n  var inspectCustom = function inspectCustom(value, options, type) {\n    if (chaiInspect in value && typeof value[chaiInspect] === 'function') {\n      return value[chaiInspect](options);\n    }\n\n    if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === 'function') {\n      return value[nodeInspect](options.depth, options);\n    }\n\n    if ('inspect' in value && typeof value.inspect === 'function') {\n      return value.inspect(options.depth, options);\n    }\n\n    if ('constructor' in value && constructorMap.has(value.constructor)) {\n      return constructorMap.get(value.constructor)(value, options);\n    }\n\n    if (stringTagMap[type]) {\n      return stringTagMap[type](value, options);\n    }\n\n    return '';\n  };\n\n  var toString$1 = Object.prototype.toString; // eslint-disable-next-line complexity\n\n  function inspect(value, options) {\n    options = normaliseOptions(options);\n    options.inspect = inspect;\n    var _options = options,\n        customInspect = _options.customInspect;\n    var type = value === null ? 'null' : _typeof(value);\n\n    if (type === 'object') {\n      type = toString$1.call(value).slice(8, -1);\n    } // If it is a base value that we already support, then use Loupe's inspector\n\n\n    if (baseTypesMap[type]) {\n      return baseTypesMap[type](value, options);\n    } // If `options.customInspect` is set to true then try to use the custom inspector\n\n\n    if (customInspect && value) {\n      var output = inspectCustom(value, options, type);\n\n      if (output) {\n        if (typeof output === 'string') return output;\n        return inspect(output, options);\n      }\n    }\n\n    var proto = value ? Object.getPrototypeOf(value) : false; // If it's a plain Object then use Loupe's inspector\n\n    if (proto === Object.prototype || proto === null) {\n      return inspectObject(value, options);\n    } // Specifically account for HTMLElements\n    // eslint-disable-next-line no-undef\n\n\n    if (value && typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n      return inspectHTML(value, options);\n    }\n\n    if ('constructor' in value) {\n      // If it is a class, inspect it like an object but add the constructor name\n      if (value.constructor !== Object) {\n        return inspectClass(value, options);\n      } // If it is an object with an anonymous prototype, display it as an object.\n\n\n      return inspectObject(value, options);\n    } // last chance to check if it's an object\n\n\n    if (value === Object(value)) {\n      return inspectObject(value, options);\n    } // We have run out of options! Just stringify the value\n\n\n    return options.stylize(String(value), type);\n  }\n  function registerConstructor(constructor, inspector) {\n    if (constructorMap.has(constructor)) {\n      return false;\n    }\n\n    constructorMap.add(constructor, inspector);\n    return true;\n  }\n  function registerStringTag(stringTag, inspector) {\n    if (stringTag in stringTagMap) {\n      return false;\n    }\n\n    stringTagMap[stringTag] = inspector;\n    return true;\n  }\n  var custom = chaiInspect;\n\n  exports.custom = custom;\n  exports.default = inspect;\n  exports.inspect = inspect;\n  exports.registerConstructor = registerConstructor;\n  exports.registerStringTag = registerStringTag;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n\n//# sourceURL=webpack://koconut/./node_modules/loupe/loupe.js?")},"./node_modules/pathval/index.js":module=>{"use strict";eval("\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n\n\n//# sourceURL=webpack://koconut/./node_modules/pathval/index.js?")},"./node_modules/regenerator-runtime/runtime.js":module=>{eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    "GeneratorFunction"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}\n\n\n//# sourceURL=webpack://koconut/./node_modules/regenerator-runtime/runtime.js?')},"./node_modules/type-detect/type-detect.js":function(module,__unused_webpack_exports,__webpack_require__){eval("(function (global, factory) {\n\t true ? module.exports = factory() :\n\t0;\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : __webpack_require__.g; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n\n\n//# sourceURL=webpack://koconut/./node_modules/type-detect/type-detect.js?")},"?abe1":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://koconut/fs_(ignored)?")},"?0ac7":()=>{eval("/* (ignored) */\n\n//# sourceURL=webpack://koconut/util_(ignored)?")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.exports}__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__("./coverage/nodejs/KoconutArray.spec.js"),__webpack_require__("./coverage/nodejs/KoconutMap.spec.js"),__webpack_require__("./coverage/nodejs/KoconutPrimitive.spec.js"),__webpack_require__("./coverage/nodejs/KoconutSequence.spec.js"),__webpack_require__("./coverage/nodejs/KoconutSet.spec.js");var __webpack_exports__=__webpack_require__("./coverage/nodejs/TestDataClasses.js");return __webpack_exports__})()}));