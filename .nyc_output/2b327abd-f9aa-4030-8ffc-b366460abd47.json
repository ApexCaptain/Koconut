{"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\module.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\module.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":19},"end":{"line":11,"column":1}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":126}},"10":{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},"11":{"start":{"line":10,"column":95},"end":{"line":10,"column":126}},"12":{"start":{"line":12,"column":0},"end":{"line":12,"column":62}},"13":{"start":{"line":13,"column":0},"end":{"line":13,"column":13}},"14":{"start":{"line":15,"column":0},"end":{"line":15,"column":61}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":64}},"16":{"start":{"line":18,"column":0},"end":{"line":18,"column":73}},"17":{"start":{"line":20,"column":0},"end":{"line":20,"column":71}},"18":{"start":{"line":21,"column":0},"end":{"line":21,"column":66}},"19":{"start":{"line":22,"column":0},"end":{"line":22,"column":71}},"20":{"start":{"line":24,"column":0},"end":{"line":24,"column":77}},"21":{"start":{"line":25,"column":0},"end":{"line":25,"column":74}},"22":{"start":{"line":26,"column":0},"end":{"line":26,"column":75}},"23":{"start":{"line":28,"column":0},"end":{"line":28,"column":66}},"24":{"start":{"line":29,"column":0},"end":{"line":29,"column":70}},"25":{"start":{"line":31,"column":0},"end":{"line":31,"column":75}},"26":{"start":{"line":33,"column":0},"end":{"line":33,"column":74}},"27":{"start":{"line":34,"column":0},"end":{"line":34,"column":73}},"28":{"start":{"line":35,"column":0},"end":{"line":35,"column":73}},"29":{"start":{"line":37,"column":0},"end":{"line":37,"column":73}},"30":{"start":{"line":38,"column":0},"end":{"line":38,"column":86}},"31":{"start":{"line":39,"column":0},"end":{"line":39,"column":87}},"32":{"start":{"line":40,"column":0},"end":{"line":40,"column":93}},"33":{"start":{"line":41,"column":0},"end":{"line":41,"column":83}},"34":{"start":{"line":42,"column":0},"end":{"line":42,"column":74}},"35":{"start":{"line":43,"column":0},"end":{"line":43,"column":72}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":50},"end":{"line":9,"column":51}},"loc":{"start":{"line":9,"column":71},"end":{"line":11,"column":1}},"line":9}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":19},"end":{"line":11,"column":1}},"type":"binary-expr","locations":[{"start":{"line":9,"column":20},"end":{"line":9,"column":24}},{"start":{"line":9,"column":28},"end":{"line":9,"column":45}},{"start":{"line":9,"column":50},"end":{"line":11,"column":1}}],"line":9},"5":{"loc":{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},"type":"if","locations":[{"start":{"line":10,"column":21},"end":{"line":10,"column":126}},{"start":{"line":10,"column":21},"end":{"line":10,"column":126}}],"line":10},"6":{"loc":{"start":{"line":10,"column":25},"end":{"line":10,"column":93}},"type":"binary-expr","locations":[{"start":{"line":10,"column":25},"end":{"line":10,"column":40}},{"start":{"line":10,"column":44},"end":{"line":10,"column":93}}],"line":10}},"s":{"0":1,"1":26,"2":26,"3":26,"4":8614,"5":0,"6":0,"7":0,"8":1,"9":22,"10":26,"11":26,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1},"f":{"0":26,"1":8614,"2":0,"3":22},"b":{"0":[1,1,1],"1":[1,0],"2":[26,0],"3":[0,0],"4":[1,1,1],"5":[26,0],"6":[26,26]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/module.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/module.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,YAAY,CAAC;AACb,mBAAmB;AACnB,6DAA2C;AAC3C,gEAA8C;AAE9C,YAAY;AACZ,yEAAuD;AAEvD,OAAO;AACP,uEAAqD;AACrD,kEAAgD;AAChD,uEAAqD;AAErD,OAAO;AACP,6EAA2D;AAC3D,0EAAwD;AACxD,2EAAyD;AAEzD,OAAO;AACP,kEAAgD;AAChD,sEAAoD;AAEpD,YAAY;AACZ,2EAAyD;AAEzD,WAAW;AACX,0EAAwD;AACxD,yEAAuD;AACvD,yEAAuD;AAEvD,YAAY;AACZ,yEAAuD;AACvD,sFAAoE;AACpE,uFAAqE;AACrE,6FAA2E;AAC3E,mFAAiE;AACjE,0EAAwD;AACxD,wEAAsD","sourcesContent":["`use strict`;\n// Basic Components\nexport * from './components/KoconutOption';\nexport * from './components/KoconutPrimitive';\n\n// Callbacks\nexport * from './components/callback/KoconutCallbacks';\n\n// Tool\nexport * from './components/tool/KoconutDeprecation';\nexport * from './components/tool/KoconutOpener';\nexport * from './components/tool/KoconutTypeChecker';\n\n// Base\nexport * from './components/container/base/KoconutBoolean';\nexport * from './components/container/base/KoconutPair';\nexport * from './components/container/base/KoconutEntry';\n\n// Enum\nexport * from './components/enum/KoconutLocale';\nexport * from './components/enum/KoconutLoopSignal';\n\n// Exception\nexport * from './components/exception/KoconutExceptions';\n\n// Protocol\nexport * from './components/protocol/KoconutComparable';\nexport * from './components/protocol/KoconutEquatable';\nexport * from './components/protocol/KoconutYieldable';\n\n// Container\nexport * from './components/container/KoconutIterable';\nexport * from './components/container/collection/KoconutCollection';\nexport * from './components/container/collection/array/KoconutArray';\nexport * from './components/container/collection/sequence/KoconutSequence';\nexport * from './components/container/collection/set/KoconutSet';\nexport * from './components/container/flow/KoconutFlow';\nexport * from './components/container/map/KoconutMap';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"197303bf7ed7e6e0b21ef483b6a6872906aecfb9","contentHash":"24a257379d26b3658eee4d129f1ddf009e946e1daf3590ae6362c83e985849bd"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\KoconutOption.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\KoconutOption.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":37}},"3":{"start":{"line":7,"column":8},"end":{"line":8,"column":113}},"4":{"start":{"line":8,"column":12},"end":{"line":8,"column":113}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":28}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":30}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":38}},"8":{"start":{"line":17,"column":0},"end":{"line":17,"column":49}},"9":{"start":{"line":18,"column":0},"end":{"line":18,"column":57}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":24},"end":{"line":10,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":30},"end":{"line":13,"column":5}},"line":11}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":8},"end":{"line":8,"column":113}},"type":"if","locations":[{"start":{"line":7,"column":8},"end":{"line":8,"column":113}},{"start":{"line":7,"column":8},"end":{"line":8,"column":113}}],"line":7}},"s":{"0":1,"1":1,"2":1,"3":34,"4":1,"5":34,"6":0,"7":1,"8":1,"9":1},"f":{"0":34,"1":0},"b":{"0":[1,33]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/KoconutOption.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/KoconutOption.ts"],"names":[],"mappings":";;;AAAA,sCAGmB;AAEnB,MAAa,aAAa;IAOxB,MAAM,KAAK,MAAM;QACf,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI;YACtB,IAAI,CAAC,OAAO,GAAG,sBAAa,CAAC,UAAU,CACrC,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,CAAC,MAAM,CACnD,CAAC;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACD,MAAM,KAAK,MAAM,CAAC,MAAqB;QACrC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;;AAhBH,sCAiBC;AAhBC,sBAAsB;AACf,yCAA2B,GAAY,IAAI,CAAC;AAC5C,iDAAmC,GAAY,IAAI,CAAC","sourcesContent":["import {\n  /* Enum */\n  KoconutLocale,\n} from '../module';\n\nexport class KoconutOption {\n  // Deprecation Warning\n  static isDeprecationWarningEnabled: boolean = true;\n  static doesDeprecationWarningShowCallStack: boolean = true;\n\n  // Locale\n  private static _locale: KoconutLocale;\n  static get locale(): KoconutLocale {\n    if (this._locale == null)\n      this._locale = KoconutLocale.fromString(\n        new Intl.DateTimeFormat().resolvedOptions().locale,\n      );\n    return this._locale;\n  }\n  static set locale(locale: KoconutLocale) {\n    this._locale = locale;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"45fada065dd0868a0d73368d062026f5d053991d","contentHash":"a8aa817a08df00a0a788bfd7b820dc5aed149c0560b6d88b768891b6ce9ec3bc"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\KoconutPrimitive.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\KoconutPrimitive.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":13}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":37}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":33}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":25}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":43}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":20}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":35}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":20}},"10":{"start":{"line":44,"column":8},"end":{"line":48,"column":9}},"11":{"start":{"line":45,"column":12},"end":{"line":45,"column":57}},"12":{"start":{"line":46,"column":12},"end":{"line":47,"column":39}},"13":{"start":{"line":47,"column":16},"end":{"line":47,"column":39}},"14":{"start":{"line":49,"column":8},"end":{"line":50,"column":47}},"15":{"start":{"line":50,"column":12},"end":{"line":50,"column":47}},"16":{"start":{"line":51,"column":8},"end":{"line":54,"column":9}},"17":{"start":{"line":52,"column":12},"end":{"line":52,"column":43}},"18":{"start":{"line":53,"column":12},"end":{"line":53,"column":36}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":34}},"20":{"start":{"line":56,"column":8},"end":{"line":56,"column":30}},"21":{"start":{"line":60,"column":8},"end":{"line":60,"column":29}},"22":{"start":{"line":61,"column":8},"end":{"line":61,"column":20}},"23":{"start":{"line":87,"column":8},"end":{"line":87,"column":29}},"24":{"start":{"line":88,"column":8},"end":{"line":88,"column":25}},"25":{"start":{"line":118,"column":8},"end":{"line":118,"column":47}},"26":{"start":{"line":149,"column":8},"end":{"line":149,"column":40}},"27":{"start":{"line":150,"column":8},"end":{"line":150,"column":25}},"28":{"start":{"line":153,"column":0},"end":{"line":153,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":29},"end":{"line":10,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":36},"end":{"line":14,"column":5}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":28},"end":{"line":18,"column":5}},"line":15},"3":{"name":"(anonymous_3)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":25},"end":{"line":19,"column":28}},"line":19},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":20},"end":{"line":57,"column":5}},"line":43},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":21},"end":{"line":62,"column":5}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":18},"end":{"line":89,"column":5}},"line":86},"7":{"name":"(anonymous_7)","decl":{"start":{"line":117,"column":4},"end":{"line":117,"column":5}},"loc":{"start":{"line":117,"column":21},"end":{"line":119,"column":5}},"line":117},"8":{"name":"(anonymous_8)","decl":{"start":{"line":148,"column":4},"end":{"line":148,"column":5}},"loc":{"start":{"line":148,"column":22},"end":{"line":151,"column":5}},"line":148}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":16},"end":{"line":7,"column":27}},"type":"default-arg","locations":[{"start":{"line":7,"column":23},"end":{"line":7,"column":27}}],"line":7},"1":{"loc":{"start":{"line":44,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":48,"column":9}},{"start":{"line":44,"column":8},"end":{"line":48,"column":9}}],"line":44},"2":{"loc":{"start":{"line":46,"column":12},"end":{"line":47,"column":39}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":47,"column":39}},{"start":{"line":46,"column":12},"end":{"line":47,"column":39}}],"line":46},"3":{"loc":{"start":{"line":46,"column":16},"end":{"line":46,"column":101}},"type":"binary-expr","locations":[{"start":{"line":46,"column":16},"end":{"line":46,"column":59}},{"start":{"line":46,"column":63},"end":{"line":46,"column":101}}],"line":46},"4":{"loc":{"start":{"line":49,"column":8},"end":{"line":50,"column":47}},"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":50,"column":47}},{"start":{"line":49,"column":8},"end":{"line":50,"column":47}}],"line":49},"5":{"loc":{"start":{"line":51,"column":8},"end":{"line":54,"column":9}},"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":54,"column":9}},{"start":{"line":51,"column":8},"end":{"line":54,"column":9}}],"line":51}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1653,"5":1653,"6":916,"7":916,"8":916,"9":916,"10":1646,"11":896,"12":896,"13":40,"14":1646,"15":896,"16":1611,"17":1326,"18":1326,"19":1611,"20":1611,"21":0,"22":0,"23":1532,"24":1520,"25":0,"26":0,"27":0,"28":1},"f":{"0":1653,"1":916,"2":916,"3":474,"4":1646,"5":0,"6":1532,"7":0,"8":0},"b":{"0":[1565],"1":[896,750],"2":[40,856],"3":[896,886],"4":[896,750],"5":[1326,285]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/KoconutPrimitive.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/KoconutPrimitive.ts"],"names":[],"mappings":";;;AAAA,YAAY,CAAC;AAEb,sCAOmB;AAEnB,MAAa,gBAAgB;IAoB3B,YAAY,OAAwB,IAAI;QAI9B,gBAAW,GAAG,KAAK,CAAC;QAH5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAjBS,gBAAgB,CACxB,aAAoC;QAEpC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,OAAO,IAAsC,CAAC;IAChD,CAAC;IACS,YAAY,CACpB,SAAkC;QAElC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,OAAO,IAAsC,CAAC;IAChD,CAAC;IAES,KAAK,CAAC,QAAQ,CAAC,IAAqB,IAAG,CAAC;IAQlD,YAAY;IACZ;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,KAAK,CAAC,OAAO;QACX,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;YAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAC7C,IAAI,CAAC,CAAC,IAAI,YAAY,wBAAe,CAAC,IAAI,IAAI,CAAC,IAAI,YAAY,iBAAQ;gBACrE,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;SAC1B;QACD,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI;YAAE,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QAC/D,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACrB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SACzB;QACD,OAAO,IAAI,CAAC,aAAa,CAAC;QAC1B,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,iDAAiD;IACjD,KAAK,CAAC,QAAQ;QACZ,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,KAAK,CAAC,KAAK;QACT,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC,IAAK,CAAC;IACpB,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACH,KAAK,CAAC,GAAG,CACP,KAAqC;QAErC,OAAO,MAAM,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IACzC,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACH,KAAK,CAAC,IAAI,CAAC,KAA0B;QACnC,MAAM,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAnKD,4CAmKC","sourcesContent":["`use strict`;\n\nimport {\n  KoconutYieldable,\n  KoconutOpener,\n  KoconutSequence,\n  Sequence,\n  Selector,\n  Processor,\n} from '../module';\n\nexport class KoconutPrimitive<DataType> implements KoconutYieldable<DataType> {\n  protected data: DataType | null;\n  protected prevYieldable?: KoconutYieldable<any>;\n  protected processor?: () => Promise<DataType>;\n\n  protected setPrevYieldable(\n    prevYieldable: KoconutYieldable<any>,\n  ): KoconutOpener<DataType> {\n    this.prevYieldable = prevYieldable;\n    return this as any as KoconutOpener<DataType>;\n  }\n  protected setProcessor(\n    processor: () => Promise<DataType>,\n  ): KoconutOpener<DataType> {\n    this.processor = processor;\n    return this as any as KoconutOpener<DataType>;\n  }\n\n  protected async validate(data: DataType | null) {}\n\n  constructor(data: DataType | null = null) {\n    this.data = data;\n  }\n\n  protected isValidated = false;\n\n  // Processor\n  /**\n   * Processes all the chained objects ane returns ```Promise<void>```.\n   *\n   * @since 1.0.10\n   *\n   * @category Processor\n   *\n   * @example\n   * ```typescript\n   * import { KoconutArray } from 'koconut'\n   *\n   * const mainProcess = async () => {\n   *   const koconutNumbers = KoconutArray.of(1,2,3,4,5)\n   *\n   *   await koconutNumbers\n   *               .forEach(console.log)\n   *               .process()\n   *   // ↑ 1 2 3 4 5\n   * }\n   * mainProcess()\n   * ```\n   */\n  async process(): Promise<void> {\n    if (this.prevYieldable != null) {\n      this.data = await this.prevYieldable.yield();\n      if (!(this instanceof KoconutSequence) && this.data instanceof Sequence)\n        await this.data.done();\n    }\n    if (this.processor != null) this.data = await this.processor();\n    if (!this.isValidated) {\n      await this.validate(this.data);\n      this.isValidated = true;\n    }\n    delete this.prevYieldable;\n    delete this.processor;\n  }\n\n  // No Comment -- All the classes inheriting this.\n  async retrieve(): Promise<KoconutPrimitive<DataType>> {\n    await this.process();\n    return this;\n  }\n\n  /**\n   * Processes all the chained objects and return the result.\n   *\n   * @since 1.0.10\n   *\n   * @category Processor\n   *\n   * @example\n   * ``` typescript\n   * import { KoconutArray } from 'koconut'\n   *\n   * const mainProcess = async () => {\n   *   const koconutNumbers = KoconutArray.of(1,2,3,4,5)\n   *\n   *   const firstNumber = await koconutNumbers\n   *                                       .first()\n   *                                       .yield()\n   *   console.log(firstNumber)\n   *   // ↑ 1\n   * }\n   * mainProcess()\n   * ```\n   */\n  async yield(): Promise<DataType> {\n    await this.process();\n    return this.data!;\n  }\n\n  /**\n   * Processes all the chained objects and calls the specified function\n   * ```block``` with the result value as its argument and returns the final result\n   * of the ```block```.\n   *\n   * @param {SingleInputSingleOutCallback} block A callback function that accepts an argument. The method calls the `block` and returns its result.\n   *\n   * @since 1.0.10\n   *\n   * @category Processor\n   *\n   * @example\n   * ``` typescript\n   * import { KoconutArray } from 'koconut'\n   *\n   * const mainProcess = async () => {\n   *   const koconutNumbers = KoconutArray.of(1,2,3,4,5)\n   *\n   *   const firstNumberPlus2 = await koconutNumbers\n   *                           .first()\n   *                           .let(result => result + 2)\n   *   console.log(firstNumber)\n   *   // ↑ 3\n   * }\n   * mainProcess()\n   * ```\n   */\n  async let<ReturnType>(\n    block: Selector<DataType, ReturnType>,\n  ): Promise<ReturnType> {\n    return await block(await this.yield());\n  }\n\n  /**\n   * Processes all the chained objects and calls the specified function\n   * ```block``` with the result value as its argument and returns the original result.\n   * @param {Processor} block A callback function that accepts an argument.\n   *\n   * @since 1.0.10\n   *\n   * @category Processor\n   *\n   * @example\n   * ```typescript\n   * import { KoconutArray } from 'koconut'\n   *\n   * const mainProcess = async () => {\n   *   const koconutNumbers = KoconutArray.of(1,2,3,4,5)\n   *\n   *   const moreNumbers = await koconutNumbers\n   *                           .also(result => {\n   *                               result.push(6)\n   *                               result.push(7)\n   *                               result.push(8)\n   *                           })\n   *   console.log(moreNumbers)\n   *   // ↑ [1, 2, 3, 4, 5, 6, 7, 8]\n   * }\n   * mainProcess()\n   * ```\n   */\n  async also(block: Processor<DataType>): Promise<DataType | null> {\n    await block(await this.yield());\n    return this.data;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6444d31e746c384ee077855aa4f15f06ad6651f7","contentHash":"af30ec5b164a3d7d769b1043a86dec2131feb75a276dec6afca201f728aa681d"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\callback\\KoconutCallbacks.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\callback\\KoconutCallbacks.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":13}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/callback/KoconutCallbacks.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/callback/KoconutCallbacks.ts"],"names":[],"mappings":";;AAAA,YAAY,CAAC","sourcesContent":["`use strict`;\nimport { KoconutLoopSignal } from '../../module';\n\nexport type IndexedSelector<InputType, ReturnType> = (\n  index: number,\n  data: InputType,\n) => ReturnType | Promise<ReturnType>;\n\nexport type Selector<InputType, ReturnType> = (\n  data: InputType,\n) => ReturnType | Promise<ReturnType>;\n\nexport type Transformer<InputType, TransformedType> = Selector<\n  InputType,\n  TransformedType\n>;\n\nexport type IndexedTransformer<InputType, TransformedType> = IndexedSelector<\n  InputType,\n  TransformedType\n>;\n\nexport type Zipper<InputType1, InputType2, ResultType> = (\n  data1: InputType1,\n  data2: InputType2,\n) => ResultType | Promise<ResultType>;\n\nexport type Generator<OutputType> = Transformer<number, OutputType>;\n\nexport type Processor<InputType> = Selector<InputType, void>;\n\nexport type Predicator<InputType> = Selector<InputType, boolean>;\n\nexport type IndexedPredicator<InputType> = IndexedSelector<InputType, boolean>;\n\nexport type Action<InputType> = Selector<\n  InputType,\n  boolean | KoconutLoopSignal | void\n>;\n\nexport type IndexedAction<InputType> = IndexedSelector<\n  InputType,\n  boolean | KoconutLoopSignal | void\n>;\n\nexport type Comparator<InputType> = (\n  front: InputType,\n  rear: InputType,\n) => number | Promise<number>;\n\nexport type Operator<InputType, ResultType> = (\n  acc: ResultType,\n  element: InputType,\n) => ResultType | Promise<ResultType>;\n\nexport type IndexedOperator<InputType, ResultType> = (\n  index: number,\n  acc: ResultType,\n  element: InputType,\n) => ResultType | Promise<ResultType>;\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4d90aea76b6a5c537799d0124a636b3eaa3c5e73","contentHash":"a1d605a8d3394258173271d2f2e0d4daba4315e4a8638487b56980f2ec494730"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\tool\\KoconutDeprecation.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\tool\\KoconutDeprecation.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":87}},"2":{"start":{"line":5,"column":17},"end":{"line":5,"column":40}},"3":{"start":{"line":6,"column":13},"end":{"line":6,"column":26}},"4":{"start":{"line":8,"column":0},"end":{"line":16,"column":62}},"5":{"start":{"line":9,"column":4},"end":{"line":9,"column":37}},"6":{"start":{"line":10,"column":4},"end":{"line":10,"column":38}},"7":{"start":{"line":11,"column":4},"end":{"line":11,"column":35}},"8":{"start":{"line":12,"column":4},"end":{"line":12,"column":42}},"9":{"start":{"line":13,"column":4},"end":{"line":13,"column":37}},"10":{"start":{"line":14,"column":4},"end":{"line":14,"column":39}},"11":{"start":{"line":15,"column":4},"end":{"line":15,"column":38}},"12":{"start":{"line":18,"column":0},"end":{"line":27,"column":44}},"13":{"start":{"line":19,"column":4},"end":{"line":19,"column":43}},"14":{"start":{"line":20,"column":4},"end":{"line":20,"column":41}},"15":{"start":{"line":21,"column":4},"end":{"line":21,"column":43}},"16":{"start":{"line":22,"column":4},"end":{"line":22,"column":44}},"17":{"start":{"line":23,"column":4},"end":{"line":23,"column":42}},"18":{"start":{"line":24,"column":4},"end":{"line":24,"column":45}},"19":{"start":{"line":25,"column":4},"end":{"line":25,"column":42}},"20":{"start":{"line":26,"column":4},"end":{"line":26,"column":43}},"21":{"start":{"line":29,"column":0},"end":{"line":38,"column":95}},"22":{"start":{"line":30,"column":4},"end":{"line":30,"column":49}},"23":{"start":{"line":31,"column":4},"end":{"line":31,"column":47}},"24":{"start":{"line":32,"column":4},"end":{"line":32,"column":49}},"25":{"start":{"line":33,"column":4},"end":{"line":33,"column":50}},"26":{"start":{"line":34,"column":4},"end":{"line":34,"column":48}},"27":{"start":{"line":35,"column":4},"end":{"line":35,"column":51}},"28":{"start":{"line":36,"column":4},"end":{"line":36,"column":48}},"29":{"start":{"line":37,"column":4},"end":{"line":37,"column":49}},"30":{"start":{"line":39,"column":37},"end":{"line":64,"column":1}},"31":{"start":{"line":40,"column":83},"end":{"line":47,"column":18}},"32":{"start":{"line":48,"column":84},"end":{"line":55,"column":18}},"33":{"start":{"line":56,"column":82},"end":{"line":63,"column":18}},"34":{"start":{"line":65,"column":33},"end":{"line":87,"column":1}},"35":{"start":{"line":90,"column":8},"end":{"line":119,"column":9}},"36":{"start":{"line":91,"column":30},"end":{"line":91,"column":72}},"37":{"start":{"line":92,"column":44},"end":{"line":96,"column":27}},"38":{"start":{"line":97,"column":32},"end":{"line":97,"column":149}},"39":{"start":{"line":98,"column":12},"end":{"line":99,"column":105}},"40":{"start":{"line":99,"column":16},"end":{"line":99,"column":105}},"41":{"start":{"line":100,"column":12},"end":{"line":100,"column":40}},"42":{"start":{"line":101,"column":12},"end":{"line":118,"column":13}},"43":{"start":{"line":102,"column":16},"end":{"line":117,"column":17}},"44":{"start":{"line":103,"column":40},"end":{"line":103,"column":90}},"45":{"start":{"line":104,"column":20},"end":{"line":105,"column":79}},"46":{"start":{"line":105,"column":24},"end":{"line":105,"column":79}},"47":{"start":{"line":106,"column":20},"end":{"line":107,"column":88}},"48":{"start":{"line":107,"column":24},"end":{"line":107,"column":88}},"49":{"start":{"line":108,"column":20},"end":{"line":109,"column":142}},"50":{"start":{"line":109,"column":24},"end":{"line":109,"column":142}},"51":{"start":{"line":110,"column":20},"end":{"line":113,"column":21}},"52":{"start":{"line":111,"column":24},"end":{"line":111,"column":68}},"53":{"start":{"line":112,"column":24},"end":{"line":112,"column":105}},"54":{"start":{"line":116,"column":20},"end":{"line":116,"column":41}},"55":{"start":{"line":122,"column":0},"end":{"line":122,"column":48}},"56":{"start":{"line":123,"column":0},"end":{"line":123,"column":53}},"57":{"start":{"line":124,"column":0},"end":{"line":124,"column":58}},"58":{"start":{"line":125,"column":0},"end":{"line":125,"column":127}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":1},"end":{"line":8,"column":2}},"loc":{"start":{"line":8,"column":22},"end":{"line":16,"column":1}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":1},"end":{"line":18,"column":2}},"loc":{"start":{"line":18,"column":27},"end":{"line":27,"column":1}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":1},"end":{"line":29,"column":2}},"loc":{"start":{"line":29,"column":33},"end":{"line":38,"column":1}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":13},"end":{"line":40,"column":14}},"loc":{"start":{"line":40,"column":83},"end":{"line":47,"column":18}},"line":40},"4":{"name":"(anonymous_4)","decl":{"start":{"line":48,"column":14},"end":{"line":48,"column":15}},"loc":{"start":{"line":48,"column":84},"end":{"line":55,"column":18}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":56,"column":12},"end":{"line":56,"column":13}},"loc":{"start":{"line":56,"column":82},"end":{"line":63,"column":18}},"line":56},"6":{"name":"(anonymous_6)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":81},"end":{"line":120,"column":5}},"line":89}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":15},"end":{"line":16,"column":60}},"type":"binary-expr","locations":[{"start":{"line":16,"column":15},"end":{"line":16,"column":32}},{"start":{"line":16,"column":37},"end":{"line":16,"column":59}}],"line":16},"1":{"loc":{"start":{"line":27,"column":3},"end":{"line":27,"column":42}},"type":"binary-expr","locations":[{"start":{"line":27,"column":3},"end":{"line":27,"column":17}},{"start":{"line":27,"column":22},"end":{"line":27,"column":41}}],"line":27},"2":{"loc":{"start":{"line":38,"column":26},"end":{"line":38,"column":93}},"type":"binary-expr","locations":[{"start":{"line":38,"column":26},"end":{"line":38,"column":54}},{"start":{"line":38,"column":59},"end":{"line":38,"column":92}}],"line":38},"3":{"loc":{"start":{"line":42,"column":11},"end":{"line":44,"column":30}},"type":"cond-expr","locations":[{"start":{"line":43,"column":14},"end":{"line":43,"column":96}},{"start":{"line":44,"column":14},"end":{"line":44,"column":30}}],"line":42},"4":{"loc":{"start":{"line":45,"column":11},"end":{"line":47,"column":16}},"type":"cond-expr","locations":[{"start":{"line":46,"column":14},"end":{"line":46,"column":142}},{"start":{"line":47,"column":14},"end":{"line":47,"column":16}}],"line":45},"5":{"loc":{"start":{"line":50,"column":11},"end":{"line":52,"column":19}},"type":"cond-expr","locations":[{"start":{"line":51,"column":14},"end":{"line":51,"column":86}},{"start":{"line":52,"column":14},"end":{"line":52,"column":19}}],"line":50},"6":{"loc":{"start":{"line":53,"column":11},"end":{"line":55,"column":16}},"type":"cond-expr","locations":[{"start":{"line":54,"column":14},"end":{"line":54,"column":129}},{"start":{"line":55,"column":14},"end":{"line":55,"column":16}}],"line":53},"7":{"loc":{"start":{"line":58,"column":11},"end":{"line":60,"column":19}},"type":"cond-expr","locations":[{"start":{"line":59,"column":14},"end":{"line":59,"column":85}},{"start":{"line":60,"column":14},"end":{"line":60,"column":19}}],"line":58},"8":{"loc":{"start":{"line":61,"column":11},"end":{"line":63,"column":16}},"type":"cond-expr","locations":[{"start":{"line":62,"column":14},"end":{"line":62,"column":135}},{"start":{"line":63,"column":14},"end":{"line":63,"column":16}}],"line":61},"9":{"loc":{"start":{"line":89,"column":34},"end":{"line":89,"column":59}},"type":"default-arg","locations":[{"start":{"line":89,"column":55},"end":{"line":89,"column":59}}],"line":89},"10":{"loc":{"start":{"line":89,"column":61},"end":{"line":89,"column":79}},"type":"default-arg","locations":[{"start":{"line":89,"column":75},"end":{"line":89,"column":79}}],"line":89},"11":{"loc":{"start":{"line":90,"column":8},"end":{"line":119,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":119,"column":9}},{"start":{"line":90,"column":8},"end":{"line":119,"column":9}}],"line":90},"12":{"loc":{"start":{"line":98,"column":12},"end":{"line":99,"column":105}},"type":"if","locations":[{"start":{"line":98,"column":12},"end":{"line":99,"column":105}},{"start":{"line":98,"column":12},"end":{"line":99,"column":105}}],"line":98},"13":{"loc":{"start":{"line":101,"column":12},"end":{"line":118,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":118,"column":13}},{"start":{"line":101,"column":12},"end":{"line":118,"column":13}}],"line":101},"14":{"loc":{"start":{"line":104,"column":20},"end":{"line":105,"column":79}},"type":"if","locations":[{"start":{"line":104,"column":20},"end":{"line":105,"column":79}},{"start":{"line":104,"column":20},"end":{"line":105,"column":79}}],"line":104},"15":{"loc":{"start":{"line":106,"column":20},"end":{"line":107,"column":88}},"type":"if","locations":[{"start":{"line":106,"column":20},"end":{"line":107,"column":88}},{"start":{"line":106,"column":20},"end":{"line":107,"column":88}}],"line":106},"16":{"loc":{"start":{"line":108,"column":20},"end":{"line":109,"column":142}},"type":"if","locations":[{"start":{"line":108,"column":20},"end":{"line":109,"column":142}},{"start":{"line":108,"column":20},"end":{"line":109,"column":142}}],"line":108},"17":{"loc":{"start":{"line":110,"column":20},"end":{"line":113,"column":21}},"type":"if","locations":[{"start":{"line":110,"column":20},"end":{"line":113,"column":21}},{"start":{"line":110,"column":20},"end":{"line":113,"column":21}}],"line":110}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":0,"32":0,"33":34,"34":1,"35":34,"36":34,"37":34,"38":34,"39":34,"40":34,"41":34,"42":34,"43":34,"44":34,"45":34,"46":0,"47":34,"48":0,"49":34,"50":1,"51":34,"52":0,"53":0,"54":0,"55":1,"56":1,"57":1,"58":1},"f":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":34,"6":34},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[34,0],"8":[34,0],"9":[0],"10":[0],"11":[34,0],"12":[34,0],"13":[34,0],"14":[0,34],"15":[0,34],"16":[1,33],"17":[0,34]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/tool/KoconutDeprecation.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/tool/KoconutDeprecation.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport {\n  /* Tool */\n  KoconutOption,\n} from '../../module';\nimport {\n  existsSync,\n  writeFileSync,\n  readFileSync,\n  appendFileSync,\n  mkdirSync,\n} from 'fs';\nexport enum FontStyle {\n  Reset = '\\x1b[0m',\n  Bright = '\\x1b[1m',\n  Dim = '\\x1b[2m',\n  Underscore = '\\x1b[4m',\n  Blink = '\\x1b[5m',\n  Reverse = '\\x1b[7m',\n  Hidden = '\\x1b[8m',\n}\nenum FontTextColour {\n  Black = '\\x1b[30m',\n  Red = '\\x1b[31m',\n  Green = '\\x1b[32m',\n  Yellow = '\\x1b[33m',\n  Blue = '\\x1b[34m',\n  Magenta = '\\x1b[35m',\n  Cyan = '\\x1b[36m',\n  White = '\\x1b[37m',\n}\nexport enum FontBackgroundColour {\n  Black = '\\x1b[40m',\n  Red = '\\x1b[41m',\n  Green = '\\x1b[42m',\n  Yellow = '\\x1b[43m',\n  Blue = '\\x1b[44m',\n  Magenta = '\\x1b[45m',\n  Cyan = '\\x1b[46m',\n  White = '\\x1b[47m',\n}\nconst deprecationWarningGenerators = {\n  english: (\n    className: string,\n    methodName: string,\n    deprecationVersion: string | null,\n    alternativeMethodName: string | null | undefined,\n  ) =>\n    `${FontTextColour.Yellow}[Deprecation Warning] ${FontStyle.Reset}: ` +\n    `Method named ${FontTextColour.Cyan}'${methodName}' ${FontStyle.Reset}of ${FontTextColour.Magenta}'${className}' ${FontStyle.Reset}class would be ${FontTextColour.Yellow}Deprecated${FontStyle.Reset} ` +\n    `${\n      deprecationVersion\n        ? `since Version : ${FontTextColour.Cyan}'${deprecationVersion}'${FontStyle.Reset}.`\n        : 'in the future.'\n    }` +\n    `${\n      alternativeMethodName\n        ? `\\n                        You can use ${FontTextColour.Cyan}'${alternativeMethodName}' ${FontStyle.Reset}method alternatively.`\n        : ''\n    }`,\n\n  japanese: (\n    className: string,\n    methodName: string,\n    deprecationVersion: string | null,\n    alternativeMethodName: string | null | undefined,\n  ) =>\n    `${FontTextColour.Yellow}[非推奨の警告] ${FontStyle.Reset}: ` +\n    `${FontTextColour.Magenta}'${className}'${FontStyle.Reset}クラスの${FontTextColour.Cyan}'${methodName}'${FontStyle.Reset}メソッドは` +\n    `${\n      deprecationVersion\n        ? `${FontTextColour.Cyan}'${deprecationVersion}'${FontStyle.Reset}バージョンから`\n        : ` 向後`\n    }サポートが${FontTextColour.Yellow}中止${FontStyle.Reset}される予定です。` +\n    `${\n      alternativeMethodName\n        ? `\\n                 その機能は${FontTextColour.Cyan}'${alternativeMethodName}'${FontStyle.Reset}メソッドに置換えて使用することをお勧めします。`\n        : ``\n    }`,\n\n  korean: (\n    className: string,\n    methodName: string,\n    deprecationVersion: string | null,\n    alternativeMethodName: string | null | undefined,\n  ) =>\n    `${FontTextColour.Yellow}[지원 중단 경고] ${FontStyle.Reset}: ` +\n    `${FontTextColour.Magenta}'${className}' ${FontStyle.Reset}클래스의 ${FontTextColour.Cyan}'${methodName}' ${FontStyle.Reset}메소드는` +\n    `${\n      deprecationVersion\n        ? ` ${FontTextColour.Cyan}'${deprecationVersion}' ${FontStyle.Reset}버전부터`\n        : ` 향후`\n    } 지원이 ${FontTextColour.Yellow}중단${FontStyle.Reset} 될 예정입니다.` +\n    `${\n      alternativeMethodName\n        ? `\\n                   해당 기능은 ${FontTextColour.Cyan}'${alternativeMethodName}'${FontStyle.Reset} 메소드로 대체하여 사용하는 것을 권장합니다.`\n        : ``\n    }`,\n};\nconst deprecationWarningLocale = {\n  // English\n  en: deprecationWarningGenerators.english,\n  'en-AU': deprecationWarningGenerators.english,\n  'en-BZ': deprecationWarningGenerators.english,\n  'en-CA': deprecationWarningGenerators.english,\n  'en-CB': deprecationWarningGenerators.english,\n  'en-GB': deprecationWarningGenerators.english,\n  'en-IE': deprecationWarningGenerators.english,\n  'en-JM': deprecationWarningGenerators.english,\n  'en-NZ': deprecationWarningGenerators.english,\n  'en-PH': deprecationWarningGenerators.english,\n  'en-TT': deprecationWarningGenerators.english,\n  'en-US': deprecationWarningGenerators.english,\n  'en-ZA': deprecationWarningGenerators.english,\n  'en-ZW': deprecationWarningGenerators.english,\n\n  // Japanese\n  ja: deprecationWarningGenerators.japanese,\n  'ja-JP': deprecationWarningGenerators.japanese,\n\n  // Korean\n  ko: deprecationWarningGenerators.korean,\n  'ko-KR': deprecationWarningGenerators.korean,\n};\nexport class KoconutDeprecation {\n  static isRunningOnDevUnitTesting = false;\n  private static devDeprecationListSet: Set<string>;\n  private static devDeprecationListTmpDirPath = './log';\n  private static devDeprecationListTmpFilePath = `${KoconutDeprecation.devDeprecationListTmpDirPath}/DevDeprecationList.tmp`;\n  static showDeprecationWarning(\n    deprecationVersion: string | null = null,\n    alternative: ((...params: any) => any) | null = null,\n  ) {\n    if (KoconutOption.isDeprecationWarningEnabled) {\n      const callStack = new Error().stack?.split('\\n').slice(2, 8);\n      const [className, methodName] = callStack!\n        .shift()!\n        .trim()\n        .split(' ')[1]\n        .split('.');\n      let warningString = deprecationWarningLocale[KoconutOption.locale]!(\n        className,\n        methodName,\n        deprecationVersion,\n        alternative?.name,\n      );\n      if (KoconutOption.doesDeprecationWarningShowCallStack)\n        warningString += `\\n${FontTextColour.Green}${callStack?.join('\\n')}\\n${\n          FontStyle.Reset\n        }`;\n      console.warn(warningString);\n      if (this.isRunningOnDevUnitTesting) {\n        try {\n          const stringToAdd = `${className}/${methodName}/${deprecationVersion}`;\n          if (!existsSync(this.devDeprecationListTmpDirPath))\n            mkdirSync(this.devDeprecationListTmpDirPath);\n          if (!existsSync(this.devDeprecationListTmpFilePath))\n            writeFileSync(this.devDeprecationListTmpFilePath, '');\n          if (!this.devDeprecationListSet)\n            this.devDeprecationListSet = new Set(\n              readFileSync(this.devDeprecationListTmpFilePath, 'utf-8').split(\n                '\\n',\n              ),\n            );\n          if (!this.devDeprecationListSet.has(stringToAdd)) {\n            this.devDeprecationListSet.add(stringToAdd);\n            appendFileSync(\n              this.devDeprecationListTmpFilePath,\n              `\\n${stringToAdd}`,\n            );\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ea8c8fc859259d32b246049e5964206675f586ae","contentHash":"70ab61a87f50a44c67bcb14819e431f5b73256c84391cdb9502689150ba9e34e"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\tool\\KoconutOpener.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\tool\\KoconutOpener.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":13}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/tool/KoconutOpener.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/tool/KoconutOpener.ts"],"names":[],"mappings":";;AAAA,YAAY,CAAC","sourcesContent":["`use strict`;\n\nimport { KoconutYieldable } from '../../module';\n\nexport interface KoconutOpener<DataType> {\n  setPrevYieldable(\n    prevYieldable: KoconutYieldable<any>,\n  ): KoconutOpener<DataType>;\n  setProcessor(\n    processor: () => Promise<DataType> | DataType,\n  ): KoconutOpener<DataType>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0beee0fe10eeb7ab159984cc722419bc40cdcbdd","contentHash":"412711473967039a6675546942a40fe3bc1ec95eedbf4958411b507222ababd4"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\tool\\KoconutTypeChecker.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\tool\\KoconutTypeChecker.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":0},"end":{"line":17,"column":2}},"3":{"start":{"line":6,"column":8},"end":{"line":9,"column":25}},"4":{"start":{"line":7,"column":12},"end":{"line":7,"column":24}},"5":{"start":{"line":9,"column":12},"end":{"line":9,"column":25}},"6":{"start":{"line":12,"column":8},"end":{"line":15,"column":25}},"7":{"start":{"line":13,"column":12},"end":{"line":13,"column":24}},"8":{"start":{"line":15,"column":12},"end":{"line":15,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":23},"end":{"line":5,"column":24}},"loc":{"start":{"line":5,"column":41},"end":{"line":10,"column":5}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":22},"end":{"line":11,"column":23}},"loc":{"start":{"line":11,"column":40},"end":{"line":16,"column":5}},"line":11}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":8},"end":{"line":9,"column":25}},"type":"if","locations":[{"start":{"line":6,"column":8},"end":{"line":9,"column":25}},{"start":{"line":6,"column":8},"end":{"line":9,"column":25}}],"line":6},"1":{"loc":{"start":{"line":6,"column":12},"end":{"line":6,"column":80}},"type":"binary-expr","locations":[{"start":{"line":6,"column":12},"end":{"line":6,"column":18}},{"start":{"line":6,"column":22},"end":{"line":6,"column":38}},{"start":{"line":6,"column":42},"end":{"line":6,"column":80}}],"line":6},"2":{"loc":{"start":{"line":12,"column":8},"end":{"line":15,"column":25}},"type":"if","locations":[{"start":{"line":12,"column":8},"end":{"line":15,"column":25}},{"start":{"line":12,"column":8},"end":{"line":15,"column":25}}],"line":12},"3":{"loc":{"start":{"line":12,"column":12},"end":{"line":12,"column":78}},"type":"binary-expr","locations":[{"start":{"line":12,"column":12},"end":{"line":12,"column":18}},{"start":{"line":12,"column":22},"end":{"line":12,"column":37}},{"start":{"line":12,"column":41},"end":{"line":12,"column":78}}],"line":12}},"s":{"0":1,"1":1,"2":1,"3":182,"4":76,"5":106,"6":1886,"7":323,"8":1563},"f":{"0":182,"1":1886},"b":{"0":[76,106],"1":[182,182,76],"2":[323,1563],"3":[1886,1872,323]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/tool/KoconutTypeChecker.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/tool/KoconutTypeChecker.ts"],"names":[],"mappings":";;;AAEa,QAAA,kBAAkB,GAAG;IAChC,iBAAiB,EAAE,UAAU,MAAW;QACtC,IAAI,MAAM,IAAI,MAAM,CAAC,SAAS,IAAI,OAAO,MAAM,CAAC,SAAS,KAAK,UAAU;YACtE,OAAO,IAAI,CAAC;;YACT,OAAO,KAAK,CAAC;IACpB,CAAC;IAED,gBAAgB,EAAE,UAAU,MAAW;QACrC,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,UAAU;YACpE,OAAO,IAAI,CAAC;;YACT,OAAO,KAAK,CAAC;IACpB,CAAC;CACF,CAAC","sourcesContent":["import { KoconutComparable, KoconutEquatable } from '../../module';\n\nexport const KoconutTypeChecker = {\n  checkIsComparable: function (target: any): target is KoconutComparable {\n    if (target && target.compareTo && typeof target.compareTo === 'function')\n      return true;\n    else return false;\n  },\n\n  checkIsEquatable: function (target: any): target is KoconutEquatable {\n    if (target && target.equalsTo && typeof target.equalsTo === 'function')\n      return true;\n    else return false;\n  },\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d14ca8d2e37084abf95242b60649167ef3af7c67","contentHash":"494f5d0ea31b3d67944ea7e04d2590870b95dc352c3828e5f8f9412c86f113f8"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\base\\KoconutBoolean.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\base\\KoconutBoolean.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":43}},"3":{"start":{"line":23,"column":8},"end":{"line":23,"column":16}},"4":{"start":{"line":24,"column":8},"end":{"line":24,"column":54}},"5":{"start":{"line":28,"column":32},"end":{"line":28,"column":69}},"6":{"start":{"line":29,"column":8},"end":{"line":29,"column":59}},"7":{"start":{"line":30,"column":8},"end":{"line":30,"column":67}},"8":{"start":{"line":31,"column":8},"end":{"line":31,"column":31}},"9":{"start":{"line":35,"column":32},"end":{"line":35,"column":63}},"10":{"start":{"line":36,"column":8},"end":{"line":45,"column":11}},"11":{"start":{"line":39,"column":31},"end":{"line":39,"column":36}},"12":{"start":{"line":40,"column":12},"end":{"line":43,"column":37}},"13":{"start":{"line":41,"column":16},"end":{"line":41,"column":51}},"14":{"start":{"line":43,"column":16},"end":{"line":43,"column":37}},"15":{"start":{"line":44,"column":12},"end":{"line":44,"column":60}},"16":{"start":{"line":46,"column":8},"end":{"line":46,"column":31}},"17":{"start":{"line":64,"column":8},"end":{"line":64,"column":31}},"18":{"start":{"line":65,"column":8},"end":{"line":65,"column":20}},"19":{"start":{"line":68,"column":8},"end":{"line":68,"column":25}},"20":{"start":{"line":71,"column":32},"end":{"line":71,"column":52}},"21":{"start":{"line":72,"column":8},"end":{"line":76,"column":11}},"22":{"start":{"line":75,"column":12},"end":{"line":75,"column":30}},"23":{"start":{"line":77,"column":8},"end":{"line":77,"column":31}},"24":{"start":{"line":80,"column":32},"end":{"line":80,"column":52}},"25":{"start":{"line":81,"column":8},"end":{"line":90,"column":11}},"26":{"start":{"line":84,"column":31},"end":{"line":84,"column":36}},"27":{"start":{"line":85,"column":12},"end":{"line":88,"column":37}},"28":{"start":{"line":86,"column":16},"end":{"line":86,"column":51}},"29":{"start":{"line":88,"column":16},"end":{"line":88,"column":37}},"30":{"start":{"line":89,"column":12},"end":{"line":89,"column":45}},"31":{"start":{"line":91,"column":8},"end":{"line":91,"column":31}},"32":{"start":{"line":94,"column":8},"end":{"line":94,"column":37}},"33":{"start":{"line":97,"column":32},"end":{"line":97,"column":52}},"34":{"start":{"line":98,"column":8},"end":{"line":107,"column":11}},"35":{"start":{"line":101,"column":31},"end":{"line":101,"column":36}},"36":{"start":{"line":102,"column":12},"end":{"line":105,"column":37}},"37":{"start":{"line":103,"column":16},"end":{"line":103,"column":51}},"38":{"start":{"line":105,"column":16},"end":{"line":105,"column":37}},"39":{"start":{"line":106,"column":12},"end":{"line":106,"column":45}},"40":{"start":{"line":108,"column":8},"end":{"line":108,"column":31}},"41":{"start":{"line":111,"column":8},"end":{"line":111,"column":36}},"42":{"start":{"line":114,"column":32},"end":{"line":114,"column":52}},"43":{"start":{"line":115,"column":8},"end":{"line":124,"column":11}},"44":{"start":{"line":118,"column":31},"end":{"line":118,"column":36}},"45":{"start":{"line":119,"column":12},"end":{"line":122,"column":37}},"46":{"start":{"line":120,"column":16},"end":{"line":120,"column":51}},"47":{"start":{"line":122,"column":16},"end":{"line":122,"column":37}},"48":{"start":{"line":123,"column":12},"end":{"line":123,"column":45}},"49":{"start":{"line":125,"column":8},"end":{"line":125,"column":31}},"50":{"start":{"line":128,"column":8},"end":{"line":128,"column":37}},"51":{"start":{"line":131,"column":8},"end":{"line":131,"column":37}},"52":{"start":{"line":134,"column":0},"end":{"line":134,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":32},"end":{"line":25,"column":5}},"line":22},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":36},"end":{"line":32,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":21},"end":{"line":47,"column":5}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":26},"end":{"line":38,"column":27}},"loc":{"start":{"line":38,"column":38},"end":{"line":45,"column":9}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":21},"end":{"line":66,"column":5}},"line":63},"5":{"name":"(anonymous_5)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":14},"end":{"line":69,"column":5}},"line":67},"6":{"name":"(anonymous_6)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":10},"end":{"line":78,"column":5}},"line":70},"7":{"name":"(anonymous_7)","decl":{"start":{"line":74,"column":26},"end":{"line":74,"column":27}},"loc":{"start":{"line":74,"column":38},"end":{"line":76,"column":9}},"line":74},"8":{"name":"(anonymous_8)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":15},"end":{"line":92,"column":5}},"line":79},"9":{"name":"(anonymous_9)","decl":{"start":{"line":83,"column":26},"end":{"line":83,"column":27}},"loc":{"start":{"line":83,"column":38},"end":{"line":90,"column":9}},"line":83},"10":{"name":"(anonymous_10)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":16},"end":{"line":95,"column":5}},"line":93},"11":{"name":"(anonymous_11)","decl":{"start":{"line":96,"column":4},"end":{"line":96,"column":5}},"loc":{"start":{"line":96,"column":14},"end":{"line":109,"column":5}},"line":96},"12":{"name":"(anonymous_12)","decl":{"start":{"line":100,"column":26},"end":{"line":100,"column":27}},"loc":{"start":{"line":100,"column":38},"end":{"line":107,"column":9}},"line":100},"13":{"name":"(anonymous_13)","decl":{"start":{"line":110,"column":4},"end":{"line":110,"column":5}},"loc":{"start":{"line":110,"column":15},"end":{"line":112,"column":5}},"line":110},"14":{"name":"(anonymous_14)","decl":{"start":{"line":113,"column":4},"end":{"line":113,"column":5}},"loc":{"start":{"line":113,"column":15},"end":{"line":126,"column":5}},"line":113},"15":{"name":"(anonymous_15)","decl":{"start":{"line":117,"column":26},"end":{"line":117,"column":27}},"loc":{"start":{"line":117,"column":38},"end":{"line":124,"column":9}},"line":117},"16":{"name":"(anonymous_16)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":16},"end":{"line":129,"column":5}},"line":127},"17":{"name":"(anonymous_17)","decl":{"start":{"line":130,"column":4},"end":{"line":130,"column":5}},"loc":{"start":{"line":130,"column":15},"end":{"line":132,"column":5}},"line":130}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":16},"end":{"line":22,"column":30}},"type":"default-arg","locations":[{"start":{"line":22,"column":26},"end":{"line":22,"column":30}}],"line":22},"1":{"loc":{"start":{"line":24,"column":20},"end":{"line":24,"column":53}},"type":"cond-expr","locations":[{"start":{"line":24,"column":38},"end":{"line":24,"column":43}},{"start":{"line":24,"column":46},"end":{"line":24,"column":53}}],"line":24},"2":{"loc":{"start":{"line":40,"column":12},"end":{"line":43,"column":37}},"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":43,"column":37}},{"start":{"line":40,"column":12},"end":{"line":43,"column":37}}],"line":40},"3":{"loc":{"start":{"line":85,"column":12},"end":{"line":88,"column":37}},"type":"if","locations":[{"start":{"line":85,"column":12},"end":{"line":88,"column":37}},{"start":{"line":85,"column":12},"end":{"line":88,"column":37}}],"line":85},"4":{"loc":{"start":{"line":89,"column":19},"end":{"line":89,"column":44}},"type":"binary-expr","locations":[{"start":{"line":89,"column":19},"end":{"line":89,"column":28}},{"start":{"line":89,"column":32},"end":{"line":89,"column":44}}],"line":89},"5":{"loc":{"start":{"line":102,"column":12},"end":{"line":105,"column":37}},"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":105,"column":37}},{"start":{"line":102,"column":12},"end":{"line":105,"column":37}}],"line":102},"6":{"loc":{"start":{"line":106,"column":19},"end":{"line":106,"column":44}},"type":"binary-expr","locations":[{"start":{"line":106,"column":19},"end":{"line":106,"column":28}},{"start":{"line":106,"column":32},"end":{"line":106,"column":44}}],"line":106},"7":{"loc":{"start":{"line":119,"column":12},"end":{"line":122,"column":37}},"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":122,"column":37}},{"start":{"line":119,"column":12},"end":{"line":122,"column":37}}],"line":119}},"s":{"0":1,"1":1,"2":1,"3":162,"4":162,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":1},"f":{"0":162,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"0":[162],"1":[162,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/base/KoconutBoolean.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/base/KoconutBoolean.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  /* Protocol */\r\n  KoconutComparable,\r\n\r\n  /* Tool */\r\n  KoconutPrimitive,\r\n  KoconutOpener,\r\n} from '../../../module';\r\n\r\nexport class KoconutBoolean\r\n  extends KoconutPrimitive<boolean>\r\n  implements Boolean, KoconutComparable\r\n{\r\n  // Koconut Primitive\r\n  /**\r\n   * Creates a new instance from ```boolean```.\r\n   * @param {boolean} boolean A boolean value which is either true or false. If it's omitted ```false``` is default value.\r\n   *\r\n   * @since 1.0.15\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutBoolean = await new KoconutBoolean(true)\r\n   * // ↑ This is a KoconutBoolean instance, of which value is true.\r\n   *\r\n   * const koconutBoolean = await new KoconutBoolean()\r\n   * // ↑ This is a KoconutBoolean instance, of which value is false.\r\n   * ```\r\n   */\r\n  constructor(boolean: boolean | null = null) {\r\n    super();\r\n    this.data = boolean == null ? false : boolean;\r\n  }\r\n\r\n  //\r\n  private static fromPrimitive(\r\n    primitive: KoconutPrimitive<boolean>,\r\n  ): KoconutBoolean {\r\n    const koconutToReturn = new KoconutBoolean(primitive['data']);\r\n    koconutToReturn.processor = primitive['processor'];\r\n    koconutToReturn.prevYieldable = primitive['prevYieldable'];\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Koconut Comparable\r\n  compareTo(\r\n    other: boolean | KoconutPrimitive<boolean>,\r\n  ): KoconutPrimitive<number> {\r\n    const koconutToReturn = new KoconutPrimitive<number>();\r\n    (koconutToReturn as any as KoconutOpener<number>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        let otherBoolean = false;\r\n        if (other instanceof KoconutPrimitive)\r\n          otherBoolean = await other.yield();\r\n        else otherBoolean = other;\r\n        return Number(this.data!) - Number(otherBoolean);\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Processed all the chained object and returns original {@link KoconutBoolean} instance.\r\n   *\r\n   * @category Processor\r\n   *\r\n   * @since 1.0.15\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutBoolean = await new KoconutBoolean(true)\r\n   *                                     .retrieve()\r\n   * console.log(koconutBoolean)\r\n   * // ↑ KoconutBoolean { isValidated: true, data: true }\r\n   * ```\r\n   */\r\n  async retrieve(): Promise<KoconutBoolean> {\r\n    await super.retrieve();\r\n    return this;\r\n  }\r\n\r\n  valueOf(): boolean {\r\n    return this.data!;\r\n  }\r\n\r\n  not(): KoconutBoolean {\r\n    const koconutToReturn = new KoconutBoolean();\r\n    (koconutToReturn as any as KoconutOpener<boolean>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        return !this.data!;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  and(other: boolean | KoconutPrimitive<boolean>): KoconutBoolean {\r\n    const koconutToReturn = new KoconutBoolean();\r\n    (koconutToReturn as any as KoconutOpener<boolean>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        let otherBoolean = false;\r\n        if (other instanceof KoconutPrimitive)\r\n          otherBoolean = await other.yield();\r\n        else otherBoolean = other;\r\n        return this.data! && otherBoolean;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  nand(other: boolean | KoconutPrimitive<boolean>): KoconutBoolean {\r\n    return this.and(other).not();\r\n  }\r\n\r\n  or(other: boolean | KoconutPrimitive<boolean>): KoconutBoolean {\r\n    const koconutToReturn = new KoconutBoolean();\r\n    (koconutToReturn as any as KoconutOpener<boolean>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        let otherBoolean = false;\r\n        if (other instanceof KoconutPrimitive)\r\n          otherBoolean = await other.yield();\r\n        else otherBoolean = other;\r\n        return this.data! || otherBoolean;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  nor(other: boolean | KoconutPrimitive<boolean>): KoconutBoolean {\r\n    return this.or(other).not();\r\n  }\r\n\r\n  xor(other: boolean | KoconutPrimitive<boolean>): KoconutBoolean {\r\n    const koconutToReturn = new KoconutBoolean();\r\n    (koconutToReturn as any as KoconutOpener<boolean>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        let otherBoolean = false;\r\n        if (other instanceof KoconutPrimitive)\r\n          otherBoolean = await other.yield();\r\n        else otherBoolean = other;\r\n        return this.data! != otherBoolean;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  xnor(other: boolean | KoconutPrimitive<boolean>): KoconutBoolean {\r\n    return this.xor(other).not();\r\n  }\r\n\r\n  eqv(other: boolean | KoconutPrimitive<boolean>): KoconutBoolean {\r\n    return this.xor(other).not();\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cb5c5127b52f51c4a69b81246451aec6f1be258a","contentHash":"a982111e2e8e1b9b3ebd8b1a88572d04f5022aa2a1ccb2fd96280d332f520906"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\base\\KoconutPair.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\base\\KoconutPair.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":43}},"3":{"start":{"line":31,"column":8},"end":{"line":31,"column":41}},"4":{"start":{"line":32,"column":8},"end":{"line":32,"column":43}},"5":{"start":{"line":47,"column":8},"end":{"line":47,"column":42}},"6":{"start":{"line":55,"column":8},"end":{"line":55,"column":33}},"7":{"start":{"line":63,"column":8},"end":{"line":63,"column":34}},"8":{"start":{"line":78,"column":8},"end":{"line":78,"column":74}},"9":{"start":{"line":93,"column":8},"end":{"line":93,"column":41}},"10":{"start":{"line":108,"column":8},"end":{"line":108,"column":59}},"11":{"start":{"line":163,"column":8},"end":{"line":213,"column":9}},"12":{"start":{"line":165,"column":39},"end":{"line":165,"column":85}},"13":{"start":{"line":166,"column":12},"end":{"line":198,"column":13}},"14":{"start":{"line":167,"column":40},"end":{"line":167,"column":69}},"15":{"start":{"line":168,"column":16},"end":{"line":182,"column":19}},"16":{"start":{"line":169,"column":38},"end":{"line":169,"column":61}},"17":{"start":{"line":170,"column":20},"end":{"line":171,"column":37}},"18":{"start":{"line":171,"column":24},"end":{"line":171,"column":37}},"19":{"start":{"line":172,"column":20},"end":{"line":181,"column":73}},"20":{"start":{"line":174,"column":46},"end":{"line":174,"column":94}},"21":{"start":{"line":175,"column":24},"end":{"line":178,"column":49}},"22":{"start":{"line":176,"column":28},"end":{"line":176,"column":63}},"23":{"start":{"line":178,"column":28},"end":{"line":178,"column":49}},"24":{"start":{"line":181,"column":24},"end":{"line":181,"column":73}},"25":{"start":{"line":183,"column":16},"end":{"line":183,"column":39}},"26":{"start":{"line":186,"column":16},"end":{"line":187,"column":33}},"27":{"start":{"line":187,"column":20},"end":{"line":187,"column":33}},"28":{"start":{"line":188,"column":16},"end":{"line":197,"column":69}},"29":{"start":{"line":190,"column":48},"end":{"line":190,"column":96}},"30":{"start":{"line":191,"column":20},"end":{"line":194,"column":51}},"31":{"start":{"line":192,"column":24},"end":{"line":192,"column":93}},"32":{"start":{"line":194,"column":24},"end":{"line":194,"column":51}},"33":{"start":{"line":197,"column":20},"end":{"line":197,"column":69}},"34":{"start":{"line":201,"column":12},"end":{"line":202,"column":29}},"35":{"start":{"line":202,"column":16},"end":{"line":202,"column":29}},"36":{"start":{"line":203,"column":12},"end":{"line":212,"column":65}},"37":{"start":{"line":205,"column":38},"end":{"line":205,"column":86}},"38":{"start":{"line":206,"column":16},"end":{"line":209,"column":41}},"39":{"start":{"line":207,"column":20},"end":{"line":207,"column":83}},"40":{"start":{"line":209,"column":20},"end":{"line":209,"column":41}},"41":{"start":{"line":212,"column":16},"end":{"line":212,"column":65}},"42":{"start":{"line":216,"column":0},"end":{"line":216,"column":20}},"43":{"start":{"line":240,"column":8},"end":{"line":243,"column":20}},"44":{"start":{"line":241,"column":12},"end":{"line":241,"column":43}},"45":{"start":{"line":243,"column":12},"end":{"line":243,"column":20}},"46":{"start":{"line":267,"column":8},"end":{"line":267,"column":31}},"47":{"start":{"line":268,"column":8},"end":{"line":268,"column":20}},"48":{"start":{"line":279,"column":8},"end":{"line":280,"column":50}},"49":{"start":{"line":280,"column":12},"end":{"line":280,"column":50}},"50":{"start":{"line":281,"column":8},"end":{"line":281,"column":21}},"51":{"start":{"line":284,"column":0},"end":{"line":284,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":45},"end":{"line":33,"column":5}},"line":30},"1":{"name":"(anonymous_1)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":22},"end":{"line":48,"column":5}},"line":46},"2":{"name":"(anonymous_2)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":16},"end":{"line":56,"column":5}},"line":54},"3":{"name":"(anonymous_3)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":17},"end":{"line":64,"column":5}},"line":62},"4":{"name":"(anonymous_4)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":15},"end":{"line":79,"column":5}},"line":77},"5":{"name":"(anonymous_5)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":14},"end":{"line":94,"column":5}},"line":92},"6":{"name":"(anonymous_6)","decl":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}},"loc":{"start":{"line":107,"column":14},"end":{"line":109,"column":5}},"line":107},"7":{"name":"(anonymous_7)","decl":{"start":{"line":162,"column":4},"end":{"line":162,"column":5}},"loc":{"start":{"line":162,"column":20},"end":{"line":214,"column":5}},"line":162},"8":{"name":"(anonymous_8)","decl":{"start":{"line":168,"column":45},"end":{"line":168,"column":46}},"loc":{"start":{"line":168,"column":57},"end":{"line":182,"column":17}},"line":168},"9":{"name":"(anonymous_9)","decl":{"start":{"line":239,"column":4},"end":{"line":239,"column":5}},"loc":{"start":{"line":239,"column":45},"end":{"line":244,"column":5}},"line":239},"10":{"name":"(anonymous_10)","decl":{"start":{"line":266,"column":4},"end":{"line":266,"column":5}},"loc":{"start":{"line":266,"column":21},"end":{"line":269,"column":5}},"line":266},"11":{"name":"(anonymous_11)","decl":{"start":{"line":278,"column":4},"end":{"line":278,"column":5}},"loc":{"start":{"line":278,"column":20},"end":{"line":282,"column":5}},"line":278}},"branchMap":{"0":{"loc":{"start":{"line":163,"column":8},"end":{"line":213,"column":9}},"type":"if","locations":[{"start":{"line":163,"column":8},"end":{"line":213,"column":9}},{"start":{"line":163,"column":8},"end":{"line":213,"column":9}}],"line":163},"1":{"loc":{"start":{"line":163,"column":12},"end":{"line":164,"column":76}},"type":"binary-expr","locations":[{"start":{"line":163,"column":12},"end":{"line":163,"column":75}},{"start":{"line":164,"column":12},"end":{"line":164,"column":76}}],"line":163},"2":{"loc":{"start":{"line":166,"column":12},"end":{"line":198,"column":13}},"type":"if","locations":[{"start":{"line":166,"column":12},"end":{"line":198,"column":13}},{"start":{"line":166,"column":12},"end":{"line":198,"column":13}}],"line":166},"3":{"loc":{"start":{"line":170,"column":20},"end":{"line":171,"column":37}},"type":"if","locations":[{"start":{"line":170,"column":20},"end":{"line":171,"column":37}},{"start":{"line":170,"column":20},"end":{"line":171,"column":37}}],"line":170},"4":{"loc":{"start":{"line":172,"column":20},"end":{"line":181,"column":73}},"type":"if","locations":[{"start":{"line":172,"column":20},"end":{"line":181,"column":73}},{"start":{"line":172,"column":20},"end":{"line":181,"column":73}}],"line":172},"5":{"loc":{"start":{"line":172,"column":24},"end":{"line":173,"column":89}},"type":"binary-expr","locations":[{"start":{"line":172,"column":24},"end":{"line":172,"column":88}},{"start":{"line":173,"column":24},"end":{"line":173,"column":89}}],"line":172},"6":{"loc":{"start":{"line":175,"column":24},"end":{"line":178,"column":49}},"type":"if","locations":[{"start":{"line":175,"column":24},"end":{"line":178,"column":49}},{"start":{"line":175,"column":24},"end":{"line":178,"column":49}}],"line":175},"7":{"loc":{"start":{"line":186,"column":16},"end":{"line":187,"column":33}},"type":"if","locations":[{"start":{"line":186,"column":16},"end":{"line":187,"column":33}},{"start":{"line":186,"column":16},"end":{"line":187,"column":33}}],"line":186},"8":{"loc":{"start":{"line":188,"column":16},"end":{"line":197,"column":69}},"type":"if","locations":[{"start":{"line":188,"column":16},"end":{"line":197,"column":69}},{"start":{"line":188,"column":16},"end":{"line":197,"column":69}}],"line":188},"9":{"loc":{"start":{"line":188,"column":20},"end":{"line":189,"column":85}},"type":"binary-expr","locations":[{"start":{"line":188,"column":20},"end":{"line":188,"column":84}},{"start":{"line":189,"column":20},"end":{"line":189,"column":85}}],"line":188},"10":{"loc":{"start":{"line":191,"column":20},"end":{"line":194,"column":51}},"type":"if","locations":[{"start":{"line":191,"column":20},"end":{"line":194,"column":51}},{"start":{"line":191,"column":20},"end":{"line":194,"column":51}}],"line":191},"11":{"loc":{"start":{"line":201,"column":12},"end":{"line":202,"column":29}},"type":"if","locations":[{"start":{"line":201,"column":12},"end":{"line":202,"column":29}},{"start":{"line":201,"column":12},"end":{"line":202,"column":29}}],"line":201},"12":{"loc":{"start":{"line":203,"column":12},"end":{"line":212,"column":65}},"type":"if","locations":[{"start":{"line":203,"column":12},"end":{"line":212,"column":65}},{"start":{"line":203,"column":12},"end":{"line":212,"column":65}}],"line":203},"13":{"loc":{"start":{"line":203,"column":16},"end":{"line":204,"column":81}},"type":"binary-expr","locations":[{"start":{"line":203,"column":16},"end":{"line":203,"column":80}},{"start":{"line":204,"column":16},"end":{"line":204,"column":81}}],"line":203},"14":{"loc":{"start":{"line":206,"column":16},"end":{"line":209,"column":41}},"type":"if","locations":[{"start":{"line":206,"column":16},"end":{"line":209,"column":41}},{"start":{"line":206,"column":16},"end":{"line":209,"column":41}}],"line":206},"15":{"loc":{"start":{"line":239,"column":16},"end":{"line":239,"column":28}},"type":"default-arg","locations":[{"start":{"line":239,"column":24},"end":{"line":239,"column":28}}],"line":239},"16":{"loc":{"start":{"line":239,"column":30},"end":{"line":239,"column":43}},"type":"default-arg","locations":[{"start":{"line":239,"column":39},"end":{"line":239,"column":43}}],"line":239},"17":{"loc":{"start":{"line":240,"column":8},"end":{"line":243,"column":20}},"type":"if","locations":[{"start":{"line":240,"column":8},"end":{"line":243,"column":20}},{"start":{"line":240,"column":8},"end":{"line":243,"column":20}}],"line":240},"18":{"loc":{"start":{"line":240,"column":12},"end":{"line":240,"column":43}},"type":"binary-expr","locations":[{"start":{"line":240,"column":12},"end":{"line":240,"column":25}},{"start":{"line":240,"column":29},"end":{"line":240,"column":43}}],"line":240},"19":{"loc":{"start":{"line":279,"column":8},"end":{"line":280,"column":50}},"type":"if","locations":[{"start":{"line":279,"column":8},"end":{"line":280,"column":50}},{"start":{"line":279,"column":8},"end":{"line":280,"column":50}}],"line":279},"20":{"loc":{"start":{"line":279,"column":12},"end":{"line":279,"column":51}},"type":"binary-expr","locations":[{"start":{"line":279,"column":12},"end":{"line":279,"column":29}},{"start":{"line":279,"column":33},"end":{"line":279,"column":51}}],"line":279}},"s":{"0":1,"1":1,"2":1,"3":110,"4":110,"5":0,"6":70,"7":70,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":21,"44":19,"45":2,"46":0,"47":0,"48":0,"49":0,"50":0,"51":1},"f":{"0":110,"1":0,"2":70,"3":70,"4":0,"5":0,"6":0,"7":0,"8":0,"9":21,"10":0,"11":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[2],"16":[2],"17":[19,2],"18":[21,19],"19":[0,0],"20":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/base/KoconutPair.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/base/KoconutPair.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  /* Base */\r\n  Entry,\r\n  KoconutBoolean,\r\n\r\n  /* Tool */\r\n  KoconutPrimitive,\r\n  KoconutTypeChecker,\r\n  KoconutOpener,\r\n\r\n  /* Protocol */\r\n  KoconutEquatable,\r\n} from '../../../module';\r\n\r\n/**\r\n * Represents a generic pair of two Values. There is no meaning attached to values\r\n * in this class. It can be used for any purpose. Pair exhibits values semantics,\r\n * i.e. two pairs are equal if both components are equal. However, if any of those\r\n * two values are instance of class, you'd better make the class explicitly distinguishable\r\n * by inheriting {@link KoconutEquatable}. Please, check the {@link Pair.equalsTo example of 'equalsTo' method}\r\n * @see\r\n * <pre>\r\n * -- Base --\r\n * {@link KoconutPair}, {@link Entry}, {@link KoconutEntry}\r\n *\r\n * -- Protocol --\r\n * {@link KoconutEquatable}\r\n * </pre>\r\n *\r\n * @param {FirstType} FirstType The type of the first value.\r\n * @param {SecondType} SecondType The type of the second value.\r\n */\r\nexport class Pair<FirstType, SecondType> implements KoconutEquatable {\r\n  /**\r\n   * Create a {@link Pair} instance by iterable two values pair.\r\n   *\r\n   * @param {[FirstType, SecondType]} pair Values pair of first/second as iterable.\r\n   *\r\n   * @return {Pair<FirstType, SecondType>}\r\n   * ```typescript\r\n   * const myPair = Pair.from([\"Apex\",\"Captain\"])\r\n   * console.log(myPair)\r\n   * // ↑ Pair { firstElement: 'Apex', secondElement: 'Captain' }\r\n   * ```\r\n   */\r\n  static from<FirstType, SecondType>(\r\n    pair: [FirstType, SecondType],\r\n  ): Pair<FirstType, SecondType> {\r\n    return new Pair(pair[0], pair[1]);\r\n  }\r\n\r\n  /**\r\n   * Constructor of {@link Pair}.\r\n   *\r\n   * @param {FirstType} firstElement FirstType element.\r\n   * @param {SecondType} secondElement SecondType element.\r\n   */\r\n  constructor(\r\n    private firstElement: FirstType,\r\n    private secondElement: SecondType,\r\n  ) {}\r\n\r\n  /**\r\n   * Returns the first value of this first/second pair.\r\n   *\r\n   * @return {FirstType} The first value of this first/second pair.\r\n   */\r\n  get first(): FirstType {\r\n    return this.firstElement;\r\n  }\r\n\r\n  /**\r\n   * Returns the second value of this first/second pair.\r\n   *\r\n   * @return {SecondType} The second value of this first/second pair.\r\n   */\r\n  get second(): SecondType {\r\n    return this.secondElement;\r\n  }\r\n\r\n  /**\r\n   * Turns this {@link Pair} instance into a simple JSON object string.\r\n   *\r\n   * @return {string}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const myPair = Pair.from([\"Apex\",\"Captain\"])\r\n   * console.log(myPair.toString()) // Or, you can use console.log(`${myPair}`)\r\n   * // ↑ {\"first\":\"Apex\",\"second\":\"Captain\"}\r\n   * ```\r\n   */\r\n  toString(): string {\r\n    return JSON.stringify({ first: this.first, second: this.second });\r\n  }\r\n\r\n  /**\r\n   * Turns this {@link Pair} instance into a simple array.\r\n   *\r\n   * @return {[FirstType, SecondType]}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const myPair = Pair.from([\"Apex\",\"Captain\"])\r\n   * console.log(myPair.toArray())\r\n   * // ↑ [ 'Apex', 'Captain' ]\r\n   * ```\r\n   */\r\n  toArray(): [FirstType, SecondType] {\r\n    return [this.first, this.second];\r\n  }\r\n\r\n  /**\r\n   * Turns this {@link Pair} instance into a simple {@link Entry}\r\n   *\r\n   * @return {Entry<FirstType, SecondType>}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const myPair = Pair.from([\"Apex\",\"Captain\"])\r\n   * console.log(myPair.toEntry())\r\n   * // ↑ Entry { keyElement: 'Apex', valueElement: 'Captain' }\r\n   * ```\r\n   */\r\n  toEntry(): Entry<FirstType, SecondType> {\r\n    return new Entry(this.first, this.second);\r\n  }\r\n\r\n  /**\r\n   * Class {@link Pair} implements {@link KoconutEquatable}. The '{@link KoconutEquatable.equalsTo equalsTo}' method of\r\n   * this basically check whether each individual element (first/second) is same or not. When the type of each element\r\n   * is child of {@link KoconutEquatable}, it'd be done by using its '{@link KoconutEquatable.equalsTo equalsTo}' method.\r\n   * Otherwise, it'd be done simply by '==' operator.\r\n   * @param {Pair<FirstType, SecondType>} other\r\n   *\r\n   * @return {boolean | KoconutBoolean}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *   // Case 1 -- All values are simply number or string\r\n   *   const myPairCase1_01 = Pair.from([10, 20])\r\n   *   const myPairCase1_02 = Pair.from([10, 20])\r\n   *   console.log(`${myPairCase1_01.equalsTo(myPairCase1_02)}`)\r\n   *   // ↑ true\r\n   *\r\n   *   const myPairCase1_03 = Pair.from([\"Apex\", \"Captain\"])\r\n   *   const myPairCase1_04 = Pair.from([\"Apex\", \"Captain\"])\r\n   *   console.log(`${myPairCase1_03 == myPairCase1_04}`)\r\n   *   // ↑ false\r\n   *   console.log(`${myPairCase1_03.equalsTo(myPairCase1_04)}`)\r\n   *   // ↑ true\r\n   *\r\n   *   // Case 2 -- First Type is indistinguishable class\r\n   *   class MyClass {\r\n   *       private value : string\r\n   *       constructor(value : string) {\r\n   *           this.value = value\r\n   *       }\r\n   *   }\r\n   *   const myPairCase2_01 = Pair.from([new MyClass(\"Apex\"), \"Captain\"])\r\n   *   const myPairCase2_02 = Pair.from([new MyClass(\"Apex\"), \"Captain\"])\r\n   *   console.log(`${myPairCase2_01.equalsTo(myPairCase2_02)}`)\r\n   *   // ↑ false\r\n   *\r\n   *   // Case 3 -- First Type is distinguishable class\r\n   *   class MyDistinguishableClass implements KoconutEquatable {\r\n   *       private value : string\r\n   *       constructor(value : string) {\r\n   *           this.value = value\r\n   *       }\r\n   *       equalsTo(other : MyDistinguishableClass) : boolean {\r\n   *           return this.value == other.value\r\n   *       }\r\n   *   }\r\n   *   const myPairCase3_01 = Pair.from([new MyDistinguishableClass(\"Apex\"), \"Captain\"])\r\n   *   const myPairCase3_02 = Pair.from([new MyDistinguishableClass(\"Apex\"), \"Captain\"])\r\n   *   console.log(`${myPairCase3_01.equalsTo(myPairCase3_02)}`)\r\n   *   // ↑ true\r\n   * ```\r\n   */\r\n  equalsTo(other: Pair<FirstType, SecondType>): boolean | KoconutBoolean {\r\n    if (\r\n      KoconutTypeChecker.checkIsEquatable(this.firstElement) &&\r\n      KoconutTypeChecker.checkIsEquatable(other.firstElement)\r\n    ) {\r\n      const firstCompareResult = this.firstElement.equalsTo(other.firstElement);\r\n      if (firstCompareResult instanceof KoconutBoolean) {\r\n        const koconutToReturn = new KoconutBoolean();\r\n        (koconutToReturn as any as KoconutOpener<boolean>).setProcessor(\r\n          async () => {\r\n            const thisValue = koconutToReturn['data']!;\r\n            if (!thisValue) return false;\r\n            if (\r\n              KoconutTypeChecker.checkIsEquatable(this.secondElement) &&\r\n              KoconutTypeChecker.checkIsEquatable(other.secondElement)\r\n            ) {\r\n              const compareResult = this.secondElement.equalsTo(\r\n                other.secondElement,\r\n              );\r\n              if (compareResult instanceof KoconutBoolean)\r\n                return await compareResult.yield();\r\n              else return compareResult;\r\n            } else return this.secondElement == other.secondElement;\r\n          },\r\n        );\r\n        return koconutToReturn;\r\n      } else {\r\n        if (!firstCompareResult) return false;\r\n        if (\r\n          KoconutTypeChecker.checkIsEquatable(this.secondElement) &&\r\n          KoconutTypeChecker.checkIsEquatable(other.secondElement)\r\n        ) {\r\n          const secondCompareResult = this.secondElement.equalsTo(\r\n            other.secondElement,\r\n          );\r\n          if (secondCompareResult instanceof KoconutBoolean)\r\n            return KoconutBoolean['fromPrimitive'](secondCompareResult);\r\n          else return secondCompareResult;\r\n        } else return this.secondElement == other.secondElement;\r\n      }\r\n    } else {\r\n      if (this.firstElement != other.firstElement) return false;\r\n      if (\r\n        KoconutTypeChecker.checkIsEquatable(this.secondElement) &&\r\n        KoconutTypeChecker.checkIsEquatable(other.secondElement)\r\n      ) {\r\n        const compareResult = this.secondElement.equalsTo(other.secondElement);\r\n        if (compareResult instanceof KoconutBoolean)\r\n          return KoconutBoolean['fromPrimitive'](compareResult);\r\n        else return compareResult;\r\n      } else return this.secondElement == other.secondElement;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Koconut Wrapper class for {@link Pair}\r\n *\r\n * @see\r\n * <pre>\r\n * -- Base --\r\n * {@link Pair}, {@link Entry}, {@link KoconutPair}\r\n *\r\n * -- Protocol --\r\n * {@link KoconutEquatable}\r\n * </pre>\r\n *\r\n * @param {FirstType} FirstType Check for {@link Pair}\r\n * @param {SecondType} SecondType Check for {@link Pair}\r\n */\r\nexport class KoconutPair<FirstType, SecondType>\r\n  extends KoconutPrimitive<Pair<FirstType, SecondType>>\r\n  implements KoconutEquatable\r\n{\r\n  /**\r\n   * Constructor of {@link KoconutPair}\r\n   *\r\n   * @param {FirstType | null} first FirstType element of inner {@link Pair} instance.\r\n   * @param {SecondType | null} second SecondType element of inner {@link Pair} instance.\r\n   */\r\n  constructor(\r\n    first: FirstType | null = null,\r\n    second: SecondType | null = null,\r\n  ) {\r\n    if (first != null && second != null) super(new Pair(first, second));\r\n    else super();\r\n  }\r\n\r\n  /**\r\n   * Processes all the chained object and returns original {@link KoconutPair} instance.\r\n   *\r\n   * @return {Promise<KoconutPair<FirstType, SecondType>>}\r\n   *\r\n   * @category Processor\r\n   *\r\n   * @since 1.0.15\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutPair = await new KoconutPair(0, 1)\r\n   *                                     .retrieve()\r\n   *\r\n   * console.log(koconutPair)\r\n   * // ↑ KoconutPair {\r\n   * //   isValidated: true,\r\n   * //   data: Pair { firstElement: 0, secondElement: 1 }\r\n   * // }\r\n   * ```\r\n   */\r\n  async retrieve(): Promise<KoconutPair<FirstType, SecondType>> {\r\n    await super.retrieve();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Class {@link KoconutPair} implements {@link KoconutEquatable}. The equality check process\r\n   * is done by using '{@link Pair.equalsTo equalsTo method of Pair}'\r\n   *\r\n   * @param {KoconutPair<FirstType, SecondType>} other\r\n   *\r\n   * @return {boolean | KoconutBoolean}\r\n   */\r\n  equalsTo(\r\n    other: KoconutPair<FirstType, SecondType>,\r\n  ): boolean | KoconutBoolean {\r\n    if (this.data != null && other.data != null)\r\n      return this.data.equalsTo(other.data);\r\n    return false;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d90464ae87f76e9e7b098fb80705189082b46f61","contentHash":"1e7d8b2d2c9a5285f5f580638e275d7833eccf3f3acb777008205a606be642b7"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\base\\KoconutEntry.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\base\\KoconutEntry.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":46}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":43}},"3":{"start":{"line":39,"column":8},"end":{"line":39,"column":37}},"4":{"start":{"line":40,"column":8},"end":{"line":40,"column":41}},"5":{"start":{"line":57,"column":8},"end":{"line":57,"column":45}},"6":{"start":{"line":64,"column":8},"end":{"line":64,"column":31}},"7":{"start":{"line":71,"column":8},"end":{"line":71,"column":33}},"8":{"start":{"line":86,"column":8},"end":{"line":89,"column":11}},"9":{"start":{"line":104,"column":8},"end":{"line":104,"column":38}},"10":{"start":{"line":119,"column":8},"end":{"line":119,"column":55}},"11":{"start":{"line":164,"column":8},"end":{"line":173,"column":41}},"12":{"start":{"line":166,"column":35},"end":{"line":166,"column":63}},"13":{"start":{"line":167,"column":12},"end":{"line":170,"column":38}},"14":{"start":{"line":168,"column":16},"end":{"line":168,"column":80}},"15":{"start":{"line":170,"column":16},"end":{"line":170,"column":38}},"16":{"start":{"line":173,"column":12},"end":{"line":173,"column":41}},"17":{"start":{"line":176,"column":0},"end":{"line":176,"column":22}},"18":{"start":{"line":205,"column":8},"end":{"line":208,"column":20}},"19":{"start":{"line":206,"column":12},"end":{"line":206,"column":41}},"20":{"start":{"line":208,"column":12},"end":{"line":208,"column":20}},"21":{"start":{"line":232,"column":8},"end":{"line":232,"column":31}},"22":{"start":{"line":233,"column":8},"end":{"line":233,"column":20}},"23":{"start":{"line":244,"column":8},"end":{"line":245,"column":50}},"24":{"start":{"line":245,"column":12},"end":{"line":245,"column":50}},"25":{"start":{"line":246,"column":8},"end":{"line":246,"column":21}},"26":{"start":{"line":249,"column":0},"end":{"line":249,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":42},"end":{"line":41,"column":5}},"line":38},"1":{"name":"(anonymous_1)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":23},"end":{"line":58,"column":5}},"line":56},"2":{"name":"(anonymous_2)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":14},"end":{"line":65,"column":5}},"line":63},"3":{"name":"(anonymous_3)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":16},"end":{"line":72,"column":5}},"line":70},"4":{"name":"(anonymous_4)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":15},"end":{"line":90,"column":5}},"line":85},"5":{"name":"(anonymous_5)","decl":{"start":{"line":103,"column":4},"end":{"line":103,"column":5}},"loc":{"start":{"line":103,"column":14},"end":{"line":105,"column":5}},"line":103},"6":{"name":"(anonymous_6)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":13},"end":{"line":120,"column":5}},"line":118},"7":{"name":"(anonymous_7)","decl":{"start":{"line":163,"column":4},"end":{"line":163,"column":5}},"loc":{"start":{"line":163,"column":20},"end":{"line":174,"column":5}},"line":163},"8":{"name":"(anonymous_8)","decl":{"start":{"line":204,"column":4},"end":{"line":204,"column":5}},"loc":{"start":{"line":204,"column":42},"end":{"line":209,"column":5}},"line":204},"9":{"name":"(anonymous_9)","decl":{"start":{"line":231,"column":4},"end":{"line":231,"column":5}},"loc":{"start":{"line":231,"column":21},"end":{"line":234,"column":5}},"line":231},"10":{"name":"(anonymous_10)","decl":{"start":{"line":243,"column":4},"end":{"line":243,"column":5}},"loc":{"start":{"line":243,"column":20},"end":{"line":247,"column":5}},"line":243}},"branchMap":{"0":{"loc":{"start":{"line":164,"column":8},"end":{"line":173,"column":41}},"type":"if","locations":[{"start":{"line":164,"column":8},"end":{"line":173,"column":41}},{"start":{"line":164,"column":8},"end":{"line":173,"column":41}}],"line":164},"1":{"loc":{"start":{"line":164,"column":12},"end":{"line":165,"column":67}},"type":"binary-expr","locations":[{"start":{"line":164,"column":12},"end":{"line":164,"column":66}},{"start":{"line":165,"column":12},"end":{"line":165,"column":67}}],"line":164},"2":{"loc":{"start":{"line":167,"column":12},"end":{"line":170,"column":38}},"type":"if","locations":[{"start":{"line":167,"column":12},"end":{"line":170,"column":38}},{"start":{"line":167,"column":12},"end":{"line":170,"column":38}}],"line":167},"3":{"loc":{"start":{"line":204,"column":16},"end":{"line":204,"column":26}},"type":"default-arg","locations":[{"start":{"line":204,"column":22},"end":{"line":204,"column":26}}],"line":204},"4":{"loc":{"start":{"line":204,"column":28},"end":{"line":204,"column":40}},"type":"default-arg","locations":[{"start":{"line":204,"column":36},"end":{"line":204,"column":40}}],"line":204},"5":{"loc":{"start":{"line":205,"column":8},"end":{"line":208,"column":20}},"type":"if","locations":[{"start":{"line":205,"column":8},"end":{"line":208,"column":20}},{"start":{"line":205,"column":8},"end":{"line":208,"column":20}}],"line":205},"6":{"loc":{"start":{"line":205,"column":12},"end":{"line":205,"column":40}},"type":"binary-expr","locations":[{"start":{"line":205,"column":12},"end":{"line":205,"column":23}},{"start":{"line":205,"column":27},"end":{"line":205,"column":40}}],"line":205},"7":{"loc":{"start":{"line":244,"column":8},"end":{"line":245,"column":50}},"type":"if","locations":[{"start":{"line":244,"column":8},"end":{"line":245,"column":50}},{"start":{"line":244,"column":8},"end":{"line":245,"column":50}}],"line":244},"8":{"loc":{"start":{"line":244,"column":12},"end":{"line":244,"column":51}},"type":"binary-expr","locations":[{"start":{"line":244,"column":12},"end":{"line":244,"column":29}},{"start":{"line":244,"column":33},"end":{"line":244,"column":51}}],"line":244}},"s":{"0":1,"1":1,"2":1,"3":538,"4":538,"5":0,"6":287,"7":273,"8":32,"9":0,"10":0,"11":6,"12":0,"13":0,"14":0,"15":0,"16":6,"17":1,"18":23,"19":3,"20":20,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1},"f":{"0":538,"1":0,"2":287,"3":273,"4":32,"5":0,"6":0,"7":6,"8":23,"9":0,"10":0},"b":{"0":[0,6],"1":[6,0],"2":[0,0],"3":[20],"4":[20],"5":[3,20],"6":[23,3],"7":[0,0],"8":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/base/KoconutEntry.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/base/KoconutEntry.ts"],"names":[],"mappings":";;;AAAA,4CAWyB;AAEzB;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAa,KAAK;IAqBhB;;;;;OAKG;IACH,YAAoB,UAAmB,EAAU,YAAuB;QAApD,eAAU,GAAV,UAAU,CAAS;QAAU,iBAAY,GAAZ,YAAY,CAAW;IAAG,CAAC;IA1B5E;;;;;;;;;;;;;OAaG;IACH,MAAM,CAAC,IAAI,CACT,KAA2B;QAE3B,OAAO,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC;IAUD;;;OAGG;IACH,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;OAGG;IACH,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;;;;;;;;OAWG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,UAAU,EAAE,IAAI,CAAC,GAAG;YACpB,YAAY,EAAE,IAAI,CAAC,YAAY;SAChC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;OAWG;IACH,OAAO;QACL,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,MAAM;QACJ,OAAO,IAAI,aAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyCG;IACH,QAAQ,CAAC,KAAgC;QACvC,IACE,2BAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC;YAC7C,2BAAkB,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,EAC9C;YACA,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpD,IAAI,cAAc,YAAY,uBAAc;gBAC1C,OAAO,uBAAc,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC;;gBACpD,OAAO,cAAc,CAAC;SAC5B;;YAAM,OAAO,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC;IACtC,CAAC;CACF;AArJD,sBAqJC;AAED;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAa,YACX,SAAQ,yBAA2C;IAGnD;;;;;;OAMG;IACH,YAAY,MAAsB,IAAI,EAAE,QAA0B,IAAI;QACpE,IAAI,GAAG,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI;YAAE,KAAK,CAAC,IAAI,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;;YAC1D,KAAK,EAAE,CAAC;IACf,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,KAAK,CAAC,QAAQ;QACZ,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;OAOG;IACH,QAAQ,CAAC,KAAuC;QAC9C,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,IAAI;YACzC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAvDD,oCAuDC","sourcesContent":["import {\r\n  /* Base */\r\n  Pair,\r\n  KoconutBoolean,\r\n\r\n  /* Tool */\r\n  KoconutPrimitive,\r\n  KoconutTypeChecker,\r\n\r\n  /* Protocol */\r\n  KoconutEquatable,\r\n} from '../../../module';\r\n\r\n/**\r\n * Represents a key/value pair for {@link KoconutMap}.\r\n * The type of key basically could be any kind of class instance,\r\n * however it is recommended to be a number, string or custom class that inherits {@link KoconutEquatable}.\r\n * Otherwise, further equality check process in {@link KoconutSet} or {@link KoconutMap} will not work\r\n * as intented. This is beacuse even if there are two different instances of same class, which have\r\n * exactly identical properties, they are fundamentally indistinguishable from each other.\r\n * Please, check the {@link Entry.equalsTo example of 'equalsTo' method}\r\n *\r\n * @see\r\n * <pre>\r\n * -- Base --\r\n * {@link KoconutEntry}, {@link Pair}, {@link KoconutPair}\r\n *\r\n * -- Container --\r\n * {@link KoconutMap}\r\n *\r\n * -- Protocol --\r\n * {@link KoconutEquatable}\r\n * </pre>\r\n *\r\n * @param {KeyType} KeyType The type of the key value.\r\n *\r\n * @param {ValueType} ValueType The type of the value.\r\n *\r\n */\r\nexport class Entry<KeyType, ValueType> implements KoconutEquatable {\r\n  /**\r\n   * Create an {@link Entry} instance by iterable two values pair.\r\n   *\r\n   * @param {[KeyType, ValueType]} entry Entry pair of key/value as iterable.\r\n   *\r\n   * @return {Entry<KeyType, ValueType>}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const myEntry = Entry.from([\"Apex\", \"Captain\"])\r\n   * console.log(myEntry)\r\n   * // ↑ Entry { keyElement: 'Apex', valueElement: 'Captain' }\r\n   * ```\r\n   */\r\n  static from<KeyType, ValueType>(\r\n    entry: [KeyType, ValueType],\r\n  ): Entry<KeyType, ValueType> {\r\n    return new Entry(entry[0], entry[1]);\r\n  }\r\n\r\n  /**\r\n   * Constructor of {@link Entry}.\r\n   *\r\n   * @param {KeyType} keyElement KeyType element it'd better be distinguishable.\r\n   * @param {ValueType} valueElement  ValueType element.\r\n   */\r\n  constructor(private keyElement: KeyType, private valueElement: ValueType) {}\r\n\r\n  /**\r\n   * Returns the key of this key/value pair.\r\n   * @return {KeyType} The Key of this key/value pair.\r\n   */\r\n  get key(): KeyType {\r\n    return this.keyElement;\r\n  }\r\n\r\n  /**\r\n   * Returns the value of key/value pair.\r\n   * @return {ValueType} The value of this key/value pair.\r\n   */\r\n  get value(): ValueType {\r\n    return this.valueElement;\r\n  }\r\n\r\n  /**\r\n   * Turns this {@link Entry} into a simple JSON object string.\r\n   *\r\n   * @return {string}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const myEntry = Entry.from([\"Apex\", \"Captain\"])\r\n   * console.log(myEntry.toString()) // Or, you can use console.log(`${myEntry}`)\r\n   * // ↑ {\"keyElement\":'Apex',\"valueElement\":\"Captain\"}\r\n   * ```\r\n   */\r\n  toString(): string {\r\n    return JSON.stringify({\r\n      keyElement: this.key,\r\n      valueElement: this.valueElement,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Turns this {@link Entry} instance into a simple array.\r\n   *\r\n   * @return {[KeyType, ValueType]}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const myEntry = Entry.from([\"Apex\", \"Captain\"])\r\n   * console.log(myEntry.toArray())\r\n   * // ↑ [ 'Apex', 'Captain' ]\r\n   * ```\r\n   */\r\n  toArray(): [KeyType, ValueType] {\r\n    return [this.key, this.value];\r\n  }\r\n\r\n  /**\r\n   * Turns this {@link Entry} instance into a simple {@link Pair}\r\n   *\r\n   * @return {Pair<KeyType, ValueType>}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const myEntry = Entry.from([\"Apex\", \"Captain\"])\r\n   * console.log(myEntry.toPair())\r\n   * // ↑ Pair { firstElement: 'Apex', secondElement: 'Captain' }\r\n   * ```\r\n   */\r\n  toPair(): Pair<KeyType, ValueType> {\r\n    return new Pair(this.key, this.value);\r\n  }\r\n\r\n  /**\r\n   * Class {@link Entry} implements {@link KoconutEquatable}. The equality check process\r\n   * of this is done simply by using '==' operator when the KeyType is not {@link KoconutEquatable},\r\n   * otherwise, by using the method '{@link KoconutEquatable.equalsTo equalsTo}' to the the key element.\r\n   * Please, have a check following example.\r\n   *\r\n   * @param {Entry<KeyType, ValueType>} other Other {@link Entry} instance to check equality.\r\n   *\r\n   * @return {boolean | KoconutBoolean}\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   *   class MyKey {\r\n   *       private keyString : string\r\n   *       constructor(keyString : string) {\r\n   *           this.keyString = keyString\r\n   *       }\r\n   *   }\r\n   *\r\n   *   class MyEquatableKey implements KoconutEquatable {\r\n   *\r\n   *       private keyString : string\r\n   *       constructor(keyString : string) {\r\n   *           this.keyString = keyString\r\n   *       }\r\n   *       equalsTo(other : MyEquatableKey) {\r\n   *           return this.keyString == other.keyString\r\n   *       }\r\n   *\r\n   *   }\r\n   *\r\n   *   const myKeyEntry = Entry.from([new MyKey(\"myKeyString\"), 0])\r\n   *   const myKeyEntry2 = Entry.from([new MyKey(\"myKeyString\"), 0])\r\n   *   console.log(`${myKeyEntry.equalsTo(myKeyEntry2)}`)\r\n   *   // ↑ false\r\n   *\r\n   *   const myEquatableKeyEntry = Entry.from([new MyEquatableKey(\"myEquatableKeyString\"), 0])\r\n   *   const myEquatableKeyEntry2 = Entry.from([new MyEquatableKey(\"myEquatableKeyString\"), 0])\r\n   *   console.log(`${myEquatableKeyEntry.equalsTo(myEquatableKeyEntry2)}`)\r\n   *   // ↑ true\r\n   * ```\r\n   */\r\n  equalsTo(other: Entry<KeyType, ValueType>): boolean | KoconutBoolean {\r\n    if (\r\n      KoconutTypeChecker.checkIsEquatable(this.key) &&\r\n      KoconutTypeChecker.checkIsEquatable(other.key)\r\n    ) {\r\n      const equalityResult = this.key.equalsTo(other.key);\r\n      if (equalityResult instanceof KoconutBoolean)\r\n        return KoconutBoolean['fromPrimitive'](equalityResult);\r\n      else return equalityResult;\r\n    } else return this.key == other.key;\r\n  }\r\n}\r\n\r\n/**\r\n * Koconut Wrapper class for {@link Entry}.\r\n *\r\n * @see\r\n * <pre>\r\n * -- Base --\r\n * {@link Entry}, {@link Pair}, {@link KoconutPair}\r\n *\r\n * -- Container --\r\n * {@link KoconutMap}\r\n *\r\n * -- Protocol --\r\n * {@link KoconutEquatable}\r\n * </pre>\r\n *\r\n * @param {KeyType} KeyType Check for {@link Entry}.\r\n * @param {ValueType} ValueType Check for {@link Entry}.\r\n *\r\n */\r\nexport class KoconutEntry<KeyType, ValueType>\r\n  extends KoconutPrimitive<Entry<KeyType, ValueType>>\r\n  implements KoconutEquatable\r\n{\r\n  /**\r\n   * Constructor of {@link KoconutEntry}.\r\n   *\r\n   * @param {KeyType | null} key KeyType element of inner {@link Entry} instance, it'd better be distinguishable.\r\n   *\r\n   * @param {ValueType | null} value ValueType element of inner {@link Entry}.\r\n   */\r\n  constructor(key: KeyType | null = null, value: ValueType | null = null) {\r\n    if (key != null && value != null) super(new Entry(key, value));\r\n    else super();\r\n  }\r\n\r\n  /**\r\n   * Processes all the chained object and returns original {@link KoconutEntry} instance.\r\n   *\r\n   * @return {Promise<KoconutEntry<KeyType, ValueType>>}\r\n   *\r\n   * @category Processor\r\n   *\r\n   * @since 1.0.15\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutEntry = await new KoconutEntry(0, 1)\r\n   *                                     .retrieve()\r\n   *\r\n   * console.log(koconutEntry)\r\n   * // ↑ KoconutEntry {\r\n   * //   isValidated: true,\r\n   * //   data: Entry { keyElement: 0, valueElement: 1 }\r\n   * // }\r\n   * ```\r\n   */\r\n  async retrieve(): Promise<KoconutEntry<KeyType, ValueType>> {\r\n    await super.retrieve();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Class {@link KoconutEntry} implements {@link KoconutEquatable}. The equality check process\r\n   * is done by using '{@link Entry.equalsTo equalsTo method of Entry}'.\r\n   *\r\n   * @param {KoconutEntry<KeyType, ValueType>} other Other {@link KoconutEntry} instance to check equality.\r\n   *\r\n   * @return {KoconutBoolean}\r\n   */\r\n  equalsTo(other: KoconutEntry<KeyType, ValueType>): boolean | KoconutBoolean {\r\n    if (this.data != null && other.data != null)\r\n      return this.data.equalsTo(other.data);\r\n    return false;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9a0d1f4dadc8665891e148e4108580a6e6418063","contentHash":"5414205de3742f09fca869f1ff7e178de0f6b7a3778fe3e929177060c98567e0"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\enum\\KoconutLocale.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\enum\\KoconutLocale.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":13}},"3":{"start":{"line":7,"column":0},"end":{"line":29,"column":74}},"4":{"start":{"line":9,"column":4},"end":{"line":9,"column":31}},"5":{"start":{"line":10,"column":4},"end":{"line":10,"column":37}},"6":{"start":{"line":11,"column":4},"end":{"line":11,"column":37}},"7":{"start":{"line":12,"column":4},"end":{"line":12,"column":37}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":37}},"9":{"start":{"line":14,"column":4},"end":{"line":14,"column":37}},"10":{"start":{"line":15,"column":4},"end":{"line":15,"column":37}},"11":{"start":{"line":16,"column":4},"end":{"line":16,"column":37}},"12":{"start":{"line":17,"column":4},"end":{"line":17,"column":37}},"13":{"start":{"line":18,"column":4},"end":{"line":18,"column":37}},"14":{"start":{"line":19,"column":4},"end":{"line":19,"column":37}},"15":{"start":{"line":20,"column":4},"end":{"line":20,"column":37}},"16":{"start":{"line":21,"column":4},"end":{"line":21,"column":37}},"17":{"start":{"line":22,"column":4},"end":{"line":22,"column":37}},"18":{"start":{"line":24,"column":4},"end":{"line":24,"column":31}},"19":{"start":{"line":25,"column":4},"end":{"line":25,"column":37}},"20":{"start":{"line":27,"column":4},"end":{"line":27,"column":31}},"21":{"start":{"line":28,"column":4},"end":{"line":28,"column":37}},"22":{"start":{"line":30,"column":20},"end":{"line":30,"column":48}},"23":{"start":{"line":31,"column":29},"end":{"line":31,"column":93}},"24":{"start":{"line":31,"column":59},"end":{"line":31,"column":92}},"25":{"start":{"line":32,"column":0},"end":{"line":39,"column":74}},"26":{"start":{"line":34,"column":8},"end":{"line":36,"column":34}},"27":{"start":{"line":38,"column":4},"end":{"line":38,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":1},"end":{"line":7,"column":2}},"loc":{"start":{"line":7,"column":26},"end":{"line":29,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":45},"end":{"line":31,"column":46}},"loc":{"start":{"line":31,"column":59},"end":{"line":31,"column":92}},"line":31},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":1},"end":{"line":32,"column":2}},"loc":{"start":{"line":32,"column":26},"end":{"line":39,"column":1}},"line":32},"3":{"name":"fromString","decl":{"start":{"line":33,"column":13},"end":{"line":33,"column":23}},"loc":{"start":{"line":33,"column":38},"end":{"line":37,"column":5}},"line":33}},"branchMap":{"0":{"loc":{"start":{"line":29,"column":19},"end":{"line":29,"column":72}},"type":"binary-expr","locations":[{"start":{"line":29,"column":19},"end":{"line":29,"column":40}},{"start":{"line":29,"column":45},"end":{"line":29,"column":71}}],"line":29},"1":{"loc":{"start":{"line":34,"column":15},"end":{"line":36,"column":33}},"type":"cond-expr","locations":[{"start":{"line":35,"column":14},"end":{"line":35,"column":83}},{"start":{"line":36,"column":14},"end":{"line":36,"column":33}}],"line":34},"2":{"loc":{"start":{"line":39,"column":19},"end":{"line":39,"column":72}},"type":"binary-expr","locations":[{"start":{"line":39,"column":19},"end":{"line":39,"column":40}},{"start":{"line":39,"column":45},"end":{"line":39,"column":71}}],"line":39}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":18,"25":1,"26":1,"27":1},"f":{"0":1,"1":18,"2":1,"3":1},"b":{"0":[1,1],"1":[1,0],"2":[1,0]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/enum/KoconutLocale.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/enum/KoconutLocale.ts"],"names":[],"mappings":";;;AAAA,YAAY,CAAC;AACb,oDAAoD;AACpD,IAAY,aAwBX;AAxBD,WAAY,aAAa;IACvB,UAAU;IACV,0BAAS,CAAA;IACT,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IACf,gCAAe,CAAA;IAEf,WAAW;IACX,0BAAS,CAAA;IACT,gCAAe,CAAA;IAEf,SAAS;IACT,0BAAS,CAAA;IACT,gCAAe,CAAA;AACjB,CAAC,EAxBW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAwBxB;AACD,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AACjD,MAAM,oBAAoB,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CACxD,QAAQ,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAClC,CAAC;AACF,WAAiB,aAAa;IAC5B,SAAgB,UAAU,CAAC,YAAoB;QAC7C,OAAO,oBAAoB,CAAC,QAAQ,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;YAC9D,CAAC,CAAE,WAAW,CACV,oBAAoB,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,CACvC;YACrB,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC;IAC1B,CAAC;IANe,wBAAU,aAMzB,CAAA;AACH,CAAC,EARgB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAQ7B","sourcesContent":["`use strict`;\r\n// http://www.lingoes.net/en/translator/langcode.htm\r\nexport enum KoconutLocale {\r\n  // English\r\n  en = 'en', // English\r\n  en_AU = 'en-AU', // Australia\r\n  en_BZ = 'en-BZ', // Belize\r\n  en_CA = 'en-CA', // Canada\r\n  en_CB = 'en-CB', // Caribbean\r\n  en_GB = 'en-GB', // United Kingdom\r\n  en_IE = 'en-IE', // Ireland\r\n  en_JM = 'en-JM', // Jamaica\r\n  en_NZ = 'en-NZ', // New Zealand\r\n  en_PH = 'en-PH', // Republic of the Philippines\r\n  en_TT = 'en-TT', // Trinidad and Tobago\r\n  en_US = 'en-US', // United States\r\n  en_ZA = 'en-ZA', // South Africa\r\n  en_ZW = 'en-ZW', // Zimbabwe\r\n\r\n  // Japanese\r\n  ja = 'ja', // Japanese,\r\n  ja_JP = 'ja-JP', // Japan\r\n\r\n  // Korean\r\n  ko = 'ko', // Korean\r\n  ko_KR = 'ko-KR', // Korea\r\n}\r\nconst localeNames = Object.values(KoconutLocale);\r\nconst upperCaseLocaleNames = localeNames.map((eachName) =>\r\n  eachName.toString().toUpperCase(),\r\n);\r\nexport namespace KoconutLocale {\r\n  export function fromString(localeString: string): KoconutLocale {\r\n    return upperCaseLocaleNames.includes(localeString.toUpperCase())\r\n      ? (localeNames[\r\n          upperCaseLocaleNames.indexOf(localeString.toUpperCase())\r\n        ] as KoconutLocale)\r\n      : KoconutLocale.en_US;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6430964e663a394bb7f10b403e9319f08f0d05aa","contentHash":"494510160fd0889e04f98b0b9fefb7ebcca132a41fcbdf34b1ea7a6f3c6cefea"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\enum\\KoconutLoopSignal.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\enum\\KoconutLoopSignal.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":13}},"3":{"start":{"line":7,"column":0},"end":{"line":10,"column":86}},"4":{"start":{"line":8,"column":4},"end":{"line":8,"column":70}},"5":{"start":{"line":9,"column":4},"end":{"line":9,"column":64}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":1},"end":{"line":7,"column":2}},"loc":{"start":{"line":7,"column":30},"end":{"line":10,"column":1}},"line":7}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":23},"end":{"line":10,"column":84}},"type":"binary-expr","locations":[{"start":{"line":10,"column":23},"end":{"line":10,"column":48}},{"start":{"line":10,"column":53},"end":{"line":10,"column":83}}],"line":10}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/enum/KoconutLoopSignal.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/enum/KoconutLoopSignal.ts"],"names":[],"mappings":";;;AAAA,mCAAmC;AACnC,YAAY,CAAC;AAEb,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IAC3B,iEAAQ,CAAA;IACR,2DAAK,CAAA;AACP,CAAC,EAHW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAG5B","sourcesContent":["/* eslint-disable no-unused-vars */\r\n`use strict`;\r\n\r\nexport enum KoconutLoopSignal {\r\n  CONTINUE,\r\n  BREAK,\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4b7c1441c13a7e08f8e44d1d8bf842a6761365bb","contentHash":"18017b6f1ab07c3afb3f897c291e1d962d83ea2200c212678842d002398f52fd"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\exception\\KoconutExceptions.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\exception\\KoconutExceptions.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":167}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":13}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":23}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":71}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":56}},"6":{"start":{"line":14,"column":0},"end":{"line":14,"column":74}},"7":{"start":{"line":17,"column":0},"end":{"line":17,"column":76}},"8":{"start":{"line":20,"column":0},"end":{"line":20,"column":70}},"9":{"start":{"line":23,"column":0},"end":{"line":23,"column":60}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":25},"end":{"line":10,"column":5}},"line":6}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":35,"4":35,"5":35,"6":1,"7":1,"8":1,"9":1},"f":{"0":35},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/exception/KoconutExceptions.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/exception/KoconutExceptions.ts"],"names":[],"mappings":";;;AAAA,YAAY,CAAC;AAEb,MAAM,YAAa,SAAQ,KAAK;IAC9B,YAAY,OAAe;QACzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC/D,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;CACF;AAED,MAAa,+BAAgC,SAAQ,YAAY;CAAG;AAApE,0EAAoE;AAEpE,MAAa,gCAAiC,SAAQ,YAAY;CAAG;AAArE,4EAAqE;AAErE,MAAa,6BAA8B,SAAQ,YAAY;CAAG;AAAlE,sEAAkE;AAElE,MAAa,wBAAyB,SAAQ,YAAY;CAAG;AAA7D,4DAA6D","sourcesContent":["`use strict`;\r\n\r\nclass KoconutError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = this.constructor.name.split(/(?=[A-Z])/).join(' ');\r\n    Error.captureStackTrace(this, this.constructor);\r\n  }\r\n}\r\n\r\nexport class KoconutInvalidArgumentException extends KoconutError {}\r\n\r\nexport class KoconutIndexOutOfBoundsException extends KoconutError {}\r\n\r\nexport class KoconutNoSuchElementException extends KoconutError {}\r\n\r\nexport class KoconutConflictException extends KoconutError {}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c289e352254703702f9575b23479c263641b7c0e","contentHash":"eff7fdec004035e064bc96bd6c8833f6d19f2f98e36fd03f8c24887eabd23479"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\protocol\\KoconutComparable.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\protocol\\KoconutComparable.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/protocol/KoconutComparable.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/protocol/KoconutComparable.ts"],"names":[],"mappings":"","sourcesContent":["import { KoconutPrimitive } from '../../module';\r\n/**\r\n * Classes which inherit from this protocol have a defined total ordering between their instances\r\n */\r\nexport interface KoconutComparable {\r\n  /**\r\n   * Compares this instance with the target object.\r\n   * Result can be either simple number or {@link KoconutPrimitive} instance wrapping number value.\r\n   * <pre>\r\n   * Returns zero            -- This object equals to other.\r\n   * Returns negative number -- This object is less than other.\r\n   * Returns positive number -- This object is grater than other.\r\n   * </pre>\r\n   *\r\n   * @param other Target instance to compare.\r\n   */\r\n  compareTo(other: any): number | KoconutPrimitive<number>;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a7c78f6e6403349a6e41d1338d6762f3b8d13640","contentHash":"0d2ba659f97217ab86fe2de6b9891713149b23a79c6130edda047a4ae594189d"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\protocol\\KoconutEquatable.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\protocol\\KoconutEquatable.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/protocol/KoconutEquatable.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/protocol/KoconutEquatable.ts"],"names":[],"mappings":"","sourcesContent":["import { KoconutBoolean } from '../../module';\r\n/**\r\n * Classes which inherit from this protocol is able to check equality with other instances of them.\r\n */\r\nexport interface KoconutEquatable {\r\n  /**\r\n   * Check whether this instance equals to target object\r\n   * Result can be either simple boolean or {@link KoconutPrimitive} instance wrapping boolean value.\r\n   * @param other Target instance to check equality.\r\n   */\r\n  equalsTo(other: any): boolean | KoconutBoolean;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0e70b5882da3a62218d16ea9c5403d08f6fc6ced","contentHash":"b5e823a0f6a1ceac7a8550a2683b34025f7b649099e81bffafe793d767264f70"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\protocol\\KoconutYieldable.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\protocol\\KoconutYieldable.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/protocol/KoconutYieldable.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/protocol/KoconutYieldable.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC","sourcesContent":["'use strict';\n\nexport interface KoconutYieldable<DataType> {\n  yield(): Promise<DataType | null>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9029607e6823bb791d9d0e698cb1e0569ebc0c82","contentHash":"465208a9361b30831a4981be444a805e03df0187e5986a9e102f1dbed98b1a20"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\KoconutIterable.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\KoconutIterable.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":40}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":28}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":40}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":23}},"6":{"start":{"line":94,"column":8},"end":{"line":95,"column":36}},"7":{"start":{"line":95,"column":12},"end":{"line":95,"column":36}},"8":{"start":{"line":96,"column":32},"end":{"line":96,"column":63}},"9":{"start":{"line":97,"column":8},"end":{"line":110,"column":11}},"10":{"start":{"line":100,"column":12},"end":{"line":101,"column":25}},"11":{"start":{"line":101,"column":16},"end":{"line":101,"column":25}},"12":{"start":{"line":102,"column":24},"end":{"line":102,"column":25}},"13":{"start":{"line":103,"column":12},"end":{"line":108,"column":13}},"14":{"start":{"line":104,"column":16},"end":{"line":107,"column":28}},"15":{"start":{"line":105,"column":20},"end":{"line":105,"column":28}},"16":{"start":{"line":106,"column":21},"end":{"line":107,"column":28}},"17":{"start":{"line":107,"column":20},"end":{"line":107,"column":28}},"18":{"start":{"line":109,"column":12},"end":{"line":109,"column":25}},"19":{"start":{"line":111,"column":8},"end":{"line":111,"column":31}},"20":{"start":{"line":190,"column":8},"end":{"line":190,"column":86}},"21":{"start":{"line":191,"column":8},"end":{"line":191,"column":42}},"22":{"start":{"line":192,"column":32},"end":{"line":192,"column":63}},"23":{"start":{"line":193,"column":8},"end":{"line":225,"column":11}},"24":{"start":{"line":196,"column":12},"end":{"line":197,"column":88}},"25":{"start":{"line":197,"column":16},"end":{"line":197,"column":88}},"26":{"start":{"line":198,"column":31},"end":{"line":198,"column":35}},"27":{"start":{"line":199,"column":38},"end":{"line":199,"column":42}},"28":{"start":{"line":200,"column":12},"end":{"line":221,"column":13}},"29":{"start":{"line":201,"column":44},"end":{"line":201,"column":77}},"30":{"start":{"line":202,"column":38},"end":{"line":202,"column":65}},"31":{"start":{"line":203,"column":16},"end":{"line":216,"column":17}},"32":{"start":{"line":204,"column":20},"end":{"line":215,"column":84}},"33":{"start":{"line":205,"column":50},"end":{"line":205,"column":100}},"34":{"start":{"line":206,"column":43},"end":{"line":206,"column":44}},"35":{"start":{"line":207,"column":24},"end":{"line":210,"column":61}},"36":{"start":{"line":208,"column":28},"end":{"line":208,"column":75}},"37":{"start":{"line":210,"column":28},"end":{"line":210,"column":61}},"38":{"start":{"line":211,"column":24},"end":{"line":212,"column":51}},"39":{"start":{"line":212,"column":28},"end":{"line":212,"column":51}},"40":{"start":{"line":215,"column":24},"end":{"line":215,"column":84}},"41":{"start":{"line":217,"column":16},"end":{"line":220,"column":17}},"42":{"start":{"line":218,"column":20},"end":{"line":218,"column":53}},"43":{"start":{"line":219,"column":20},"end":{"line":219,"column":62}},"44":{"start":{"line":222,"column":12},"end":{"line":223,"column":89}},"45":{"start":{"line":223,"column":16},"end":{"line":223,"column":89}},"46":{"start":{"line":224,"column":12},"end":{"line":224,"column":32}},"47":{"start":{"line":226,"column":8},"end":{"line":226,"column":31}},"48":{"start":{"line":298,"column":8},"end":{"line":298,"column":42}},"49":{"start":{"line":299,"column":32},"end":{"line":299,"column":63}},"50":{"start":{"line":300,"column":8},"end":{"line":330,"column":11}},"51":{"start":{"line":303,"column":12},"end":{"line":304,"column":28}},"52":{"start":{"line":304,"column":16},"end":{"line":304,"column":28}},"53":{"start":{"line":305,"column":31},"end":{"line":305,"column":35}},"54":{"start":{"line":306,"column":38},"end":{"line":306,"column":42}},"55":{"start":{"line":307,"column":12},"end":{"line":328,"column":13}},"56":{"start":{"line":308,"column":44},"end":{"line":308,"column":77}},"57":{"start":{"line":309,"column":38},"end":{"line":309,"column":65}},"58":{"start":{"line":310,"column":16},"end":{"line":323,"column":17}},"59":{"start":{"line":311,"column":20},"end":{"line":322,"column":84}},"60":{"start":{"line":312,"column":50},"end":{"line":312,"column":100}},"61":{"start":{"line":313,"column":43},"end":{"line":313,"column":44}},"62":{"start":{"line":314,"column":24},"end":{"line":317,"column":61}},"63":{"start":{"line":315,"column":28},"end":{"line":315,"column":75}},"64":{"start":{"line":317,"column":28},"end":{"line":317,"column":61}},"65":{"start":{"line":318,"column":24},"end":{"line":319,"column":51}},"66":{"start":{"line":319,"column":28},"end":{"line":319,"column":51}},"67":{"start":{"line":322,"column":24},"end":{"line":322,"column":84}},"68":{"start":{"line":324,"column":16},"end":{"line":327,"column":17}},"69":{"start":{"line":325,"column":20},"end":{"line":325,"column":53}},"70":{"start":{"line":326,"column":20},"end":{"line":326,"column":62}},"71":{"start":{"line":329,"column":12},"end":{"line":329,"column":32}},"72":{"start":{"line":331,"column":8},"end":{"line":331,"column":31}},"73":{"start":{"line":334,"column":8},"end":{"line":334,"column":42}},"74":{"start":{"line":335,"column":32},"end":{"line":335,"column":63}},"75":{"start":{"line":336,"column":8},"end":{"line":366,"column":11}},"76":{"start":{"line":339,"column":12},"end":{"line":340,"column":88}},"77":{"start":{"line":340,"column":16},"end":{"line":340,"column":88}},"78":{"start":{"line":341,"column":46},"end":{"line":341,"column":50}},"79":{"start":{"line":342,"column":12},"end":{"line":362,"column":13}},"80":{"start":{"line":343,"column":44},"end":{"line":343,"column":77}},"81":{"start":{"line":344,"column":38},"end":{"line":344,"column":73}},"82":{"start":{"line":345,"column":16},"end":{"line":359,"column":17}},"83":{"start":{"line":346,"column":20},"end":{"line":358,"column":78}},"84":{"start":{"line":347,"column":50},"end":{"line":347,"column":108}},"85":{"start":{"line":348,"column":43},"end":{"line":348,"column":44}},"86":{"start":{"line":349,"column":24},"end":{"line":352,"column":61}},"87":{"start":{"line":350,"column":28},"end":{"line":350,"column":75}},"88":{"start":{"line":352,"column":28},"end":{"line":352,"column":61}},"89":{"start":{"line":353,"column":24},"end":{"line":354,"column":51}},"90":{"start":{"line":354,"column":28},"end":{"line":354,"column":51}},"91":{"start":{"line":357,"column":24},"end":{"line":358,"column":78}},"92":{"start":{"line":360,"column":16},"end":{"line":361,"column":70}},"93":{"start":{"line":361,"column":20},"end":{"line":361,"column":70}},"94":{"start":{"line":363,"column":12},"end":{"line":364,"column":89}},"95":{"start":{"line":364,"column":16},"end":{"line":364,"column":89}},"96":{"start":{"line":365,"column":12},"end":{"line":365,"column":47}},"97":{"start":{"line":367,"column":8},"end":{"line":367,"column":31}},"98":{"start":{"line":370,"column":8},"end":{"line":370,"column":42}},"99":{"start":{"line":371,"column":32},"end":{"line":371,"column":63}},"100":{"start":{"line":372,"column":8},"end":{"line":400,"column":11}},"101":{"start":{"line":375,"column":12},"end":{"line":376,"column":28}},"102":{"start":{"line":376,"column":16},"end":{"line":376,"column":28}},"103":{"start":{"line":377,"column":46},"end":{"line":377,"column":50}},"104":{"start":{"line":378,"column":12},"end":{"line":398,"column":13}},"105":{"start":{"line":379,"column":44},"end":{"line":379,"column":77}},"106":{"start":{"line":380,"column":38},"end":{"line":380,"column":73}},"107":{"start":{"line":381,"column":16},"end":{"line":395,"column":17}},"108":{"start":{"line":382,"column":20},"end":{"line":394,"column":78}},"109":{"start":{"line":383,"column":50},"end":{"line":383,"column":108}},"110":{"start":{"line":384,"column":43},"end":{"line":384,"column":44}},"111":{"start":{"line":385,"column":24},"end":{"line":388,"column":61}},"112":{"start":{"line":386,"column":28},"end":{"line":386,"column":75}},"113":{"start":{"line":388,"column":28},"end":{"line":388,"column":61}},"114":{"start":{"line":389,"column":24},"end":{"line":390,"column":51}},"115":{"start":{"line":390,"column":28},"end":{"line":390,"column":51}},"116":{"start":{"line":393,"column":24},"end":{"line":394,"column":78}},"117":{"start":{"line":396,"column":16},"end":{"line":397,"column":70}},"118":{"start":{"line":397,"column":20},"end":{"line":397,"column":70}},"119":{"start":{"line":399,"column":12},"end":{"line":399,"column":47}},"120":{"start":{"line":401,"column":8},"end":{"line":401,"column":31}},"121":{"start":{"line":506,"column":8},"end":{"line":506,"column":50}},"122":{"start":{"line":507,"column":8},"end":{"line":507,"column":56}},"123":{"start":{"line":508,"column":32},"end":{"line":508,"column":63}},"124":{"start":{"line":509,"column":8},"end":{"line":524,"column":11}},"125":{"start":{"line":512,"column":12},"end":{"line":513,"column":88}},"126":{"start":{"line":513,"column":16},"end":{"line":513,"column":88}},"127":{"start":{"line":514,"column":46},"end":{"line":514,"column":50}},"128":{"start":{"line":515,"column":12},"end":{"line":520,"column":13}},"129":{"start":{"line":516,"column":44},"end":{"line":516,"column":77}},"130":{"start":{"line":517,"column":16},"end":{"line":519,"column":70}},"131":{"start":{"line":519,"column":20},"end":{"line":519,"column":70}},"132":{"start":{"line":521,"column":12},"end":{"line":522,"column":89}},"133":{"start":{"line":522,"column":16},"end":{"line":522,"column":89}},"134":{"start":{"line":523,"column":12},"end":{"line":523,"column":47}},"135":{"start":{"line":525,"column":8},"end":{"line":525,"column":31}},"136":{"start":{"line":623,"column":8},"end":{"line":623,"column":50}},"137":{"start":{"line":624,"column":8},"end":{"line":624,"column":56}},"138":{"start":{"line":625,"column":32},"end":{"line":625,"column":63}},"139":{"start":{"line":626,"column":8},"end":{"line":639,"column":11}},"140":{"start":{"line":629,"column":12},"end":{"line":630,"column":28}},"141":{"start":{"line":630,"column":16},"end":{"line":630,"column":28}},"142":{"start":{"line":631,"column":46},"end":{"line":631,"column":50}},"143":{"start":{"line":632,"column":12},"end":{"line":637,"column":13}},"144":{"start":{"line":633,"column":44},"end":{"line":633,"column":77}},"145":{"start":{"line":634,"column":16},"end":{"line":636,"column":70}},"146":{"start":{"line":636,"column":20},"end":{"line":636,"column":70}},"147":{"start":{"line":638,"column":12},"end":{"line":638,"column":47}},"148":{"start":{"line":640,"column":8},"end":{"line":640,"column":31}},"149":{"start":{"line":720,"column":8},"end":{"line":720,"column":46}},"150":{"start":{"line":721,"column":32},"end":{"line":721,"column":63}},"151":{"start":{"line":722,"column":8},"end":{"line":736,"column":11}},"152":{"start":{"line":725,"column":12},"end":{"line":726,"column":88}},"153":{"start":{"line":726,"column":16},"end":{"line":726,"column":88}},"154":{"start":{"line":727,"column":31},"end":{"line":727,"column":35}},"155":{"start":{"line":728,"column":12},"end":{"line":732,"column":13}},"156":{"start":{"line":729,"column":16},"end":{"line":731,"column":53}},"157":{"start":{"line":731,"column":20},"end":{"line":731,"column":53}},"158":{"start":{"line":733,"column":12},"end":{"line":734,"column":89}},"159":{"start":{"line":734,"column":16},"end":{"line":734,"column":89}},"160":{"start":{"line":735,"column":12},"end":{"line":735,"column":32}},"161":{"start":{"line":737,"column":8},"end":{"line":737,"column":31}},"162":{"start":{"line":810,"column":8},"end":{"line":810,"column":46}},"163":{"start":{"line":811,"column":32},"end":{"line":811,"column":63}},"164":{"start":{"line":812,"column":8},"end":{"line":824,"column":11}},"165":{"start":{"line":815,"column":12},"end":{"line":816,"column":28}},"166":{"start":{"line":816,"column":16},"end":{"line":816,"column":28}},"167":{"start":{"line":817,"column":31},"end":{"line":817,"column":35}},"168":{"start":{"line":818,"column":12},"end":{"line":822,"column":13}},"169":{"start":{"line":819,"column":16},"end":{"line":821,"column":53}},"170":{"start":{"line":821,"column":20},"end":{"line":821,"column":53}},"171":{"start":{"line":823,"column":12},"end":{"line":823,"column":32}},"172":{"start":{"line":825,"column":8},"end":{"line":825,"column":31}},"173":{"start":{"line":906,"column":8},"end":{"line":906,"column":86}},"174":{"start":{"line":907,"column":8},"end":{"line":907,"column":42}},"175":{"start":{"line":908,"column":32},"end":{"line":908,"column":63}},"176":{"start":{"line":909,"column":8},"end":{"line":941,"column":11}},"177":{"start":{"line":912,"column":12},"end":{"line":913,"column":88}},"178":{"start":{"line":913,"column":16},"end":{"line":913,"column":88}},"179":{"start":{"line":914,"column":31},"end":{"line":914,"column":35}},"180":{"start":{"line":915,"column":38},"end":{"line":915,"column":42}},"181":{"start":{"line":916,"column":12},"end":{"line":937,"column":13}},"182":{"start":{"line":917,"column":44},"end":{"line":917,"column":77}},"183":{"start":{"line":918,"column":38},"end":{"line":918,"column":65}},"184":{"start":{"line":919,"column":16},"end":{"line":932,"column":17}},"185":{"start":{"line":920,"column":20},"end":{"line":931,"column":84}},"186":{"start":{"line":921,"column":50},"end":{"line":921,"column":100}},"187":{"start":{"line":922,"column":43},"end":{"line":922,"column":44}},"188":{"start":{"line":923,"column":24},"end":{"line":926,"column":61}},"189":{"start":{"line":924,"column":28},"end":{"line":924,"column":75}},"190":{"start":{"line":926,"column":28},"end":{"line":926,"column":61}},"191":{"start":{"line":927,"column":24},"end":{"line":928,"column":51}},"192":{"start":{"line":928,"column":28},"end":{"line":928,"column":51}},"193":{"start":{"line":931,"column":24},"end":{"line":931,"column":84}},"194":{"start":{"line":933,"column":16},"end":{"line":936,"column":17}},"195":{"start":{"line":934,"column":20},"end":{"line":934,"column":53}},"196":{"start":{"line":935,"column":20},"end":{"line":935,"column":62}},"197":{"start":{"line":938,"column":12},"end":{"line":939,"column":89}},"198":{"start":{"line":939,"column":16},"end":{"line":939,"column":89}},"199":{"start":{"line":940,"column":12},"end":{"line":940,"column":32}},"200":{"start":{"line":942,"column":8},"end":{"line":942,"column":31}},"201":{"start":{"line":1013,"column":8},"end":{"line":1013,"column":42}},"202":{"start":{"line":1014,"column":32},"end":{"line":1014,"column":63}},"203":{"start":{"line":1015,"column":8},"end":{"line":1045,"column":11}},"204":{"start":{"line":1018,"column":12},"end":{"line":1019,"column":28}},"205":{"start":{"line":1019,"column":16},"end":{"line":1019,"column":28}},"206":{"start":{"line":1020,"column":31},"end":{"line":1020,"column":35}},"207":{"start":{"line":1021,"column":38},"end":{"line":1021,"column":42}},"208":{"start":{"line":1022,"column":12},"end":{"line":1043,"column":13}},"209":{"start":{"line":1023,"column":44},"end":{"line":1023,"column":77}},"210":{"start":{"line":1024,"column":38},"end":{"line":1024,"column":65}},"211":{"start":{"line":1025,"column":16},"end":{"line":1038,"column":17}},"212":{"start":{"line":1026,"column":20},"end":{"line":1037,"column":84}},"213":{"start":{"line":1027,"column":50},"end":{"line":1027,"column":100}},"214":{"start":{"line":1028,"column":43},"end":{"line":1028,"column":44}},"215":{"start":{"line":1029,"column":24},"end":{"line":1032,"column":61}},"216":{"start":{"line":1030,"column":28},"end":{"line":1030,"column":75}},"217":{"start":{"line":1032,"column":28},"end":{"line":1032,"column":61}},"218":{"start":{"line":1033,"column":24},"end":{"line":1034,"column":51}},"219":{"start":{"line":1034,"column":28},"end":{"line":1034,"column":51}},"220":{"start":{"line":1037,"column":24},"end":{"line":1037,"column":84}},"221":{"start":{"line":1039,"column":16},"end":{"line":1042,"column":17}},"222":{"start":{"line":1040,"column":20},"end":{"line":1040,"column":53}},"223":{"start":{"line":1041,"column":20},"end":{"line":1041,"column":62}},"224":{"start":{"line":1044,"column":12},"end":{"line":1044,"column":32}},"225":{"start":{"line":1046,"column":8},"end":{"line":1046,"column":31}},"226":{"start":{"line":1049,"column":8},"end":{"line":1049,"column":42}},"227":{"start":{"line":1050,"column":32},"end":{"line":1050,"column":63}},"228":{"start":{"line":1051,"column":8},"end":{"line":1081,"column":11}},"229":{"start":{"line":1054,"column":12},"end":{"line":1055,"column":88}},"230":{"start":{"line":1055,"column":16},"end":{"line":1055,"column":88}},"231":{"start":{"line":1056,"column":46},"end":{"line":1056,"column":50}},"232":{"start":{"line":1057,"column":12},"end":{"line":1077,"column":13}},"233":{"start":{"line":1058,"column":44},"end":{"line":1058,"column":77}},"234":{"start":{"line":1059,"column":38},"end":{"line":1059,"column":73}},"235":{"start":{"line":1060,"column":16},"end":{"line":1074,"column":17}},"236":{"start":{"line":1061,"column":20},"end":{"line":1073,"column":78}},"237":{"start":{"line":1062,"column":50},"end":{"line":1062,"column":108}},"238":{"start":{"line":1063,"column":43},"end":{"line":1063,"column":44}},"239":{"start":{"line":1064,"column":24},"end":{"line":1067,"column":61}},"240":{"start":{"line":1065,"column":28},"end":{"line":1065,"column":75}},"241":{"start":{"line":1067,"column":28},"end":{"line":1067,"column":61}},"242":{"start":{"line":1068,"column":24},"end":{"line":1069,"column":51}},"243":{"start":{"line":1069,"column":28},"end":{"line":1069,"column":51}},"244":{"start":{"line":1072,"column":24},"end":{"line":1073,"column":78}},"245":{"start":{"line":1075,"column":16},"end":{"line":1076,"column":70}},"246":{"start":{"line":1076,"column":20},"end":{"line":1076,"column":70}},"247":{"start":{"line":1078,"column":12},"end":{"line":1079,"column":89}},"248":{"start":{"line":1079,"column":16},"end":{"line":1079,"column":89}},"249":{"start":{"line":1080,"column":12},"end":{"line":1080,"column":47}},"250":{"start":{"line":1082,"column":8},"end":{"line":1082,"column":31}},"251":{"start":{"line":1085,"column":8},"end":{"line":1085,"column":42}},"252":{"start":{"line":1086,"column":32},"end":{"line":1086,"column":63}},"253":{"start":{"line":1087,"column":8},"end":{"line":1115,"column":11}},"254":{"start":{"line":1090,"column":12},"end":{"line":1091,"column":28}},"255":{"start":{"line":1091,"column":16},"end":{"line":1091,"column":28}},"256":{"start":{"line":1092,"column":46},"end":{"line":1092,"column":50}},"257":{"start":{"line":1093,"column":12},"end":{"line":1113,"column":13}},"258":{"start":{"line":1094,"column":44},"end":{"line":1094,"column":77}},"259":{"start":{"line":1095,"column":38},"end":{"line":1095,"column":73}},"260":{"start":{"line":1096,"column":16},"end":{"line":1110,"column":17}},"261":{"start":{"line":1097,"column":20},"end":{"line":1109,"column":78}},"262":{"start":{"line":1098,"column":50},"end":{"line":1098,"column":108}},"263":{"start":{"line":1099,"column":43},"end":{"line":1099,"column":44}},"264":{"start":{"line":1100,"column":24},"end":{"line":1103,"column":61}},"265":{"start":{"line":1101,"column":28},"end":{"line":1101,"column":75}},"266":{"start":{"line":1103,"column":28},"end":{"line":1103,"column":61}},"267":{"start":{"line":1104,"column":24},"end":{"line":1105,"column":51}},"268":{"start":{"line":1105,"column":28},"end":{"line":1105,"column":51}},"269":{"start":{"line":1108,"column":24},"end":{"line":1109,"column":78}},"270":{"start":{"line":1111,"column":16},"end":{"line":1112,"column":70}},"271":{"start":{"line":1112,"column":20},"end":{"line":1112,"column":70}},"272":{"start":{"line":1114,"column":12},"end":{"line":1114,"column":47}},"273":{"start":{"line":1116,"column":8},"end":{"line":1116,"column":31}},"274":{"start":{"line":1221,"column":8},"end":{"line":1221,"column":50}},"275":{"start":{"line":1222,"column":8},"end":{"line":1222,"column":56}},"276":{"start":{"line":1223,"column":32},"end":{"line":1223,"column":63}},"277":{"start":{"line":1224,"column":8},"end":{"line":1239,"column":11}},"278":{"start":{"line":1227,"column":12},"end":{"line":1228,"column":88}},"279":{"start":{"line":1228,"column":16},"end":{"line":1228,"column":88}},"280":{"start":{"line":1229,"column":46},"end":{"line":1229,"column":50}},"281":{"start":{"line":1230,"column":12},"end":{"line":1235,"column":13}},"282":{"start":{"line":1231,"column":44},"end":{"line":1231,"column":77}},"283":{"start":{"line":1232,"column":16},"end":{"line":1234,"column":70}},"284":{"start":{"line":1234,"column":20},"end":{"line":1234,"column":70}},"285":{"start":{"line":1236,"column":12},"end":{"line":1237,"column":89}},"286":{"start":{"line":1237,"column":16},"end":{"line":1237,"column":89}},"287":{"start":{"line":1238,"column":12},"end":{"line":1238,"column":47}},"288":{"start":{"line":1240,"column":8},"end":{"line":1240,"column":31}},"289":{"start":{"line":1340,"column":8},"end":{"line":1340,"column":50}},"290":{"start":{"line":1341,"column":8},"end":{"line":1341,"column":56}},"291":{"start":{"line":1342,"column":32},"end":{"line":1342,"column":63}},"292":{"start":{"line":1343,"column":8},"end":{"line":1356,"column":11}},"293":{"start":{"line":1346,"column":12},"end":{"line":1347,"column":28}},"294":{"start":{"line":1347,"column":16},"end":{"line":1347,"column":28}},"295":{"start":{"line":1348,"column":46},"end":{"line":1348,"column":50}},"296":{"start":{"line":1349,"column":12},"end":{"line":1354,"column":13}},"297":{"start":{"line":1350,"column":44},"end":{"line":1350,"column":77}},"298":{"start":{"line":1351,"column":16},"end":{"line":1353,"column":70}},"299":{"start":{"line":1353,"column":20},"end":{"line":1353,"column":70}},"300":{"start":{"line":1355,"column":12},"end":{"line":1355,"column":47}},"301":{"start":{"line":1357,"column":8},"end":{"line":1357,"column":31}},"302":{"start":{"line":1435,"column":8},"end":{"line":1435,"column":46}},"303":{"start":{"line":1436,"column":32},"end":{"line":1436,"column":63}},"304":{"start":{"line":1437,"column":8},"end":{"line":1451,"column":11}},"305":{"start":{"line":1440,"column":12},"end":{"line":1441,"column":88}},"306":{"start":{"line":1441,"column":16},"end":{"line":1441,"column":88}},"307":{"start":{"line":1442,"column":31},"end":{"line":1442,"column":35}},"308":{"start":{"line":1443,"column":12},"end":{"line":1447,"column":13}},"309":{"start":{"line":1444,"column":16},"end":{"line":1446,"column":53}},"310":{"start":{"line":1446,"column":20},"end":{"line":1446,"column":53}},"311":{"start":{"line":1448,"column":12},"end":{"line":1449,"column":89}},"312":{"start":{"line":1449,"column":16},"end":{"line":1449,"column":89}},"313":{"start":{"line":1450,"column":12},"end":{"line":1450,"column":32}},"314":{"start":{"line":1452,"column":8},"end":{"line":1452,"column":31}},"315":{"start":{"line":1523,"column":8},"end":{"line":1523,"column":46}},"316":{"start":{"line":1524,"column":32},"end":{"line":1524,"column":63}},"317":{"start":{"line":1525,"column":8},"end":{"line":1537,"column":11}},"318":{"start":{"line":1528,"column":12},"end":{"line":1529,"column":28}},"319":{"start":{"line":1529,"column":16},"end":{"line":1529,"column":28}},"320":{"start":{"line":1530,"column":31},"end":{"line":1530,"column":35}},"321":{"start":{"line":1531,"column":12},"end":{"line":1535,"column":13}},"322":{"start":{"line":1532,"column":16},"end":{"line":1534,"column":53}},"323":{"start":{"line":1534,"column":20},"end":{"line":1534,"column":53}},"324":{"start":{"line":1536,"column":12},"end":{"line":1536,"column":32}},"325":{"start":{"line":1538,"column":8},"end":{"line":1538,"column":31}},"326":{"start":{"line":1605,"column":32},"end":{"line":1605,"column":59}},"327":{"start":{"line":1606,"column":8},"end":{"line":1610,"column":11}},"328":{"start":{"line":1609,"column":12},"end":{"line":1609,"column":56}},"329":{"start":{"line":1611,"column":8},"end":{"line":1611,"column":31}},"330":{"start":{"line":1677,"column":32},"end":{"line":1677,"column":57}},"331":{"start":{"line":1678,"column":8},"end":{"line":1682,"column":11}},"332":{"start":{"line":1681,"column":12},"end":{"line":1681,"column":53}},"333":{"start":{"line":1683,"column":8},"end":{"line":1683,"column":31}},"334":{"start":{"line":1846,"column":8},"end":{"line":1846,"column":44}},"335":{"start":{"line":1847,"column":32},"end":{"line":1847,"column":61}},"336":{"start":{"line":1848,"column":8},"end":{"line":1857,"column":11}},"337":{"start":{"line":1851,"column":12},"end":{"line":1852,"column":29}},"338":{"start":{"line":1852,"column":16},"end":{"line":1852,"column":29}},"339":{"start":{"line":1853,"column":12},"end":{"line":1855,"column":33}},"340":{"start":{"line":1854,"column":16},"end":{"line":1855,"column":33}},"341":{"start":{"line":1855,"column":20},"end":{"line":1855,"column":33}},"342":{"start":{"line":1856,"column":12},"end":{"line":1856,"column":24}},"343":{"start":{"line":1858,"column":8},"end":{"line":1858,"column":31}},"344":{"start":{"line":1944,"column":8},"end":{"line":1944,"column":44}},"345":{"start":{"line":1945,"column":32},"end":{"line":1945,"column":61}},"346":{"start":{"line":1946,"column":8},"end":{"line":1955,"column":11}},"347":{"start":{"line":1949,"column":12},"end":{"line":1950,"column":29}},"348":{"start":{"line":1950,"column":16},"end":{"line":1950,"column":29}},"349":{"start":{"line":1951,"column":12},"end":{"line":1953,"column":32}},"350":{"start":{"line":1952,"column":16},"end":{"line":1953,"column":32}},"351":{"start":{"line":1953,"column":20},"end":{"line":1953,"column":32}},"352":{"start":{"line":1954,"column":12},"end":{"line":1954,"column":25}},"353":{"start":{"line":1956,"column":8},"end":{"line":1956,"column":31}},"354":{"start":{"line":1999,"column":32},"end":{"line":1999,"column":61}},"355":{"start":{"line":2000,"column":8},"end":{"line":2004,"column":11}},"356":{"start":{"line":2003,"column":12},"end":{"line":2003,"column":71}},"357":{"start":{"line":2005,"column":8},"end":{"line":2005,"column":31}},"358":{"start":{"line":2048,"column":32},"end":{"line":2048,"column":61}},"359":{"start":{"line":2049,"column":8},"end":{"line":2053,"column":11}},"360":{"start":{"line":2052,"column":12},"end":{"line":2052,"column":35}},"361":{"start":{"line":2054,"column":8},"end":{"line":2054,"column":31}},"362":{"start":{"line":2101,"column":8},"end":{"line":2101,"column":82}},"363":{"start":{"line":2102,"column":32},"end":{"line":2102,"column":61}},"364":{"start":{"line":2103,"column":8},"end":{"line":2107,"column":11}},"365":{"start":{"line":2106,"column":12},"end":{"line":2106,"column":71}},"366":{"start":{"line":2108,"column":8},"end":{"line":2108,"column":31}},"367":{"start":{"line":2174,"column":8},"end":{"line":2175,"column":48}},"368":{"start":{"line":2175,"column":12},"end":{"line":2175,"column":48}},"369":{"start":{"line":2176,"column":32},"end":{"line":2176,"column":61}},"370":{"start":{"line":2177,"column":8},"end":{"line":2189,"column":11}},"371":{"start":{"line":2180,"column":12},"end":{"line":2181,"column":28}},"372":{"start":{"line":2181,"column":16},"end":{"line":2181,"column":28}},"373":{"start":{"line":2182,"column":12},"end":{"line":2187,"column":13}},"374":{"start":{"line":2183,"column":16},"end":{"line":2185,"column":37}},"375":{"start":{"line":2184,"column":20},"end":{"line":2185,"column":37}},"376":{"start":{"line":2185,"column":24},"end":{"line":2185,"column":37}},"377":{"start":{"line":2186,"column":16},"end":{"line":2186,"column":28}},"378":{"start":{"line":2188,"column":12},"end":{"line":2188,"column":25}},"379":{"start":{"line":2190,"column":8},"end":{"line":2190,"column":31}},"380":{"start":{"line":2268,"column":8},"end":{"line":2268,"column":38}},"381":{"start":{"line":2269,"column":32},"end":{"line":2269,"column":63}},"382":{"start":{"line":2270,"column":8},"end":{"line":2280,"column":11}},"383":{"start":{"line":2273,"column":12},"end":{"line":2279,"column":13}},"384":{"start":{"line":2274,"column":16},"end":{"line":2278,"column":17}},"385":{"start":{"line":2275,"column":35},"end":{"line":2275,"column":66}},"386":{"start":{"line":2276,"column":20},"end":{"line":2277,"column":30}},"387":{"start":{"line":2277,"column":24},"end":{"line":2277,"column":30}},"388":{"start":{"line":2281,"column":8},"end":{"line":2281,"column":31}},"389":{"start":{"line":2285,"column":8},"end":{"line":2285,"column":38}},"390":{"start":{"line":2286,"column":32},"end":{"line":2286,"column":53}},"391":{"start":{"line":2287,"column":8},"end":{"line":2298,"column":11}},"392":{"start":{"line":2290,"column":12},"end":{"line":2296,"column":13}},"393":{"start":{"line":2291,"column":16},"end":{"line":2295,"column":17}},"394":{"start":{"line":2292,"column":35},"end":{"line":2292,"column":66}},"395":{"start":{"line":2293,"column":20},"end":{"line":2294,"column":30}},"396":{"start":{"line":2294,"column":24},"end":{"line":2294,"column":30}},"397":{"start":{"line":2297,"column":12},"end":{"line":2297,"column":29}},"398":{"start":{"line":2299,"column":8},"end":{"line":2299,"column":31}},"399":{"start":{"line":2304,"column":8},"end":{"line":2304,"column":44}},"400":{"start":{"line":2305,"column":32},"end":{"line":2305,"column":53}},"401":{"start":{"line":2306,"column":8},"end":{"line":2327,"column":11}},"402":{"start":{"line":2309,"column":35},"end":{"line":2309,"column":46}},"403":{"start":{"line":2310,"column":12},"end":{"line":2314,"column":13}},"404":{"start":{"line":2311,"column":16},"end":{"line":2313,"column":63}},"405":{"start":{"line":2312,"column":20},"end":{"line":2313,"column":63}},"406":{"start":{"line":2313,"column":24},"end":{"line":2313,"column":63}},"407":{"start":{"line":2315,"column":12},"end":{"line":2326,"column":13}},"408":{"start":{"line":2316,"column":16},"end":{"line":2316,"column":38}},"409":{"start":{"line":2317,"column":17},"end":{"line":2326,"column":13}},"410":{"start":{"line":2318,"column":16},"end":{"line":2318,"column":47}},"411":{"start":{"line":2320,"column":37},"end":{"line":2320,"column":46}},"412":{"start":{"line":2321,"column":16},"end":{"line":2324,"column":19}},"413":{"start":{"line":2322,"column":38},"end":{"line":2322,"column":56}},"414":{"start":{"line":2323,"column":20},"end":{"line":2323,"column":69}},"415":{"start":{"line":2325,"column":16},"end":{"line":2325,"column":36}},"416":{"start":{"line":2328,"column":8},"end":{"line":2328,"column":31}},"417":{"start":{"line":2332,"column":8},"end":{"line":2332,"column":44}},"418":{"start":{"line":2333,"column":32},"end":{"line":2333,"column":53}},"419":{"start":{"line":2334,"column":8},"end":{"line":2355,"column":11}},"420":{"start":{"line":2337,"column":35},"end":{"line":2337,"column":46}},"421":{"start":{"line":2338,"column":12},"end":{"line":2342,"column":13}},"422":{"start":{"line":2339,"column":16},"end":{"line":2341,"column":63}},"423":{"start":{"line":2340,"column":20},"end":{"line":2341,"column":63}},"424":{"start":{"line":2341,"column":24},"end":{"line":2341,"column":63}},"425":{"start":{"line":2343,"column":12},"end":{"line":2354,"column":13}},"426":{"start":{"line":2344,"column":16},"end":{"line":2344,"column":38}},"427":{"start":{"line":2345,"column":17},"end":{"line":2354,"column":13}},"428":{"start":{"line":2346,"column":16},"end":{"line":2346,"column":47}},"429":{"start":{"line":2348,"column":37},"end":{"line":2348,"column":46}},"430":{"start":{"line":2349,"column":16},"end":{"line":2352,"column":19}},"431":{"start":{"line":2350,"column":38},"end":{"line":2350,"column":56}},"432":{"start":{"line":2351,"column":20},"end":{"line":2351,"column":69}},"433":{"start":{"line":2353,"column":16},"end":{"line":2353,"column":36}},"434":{"start":{"line":2356,"column":8},"end":{"line":2356,"column":31}},"435":{"start":{"line":2433,"column":8},"end":{"line":2433,"column":44}},"436":{"start":{"line":2434,"column":32},"end":{"line":2434,"column":59}},"437":{"start":{"line":2435,"column":8},"end":{"line":2445,"column":11}},"438":{"start":{"line":2438,"column":35},"end":{"line":2438,"column":46}},"439":{"start":{"line":2439,"column":12},"end":{"line":2443,"column":13}},"440":{"start":{"line":2440,"column":16},"end":{"line":2442,"column":60}},"441":{"start":{"line":2441,"column":20},"end":{"line":2442,"column":60}},"442":{"start":{"line":2442,"column":24},"end":{"line":2442,"column":60}},"443":{"start":{"line":2444,"column":12},"end":{"line":2444,"column":34}},"444":{"start":{"line":2446,"column":8},"end":{"line":2446,"column":31}},"445":{"start":{"line":2450,"column":8},"end":{"line":2450,"column":44}},"446":{"start":{"line":2451,"column":32},"end":{"line":2451,"column":53}},"447":{"start":{"line":2452,"column":8},"end":{"line":2472,"column":11}},"448":{"start":{"line":2455,"column":36},"end":{"line":2455,"column":68}},"449":{"start":{"line":2456,"column":12},"end":{"line":2470,"column":13}},"450":{"start":{"line":2457,"column":16},"end":{"line":2461,"column":31}},"451":{"start":{"line":2459,"column":20},"end":{"line":2459,"column":50}},"452":{"start":{"line":2464,"column":16},"end":{"line":2469,"column":31}},"453":{"start":{"line":2467,"column":20},"end":{"line":2467,"column":49}},"454":{"start":{"line":2471,"column":12},"end":{"line":2471,"column":29}},"455":{"start":{"line":2473,"column":8},"end":{"line":2473,"column":31}},"456":{"start":{"line":2538,"column":8},"end":{"line":2538,"column":44}},"457":{"start":{"line":2539,"column":32},"end":{"line":2539,"column":59}},"458":{"start":{"line":2540,"column":8},"end":{"line":2550,"column":11}},"459":{"start":{"line":2543,"column":35},"end":{"line":2543,"column":46}},"460":{"start":{"line":2544,"column":12},"end":{"line":2548,"column":13}},"461":{"start":{"line":2545,"column":16},"end":{"line":2547,"column":17}},"462":{"start":{"line":2546,"column":20},"end":{"line":2546,"column":76}},"463":{"start":{"line":2549,"column":12},"end":{"line":2549,"column":34}},"464":{"start":{"line":2551,"column":8},"end":{"line":2551,"column":31}},"465":{"start":{"line":2555,"column":8},"end":{"line":2555,"column":44}},"466":{"start":{"line":2556,"column":32},"end":{"line":2556,"column":53}},"467":{"start":{"line":2557,"column":8},"end":{"line":2577,"column":11}},"468":{"start":{"line":2560,"column":35},"end":{"line":2560,"column":63}},"469":{"start":{"line":2561,"column":12},"end":{"line":2575,"column":13}},"470":{"start":{"line":2562,"column":16},"end":{"line":2566,"column":31}},"471":{"start":{"line":2564,"column":20},"end":{"line":2564,"column":50}},"472":{"start":{"line":2569,"column":16},"end":{"line":2574,"column":31}},"473":{"start":{"line":2572,"column":20},"end":{"line":2572,"column":49}},"474":{"start":{"line":2576,"column":12},"end":{"line":2576,"column":29}},"475":{"start":{"line":2578,"column":8},"end":{"line":2578,"column":31}},"476":{"start":{"line":2662,"column":8},"end":{"line":2662,"column":44}},"477":{"start":{"line":2663,"column":32},"end":{"line":2663,"column":59}},"478":{"start":{"line":2664,"column":8},"end":{"line":2676,"column":11}},"479":{"start":{"line":2667,"column":35},"end":{"line":2667,"column":46}},"480":{"start":{"line":2668,"column":12},"end":{"line":2674,"column":13}},"481":{"start":{"line":2669,"column":16},"end":{"line":2673,"column":17}},"482":{"start":{"line":2670,"column":38},"end":{"line":2670,"column":72}},"483":{"start":{"line":2671,"column":20},"end":{"line":2672,"column":55}},"484":{"start":{"line":2672,"column":24},"end":{"line":2672,"column":55}},"485":{"start":{"line":2675,"column":12},"end":{"line":2675,"column":34}},"486":{"start":{"line":2677,"column":8},"end":{"line":2677,"column":31}},"487":{"start":{"line":2681,"column":8},"end":{"line":2681,"column":44}},"488":{"start":{"line":2682,"column":32},"end":{"line":2682,"column":53}},"489":{"start":{"line":2683,"column":8},"end":{"line":2703,"column":11}},"490":{"start":{"line":2686,"column":35},"end":{"line":2686,"column":70}},"491":{"start":{"line":2687,"column":12},"end":{"line":2701,"column":13}},"492":{"start":{"line":2688,"column":16},"end":{"line":2692,"column":31}},"493":{"start":{"line":2690,"column":20},"end":{"line":2690,"column":50}},"494":{"start":{"line":2695,"column":16},"end":{"line":2700,"column":31}},"495":{"start":{"line":2698,"column":20},"end":{"line":2698,"column":49}},"496":{"start":{"line":2702,"column":12},"end":{"line":2702,"column":29}},"497":{"start":{"line":2704,"column":8},"end":{"line":2704,"column":31}},"498":{"start":{"line":2707,"column":0},"end":{"line":2707,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":18},"end":{"line":10,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":44},"end":{"line":112,"column":5}},"line":93},"2":{"name":"(anonymous_2)","decl":{"start":{"line":99,"column":26},"end":{"line":99,"column":27}},"loc":{"start":{"line":99,"column":38},"end":{"line":110,"column":9}},"line":99},"3":{"name":"(anonymous_3)","decl":{"start":{"line":189,"column":4},"end":{"line":189,"column":5}},"loc":{"start":{"line":189,"column":36},"end":{"line":227,"column":5}},"line":189},"4":{"name":"(anonymous_4)","decl":{"start":{"line":195,"column":26},"end":{"line":195,"column":27}},"loc":{"start":{"line":195,"column":38},"end":{"line":225,"column":9}},"line":195},"5":{"name":"(anonymous_5)","decl":{"start":{"line":297,"column":4},"end":{"line":297,"column":5}},"loc":{"start":{"line":297,"column":42},"end":{"line":332,"column":5}},"line":297},"6":{"name":"(anonymous_6)","decl":{"start":{"line":302,"column":26},"end":{"line":302,"column":27}},"loc":{"start":{"line":302,"column":38},"end":{"line":330,"column":9}},"line":302},"7":{"name":"(anonymous_7)","decl":{"start":{"line":333,"column":4},"end":{"line":333,"column":5}},"loc":{"start":{"line":333,"column":36},"end":{"line":368,"column":5}},"line":333},"8":{"name":"(anonymous_8)","decl":{"start":{"line":338,"column":26},"end":{"line":338,"column":27}},"loc":{"start":{"line":338,"column":38},"end":{"line":366,"column":9}},"line":338},"9":{"name":"(anonymous_9)","decl":{"start":{"line":369,"column":4},"end":{"line":369,"column":5}},"loc":{"start":{"line":369,"column":42},"end":{"line":402,"column":5}},"line":369},"10":{"name":"(anonymous_10)","decl":{"start":{"line":374,"column":26},"end":{"line":374,"column":27}},"loc":{"start":{"line":374,"column":38},"end":{"line":400,"column":9}},"line":374},"11":{"name":"(anonymous_11)","decl":{"start":{"line":505,"column":4},"end":{"line":505,"column":5}},"loc":{"start":{"line":505,"column":86},"end":{"line":526,"column":5}},"line":505},"12":{"name":"(anonymous_12)","decl":{"start":{"line":511,"column":26},"end":{"line":511,"column":27}},"loc":{"start":{"line":511,"column":38},"end":{"line":524,"column":9}},"line":511},"13":{"name":"(anonymous_13)","decl":{"start":{"line":622,"column":4},"end":{"line":622,"column":5}},"loc":{"start":{"line":622,"column":92},"end":{"line":641,"column":5}},"line":622},"14":{"name":"(anonymous_14)","decl":{"start":{"line":628,"column":26},"end":{"line":628,"column":27}},"loc":{"start":{"line":628,"column":38},"end":{"line":639,"column":9}},"line":628},"15":{"name":"(anonymous_15)","decl":{"start":{"line":719,"column":4},"end":{"line":719,"column":5}},"loc":{"start":{"line":719,"column":40},"end":{"line":738,"column":5}},"line":719},"16":{"name":"(anonymous_16)","decl":{"start":{"line":724,"column":26},"end":{"line":724,"column":27}},"loc":{"start":{"line":724,"column":38},"end":{"line":736,"column":9}},"line":724},"17":{"name":"(anonymous_17)","decl":{"start":{"line":809,"column":4},"end":{"line":809,"column":5}},"loc":{"start":{"line":809,"column":46},"end":{"line":826,"column":5}},"line":809},"18":{"name":"(anonymous_18)","decl":{"start":{"line":814,"column":26},"end":{"line":814,"column":27}},"loc":{"start":{"line":814,"column":38},"end":{"line":824,"column":9}},"line":814},"19":{"name":"(anonymous_19)","decl":{"start":{"line":905,"column":4},"end":{"line":905,"column":5}},"loc":{"start":{"line":905,"column":36},"end":{"line":943,"column":5}},"line":905},"20":{"name":"(anonymous_20)","decl":{"start":{"line":911,"column":26},"end":{"line":911,"column":27}},"loc":{"start":{"line":911,"column":38},"end":{"line":941,"column":9}},"line":911},"21":{"name":"(anonymous_21)","decl":{"start":{"line":1012,"column":4},"end":{"line":1012,"column":5}},"loc":{"start":{"line":1012,"column":42},"end":{"line":1047,"column":5}},"line":1012},"22":{"name":"(anonymous_22)","decl":{"start":{"line":1017,"column":26},"end":{"line":1017,"column":27}},"loc":{"start":{"line":1017,"column":38},"end":{"line":1045,"column":9}},"line":1017},"23":{"name":"(anonymous_23)","decl":{"start":{"line":1048,"column":4},"end":{"line":1048,"column":5}},"loc":{"start":{"line":1048,"column":36},"end":{"line":1083,"column":5}},"line":1048},"24":{"name":"(anonymous_24)","decl":{"start":{"line":1053,"column":26},"end":{"line":1053,"column":27}},"loc":{"start":{"line":1053,"column":38},"end":{"line":1081,"column":9}},"line":1053},"25":{"name":"(anonymous_25)","decl":{"start":{"line":1084,"column":4},"end":{"line":1084,"column":5}},"loc":{"start":{"line":1084,"column":42},"end":{"line":1117,"column":5}},"line":1084},"26":{"name":"(anonymous_26)","decl":{"start":{"line":1089,"column":26},"end":{"line":1089,"column":27}},"loc":{"start":{"line":1089,"column":38},"end":{"line":1115,"column":9}},"line":1089},"27":{"name":"(anonymous_27)","decl":{"start":{"line":1220,"column":4},"end":{"line":1220,"column":5}},"loc":{"start":{"line":1220,"column":86},"end":{"line":1241,"column":5}},"line":1220},"28":{"name":"(anonymous_28)","decl":{"start":{"line":1226,"column":26},"end":{"line":1226,"column":27}},"loc":{"start":{"line":1226,"column":38},"end":{"line":1239,"column":9}},"line":1226},"29":{"name":"(anonymous_29)","decl":{"start":{"line":1339,"column":4},"end":{"line":1339,"column":5}},"loc":{"start":{"line":1339,"column":92},"end":{"line":1358,"column":5}},"line":1339},"30":{"name":"(anonymous_30)","decl":{"start":{"line":1345,"column":26},"end":{"line":1345,"column":27}},"loc":{"start":{"line":1345,"column":38},"end":{"line":1356,"column":9}},"line":1345},"31":{"name":"(anonymous_31)","decl":{"start":{"line":1434,"column":4},"end":{"line":1434,"column":5}},"loc":{"start":{"line":1434,"column":40},"end":{"line":1453,"column":5}},"line":1434},"32":{"name":"(anonymous_32)","decl":{"start":{"line":1439,"column":26},"end":{"line":1439,"column":27}},"loc":{"start":{"line":1439,"column":38},"end":{"line":1451,"column":9}},"line":1439},"33":{"name":"(anonymous_33)","decl":{"start":{"line":1522,"column":4},"end":{"line":1522,"column":5}},"loc":{"start":{"line":1522,"column":46},"end":{"line":1539,"column":5}},"line":1522},"34":{"name":"(anonymous_34)","decl":{"start":{"line":1527,"column":26},"end":{"line":1527,"column":27}},"loc":{"start":{"line":1527,"column":38},"end":{"line":1537,"column":9}},"line":1527},"35":{"name":"(anonymous_35)","decl":{"start":{"line":1604,"column":4},"end":{"line":1604,"column":5}},"loc":{"start":{"line":1604,"column":14},"end":{"line":1612,"column":5}},"line":1604},"36":{"name":"(anonymous_36)","decl":{"start":{"line":1608,"column":26},"end":{"line":1608,"column":27}},"loc":{"start":{"line":1608,"column":38},"end":{"line":1610,"column":9}},"line":1608},"37":{"name":"(anonymous_37)","decl":{"start":{"line":1676,"column":4},"end":{"line":1676,"column":5}},"loc":{"start":{"line":1676,"column":12},"end":{"line":1684,"column":5}},"line":1676},"38":{"name":"(anonymous_38)","decl":{"start":{"line":1680,"column":26},"end":{"line":1680,"column":27}},"loc":{"start":{"line":1680,"column":38},"end":{"line":1682,"column":9}},"line":1680},"39":{"name":"(anonymous_39)","decl":{"start":{"line":1845,"column":4},"end":{"line":1845,"column":5}},"loc":{"start":{"line":1845,"column":35},"end":{"line":1859,"column":5}},"line":1845},"40":{"name":"(anonymous_40)","decl":{"start":{"line":1850,"column":26},"end":{"line":1850,"column":27}},"loc":{"start":{"line":1850,"column":38},"end":{"line":1857,"column":9}},"line":1850},"41":{"name":"(anonymous_41)","decl":{"start":{"line":1943,"column":4},"end":{"line":1943,"column":5}},"loc":{"start":{"line":1943,"column":35},"end":{"line":1957,"column":5}},"line":1943},"42":{"name":"(anonymous_42)","decl":{"start":{"line":1948,"column":26},"end":{"line":1948,"column":27}},"loc":{"start":{"line":1948,"column":38},"end":{"line":1955,"column":9}},"line":1948},"43":{"name":"(anonymous_43)","decl":{"start":{"line":1998,"column":4},"end":{"line":1998,"column":5}},"loc":{"start":{"line":1998,"column":14},"end":{"line":2006,"column":5}},"line":1998},"44":{"name":"(anonymous_44)","decl":{"start":{"line":2002,"column":26},"end":{"line":2002,"column":27}},"loc":{"start":{"line":2002,"column":38},"end":{"line":2004,"column":9}},"line":2002},"45":{"name":"(anonymous_45)","decl":{"start":{"line":2047,"column":4},"end":{"line":2047,"column":5}},"loc":{"start":{"line":2047,"column":17},"end":{"line":2055,"column":5}},"line":2047},"46":{"name":"(anonymous_46)","decl":{"start":{"line":2051,"column":26},"end":{"line":2051,"column":27}},"loc":{"start":{"line":2051,"column":38},"end":{"line":2053,"column":9}},"line":2051},"47":{"name":"(anonymous_47)","decl":{"start":{"line":2100,"column":4},"end":{"line":2100,"column":5}},"loc":{"start":{"line":2100,"column":20},"end":{"line":2109,"column":5}},"line":2100},"48":{"name":"(anonymous_48)","decl":{"start":{"line":2105,"column":26},"end":{"line":2105,"column":27}},"loc":{"start":{"line":2105,"column":38},"end":{"line":2107,"column":9}},"line":2105},"49":{"name":"(anonymous_49)","decl":{"start":{"line":2173,"column":4},"end":{"line":2173,"column":5}},"loc":{"start":{"line":2173,"column":43},"end":{"line":2191,"column":5}},"line":2173},"50":{"name":"(anonymous_50)","decl":{"start":{"line":2179,"column":26},"end":{"line":2179,"column":27}},"loc":{"start":{"line":2179,"column":38},"end":{"line":2189,"column":9}},"line":2179},"51":{"name":"(anonymous_51)","decl":{"start":{"line":2267,"column":4},"end":{"line":2267,"column":5}},"loc":{"start":{"line":2267,"column":36},"end":{"line":2282,"column":5}},"line":2267},"52":{"name":"(anonymous_52)","decl":{"start":{"line":2272,"column":26},"end":{"line":2272,"column":27}},"loc":{"start":{"line":2272,"column":38},"end":{"line":2280,"column":9}},"line":2272},"53":{"name":"(anonymous_53)","decl":{"start":{"line":2284,"column":4},"end":{"line":2284,"column":5}},"loc":{"start":{"line":2284,"column":35},"end":{"line":2300,"column":5}},"line":2284},"54":{"name":"(anonymous_54)","decl":{"start":{"line":2289,"column":26},"end":{"line":2289,"column":27}},"loc":{"start":{"line":2289,"column":38},"end":{"line":2298,"column":9}},"line":2289},"55":{"name":"(anonymous_55)","decl":{"start":{"line":2303,"column":4},"end":{"line":2303,"column":5}},"loc":{"start":{"line":2303,"column":38},"end":{"line":2329,"column":5}},"line":2303},"56":{"name":"(anonymous_56)","decl":{"start":{"line":2308,"column":26},"end":{"line":2308,"column":27}},"loc":{"start":{"line":2308,"column":38},"end":{"line":2327,"column":9}},"line":2308},"57":{"name":"(anonymous_57)","decl":{"start":{"line":2321,"column":39},"end":{"line":2321,"column":40}},"loc":{"start":{"line":2321,"column":63},"end":{"line":2324,"column":17}},"line":2321},"58":{"name":"(anonymous_58)","decl":{"start":{"line":2331,"column":4},"end":{"line":2331,"column":5}},"loc":{"start":{"line":2331,"column":41},"end":{"line":2357,"column":5}},"line":2331},"59":{"name":"(anonymous_59)","decl":{"start":{"line":2336,"column":26},"end":{"line":2336,"column":27}},"loc":{"start":{"line":2336,"column":38},"end":{"line":2355,"column":9}},"line":2336},"60":{"name":"(anonymous_60)","decl":{"start":{"line":2349,"column":39},"end":{"line":2349,"column":40}},"loc":{"start":{"line":2349,"column":63},"end":{"line":2352,"column":17}},"line":2349},"61":{"name":"(anonymous_61)","decl":{"start":{"line":2432,"column":4},"end":{"line":2432,"column":5}},"loc":{"start":{"line":2432,"column":39},"end":{"line":2447,"column":5}},"line":2432},"62":{"name":"(anonymous_62)","decl":{"start":{"line":2437,"column":26},"end":{"line":2437,"column":27}},"loc":{"start":{"line":2437,"column":38},"end":{"line":2445,"column":9}},"line":2437},"63":{"name":"(anonymous_63)","decl":{"start":{"line":2449,"column":4},"end":{"line":2449,"column":5}},"loc":{"start":{"line":2449,"column":54},"end":{"line":2474,"column":5}},"line":2449},"64":{"name":"(anonymous_64)","decl":{"start":{"line":2454,"column":26},"end":{"line":2454,"column":27}},"loc":{"start":{"line":2454,"column":38},"end":{"line":2472,"column":9}},"line":2454},"65":{"name":"(anonymous_65)","decl":{"start":{"line":2458,"column":29},"end":{"line":2458,"column":30}},"loc":{"start":{"line":2458,"column":46},"end":{"line":2460,"column":17}},"line":2458},"66":{"name":"(anonymous_66)","decl":{"start":{"line":2466,"column":29},"end":{"line":2466,"column":30}},"loc":{"start":{"line":2466,"column":46},"end":{"line":2468,"column":17}},"line":2466},"67":{"name":"(anonymous_67)","decl":{"start":{"line":2537,"column":4},"end":{"line":2537,"column":5}},"loc":{"start":{"line":2537,"column":35},"end":{"line":2552,"column":5}},"line":2537},"68":{"name":"(anonymous_68)","decl":{"start":{"line":2542,"column":26},"end":{"line":2542,"column":27}},"loc":{"start":{"line":2542,"column":38},"end":{"line":2550,"column":9}},"line":2542},"69":{"name":"(anonymous_69)","decl":{"start":{"line":2554,"column":4},"end":{"line":2554,"column":5}},"loc":{"start":{"line":2554,"column":50},"end":{"line":2579,"column":5}},"line":2554},"70":{"name":"(anonymous_70)","decl":{"start":{"line":2559,"column":26},"end":{"line":2559,"column":27}},"loc":{"start":{"line":2559,"column":38},"end":{"line":2577,"column":9}},"line":2559},"71":{"name":"(anonymous_71)","decl":{"start":{"line":2563,"column":29},"end":{"line":2563,"column":30}},"loc":{"start":{"line":2563,"column":46},"end":{"line":2565,"column":17}},"line":2563},"72":{"name":"(anonymous_72)","decl":{"start":{"line":2571,"column":29},"end":{"line":2571,"column":30}},"loc":{"start":{"line":2571,"column":46},"end":{"line":2573,"column":17}},"line":2571},"73":{"name":"(anonymous_73)","decl":{"start":{"line":2661,"column":4},"end":{"line":2661,"column":5}},"loc":{"start":{"line":2661,"column":42},"end":{"line":2678,"column":5}},"line":2661},"74":{"name":"(anonymous_74)","decl":{"start":{"line":2666,"column":26},"end":{"line":2666,"column":27}},"loc":{"start":{"line":2666,"column":38},"end":{"line":2676,"column":9}},"line":2666},"75":{"name":"(anonymous_75)","decl":{"start":{"line":2680,"column":4},"end":{"line":2680,"column":5}},"loc":{"start":{"line":2680,"column":57},"end":{"line":2705,"column":5}},"line":2680},"76":{"name":"(anonymous_76)","decl":{"start":{"line":2685,"column":26},"end":{"line":2685,"column":27}},"loc":{"start":{"line":2685,"column":38},"end":{"line":2703,"column":9}},"line":2685},"77":{"name":"(anonymous_77)","decl":{"start":{"line":2689,"column":29},"end":{"line":2689,"column":30}},"loc":{"start":{"line":2689,"column":46},"end":{"line":2691,"column":17}},"line":2689},"78":{"name":"(anonymous_78)","decl":{"start":{"line":2697,"column":29},"end":{"line":2697,"column":30}},"loc":{"start":{"line":2697,"column":46},"end":{"line":2699,"column":17}},"line":2697}},"branchMap":{"0":{"loc":{"start":{"line":93,"column":10},"end":{"line":93,"column":26}},"type":"default-arg","locations":[{"start":{"line":93,"column":22},"end":{"line":93,"column":26}}],"line":93},"1":{"loc":{"start":{"line":93,"column":28},"end":{"line":93,"column":42}},"type":"default-arg","locations":[{"start":{"line":93,"column":38},"end":{"line":93,"column":42}}],"line":93},"2":{"loc":{"start":{"line":94,"column":8},"end":{"line":95,"column":36}},"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":95,"column":36}},{"start":{"line":94,"column":8},"end":{"line":95,"column":36}}],"line":94},"3":{"loc":{"start":{"line":100,"column":12},"end":{"line":101,"column":25}},"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":101,"column":25}},{"start":{"line":100,"column":12},"end":{"line":101,"column":25}}],"line":100},"4":{"loc":{"start":{"line":104,"column":16},"end":{"line":107,"column":28}},"type":"if","locations":[{"start":{"line":104,"column":16},"end":{"line":107,"column":28}},{"start":{"line":104,"column":16},"end":{"line":107,"column":28}}],"line":104},"5":{"loc":{"start":{"line":106,"column":21},"end":{"line":107,"column":28}},"type":"if","locations":[{"start":{"line":106,"column":21},"end":{"line":107,"column":28}},{"start":{"line":106,"column":21},"end":{"line":107,"column":28}}],"line":106},"6":{"loc":{"start":{"line":189,"column":20},"end":{"line":189,"column":34}},"type":"default-arg","locations":[{"start":{"line":189,"column":30},"end":{"line":189,"column":34}}],"line":189},"7":{"loc":{"start":{"line":196,"column":12},"end":{"line":197,"column":88}},"type":"if","locations":[{"start":{"line":196,"column":12},"end":{"line":197,"column":88}},{"start":{"line":196,"column":12},"end":{"line":197,"column":88}}],"line":196},"8":{"loc":{"start":{"line":203,"column":16},"end":{"line":216,"column":17}},"type":"if","locations":[{"start":{"line":203,"column":16},"end":{"line":216,"column":17}},{"start":{"line":203,"column":16},"end":{"line":216,"column":17}}],"line":203},"9":{"loc":{"start":{"line":204,"column":20},"end":{"line":215,"column":84}},"type":"if","locations":[{"start":{"line":204,"column":20},"end":{"line":215,"column":84}},{"start":{"line":204,"column":20},"end":{"line":215,"column":84}}],"line":204},"10":{"loc":{"start":{"line":207,"column":24},"end":{"line":210,"column":61}},"type":"if","locations":[{"start":{"line":207,"column":24},"end":{"line":210,"column":61}},{"start":{"line":207,"column":24},"end":{"line":210,"column":61}}],"line":207},"11":{"loc":{"start":{"line":211,"column":24},"end":{"line":212,"column":51}},"type":"if","locations":[{"start":{"line":211,"column":24},"end":{"line":212,"column":51}},{"start":{"line":211,"column":24},"end":{"line":212,"column":51}}],"line":211},"12":{"loc":{"start":{"line":217,"column":16},"end":{"line":220,"column":17}},"type":"if","locations":[{"start":{"line":217,"column":16},"end":{"line":220,"column":17}},{"start":{"line":217,"column":16},"end":{"line":220,"column":17}}],"line":217},"13":{"loc":{"start":{"line":222,"column":12},"end":{"line":223,"column":89}},"type":"if","locations":[{"start":{"line":222,"column":12},"end":{"line":223,"column":89}},{"start":{"line":222,"column":12},"end":{"line":223,"column":89}}],"line":222},"14":{"loc":{"start":{"line":297,"column":26},"end":{"line":297,"column":40}},"type":"default-arg","locations":[{"start":{"line":297,"column":36},"end":{"line":297,"column":40}}],"line":297},"15":{"loc":{"start":{"line":303,"column":12},"end":{"line":304,"column":28}},"type":"if","locations":[{"start":{"line":303,"column":12},"end":{"line":304,"column":28}},{"start":{"line":303,"column":12},"end":{"line":304,"column":28}}],"line":303},"16":{"loc":{"start":{"line":310,"column":16},"end":{"line":323,"column":17}},"type":"if","locations":[{"start":{"line":310,"column":16},"end":{"line":323,"column":17}},{"start":{"line":310,"column":16},"end":{"line":323,"column":17}}],"line":310},"17":{"loc":{"start":{"line":311,"column":20},"end":{"line":322,"column":84}},"type":"if","locations":[{"start":{"line":311,"column":20},"end":{"line":322,"column":84}},{"start":{"line":311,"column":20},"end":{"line":322,"column":84}}],"line":311},"18":{"loc":{"start":{"line":314,"column":24},"end":{"line":317,"column":61}},"type":"if","locations":[{"start":{"line":314,"column":24},"end":{"line":317,"column":61}},{"start":{"line":314,"column":24},"end":{"line":317,"column":61}}],"line":314},"19":{"loc":{"start":{"line":318,"column":24},"end":{"line":319,"column":51}},"type":"if","locations":[{"start":{"line":318,"column":24},"end":{"line":319,"column":51}},{"start":{"line":318,"column":24},"end":{"line":319,"column":51}}],"line":318},"20":{"loc":{"start":{"line":324,"column":16},"end":{"line":327,"column":17}},"type":"if","locations":[{"start":{"line":324,"column":16},"end":{"line":327,"column":17}},{"start":{"line":324,"column":16},"end":{"line":327,"column":17}}],"line":324},"21":{"loc":{"start":{"line":333,"column":20},"end":{"line":333,"column":34}},"type":"default-arg","locations":[{"start":{"line":333,"column":30},"end":{"line":333,"column":34}}],"line":333},"22":{"loc":{"start":{"line":339,"column":12},"end":{"line":340,"column":88}},"type":"if","locations":[{"start":{"line":339,"column":12},"end":{"line":340,"column":88}},{"start":{"line":339,"column":12},"end":{"line":340,"column":88}}],"line":339},"23":{"loc":{"start":{"line":345,"column":16},"end":{"line":359,"column":17}},"type":"if","locations":[{"start":{"line":345,"column":16},"end":{"line":359,"column":17}},{"start":{"line":345,"column":16},"end":{"line":359,"column":17}}],"line":345},"24":{"loc":{"start":{"line":346,"column":20},"end":{"line":358,"column":78}},"type":"if","locations":[{"start":{"line":346,"column":20},"end":{"line":358,"column":78}},{"start":{"line":346,"column":20},"end":{"line":358,"column":78}}],"line":346},"25":{"loc":{"start":{"line":349,"column":24},"end":{"line":352,"column":61}},"type":"if","locations":[{"start":{"line":349,"column":24},"end":{"line":352,"column":61}},{"start":{"line":349,"column":24},"end":{"line":352,"column":61}}],"line":349},"26":{"loc":{"start":{"line":353,"column":24},"end":{"line":354,"column":51}},"type":"if","locations":[{"start":{"line":353,"column":24},"end":{"line":354,"column":51}},{"start":{"line":353,"column":24},"end":{"line":354,"column":51}}],"line":353},"27":{"loc":{"start":{"line":360,"column":16},"end":{"line":361,"column":70}},"type":"if","locations":[{"start":{"line":360,"column":16},"end":{"line":361,"column":70}},{"start":{"line":360,"column":16},"end":{"line":361,"column":70}}],"line":360},"28":{"loc":{"start":{"line":363,"column":12},"end":{"line":364,"column":89}},"type":"if","locations":[{"start":{"line":363,"column":12},"end":{"line":364,"column":89}},{"start":{"line":363,"column":12},"end":{"line":364,"column":89}}],"line":363},"29":{"loc":{"start":{"line":369,"column":26},"end":{"line":369,"column":40}},"type":"default-arg","locations":[{"start":{"line":369,"column":36},"end":{"line":369,"column":40}}],"line":369},"30":{"loc":{"start":{"line":375,"column":12},"end":{"line":376,"column":28}},"type":"if","locations":[{"start":{"line":375,"column":12},"end":{"line":376,"column":28}},{"start":{"line":375,"column":12},"end":{"line":376,"column":28}}],"line":375},"31":{"loc":{"start":{"line":381,"column":16},"end":{"line":395,"column":17}},"type":"if","locations":[{"start":{"line":381,"column":16},"end":{"line":395,"column":17}},{"start":{"line":381,"column":16},"end":{"line":395,"column":17}}],"line":381},"32":{"loc":{"start":{"line":382,"column":20},"end":{"line":394,"column":78}},"type":"if","locations":[{"start":{"line":382,"column":20},"end":{"line":394,"column":78}},{"start":{"line":382,"column":20},"end":{"line":394,"column":78}}],"line":382},"33":{"loc":{"start":{"line":385,"column":24},"end":{"line":388,"column":61}},"type":"if","locations":[{"start":{"line":385,"column":24},"end":{"line":388,"column":61}},{"start":{"line":385,"column":24},"end":{"line":388,"column":61}}],"line":385},"34":{"loc":{"start":{"line":389,"column":24},"end":{"line":390,"column":51}},"type":"if","locations":[{"start":{"line":389,"column":24},"end":{"line":390,"column":51}},{"start":{"line":389,"column":24},"end":{"line":390,"column":51}}],"line":389},"35":{"loc":{"start":{"line":396,"column":16},"end":{"line":397,"column":70}},"type":"if","locations":[{"start":{"line":396,"column":16},"end":{"line":397,"column":70}},{"start":{"line":396,"column":16},"end":{"line":397,"column":70}}],"line":396},"36":{"loc":{"start":{"line":505,"column":36},"end":{"line":505,"column":58}},"type":"default-arg","locations":[{"start":{"line":505,"column":54},"end":{"line":505,"column":58}}],"line":505},"37":{"loc":{"start":{"line":505,"column":60},"end":{"line":505,"column":84}},"type":"default-arg","locations":[{"start":{"line":505,"column":80},"end":{"line":505,"column":84}}],"line":505},"38":{"loc":{"start":{"line":512,"column":12},"end":{"line":513,"column":88}},"type":"if","locations":[{"start":{"line":512,"column":12},"end":{"line":513,"column":88}},{"start":{"line":512,"column":12},"end":{"line":513,"column":88}}],"line":512},"39":{"loc":{"start":{"line":517,"column":16},"end":{"line":519,"column":70}},"type":"if","locations":[{"start":{"line":517,"column":16},"end":{"line":519,"column":70}},{"start":{"line":517,"column":16},"end":{"line":519,"column":70}}],"line":517},"40":{"loc":{"start":{"line":517,"column":20},"end":{"line":518,"column":92}},"type":"binary-expr","locations":[{"start":{"line":517,"column":20},"end":{"line":517,"column":55}},{"start":{"line":518,"column":20},"end":{"line":518,"column":92}}],"line":517},"41":{"loc":{"start":{"line":521,"column":12},"end":{"line":522,"column":89}},"type":"if","locations":[{"start":{"line":521,"column":12},"end":{"line":522,"column":89}},{"start":{"line":521,"column":12},"end":{"line":522,"column":89}}],"line":521},"42":{"loc":{"start":{"line":622,"column":42},"end":{"line":622,"column":64}},"type":"default-arg","locations":[{"start":{"line":622,"column":60},"end":{"line":622,"column":64}}],"line":622},"43":{"loc":{"start":{"line":622,"column":66},"end":{"line":622,"column":90}},"type":"default-arg","locations":[{"start":{"line":622,"column":86},"end":{"line":622,"column":90}}],"line":622},"44":{"loc":{"start":{"line":629,"column":12},"end":{"line":630,"column":28}},"type":"if","locations":[{"start":{"line":629,"column":12},"end":{"line":630,"column":28}},{"start":{"line":629,"column":12},"end":{"line":630,"column":28}}],"line":629},"45":{"loc":{"start":{"line":634,"column":16},"end":{"line":636,"column":70}},"type":"if","locations":[{"start":{"line":634,"column":16},"end":{"line":636,"column":70}},{"start":{"line":634,"column":16},"end":{"line":636,"column":70}}],"line":634},"46":{"loc":{"start":{"line":634,"column":20},"end":{"line":635,"column":92}},"type":"binary-expr","locations":[{"start":{"line":634,"column":20},"end":{"line":634,"column":55}},{"start":{"line":635,"column":20},"end":{"line":635,"column":92}}],"line":634},"47":{"loc":{"start":{"line":719,"column":24},"end":{"line":719,"column":38}},"type":"default-arg","locations":[{"start":{"line":719,"column":34},"end":{"line":719,"column":38}}],"line":719},"48":{"loc":{"start":{"line":725,"column":12},"end":{"line":726,"column":88}},"type":"if","locations":[{"start":{"line":725,"column":12},"end":{"line":726,"column":88}},{"start":{"line":725,"column":12},"end":{"line":726,"column":88}}],"line":725},"49":{"loc":{"start":{"line":729,"column":16},"end":{"line":731,"column":53}},"type":"if","locations":[{"start":{"line":729,"column":16},"end":{"line":731,"column":53}},{"start":{"line":729,"column":16},"end":{"line":731,"column":53}}],"line":729},"50":{"loc":{"start":{"line":729,"column":20},"end":{"line":730,"column":75}},"type":"binary-expr","locations":[{"start":{"line":729,"column":20},"end":{"line":729,"column":40}},{"start":{"line":730,"column":20},"end":{"line":730,"column":75}}],"line":729},"51":{"loc":{"start":{"line":733,"column":12},"end":{"line":734,"column":89}},"type":"if","locations":[{"start":{"line":733,"column":12},"end":{"line":734,"column":89}},{"start":{"line":733,"column":12},"end":{"line":734,"column":89}}],"line":733},"52":{"loc":{"start":{"line":809,"column":30},"end":{"line":809,"column":44}},"type":"default-arg","locations":[{"start":{"line":809,"column":40},"end":{"line":809,"column":44}}],"line":809},"53":{"loc":{"start":{"line":815,"column":12},"end":{"line":816,"column":28}},"type":"if","locations":[{"start":{"line":815,"column":12},"end":{"line":816,"column":28}},{"start":{"line":815,"column":12},"end":{"line":816,"column":28}}],"line":815},"54":{"loc":{"start":{"line":819,"column":16},"end":{"line":821,"column":53}},"type":"if","locations":[{"start":{"line":819,"column":16},"end":{"line":821,"column":53}},{"start":{"line":819,"column":16},"end":{"line":821,"column":53}}],"line":819},"55":{"loc":{"start":{"line":819,"column":20},"end":{"line":820,"column":75}},"type":"binary-expr","locations":[{"start":{"line":819,"column":20},"end":{"line":819,"column":40}},{"start":{"line":820,"column":20},"end":{"line":820,"column":75}}],"line":819},"56":{"loc":{"start":{"line":905,"column":20},"end":{"line":905,"column":34}},"type":"default-arg","locations":[{"start":{"line":905,"column":30},"end":{"line":905,"column":34}}],"line":905},"57":{"loc":{"start":{"line":912,"column":12},"end":{"line":913,"column":88}},"type":"if","locations":[{"start":{"line":912,"column":12},"end":{"line":913,"column":88}},{"start":{"line":912,"column":12},"end":{"line":913,"column":88}}],"line":912},"58":{"loc":{"start":{"line":919,"column":16},"end":{"line":932,"column":17}},"type":"if","locations":[{"start":{"line":919,"column":16},"end":{"line":932,"column":17}},{"start":{"line":919,"column":16},"end":{"line":932,"column":17}}],"line":919},"59":{"loc":{"start":{"line":920,"column":20},"end":{"line":931,"column":84}},"type":"if","locations":[{"start":{"line":920,"column":20},"end":{"line":931,"column":84}},{"start":{"line":920,"column":20},"end":{"line":931,"column":84}}],"line":920},"60":{"loc":{"start":{"line":923,"column":24},"end":{"line":926,"column":61}},"type":"if","locations":[{"start":{"line":923,"column":24},"end":{"line":926,"column":61}},{"start":{"line":923,"column":24},"end":{"line":926,"column":61}}],"line":923},"61":{"loc":{"start":{"line":927,"column":24},"end":{"line":928,"column":51}},"type":"if","locations":[{"start":{"line":927,"column":24},"end":{"line":928,"column":51}},{"start":{"line":927,"column":24},"end":{"line":928,"column":51}}],"line":927},"62":{"loc":{"start":{"line":933,"column":16},"end":{"line":936,"column":17}},"type":"if","locations":[{"start":{"line":933,"column":16},"end":{"line":936,"column":17}},{"start":{"line":933,"column":16},"end":{"line":936,"column":17}}],"line":933},"63":{"loc":{"start":{"line":938,"column":12},"end":{"line":939,"column":89}},"type":"if","locations":[{"start":{"line":938,"column":12},"end":{"line":939,"column":89}},{"start":{"line":938,"column":12},"end":{"line":939,"column":89}}],"line":938},"64":{"loc":{"start":{"line":1012,"column":26},"end":{"line":1012,"column":40}},"type":"default-arg","locations":[{"start":{"line":1012,"column":36},"end":{"line":1012,"column":40}}],"line":1012},"65":{"loc":{"start":{"line":1018,"column":12},"end":{"line":1019,"column":28}},"type":"if","locations":[{"start":{"line":1018,"column":12},"end":{"line":1019,"column":28}},{"start":{"line":1018,"column":12},"end":{"line":1019,"column":28}}],"line":1018},"66":{"loc":{"start":{"line":1025,"column":16},"end":{"line":1038,"column":17}},"type":"if","locations":[{"start":{"line":1025,"column":16},"end":{"line":1038,"column":17}},{"start":{"line":1025,"column":16},"end":{"line":1038,"column":17}}],"line":1025},"67":{"loc":{"start":{"line":1026,"column":20},"end":{"line":1037,"column":84}},"type":"if","locations":[{"start":{"line":1026,"column":20},"end":{"line":1037,"column":84}},{"start":{"line":1026,"column":20},"end":{"line":1037,"column":84}}],"line":1026},"68":{"loc":{"start":{"line":1029,"column":24},"end":{"line":1032,"column":61}},"type":"if","locations":[{"start":{"line":1029,"column":24},"end":{"line":1032,"column":61}},{"start":{"line":1029,"column":24},"end":{"line":1032,"column":61}}],"line":1029},"69":{"loc":{"start":{"line":1033,"column":24},"end":{"line":1034,"column":51}},"type":"if","locations":[{"start":{"line":1033,"column":24},"end":{"line":1034,"column":51}},{"start":{"line":1033,"column":24},"end":{"line":1034,"column":51}}],"line":1033},"70":{"loc":{"start":{"line":1039,"column":16},"end":{"line":1042,"column":17}},"type":"if","locations":[{"start":{"line":1039,"column":16},"end":{"line":1042,"column":17}},{"start":{"line":1039,"column":16},"end":{"line":1042,"column":17}}],"line":1039},"71":{"loc":{"start":{"line":1048,"column":20},"end":{"line":1048,"column":34}},"type":"default-arg","locations":[{"start":{"line":1048,"column":30},"end":{"line":1048,"column":34}}],"line":1048},"72":{"loc":{"start":{"line":1054,"column":12},"end":{"line":1055,"column":88}},"type":"if","locations":[{"start":{"line":1054,"column":12},"end":{"line":1055,"column":88}},{"start":{"line":1054,"column":12},"end":{"line":1055,"column":88}}],"line":1054},"73":{"loc":{"start":{"line":1060,"column":16},"end":{"line":1074,"column":17}},"type":"if","locations":[{"start":{"line":1060,"column":16},"end":{"line":1074,"column":17}},{"start":{"line":1060,"column":16},"end":{"line":1074,"column":17}}],"line":1060},"74":{"loc":{"start":{"line":1061,"column":20},"end":{"line":1073,"column":78}},"type":"if","locations":[{"start":{"line":1061,"column":20},"end":{"line":1073,"column":78}},{"start":{"line":1061,"column":20},"end":{"line":1073,"column":78}}],"line":1061},"75":{"loc":{"start":{"line":1064,"column":24},"end":{"line":1067,"column":61}},"type":"if","locations":[{"start":{"line":1064,"column":24},"end":{"line":1067,"column":61}},{"start":{"line":1064,"column":24},"end":{"line":1067,"column":61}}],"line":1064},"76":{"loc":{"start":{"line":1068,"column":24},"end":{"line":1069,"column":51}},"type":"if","locations":[{"start":{"line":1068,"column":24},"end":{"line":1069,"column":51}},{"start":{"line":1068,"column":24},"end":{"line":1069,"column":51}}],"line":1068},"77":{"loc":{"start":{"line":1075,"column":16},"end":{"line":1076,"column":70}},"type":"if","locations":[{"start":{"line":1075,"column":16},"end":{"line":1076,"column":70}},{"start":{"line":1075,"column":16},"end":{"line":1076,"column":70}}],"line":1075},"78":{"loc":{"start":{"line":1078,"column":12},"end":{"line":1079,"column":89}},"type":"if","locations":[{"start":{"line":1078,"column":12},"end":{"line":1079,"column":89}},{"start":{"line":1078,"column":12},"end":{"line":1079,"column":89}}],"line":1078},"79":{"loc":{"start":{"line":1084,"column":26},"end":{"line":1084,"column":40}},"type":"default-arg","locations":[{"start":{"line":1084,"column":36},"end":{"line":1084,"column":40}}],"line":1084},"80":{"loc":{"start":{"line":1090,"column":12},"end":{"line":1091,"column":28}},"type":"if","locations":[{"start":{"line":1090,"column":12},"end":{"line":1091,"column":28}},{"start":{"line":1090,"column":12},"end":{"line":1091,"column":28}}],"line":1090},"81":{"loc":{"start":{"line":1096,"column":16},"end":{"line":1110,"column":17}},"type":"if","locations":[{"start":{"line":1096,"column":16},"end":{"line":1110,"column":17}},{"start":{"line":1096,"column":16},"end":{"line":1110,"column":17}}],"line":1096},"82":{"loc":{"start":{"line":1097,"column":20},"end":{"line":1109,"column":78}},"type":"if","locations":[{"start":{"line":1097,"column":20},"end":{"line":1109,"column":78}},{"start":{"line":1097,"column":20},"end":{"line":1109,"column":78}}],"line":1097},"83":{"loc":{"start":{"line":1100,"column":24},"end":{"line":1103,"column":61}},"type":"if","locations":[{"start":{"line":1100,"column":24},"end":{"line":1103,"column":61}},{"start":{"line":1100,"column":24},"end":{"line":1103,"column":61}}],"line":1100},"84":{"loc":{"start":{"line":1104,"column":24},"end":{"line":1105,"column":51}},"type":"if","locations":[{"start":{"line":1104,"column":24},"end":{"line":1105,"column":51}},{"start":{"line":1104,"column":24},"end":{"line":1105,"column":51}}],"line":1104},"85":{"loc":{"start":{"line":1111,"column":16},"end":{"line":1112,"column":70}},"type":"if","locations":[{"start":{"line":1111,"column":16},"end":{"line":1112,"column":70}},{"start":{"line":1111,"column":16},"end":{"line":1112,"column":70}}],"line":1111},"86":{"loc":{"start":{"line":1220,"column":36},"end":{"line":1220,"column":58}},"type":"default-arg","locations":[{"start":{"line":1220,"column":54},"end":{"line":1220,"column":58}}],"line":1220},"87":{"loc":{"start":{"line":1220,"column":60},"end":{"line":1220,"column":84}},"type":"default-arg","locations":[{"start":{"line":1220,"column":80},"end":{"line":1220,"column":84}}],"line":1220},"88":{"loc":{"start":{"line":1227,"column":12},"end":{"line":1228,"column":88}},"type":"if","locations":[{"start":{"line":1227,"column":12},"end":{"line":1228,"column":88}},{"start":{"line":1227,"column":12},"end":{"line":1228,"column":88}}],"line":1227},"89":{"loc":{"start":{"line":1232,"column":16},"end":{"line":1234,"column":70}},"type":"if","locations":[{"start":{"line":1232,"column":16},"end":{"line":1234,"column":70}},{"start":{"line":1232,"column":16},"end":{"line":1234,"column":70}}],"line":1232},"90":{"loc":{"start":{"line":1232,"column":20},"end":{"line":1233,"column":92}},"type":"binary-expr","locations":[{"start":{"line":1232,"column":20},"end":{"line":1232,"column":55}},{"start":{"line":1233,"column":20},"end":{"line":1233,"column":92}}],"line":1232},"91":{"loc":{"start":{"line":1236,"column":12},"end":{"line":1237,"column":89}},"type":"if","locations":[{"start":{"line":1236,"column":12},"end":{"line":1237,"column":89}},{"start":{"line":1236,"column":12},"end":{"line":1237,"column":89}}],"line":1236},"92":{"loc":{"start":{"line":1339,"column":42},"end":{"line":1339,"column":64}},"type":"default-arg","locations":[{"start":{"line":1339,"column":60},"end":{"line":1339,"column":64}}],"line":1339},"93":{"loc":{"start":{"line":1339,"column":66},"end":{"line":1339,"column":90}},"type":"default-arg","locations":[{"start":{"line":1339,"column":86},"end":{"line":1339,"column":90}}],"line":1339},"94":{"loc":{"start":{"line":1346,"column":12},"end":{"line":1347,"column":28}},"type":"if","locations":[{"start":{"line":1346,"column":12},"end":{"line":1347,"column":28}},{"start":{"line":1346,"column":12},"end":{"line":1347,"column":28}}],"line":1346},"95":{"loc":{"start":{"line":1351,"column":16},"end":{"line":1353,"column":70}},"type":"if","locations":[{"start":{"line":1351,"column":16},"end":{"line":1353,"column":70}},{"start":{"line":1351,"column":16},"end":{"line":1353,"column":70}}],"line":1351},"96":{"loc":{"start":{"line":1351,"column":20},"end":{"line":1352,"column":92}},"type":"binary-expr","locations":[{"start":{"line":1351,"column":20},"end":{"line":1351,"column":55}},{"start":{"line":1352,"column":20},"end":{"line":1352,"column":92}}],"line":1351},"97":{"loc":{"start":{"line":1434,"column":24},"end":{"line":1434,"column":38}},"type":"default-arg","locations":[{"start":{"line":1434,"column":34},"end":{"line":1434,"column":38}}],"line":1434},"98":{"loc":{"start":{"line":1440,"column":12},"end":{"line":1441,"column":88}},"type":"if","locations":[{"start":{"line":1440,"column":12},"end":{"line":1441,"column":88}},{"start":{"line":1440,"column":12},"end":{"line":1441,"column":88}}],"line":1440},"99":{"loc":{"start":{"line":1444,"column":16},"end":{"line":1446,"column":53}},"type":"if","locations":[{"start":{"line":1444,"column":16},"end":{"line":1446,"column":53}},{"start":{"line":1444,"column":16},"end":{"line":1446,"column":53}}],"line":1444},"100":{"loc":{"start":{"line":1444,"column":20},"end":{"line":1445,"column":75}},"type":"binary-expr","locations":[{"start":{"line":1444,"column":20},"end":{"line":1444,"column":40}},{"start":{"line":1445,"column":20},"end":{"line":1445,"column":75}}],"line":1444},"101":{"loc":{"start":{"line":1448,"column":12},"end":{"line":1449,"column":89}},"type":"if","locations":[{"start":{"line":1448,"column":12},"end":{"line":1449,"column":89}},{"start":{"line":1448,"column":12},"end":{"line":1449,"column":89}}],"line":1448},"102":{"loc":{"start":{"line":1522,"column":30},"end":{"line":1522,"column":44}},"type":"default-arg","locations":[{"start":{"line":1522,"column":40},"end":{"line":1522,"column":44}}],"line":1522},"103":{"loc":{"start":{"line":1528,"column":12},"end":{"line":1529,"column":28}},"type":"if","locations":[{"start":{"line":1528,"column":12},"end":{"line":1529,"column":28}},{"start":{"line":1528,"column":12},"end":{"line":1529,"column":28}}],"line":1528},"104":{"loc":{"start":{"line":1532,"column":16},"end":{"line":1534,"column":53}},"type":"if","locations":[{"start":{"line":1532,"column":16},"end":{"line":1534,"column":53}},{"start":{"line":1532,"column":16},"end":{"line":1534,"column":53}}],"line":1532},"105":{"loc":{"start":{"line":1532,"column":20},"end":{"line":1533,"column":75}},"type":"binary-expr","locations":[{"start":{"line":1532,"column":20},"end":{"line":1532,"column":40}},{"start":{"line":1533,"column":20},"end":{"line":1533,"column":75}}],"line":1532},"106":{"loc":{"start":{"line":1845,"column":19},"end":{"line":1845,"column":33}},"type":"default-arg","locations":[{"start":{"line":1845,"column":29},"end":{"line":1845,"column":33}}],"line":1845},"107":{"loc":{"start":{"line":1851,"column":12},"end":{"line":1852,"column":29}},"type":"if","locations":[{"start":{"line":1851,"column":12},"end":{"line":1852,"column":29}},{"start":{"line":1851,"column":12},"end":{"line":1852,"column":29}}],"line":1851},"108":{"loc":{"start":{"line":1854,"column":16},"end":{"line":1855,"column":33}},"type":"if","locations":[{"start":{"line":1854,"column":16},"end":{"line":1855,"column":33}},{"start":{"line":1854,"column":16},"end":{"line":1855,"column":33}}],"line":1854},"109":{"loc":{"start":{"line":1943,"column":19},"end":{"line":1943,"column":33}},"type":"default-arg","locations":[{"start":{"line":1943,"column":29},"end":{"line":1943,"column":33}}],"line":1943},"110":{"loc":{"start":{"line":1949,"column":12},"end":{"line":1950,"column":29}},"type":"if","locations":[{"start":{"line":1949,"column":12},"end":{"line":1950,"column":29}},{"start":{"line":1949,"column":12},"end":{"line":1950,"column":29}}],"line":1949},"111":{"loc":{"start":{"line":1952,"column":16},"end":{"line":1953,"column":32}},"type":"if","locations":[{"start":{"line":1952,"column":16},"end":{"line":1953,"column":32}},{"start":{"line":1952,"column":16},"end":{"line":1953,"column":32}}],"line":1952},"112":{"loc":{"start":{"line":2003,"column":19},"end":{"line":2003,"column":70}},"type":"binary-expr","locations":[{"start":{"line":2003,"column":19},"end":{"line":2003,"column":51}},{"start":{"line":2003,"column":55},"end":{"line":2003,"column":70}}],"line":2003},"113":{"loc":{"start":{"line":2106,"column":19},"end":{"line":2106,"column":70}},"type":"binary-expr","locations":[{"start":{"line":2106,"column":19},"end":{"line":2106,"column":51}},{"start":{"line":2106,"column":55},"end":{"line":2106,"column":70}}],"line":2106},"114":{"loc":{"start":{"line":2173,"column":9},"end":{"line":2173,"column":25}},"type":"default-arg","locations":[{"start":{"line":2173,"column":21},"end":{"line":2173,"column":25}}],"line":2173},"115":{"loc":{"start":{"line":2173,"column":27},"end":{"line":2173,"column":41}},"type":"default-arg","locations":[{"start":{"line":2173,"column":37},"end":{"line":2173,"column":41}}],"line":2173},"116":{"loc":{"start":{"line":2174,"column":8},"end":{"line":2175,"column":48}},"type":"if","locations":[{"start":{"line":2174,"column":8},"end":{"line":2175,"column":48}},{"start":{"line":2174,"column":8},"end":{"line":2175,"column":48}}],"line":2174},"117":{"loc":{"start":{"line":2180,"column":12},"end":{"line":2181,"column":28}},"type":"if","locations":[{"start":{"line":2180,"column":12},"end":{"line":2181,"column":28}},{"start":{"line":2180,"column":12},"end":{"line":2181,"column":28}}],"line":2180},"118":{"loc":{"start":{"line":2180,"column":16},"end":{"line":2180,"column":67}},"type":"binary-expr","locations":[{"start":{"line":2180,"column":16},"end":{"line":2180,"column":48}},{"start":{"line":2180,"column":52},"end":{"line":2180,"column":67}}],"line":2180},"119":{"loc":{"start":{"line":2182,"column":12},"end":{"line":2187,"column":13}},"type":"if","locations":[{"start":{"line":2182,"column":12},"end":{"line":2187,"column":13}},{"start":{"line":2182,"column":12},"end":{"line":2187,"column":13}}],"line":2182},"120":{"loc":{"start":{"line":2184,"column":20},"end":{"line":2185,"column":37}},"type":"if","locations":[{"start":{"line":2184,"column":20},"end":{"line":2185,"column":37}},{"start":{"line":2184,"column":20},"end":{"line":2185,"column":37}}],"line":2184},"121":{"loc":{"start":{"line":2267,"column":20},"end":{"line":2267,"column":34}},"type":"default-arg","locations":[{"start":{"line":2267,"column":30},"end":{"line":2267,"column":34}}],"line":2267},"122":{"loc":{"start":{"line":2273,"column":12},"end":{"line":2279,"column":13}},"type":"if","locations":[{"start":{"line":2273,"column":12},"end":{"line":2279,"column":13}},{"start":{"line":2273,"column":12},"end":{"line":2279,"column":13}}],"line":2273},"123":{"loc":{"start":{"line":2276,"column":20},"end":{"line":2277,"column":30}},"type":"if","locations":[{"start":{"line":2276,"column":20},"end":{"line":2277,"column":30}},{"start":{"line":2276,"column":20},"end":{"line":2277,"column":30}}],"line":2276},"124":{"loc":{"start":{"line":2276,"column":24},"end":{"line":2276,"column":85}},"type":"binary-expr","locations":[{"start":{"line":2276,"column":24},"end":{"line":2276,"column":39}},{"start":{"line":2276,"column":43},"end":{"line":2276,"column":85}}],"line":2276},"125":{"loc":{"start":{"line":2284,"column":19},"end":{"line":2284,"column":33}},"type":"default-arg","locations":[{"start":{"line":2284,"column":29},"end":{"line":2284,"column":33}}],"line":2284},"126":{"loc":{"start":{"line":2290,"column":12},"end":{"line":2296,"column":13}},"type":"if","locations":[{"start":{"line":2290,"column":12},"end":{"line":2296,"column":13}},{"start":{"line":2290,"column":12},"end":{"line":2296,"column":13}}],"line":2290},"127":{"loc":{"start":{"line":2293,"column":20},"end":{"line":2294,"column":30}},"type":"if","locations":[{"start":{"line":2293,"column":20},"end":{"line":2294,"column":30}},{"start":{"line":2293,"column":20},"end":{"line":2294,"column":30}}],"line":2293},"128":{"loc":{"start":{"line":2293,"column":24},"end":{"line":2293,"column":85}},"type":"binary-expr","locations":[{"start":{"line":2293,"column":24},"end":{"line":2293,"column":39}},{"start":{"line":2293,"column":43},"end":{"line":2293,"column":85}}],"line":2293},"129":{"loc":{"start":{"line":2303,"column":22},"end":{"line":2303,"column":36}},"type":"default-arg","locations":[{"start":{"line":2303,"column":32},"end":{"line":2303,"column":36}}],"line":2303},"130":{"loc":{"start":{"line":2310,"column":12},"end":{"line":2314,"column":13}},"type":"if","locations":[{"start":{"line":2310,"column":12},"end":{"line":2314,"column":13}},{"start":{"line":2310,"column":12},"end":{"line":2314,"column":13}}],"line":2310},"131":{"loc":{"start":{"line":2312,"column":20},"end":{"line":2313,"column":63}},"type":"if","locations":[{"start":{"line":2312,"column":20},"end":{"line":2313,"column":63}},{"start":{"line":2312,"column":20},"end":{"line":2313,"column":63}}],"line":2312},"132":{"loc":{"start":{"line":2315,"column":12},"end":{"line":2326,"column":13}},"type":"if","locations":[{"start":{"line":2315,"column":12},"end":{"line":2326,"column":13}},{"start":{"line":2315,"column":12},"end":{"line":2326,"column":13}}],"line":2315},"133":{"loc":{"start":{"line":2317,"column":17},"end":{"line":2326,"column":13}},"type":"if","locations":[{"start":{"line":2317,"column":17},"end":{"line":2326,"column":13}},{"start":{"line":2317,"column":17},"end":{"line":2326,"column":13}}],"line":2317},"134":{"loc":{"start":{"line":2331,"column":25},"end":{"line":2331,"column":39}},"type":"default-arg","locations":[{"start":{"line":2331,"column":35},"end":{"line":2331,"column":39}}],"line":2331},"135":{"loc":{"start":{"line":2338,"column":12},"end":{"line":2342,"column":13}},"type":"if","locations":[{"start":{"line":2338,"column":12},"end":{"line":2342,"column":13}},{"start":{"line":2338,"column":12},"end":{"line":2342,"column":13}}],"line":2338},"136":{"loc":{"start":{"line":2340,"column":20},"end":{"line":2341,"column":63}},"type":"if","locations":[{"start":{"line":2340,"column":20},"end":{"line":2341,"column":63}},{"start":{"line":2340,"column":20},"end":{"line":2341,"column":63}}],"line":2340},"137":{"loc":{"start":{"line":2343,"column":12},"end":{"line":2354,"column":13}},"type":"if","locations":[{"start":{"line":2343,"column":12},"end":{"line":2354,"column":13}},{"start":{"line":2343,"column":12},"end":{"line":2354,"column":13}}],"line":2343},"138":{"loc":{"start":{"line":2345,"column":17},"end":{"line":2354,"column":13}},"type":"if","locations":[{"start":{"line":2345,"column":17},"end":{"line":2354,"column":13}},{"start":{"line":2345,"column":17},"end":{"line":2354,"column":13}}],"line":2345},"139":{"loc":{"start":{"line":2432,"column":23},"end":{"line":2432,"column":37}},"type":"default-arg","locations":[{"start":{"line":2432,"column":33},"end":{"line":2432,"column":37}}],"line":2432},"140":{"loc":{"start":{"line":2439,"column":12},"end":{"line":2443,"column":13}},"type":"if","locations":[{"start":{"line":2439,"column":12},"end":{"line":2443,"column":13}},{"start":{"line":2439,"column":12},"end":{"line":2443,"column":13}}],"line":2439},"141":{"loc":{"start":{"line":2449,"column":38},"end":{"line":2449,"column":52}},"type":"default-arg","locations":[{"start":{"line":2449,"column":48},"end":{"line":2449,"column":52}}],"line":2449},"142":{"loc":{"start":{"line":2456,"column":12},"end":{"line":2470,"column":13}},"type":"if","locations":[{"start":{"line":2456,"column":12},"end":{"line":2470,"column":13}},{"start":{"line":2456,"column":12},"end":{"line":2470,"column":13}}],"line":2456},"143":{"loc":{"start":{"line":2537,"column":19},"end":{"line":2537,"column":33}},"type":"default-arg","locations":[{"start":{"line":2537,"column":29},"end":{"line":2537,"column":33}}],"line":2537},"144":{"loc":{"start":{"line":2544,"column":12},"end":{"line":2548,"column":13}},"type":"if","locations":[{"start":{"line":2544,"column":12},"end":{"line":2548,"column":13}},{"start":{"line":2544,"column":12},"end":{"line":2548,"column":13}}],"line":2544},"145":{"loc":{"start":{"line":2554,"column":34},"end":{"line":2554,"column":48}},"type":"default-arg","locations":[{"start":{"line":2554,"column":44},"end":{"line":2554,"column":48}}],"line":2554},"146":{"loc":{"start":{"line":2561,"column":12},"end":{"line":2575,"column":13}},"type":"if","locations":[{"start":{"line":2561,"column":12},"end":{"line":2575,"column":13}},{"start":{"line":2561,"column":12},"end":{"line":2575,"column":13}}],"line":2561},"147":{"loc":{"start":{"line":2661,"column":26},"end":{"line":2661,"column":40}},"type":"default-arg","locations":[{"start":{"line":2661,"column":36},"end":{"line":2661,"column":40}}],"line":2661},"148":{"loc":{"start":{"line":2668,"column":12},"end":{"line":2674,"column":13}},"type":"if","locations":[{"start":{"line":2668,"column":12},"end":{"line":2674,"column":13}},{"start":{"line":2668,"column":12},"end":{"line":2674,"column":13}}],"line":2668},"149":{"loc":{"start":{"line":2671,"column":20},"end":{"line":2672,"column":55}},"type":"if","locations":[{"start":{"line":2671,"column":20},"end":{"line":2672,"column":55}},{"start":{"line":2671,"column":20},"end":{"line":2672,"column":55}}],"line":2671},"150":{"loc":{"start":{"line":2671,"column":24},"end":{"line":2671,"column":67}},"type":"binary-expr","locations":[{"start":{"line":2671,"column":24},"end":{"line":2671,"column":41}},{"start":{"line":2671,"column":45},"end":{"line":2671,"column":67}}],"line":2671},"151":{"loc":{"start":{"line":2680,"column":41},"end":{"line":2680,"column":55}},"type":"default-arg","locations":[{"start":{"line":2680,"column":51},"end":{"line":2680,"column":55}}],"line":2680},"152":{"loc":{"start":{"line":2687,"column":12},"end":{"line":2701,"column":13}},"type":"if","locations":[{"start":{"line":2687,"column":12},"end":{"line":2701,"column":13}},{"start":{"line":2687,"column":12},"end":{"line":2701,"column":13}}],"line":2687}},"s":{"0":1,"1":1,"2":1,"3":1124,"4":1124,"5":1124,"6":8,"7":4,"8":8,"9":8,"10":8,"11":0,"12":8,"13":8,"14":40,"15":20,"16":20,"17":8,"18":8,"19":8,"20":12,"21":12,"22":12,"23":12,"24":12,"25":0,"26":12,"27":12,"28":12,"29":24,"30":24,"31":24,"32":16,"33":8,"34":8,"35":8,"36":0,"37":8,"38":8,"39":0,"40":8,"41":24,"42":12,"43":12,"44":12,"45":4,"46":8,"47":12,"48":12,"49":12,"50":12,"51":12,"52":0,"53":12,"54":12,"55":12,"56":24,"57":24,"58":24,"59":16,"60":8,"61":8,"62":8,"63":0,"64":8,"65":8,"66":0,"67":8,"68":24,"69":12,"70":12,"71":12,"72":12,"73":9,"74":9,"75":9,"76":9,"77":0,"78":9,"79":9,"80":24,"81":24,"82":24,"83":16,"84":8,"85":8,"86":8,"87":0,"88":8,"89":8,"90":0,"91":8,"92":24,"93":12,"94":9,"95":1,"96":8,"97":9,"98":12,"99":12,"100":12,"101":12,"102":0,"103":12,"104":12,"105":24,"106":24,"107":24,"108":16,"109":8,"110":8,"111":8,"112":0,"113":8,"114":8,"115":0,"116":8,"117":24,"118":12,"119":12,"120":12,"121":5,"122":5,"123":5,"124":5,"125":5,"126":0,"127":5,"128":5,"129":12,"130":12,"131":8,"132":5,"133":1,"134":4,"135":5,"136":5,"137":5,"138":5,"139":5,"140":5,"141":0,"142":5,"143":5,"144":12,"145":12,"146":8,"147":5,"148":5,"149":8,"150":8,"151":8,"152":8,"153":0,"154":8,"155":8,"156":12,"157":8,"158":8,"159":4,"160":4,"161":8,"162":8,"163":8,"164":8,"165":8,"166":0,"167":8,"168":8,"169":12,"170":8,"171":8,"172":8,"173":12,"174":12,"175":12,"176":12,"177":12,"178":0,"179":12,"180":12,"181":12,"182":24,"183":24,"184":24,"185":16,"186":8,"187":8,"188":8,"189":0,"190":8,"191":8,"192":4,"193":8,"194":24,"195":16,"196":16,"197":12,"198":4,"199":8,"200":12,"201":12,"202":12,"203":12,"204":12,"205":0,"206":12,"207":12,"208":12,"209":24,"210":24,"211":24,"212":16,"213":8,"214":8,"215":8,"216":0,"217":8,"218":8,"219":4,"220":8,"221":24,"222":16,"223":16,"224":12,"225":12,"226":9,"227":9,"228":9,"229":9,"230":0,"231":9,"232":9,"233":24,"234":24,"235":24,"236":16,"237":8,"238":8,"239":8,"240":0,"241":8,"242":8,"243":4,"244":8,"245":24,"246":16,"247":9,"248":1,"249":8,"250":9,"251":12,"252":12,"253":12,"254":12,"255":0,"256":12,"257":12,"258":24,"259":24,"260":24,"261":16,"262":8,"263":8,"264":8,"265":0,"266":8,"267":8,"268":4,"269":8,"270":24,"271":16,"272":12,"273":12,"274":5,"275":5,"276":5,"277":5,"278":5,"279":0,"280":5,"281":5,"282":12,"283":12,"284":8,"285":5,"286":1,"287":4,"288":5,"289":5,"290":5,"291":5,"292":5,"293":5,"294":0,"295":5,"296":5,"297":12,"298":12,"299":8,"300":5,"301":5,"302":8,"303":8,"304":8,"305":8,"306":0,"307":8,"308":8,"309":12,"310":8,"311":8,"312":4,"313":4,"314":8,"315":8,"316":8,"317":8,"318":8,"319":0,"320":8,"321":8,"322":12,"323":8,"324":8,"325":8,"326":4,"327":4,"328":4,"329":4,"330":12,"331":12,"332":12,"333":12,"334":6,"335":6,"336":6,"337":6,"338":0,"339":6,"340":21,"341":3,"342":3,"343":6,"344":6,"345":6,"346":6,"347":6,"348":0,"349":6,"350":24,"351":3,"352":3,"353":6,"354":6,"355":6,"356":6,"357":6,"358":10,"359":10,"360":10,"361":10,"362":10,"363":10,"364":10,"365":10,"366":10,"367":10,"368":5,"369":10,"370":10,"371":10,"372":3,"373":7,"374":5,"375":19,"376":2,"377":3,"378":2,"379":10,"380":39,"381":39,"382":39,"383":39,"384":39,"385":153,"386":153,"387":0,"388":39,"389":3,"390":3,"391":3,"392":3,"393":3,"394":15,"395":15,"396":0,"397":3,"398":3,"399":75,"400":75,"401":75,"402":75,"403":75,"404":75,"405":319,"406":14,"407":75,"408":27,"409":48,"410":27,"411":21,"412":21,"413":2,"414":2,"415":21,"416":75,"417":5,"418":5,"419":5,"420":5,"421":5,"422":5,"423":33,"424":23,"425":5,"426":2,"427":3,"428":2,"429":1,"430":1,"431":3,"432":3,"433":1,"434":5,"435":6,"436":6,"437":6,"438":6,"439":6,"440":6,"441":18,"442":40,"443":6,"444":6,"445":3,"446":3,"447":3,"448":3,"449":3,"450":3,"451":20,"452":0,"453":0,"454":3,"455":3,"456":6,"457":6,"458":6,"459":6,"460":6,"461":6,"462":22,"463":6,"464":6,"465":3,"466":3,"467":3,"468":3,"469":3,"470":2,"471":8,"472":1,"473":3,"474":3,"475":3,"476":6,"477":6,"478":6,"479":6,"480":6,"481":6,"482":30,"483":30,"484":12,"485":6,"486":6,"487":3,"488":3,"489":3,"490":3,"491":3,"492":2,"493":4,"494":1,"495":2,"496":3,"497":3,"498":1},"f":{"0":1124,"1":8,"2":8,"3":12,"4":12,"5":12,"6":12,"7":9,"8":9,"9":12,"10":12,"11":5,"12":5,"13":5,"14":5,"15":8,"16":8,"17":8,"18":8,"19":12,"20":12,"21":12,"22":12,"23":9,"24":9,"25":12,"26":12,"27":5,"28":5,"29":5,"30":5,"31":8,"32":8,"33":8,"34":8,"35":4,"36":4,"37":12,"38":12,"39":6,"40":6,"41":6,"42":6,"43":6,"44":6,"45":10,"46":10,"47":10,"48":10,"49":10,"50":10,"51":39,"52":39,"53":3,"54":3,"55":75,"56":75,"57":2,"58":5,"59":5,"60":3,"61":6,"62":6,"63":3,"64":3,"65":20,"66":0,"67":6,"68":6,"69":3,"70":3,"71":8,"72":3,"73":6,"74":6,"75":3,"76":3,"77":4,"78":2},"b":{"0":[4],"1":[8],"2":[4,4],"3":[0,8],"4":[20,20],"5":[8,12],"6":[9],"7":[0,12],"8":[16,8],"9":[8,8],"10":[0,8],"11":[0,8],"12":[12,12],"13":[4,8],"14":[9],"15":[0,12],"16":[16,8],"17":[8,8],"18":[0,8],"19":[0,8],"20":[12,12],"21":[9],"22":[0,9],"23":[16,8],"24":[8,8],"25":[0,8],"26":[0,8],"27":[12,12],"28":[1,8],"29":[12],"30":[0,12],"31":[16,8],"32":[8,8],"33":[0,8],"34":[0,8],"35":[12,12],"36":[5],"37":[5],"38":[0,5],"39":[8,4],"40":[12,8],"41":[1,4],"42":[5],"43":[5],"44":[0,5],"45":[8,4],"46":[12,8],"47":[6],"48":[0,8],"49":[8,4],"50":[12,8],"51":[4,4],"52":[6],"53":[0,8],"54":[8,4],"55":[12,8],"56":[9],"57":[0,12],"58":[16,8],"59":[8,8],"60":[0,8],"61":[4,4],"62":[16,8],"63":[4,8],"64":[9],"65":[0,12],"66":[16,8],"67":[8,8],"68":[0,8],"69":[4,4],"70":[16,8],"71":[9],"72":[0,9],"73":[16,8],"74":[8,8],"75":[0,8],"76":[4,4],"77":[16,8],"78":[1,8],"79":[12],"80":[0,12],"81":[16,8],"82":[8,8],"83":[0,8],"84":[4,4],"85":[16,8],"86":[5],"87":[5],"88":[0,5],"89":[8,4],"90":[12,8],"91":[1,4],"92":[5],"93":[5],"94":[0,5],"95":[8,4],"96":[12,8],"97":[6],"98":[0,8],"99":[8,4],"100":[12,8],"101":[4,4],"102":[6],"103":[0,8],"104":[8,4],"105":[12,8],"106":[6],"107":[0,6],"108":[3,18],"109":[6],"110":[0,6],"111":[3,21],"112":[6,6],"113":[10,10],"114":[5],"115":[10],"116":[5,5],"117":[3,7],"118":[10,10],"119":[5,2],"120":[2,17],"121":[39],"122":[39,0],"123":[0,153],"124":[153,153],"125":[0],"126":[3,0],"127":[0,15],"128":[15,15],"129":[0],"130":[75,0],"131":[14,305],"132":[27,48],"133":[27,21],"134":[0],"135":[5,0],"136":[23,10],"137":[2,3],"138":[2,1],"139":[3],"140":[6,0],"141":[0],"142":[3,0],"143":[3],"144":[6,0],"145":[0],"146":[2,1],"147":[3],"148":[6,0],"149":[12,18],"150":[30,12],"151":[0],"152":[2,1]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/KoconutIterable.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/KoconutIterable.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  /* Tool */\n  KoconutPrimitive,\n  KoconutOpener,\n  KoconutDeprecation,\n  KoconutTypeChecker,\n\n  /* Container */\n  KoconutArray,\n  KoconutSet,\n  Entry,\n  KoconutBoolean,\n\n  /* Enum */\n  KoconutLoopSignal,\n\n  /* Exception */\n  KoconutNoSuchElementException,\n\n  /* Protocol */\n  KoconutComparable,\n\n  /* Callbacks */\n  Predicator,\n  Selector,\n  Comparator,\n  Action,\n  Transformer,\n} from '../../module';\n\nexport class KoconutIterable<\n  DataType,\n  CombinedDataType,\n  WrapperType extends Iterable<DataType>,\n  CombinedWrapperType extends Iterable<CombinedDataType>,\n> extends KoconutPrimitive<WrapperType> {\n  protected combinedDataWrapper: CombinedWrapperType | null = null;\n  protected mSize: number = 0;\n\n  // Calculator\n  /**\n   * Returns the number of the elements matching the given ```predicate```. If the ```predicate``` is ommitted it'll returns the whole number of elements.\n   * @param {Predicator<CombinedDataType> | null} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<number>}\n   *\n   * @since 1.0.10\n   *\n   * @category Calculator\n   *\n   * @example\n   * ``` typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const numberOfAllArrayElements = await koconutArray\n   *                                       .count()\n   *                                       .yield()\n   * console.log(numberOfAllArrayElements)\n   * // ↑ 5\n   *\n   * const numberOfArrayElementsHigherThan2 = await koconutArray\n   *                                           .count(eachNumber => eachNumber > 2)\n   *                                           .yield()\n   * console.log(numberOfArrayElementsHigherThan2)\n   * // ↑ 3 -- i.e. [3, 4, 5]\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const numberOfAllSetElements = await koconutSet\n   *                                       .count()\n   *                                       .yield()\n   * console.log(numberOfAllSetElements)\n   * // ↑ 5\n   *\n   * const numberOfOddSetElements = await koconutSet\n   *                                       .count(eachNumber => eachNumber % 2 == 1)\n   *                                       .yield()\n   * console.log(numberOfOddSetElements)\n   * // ↑ 3 -- i.e. [1, 3, 5]\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1,2,3)\n   *                   .associateWith(eachNumber => eachNumber * 2)\n   *                   // ↑ Map { 1 => 2,\n   *                   //         2 => 4,\n   *                   //         3 => 6 }\n   *\n   * const numberOfAllMapEntries = await koconutMap\n   *                                   .count()\n   *                                   .yield()\n   * console.log(numberOfAllMapEntries)\n   * // ↑ 3\n   *\n   * const numberOfMapEntriesValueHigherThan5 = await koconutMap\n   *                                               .count(eachEntry => eachEntry.value > 5)\n   *                                               .yield()\n   * console.log(numberOfMapEntriesValueHigherThan5)\n   * // ↑ 1 -- i.e. Entry { 3, 6 }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const numberOfArrayElementsLessThan3 = await koconutArray2\n   *                                       .count(async eachNumber => eachNumber < 3)\n   *                                       .yield()\n   * console.log(numberOfArrayElementsLessThan3)\n   * // ↑ 2 -- i.e. [1, 2]\n   *\n   * const numberOfEvenArrayElements = await koconutArray2\n   *                                   .count(eachNumber => new Promise(resolve => {\n   *                                       resolve(eachNumber % 2 == 0)\n   *                                   }))\n   *                                   .yield()\n   * console.log(numberOfEvenArrayElements)\n   * // ↑ 2 -- i.e. [2, 4]\n   * ```\n   */\n  count(\n    predicate: Predicator<CombinedDataType> | null = null,\n    thisArg: any = null,\n  ): KoconutPrimitive<number> {\n    if (predicate) predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<number>();\n    (koconutToReturn as any as KoconutOpener<number>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return 0;\n        let count = 0;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          if (!predicate) count++;\n          else if (await predicate(eachCombinedDatum)) count++;\n        }\n        return count;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element yielding the largest value of the given function or\n   * throws {@link KoconutNoSuchElementException} if there are no elements.\n   * @param {Selector<CombinedDataType, number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<CombinedDataType>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   * @deprecated Use {@link maxByOrNull} instead.\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const largestNumberOfArray = await koconutArray\n   *                               .maxBy(eachNumber => eachNumber)\n   *                               .yield()\n   * console.log(largestNumberOfArray)\n   * // ↑ 5\n   *\n   * try {\n   *   await koconutArray\n   *           .filter(eachNumber => eachNumber > 10)\n   *           .maxBy(eachNumber => eachNumber)\n   *           .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut No Such Element Exception\n   *   // i.e. -- Array is filtered.\n   *   // No element in 1 to 5 is greater than 10.\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const longestStringOfSet = await koconutSet\n   *                               .maxBy(eachString => eachString.length)\n   *                               .yield()\n   * console.log(longestStringOfSet)\n   * // ↑ abc\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1, 12, 123)\n   *                   .associateWith(eachNumber => eachNumber.toString())\n   *\n   * const longestDigitsEntryOfMap = await koconutMap\n   *                                       .maxBy(eachEntry => eachEntry.value.length)\n   *                                       .yield()\n   * console.log(longestDigitsEntryOfMap)\n   * // ↑ Entry { keyElement: 123, valueElement: '123' }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(19,27,32)\n   *\n   * const largestNumberOfArray2 = await koconutArray2\n   *                                   .maxBy(async eachNumber => eachNumber)\n   *                                   .yield()\n   * console.log(largestNumberOfArray2)\n   * // ↑ 32\n   *\n   * const largest1sDigitNumberOfArray2 = await koconutArray2\n   *                                       .maxBy(eachNumber => new Promise(resolve => {\n   *                                           resolve(eachNumber % 10)\n   *                                       }))\n   *                                       .yield()\n   * console.log(largest1sDigitNumberOfArray2)\n   * // ↑ 19\n   * ```\n   */\n  maxBy(\n    selector: Selector<CombinedDataType, number | string | KoconutComparable>,\n    thisArg: any = null,\n  ): KoconutPrimitive<CombinedDataType> {\n    KoconutDeprecation.showDeprecationWarning('1.2.0', this.maxByOrNull);\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<CombinedDataType>();\n    (koconutToReturn as any as KoconutOpener<CombinedDataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null)\n          throw new KoconutNoSuchElementException(`Source data is null`);\n        let dataToReturn: CombinedDataType | null = null;\n        let lastComparableDatum: number | string | KoconutComparable | null =\n          null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n\n          let shouldBeChanged = lastComparableDatum == null;\n          if (!shouldBeChanged) {\n            if (KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n              const eachCompareResult =\n                eachComparableDatum.compareTo(lastComparableDatum);\n              let numberResult = 0;\n              if (eachCompareResult instanceof KoconutPrimitive)\n                numberResult = await eachCompareResult.yield();\n              else numberResult = eachCompareResult;\n              if (numberResult > 0) shouldBeChanged = true;\n            } else shouldBeChanged = lastComparableDatum! < eachComparableDatum;\n          }\n          if (shouldBeChanged) {\n            dataToReturn = eachCombinedDatum;\n            lastComparableDatum = eachComparableDatum;\n          }\n        }\n        if (dataToReturn == null)\n          throw new KoconutNoSuchElementException(`Source data is empty`);\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element yielding the largest value of the given function or null if there are no elements.\n   *\n   * @param {Selector<CombinedDataType, number| string| KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<CombinedDataType | null>}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const largestNumberOfArray = await koconutArray\n   *                               .maxByOrNull(eachNumber => eachNumber)\n   *                               .yield()\n   * console.log(largestNumberOfArray)\n   * // ↑ 5\n   *\n   *\n   * const largestNumberOfEmptyArray = await koconutArray\n   *                                 .filter(eachNumber => eachNumber > 10)\n   *                                 .maxByOrNull(eachNumber => eachNumber)\n   *                                 .yield()\n   * console.log(largestNumberOfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const longestStringOfSet = await koconutSet\n   *                               .maxByOrNull(eachString => eachString.length)\n   *                               .yield()\n   * console.log(longestStringOfSet)\n   * // ↑ abc\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1, 12, 123)\n   *                   .associateWith(eachNumber => eachNumber.toString())\n   *\n   * const longestDigitsEntryOfMap = await koconutMap\n   *                                       .maxByOrNull(eachEntry => eachEntry.value.length)\n   *                                       .yield()\n   * console.log(longestDigitsEntryOfMap)\n   * // ↑ Entry { keyElement: 123, valueElement: '123' }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(19,27,32)\n   *\n   * const largestNumberOfArray2 = await koconutArray2\n   *                                   .maxByOrNull(async eachNumber => eachNumber)\n   *                                   .yield()\n   * console.log(largestNumberOfArray2)\n   * // ↑ 32\n   *\n   * const largest1sDigitNumberOfArray2 = await koconutArray2\n   *                                       .maxByOrNull(eachNumber => new Promise(resolve => {\n   *                                           resolve(eachNumber % 10)\n   *                                       }))\n   *                                       .yield()\n   * console.log(largest1sDigitNumberOfArray2)\n   * // ↑ 19\n   * ```\n   */\n  maxByOrNull(\n    selector: Selector<CombinedDataType, number | string | KoconutComparable>,\n    thisArg: any = null,\n  ): KoconutPrimitive<CombinedDataType | null> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<CombinedDataType | null>();\n    (koconutToReturn as any as KoconutOpener<CombinedDataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return null;\n        let dataToReturn: CombinedDataType | null = null;\n        let lastComparableDatum: number | string | KoconutComparable | null =\n          null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n\n          let shouldBeChanged = lastComparableDatum == null;\n          if (!shouldBeChanged) {\n            if (KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n              const eachCompareResult =\n                eachComparableDatum.compareTo(lastComparableDatum);\n              let numberResult = 0;\n              if (eachCompareResult instanceof KoconutPrimitive)\n                numberResult = await eachCompareResult.yield();\n              else numberResult = eachCompareResult;\n              if (numberResult > 0) shouldBeChanged = true;\n            } else shouldBeChanged = lastComparableDatum! < eachComparableDatum;\n          }\n          if (shouldBeChanged) {\n            dataToReturn = eachCombinedDatum;\n            lastComparableDatum = eachComparableDatum;\n          }\n        }\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the largest value among all values produced by ```selector``` function applied to each element in the collection or\n   * throws {@link KoconutNoSuchElementException} if there are no elements.\n   * @param {Selector<CombinedDataType, number | string | ComparableType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<number | string | ComparableType> }\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,7,9)\n   *\n   * const largestRemainderNumberDividedBy5OfArray = await koconutArray\n   *                                               .maxOf(eachNumber => eachNumber % 5)\n   *                                               .yield()\n   * console.log(largestRemainderNumberDividedBy5OfArray)\n   * // ↑ 4\n   *\n   * try {\n   *   await koconutArray\n   *           .filter(eachNumber => eachNumber > 10)\n   *           .maxOf(eachNumber => eachNumber % 5)\n   *           .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut No Such Element Exception\n   *   // i.e. -- Array is filtered.\n   *   // No element in 1 to 5 is greater than 10.\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const longestStringLengthOfSet = await koconutSet\n   *                               .maxOf(eachString => eachString.length)\n   *                               .yield()\n   * console.log(longestStringLengthOfSet)\n   * // ↑ 3\n   *\n   * class ComparableString implements KoconutComparable{\n   *   str : string\n   *   constructor(str : string) {\n   *       this.str = str\n   *   }\n   *   // Override\n   *   compareTo(other : ComparableString) : number {\n   *       return this.str.length - other.str.length\n   *   }\n   * }\n   * const maxComparableString = await koconutSet\n   *                           .maxOf(eachString => new ComparableString(eachString))\n   *                           .yield()\n   * console.log(maxComparableString)\n   * // ↑ ComparableString { str: 'abc' }\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *                   .associate(eachString => [eachString.length, eachString])\n   *\n   * const longestStringLengthOfMap = await koconutMap\n   *                                   .maxOf(eachEntry => eachEntry.key)\n   *                                   .yield()\n   * console.log(longestStringLengthOfMap)\n   * // ↑ 3\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const largestNumberOfArray2 = await koconutArray2\n   *                           .maxOf(async eachNumber => eachNumber)\n   *                           .yield()\n   * console.log(largestNumberOfArray2)\n   * // ↑ 51\n   *\n   * const largest1sDigitOfArray2 = await koconutArray2\n   *                           .maxOf(eachNumber => new Promise(resolve => {\n   *                               resolve(eachNumber % 10)\n   *                           }))\n   *                           .yield()\n   * console.log(largest1sDigitOfArray2)\n   * // ↑ 5\n   * ```\n   */\n  maxOf<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, number | string | ComparableType>,\n    thisArg: any,\n  ): KoconutPrimitive<number | string | ComparableType>;\n  /** @ignore */\n  maxOf(\n    selector: Selector<CombinedDataType, number>,\n    thisArg: any,\n  ): KoconutPrimitive<number>;\n  /** @ignore */\n  maxOf(selector: Selector<CombinedDataType, number>): KoconutPrimitive<number>;\n  /** @ignore */\n  maxOf(\n    selector: Selector<CombinedDataType, string>,\n    thisArg: any,\n  ): KoconutPrimitive<string>;\n  /** @ignore */\n  maxOf(selector: Selector<CombinedDataType, string>): KoconutPrimitive<string>;\n  /** @ignore */\n  maxOf<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, ComparableType>,\n    thisArg: any,\n  ): KoconutPrimitive<ComparableType>;\n  /** @ignore */\n  maxOf<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, ComparableType>,\n  ): KoconutPrimitive<ComparableType>;\n  maxOf<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, number | string | ComparableType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<number | string | ComparableType> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<\n      number | string | ComparableType\n    >();\n    (koconutToReturn as any as KoconutOpener<number | string | ComparableType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null)\n          throw new KoconutNoSuchElementException(`Source data is null`);\n        let lastComparableDatumToReturn:\n          | number\n          | string\n          | ComparableType\n          | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n\n          let shouldBeChanged = lastComparableDatumToReturn == null;\n          if (!shouldBeChanged) {\n            if (KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n              const eachCompareResult = eachComparableDatum.compareTo(\n                lastComparableDatumToReturn,\n              );\n              let numberResult = 0;\n              if (eachCompareResult instanceof KoconutPrimitive)\n                numberResult = await eachCompareResult.yield();\n              else numberResult = eachCompareResult;\n              if (numberResult > 0) shouldBeChanged = true;\n            } else\n              shouldBeChanged =\n                lastComparableDatumToReturn! < eachComparableDatum;\n          }\n          if (shouldBeChanged)\n            lastComparableDatumToReturn = eachComparableDatum;\n        }\n        if (lastComparableDatumToReturn == null)\n          throw new KoconutNoSuchElementException(`Source data is empty`);\n        return lastComparableDatumToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the largest value among all values produced by ```selector``` function applied to each element in the collection or\n   * null if there are no elements.\n   * @param {Selector<CombinedDataType, number | string | ComparableType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {this} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @returns {KoconutPrimitive<number | string | ComparableType | null>}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,7,9)\n   *\n   * const largestRemainderNumberDividedBy5OfArray = await koconutArray\n   *                                               .maxOfOrNull(eachNumber => eachNumber % 5)\n   *                                               .yield()\n   * console.log(largestRemainderNumberDividedBy5OfArray)\n   * // ↑ 4\n   *\n   * const largestRemainderNumberDividedBy5OfEmptyArray = await koconutArray\n   *                                       .filter(eachNumber => eachNumber > 10)\n   *                                       .maxOfOrNull(eachNumber => eachNumber % 5)\n   *                                       .yield()\n   * console.log(largestRemainderNumberDividedBy5OfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const longestStringLengthOfSet = await koconutSet\n   *                               .maxOfOrNull(eachString => eachString.length)\n   *                               .yield()\n   * console.log(longestStringLengthOfSet)\n   * // ↑ 3\n   *\n   * class ComparableString implements KoconutComparable{\n   *   str : string\n   *   constructor(str : string) {\n   *       this.str = str\n   *   }\n   *   // Override\n   *   compareTo(other : ComparableString) : number {\n   *       return this.str.length - other.str.length\n   *   }\n   * }\n   * const maxComparableString = await koconutSet\n   *                           .maxOfOrNull(eachString => new ComparableString(eachString))\n   *                           .yield()\n   * console.log(maxComparableString)\n   * // ↑ ComparableString { str: 'abc' }\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *                   .associate(eachString => [eachString.length, eachString])\n   *\n   * const longestStringLengthOfMap = await koconutMap\n   *                                   .maxOfOrNull(eachEntry => eachEntry.key)\n   *                                   .yield()\n   * console.log(longestStringLengthOfMap)\n   * // ↑ 3\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const largestNumberOfArray2 = await koconutArray2\n   *                           .maxOfOrNull(async eachNumber => eachNumber)\n   *                           .yield()\n   * console.log(largestNumberOfArray2)\n   * // ↑ 51\n   *\n   * const largest1sDigitOfArray2 = await koconutArray2\n   *                           .maxOfOrNull(eachNumber => new Promise(resolve => {\n   *                               resolve(eachNumber % 10)\n   *                           }))\n   *                           .yield()\n   * console.log(largest1sDigitOfArray2)\n   * // ↑ 5\n   * ```\n   */\n  maxOfOrNull<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, number | string | ComparableType>,\n    thisArg: any,\n  ): KoconutPrimitive<number | string | ComparableType | null>;\n  /** @ignore */\n  maxOfOrNull(\n    selector: Selector<CombinedDataType, number>,\n  ): KoconutPrimitive<number | null>;\n  /** @ignore */\n  maxOfOrNull(\n    selector: Selector<CombinedDataType, number>,\n    thisArg: any,\n  ): KoconutPrimitive<number | null>;\n  /** @ignore */\n  maxOfOrNull(\n    selector: Selector<CombinedDataType, string>,\n  ): KoconutPrimitive<string | null>;\n  /** @ignore */\n  maxOfOrNull(\n    selector: Selector<CombinedDataType, string>,\n    thisArg: any,\n  ): KoconutPrimitive<string | null>;\n  /** @ignore */\n  maxOfOrNull<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, ComparableType>,\n  ): KoconutPrimitive<ComparableType | null>;\n  /** @ignore */\n  maxOfOrNull<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, ComparableType>,\n    thisArg: any,\n  ): KoconutPrimitive<ComparableType | null>;\n  maxOfOrNull<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, number | string | ComparableType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<number | string | ComparableType | null> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<\n      number | string | ComparableType | null\n    >();\n    (\n      koconutToReturn as any as KoconutOpener<\n        number | string | ComparableType | null\n      >\n    )\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return null;\n        let lastComparableDatumToReturn:\n          | number\n          | string\n          | ComparableType\n          | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n\n          let shouldBeChanged = lastComparableDatumToReturn == null;\n          if (!shouldBeChanged) {\n            if (KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n              const eachCompareResult = eachComparableDatum.compareTo(\n                lastComparableDatumToReturn,\n              );\n              let numberResult = 0;\n              if (eachCompareResult instanceof KoconutPrimitive)\n                numberResult = await eachCompareResult.yield();\n              else numberResult = eachCompareResult;\n              if (numberResult > 0) shouldBeChanged = true;\n            } else\n              shouldBeChanged =\n                lastComparableDatumToReturn! < eachComparableDatum;\n          }\n          if (shouldBeChanged)\n            lastComparableDatumToReturn = eachComparableDatum;\n        }\n        return lastComparableDatumToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the largest value according to the provided ```comparator``` among all values\n   * produced by ```selector``` function applied to each element in the collection all throws {@link KoconutNoSuchElementException}\n   * if elements are empty.\n   *\n   * @param {Selector<CombinedDataType, ResultDataType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {Comparator<ResultDataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\n   *\n   * @param {any} selectorThisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @param {any} comparatorThisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<ResultDataType>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n   *\n   * const largestNumberedStringOfArray = await koconutArray\n   *                                   .maxOfWith(\n   *                                       parseInt,\n   *                                       (front, rear) => front - rear\n   *                                   )\n   *                                   .yield()\n   * console.log(largestNumberedStringOfArray)\n   * // ↑ 5\n   *\n   * try {\n   *   await koconutArray\n   *           .filter(eachString => eachString.length > 2)\n   *           .maxOfWith(\n   *               parseInt,\n   *               (front, rear) => front - rear\n   *           )\n   *           .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut No Such Element Exception\n   *   // i.e. -- Array is filtered.\n   *   // No string in \"1\" to \"5\" is logner than 2.\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const lognestStringLengthOfSet = await koconutSet\n   *                               .maxOfWith(\n   *                                   eachString => eachString.length,\n   *                                   (front, rear) => front - rear\n   *                               )\n   *                               .yield()\n   * console.log(lognestStringLengthOfSet)\n   * // ↑ 3\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *                   .associate(eachString => [eachString.length, eachString])\n   *\n   * const longestStringLengthOfMap = await koconutMap\n   *                                   .maxOfWith(\n   *                                       eachEntry => eachEntry.key,\n   *                                       (front, rear) => front - rear\n   *                                   )\n   *                                   .yield()\n   * console.log(longestStringLengthOfMap)\n   * // ↑ 3\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const largestNumberOfArray2 = await koconutArray2\n   *                               .maxOfWith(\n   *                                   async eachNumber => eachNumber,\n   *                                   async (front, rear) => front - rear\n   *                               )\n   *                               .yield()\n   * console.log(largestNumberOfArray2)\n   * // ↑ 51\n   *\n   * const largest1sDigitOfArray2 = await koconutArray2\n   *                               .maxOfWith(\n   *                                   (eachNumber) => new Promise<number>(resolve => {\n   *                                       resolve(eachNumber % 10)\n   *                                   }),\n   *                                   (front, rear) => new Promise(resolve => {\n   *                                       resolve(front - rear)\n   *                                   })\n   *                               )\n   *                               .yield()\n   * console.log(largest1sDigitOfArray2)\n   * // ↑ 5\n   * ```\n   */\n  maxOfWith<ResultDataType>(\n    selector: Selector<CombinedDataType, ResultDataType>,\n    comparator: Comparator<ResultDataType>,\n    selectorThisArg: any = null,\n    comparatorThisArg: any = null,\n  ): KoconutPrimitive<ResultDataType> {\n    selector = selector.bind(selectorThisArg);\n    comparator = comparator.bind(comparatorThisArg);\n    const koconutToReturn = new KoconutPrimitive<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<ResultDataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null)\n          throw new KoconutNoSuchElementException(`Source data is null`);\n        let lastComparableDatumToReturn: ResultDataType | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n          if (\n            lastComparableDatumToReturn == null ||\n            (await comparator(\n              lastComparableDatumToReturn,\n              eachComparableDatum,\n            )) < 0\n          )\n            lastComparableDatumToReturn = eachComparableDatum;\n        }\n        if (lastComparableDatumToReturn == null)\n          throw new KoconutNoSuchElementException(`Source data is empty`);\n        return lastComparableDatumToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the largest value according to the provided ```comparator``` among all values\n   * produced by ```selector``` function applied to each element in the collection or ```null```\n   * if elements are empty.\n   *\n   * @param {Selector<CombinedDataType, ResultDataType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {Comparator<ResultDataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\n   *\n   * @param {any} selectorThisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @param {any} comparatorThisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<ResultDataType | null>}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n   *\n   * const largestNumberedStringOfArray = await koconutArray\n   *                                   .maxOfWithOrNull(\n   *                                       parseInt,\n   *                                       (front, rear) => front - rear\n   *                                   )\n   *                                   .yield()\n   * console.log(largestNumberedStringOfArray)\n   * // ↑ 5\n   *\n   * const largestNumberedStringOfEmptyArray = await koconutArray\n   *                           .filter(eachString => eachString.length > 2)\n   *                           .maxOfWithOrNull(\n   *                               parseInt,\n   *                               (front, rear) => front - rear\n   *                           )\n   *                           .yield()\n   * console.log(largestNumberedStringOfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const lognestStringLengthOfSet = await koconutSet\n   *                               .maxOfWithOrNull(\n   *                                   eachString => eachString.length,\n   *                                   (front, rear) => front - rear\n   *                               )\n   *                               .yield()\n   * console.log(lognestStringLengthOfSet)\n   * // ↑ 3\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *                   .associate(eachString => [eachString.length, eachString])\n   *\n   * const longestStringLengthOfMap = await koconutMap\n   *                                   .maxOfWithOrNull(\n   *                                       eachEntry => eachEntry.key,\n   *                                       (front, rear) => front - rear\n   *                                   )\n   *                                   .yield()\n   * console.log(longestStringLengthOfMap)\n   * // ↑ 3\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const largestNumberOfArray2 = await koconutArray2\n   *                               .maxOfWithOrNull(\n   *                                   async eachNumber => eachNumber,\n   *                                   async (front, rear) => front - rear\n   *                               )\n   *                               .yield()\n   * console.log(largestNumberOfArray2)\n   * // ↑ 51\n   *\n   * const largest1sDigitOfArray2 = await koconutArray2\n   *                               .maxOfWithOrNull(\n   *                                   (eachNumber) => new Promise<number>(resolve => {\n   *                                       resolve(eachNumber % 10)\n   *                                   }),\n   *                                   (front, rear) => new Promise(resolve => {\n   *                                       resolve(front - rear)\n   *                                   })\n   *                               )\n   *                               .yield()\n   * console.log(largest1sDigitOfArray2)\n   * // ↑ 5\n   * ```\n   */\n  maxOfWithOrNull<ResultDataType>(\n    selector: Selector<CombinedDataType, ResultDataType>,\n    comparator: Comparator<ResultDataType>,\n    selectorThisArg: any = null,\n    comparatorThisArg: any = null,\n  ): KoconutPrimitive<ResultDataType | null> {\n    selector = selector.bind(selectorThisArg);\n    comparator = comparator.bind(comparatorThisArg);\n    const koconutToReturn = new KoconutPrimitive<ResultDataType | null>();\n    (koconutToReturn as any as KoconutOpener<ResultDataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return null;\n        let lastComparableDatumToReturn: ResultDataType | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n          if (\n            lastComparableDatumToReturn == null ||\n            (await comparator(\n              lastComparableDatumToReturn,\n              eachComparableDatum,\n            )) < 0\n          )\n            lastComparableDatumToReturn = eachComparableDatum;\n        }\n        return lastComparableDatumToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element having the largest value according to the provided ```comparator``` or throws {@link KoconutNoSuchElementException}\n   * if elements are empty.\n   *\n   * @param {Comparator<CombinedDataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<CombinedDataType>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const largestNumberOfArray = await koconutArray\n   *                                   .maxWith((front, rear) => front - rear)\n   *                                   .yield()\n   * console.log(largestNumberOfArray)\n   * // ↑ 5\n   *\n   * try {\n   *   await koconutArray\n   *           .filter(eachNumber => eachNumber > 10)\n   *           .maxWith((front, rear) => front - rear)\n   *           .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut No Such Element Exception\n   *   // i.e. -- Array is filtered.\n   *   // No element in 1 to 5 is greater than 10.\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\", \"abcd\")\n   *\n   * const longestStringLengthOfSet = await koconutSet\n   *                                       .maxWith((front, rear) => front.length - rear.length)\n   *                                       .yield()\n   * console.log(longestStringLengthOfSet)\n   * // ↑ abcd\n   *\n   * // Case 3\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *                   .associate(eachString => [eachString.length, eachString])\n   *\n   * const longestStringLengthEntryOfMap = await koconutMap\n   *                                   .maxWith((front, rear) => front.key - rear.key)\n   *                                   .yield()\n   * console.log(longestStringLengthEntryOfMap)\n   * // ↑ Entry { keyElement: 3, valueElement: 'abc' }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const largestNumberOfArray2 = await koconutArray2\n   *                     .maxWith(async (front, rear) => front - rear)\n   *                     .yield()\n   * console.log(largestNumberOfArray2)\n   * // ↑ 51\n   *\n   * const largest1sDigitNumberOfArray2 = await koconutArray2\n   *                       .maxWith((front, rear) => new Promise(resolve => {\n   *                           resolve(front % 10 - rear % 10)\n   *                       }))\n   *                       .yield()\n   * console.log(largest1sDigitNumberOfArray2)\n   * // ↑ 45\n   * ```\n   */\n  maxWith(\n    comparator: Comparator<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<CombinedDataType> {\n    comparator = comparator.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<CombinedDataType>();\n    (koconutToReturn as any as KoconutOpener<CombinedDataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null)\n          throw new KoconutNoSuchElementException(`Source data is null`);\n        let dataToReturn: CombinedDataType | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          if (\n            dataToReturn == null ||\n            (await comparator(dataToReturn, eachCombinedDatum)) < 0\n          )\n            dataToReturn = eachCombinedDatum;\n        }\n        if (dataToReturn == null)\n          throw new KoconutNoSuchElementException(`Source data is empty`);\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element having the largest value according to the provided ```comparator``` or null\n   * if elements are empty.\n   *\n   * @param {Comparator<CombinedDataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<CombinedDataType | null>}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const largestNumberOfArray = await koconutArray\n   *                                   .maxWithOrNull((front, rear) => front - rear)\n   *                                   .yield()\n   * console.log(largestNumberOfArray)\n   * // ↑ 5\n   *\n   * const largestNumberOfEmptyArray = await koconutArray\n   *                                  .filter(eachNumber => eachNumber > 10)\n   *                                  .maxWithOrNull((front, rear) => front - rear)\n   *                                  .yield()\n   * console.log(largestNumberOfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\", \"abcd\")\n   *\n   * const longestStringLengthOfSet = await koconutSet\n   *                                       .maxWithOrNull((front, rear) => front.length - rear.length)\n   *                                       .yield()\n   * console.log(longestStringLengthOfSet)\n   * // ↑ abcd\n   *\n   * // Case 3\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *                   .associate(eachString => [eachString.length, eachString])\n   *\n   * const longestStringLengthEntryOfMap = await koconutMap\n   *                                   .maxWithOrNull((front, rear) => front.key - rear.key)\n   *                                   .yield()\n   * console.log(longestStringLengthEntryOfMap)\n   * // ↑ Entry { keyElement: 3, valueElement: 'abc' }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const largestNumberOfArray2 = await koconutArray2\n   *                     .maxWithOrNull(async (front, rear) => front - rear)\n   *                     .yield()\n   * console.log(largestNumberOfArray2)\n   * // ↑ 51\n   *\n   * const largest1sDigitNumberOfArray2 = await koconutArray2\n   *                       .maxWithOrNull((front, rear) => new Promise(resolve => {\n   *                           resolve(front % 10 - rear % 10)\n   *                       }))\n   *                       .yield()\n   * console.log(largest1sDigitNumberOfArray2)\n   * // ↑ 45\n   * ```\n   */\n  maxWithOrNull(\n    comparator: Comparator<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<CombinedDataType | null> {\n    comparator = comparator.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<CombinedDataType | null>();\n    (koconutToReturn as any as KoconutOpener<CombinedDataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return null;\n        let dataToReturn: CombinedDataType | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          if (\n            dataToReturn == null ||\n            (await comparator(dataToReturn, eachCombinedDatum)) < 0\n          )\n            dataToReturn = eachCombinedDatum;\n        }\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element yielding the smallest value of the given function or\n   * throws {@link KoconutNoSuchElementException} if there are no elements.\n   *\n   * @param {Selector<CombinedDataType, number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<CombinedDataType>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @deprecated Use {@link minByOrNull} instead.\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const smallestNumberOfArray = await koconutArray\n   *                           .minBy(eachNumber => eachNumber)\n   *                           .yield()\n   * console.log(smallestNumberOfArray)\n   * // ↑ 1\n   *\n   * try {\n   * await koconutArray\n   *       .filter(eachNumber => eachNumber > 10)\n   *       .minBy(eachNumber => eachNumber)\n   *       .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut No Such Element Exception\n   *   // i.e. -- Array is filtered.\n   *   // No element in 1 to 5 is greater than 10.\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const shortestStringOfSet = await koconutSet\n   *                           .minBy(eachString => eachString.length)\n   *                           .yield()\n   * console.log(shortestStringOfSet)\n   * // ↑ a\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1, 12, 123)\n   *               .associateWith(eachNumber => eachNumber.toString())\n   *\n   * const shortestDigitsEntryOfMap = await koconutMap\n   *                                   .minBy(eachEntry => eachEntry.value.length)\n   *                                   .yield()\n   * console.log(shortestDigitsEntryOfMap)\n   * // ↑ Entry { keyElement: 1, valueElement: '1' }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(19,27,32)\n   *\n   * const smallestNumberOfArray2 = await koconutArray2\n   *                               .minBy(async eachNumber => eachNumber)\n   *                               .yield()\n   * console.log(smallestNumberOfArray2)\n   * // ↑ 19\n   *\n   * const smallest1sDigitNumberOfArray2 = await koconutArray2\n   *                                   .minBy(eachNumber => new Promise(resolve => {\n   *                                       resolve(eachNumber % 10)\n   *                                   }))\n   *                                   .yield()\n   * console.log(smallest1sDigitNumberOfArray2)\n   * // ↑ 32\n   * ```\n   */\n  minBy(\n    selector: Selector<CombinedDataType, number | string | KoconutComparable>,\n    thisArg: any = null,\n  ): KoconutPrimitive<CombinedDataType> {\n    KoconutDeprecation.showDeprecationWarning('1.2.0', this.minByOrNull);\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<CombinedDataType>();\n    (koconutToReturn as any as KoconutOpener<CombinedDataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null)\n          throw new KoconutNoSuchElementException(`Source data is null`);\n        let dataToReturn: CombinedDataType | null = null;\n        let lastComparableDatum: number | string | KoconutComparable | null =\n          null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n          let shouldBeChanged = lastComparableDatum == null;\n\n          if (!shouldBeChanged) {\n            if (KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n              const eachCompareResult =\n                eachComparableDatum.compareTo(lastComparableDatum);\n              let numberResult = 0;\n              if (eachCompareResult instanceof KoconutPrimitive)\n                numberResult = await eachCompareResult.yield();\n              else numberResult = eachCompareResult;\n              if (numberResult < 0) shouldBeChanged = true;\n            } else shouldBeChanged = lastComparableDatum! > eachComparableDatum;\n          }\n          if (shouldBeChanged) {\n            dataToReturn = eachCombinedDatum;\n            lastComparableDatum = eachComparableDatum;\n          }\n        }\n        if (dataToReturn == null)\n          throw new KoconutNoSuchElementException(`Source data is empty`);\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element yielding the smallest value of the given function or ```null``` if there are no elements.\n   *\n   * @param {Selector<CombinedDataType, number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<CombinedDataType | null>}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const smallestNumberOfArray = await koconutArray\n   *                           .minByOrNull(eachNumber => eachNumber)\n   *                           .yield()\n   * console.log(smallestNumberOfArray)\n   * // ↑ 1\n   *\n   * const smallestNumberOfEmptyArray = await koconutArray\n   *                       .filter(eachNumber => eachNumber > 10)\n   *                       .minByOrNull(eachNumber => eachNumber)\n   *                       .yield()\n   * console.log(smallestNumberOfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const shortestStringOfSet = await koconutSet\n   *                           .minByOrNull(eachString => eachString.length)\n   *                           .yield()\n   * console.log(shortestStringOfSet)\n   * // ↑ a\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1, 12, 123)\n   *               .associateWith(eachNumber => eachNumber.toString())\n   *\n   * const shortestDigitsEntryOfMap = await koconutMap\n   *                                   .minByOrNull(eachEntry => eachEntry.value.length)\n   *                                   .yield()\n   * console.log(shortestDigitsEntryOfMap)\n   * // ↑ Entry { keyElement: 1, valueElement: '1' }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(19,27,32)\n   *\n   * const smallestNumberOfArray2 = await koconutArray2\n   *                               .minByOrNull(async eachNumber => eachNumber)\n   *                               .yield()\n   * console.log(smallestNumberOfArray2)\n   * // ↑ 19\n   *\n   * const smallest1sDigitNumberOfArray2 = await koconutArray2\n   *                                   .minByOrNull(eachNumber => new Promise(resolve => {\n   *                                       resolve(eachNumber % 10)\n   *                                   }))\n   *                                   .yield()\n   * console.log(smallest1sDigitNumberOfArray2)\n   * // ↑ 32\n   * ```\n   */\n  minByOrNull(\n    selector: Selector<CombinedDataType, number | string | KoconutComparable>,\n    thisArg: any = null,\n  ): KoconutPrimitive<CombinedDataType | null> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<CombinedDataType | null>();\n    (koconutToReturn as any as KoconutOpener<CombinedDataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return null;\n        let dataToReturn: CombinedDataType | null = null;\n        let lastComparableDatum: number | string | KoconutComparable | null =\n          null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n          let shouldBeChanged = lastComparableDatum == null;\n          if (!shouldBeChanged) {\n            if (KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n              const eachCompareResult =\n                eachComparableDatum.compareTo(lastComparableDatum);\n              let numberResult = 0;\n              if (eachCompareResult instanceof KoconutPrimitive)\n                numberResult = await eachCompareResult.yield();\n              else numberResult = eachCompareResult;\n              if (numberResult < 0) shouldBeChanged = true;\n            } else shouldBeChanged = lastComparableDatum! > eachComparableDatum;\n          }\n          if (shouldBeChanged) {\n            dataToReturn = eachCombinedDatum;\n            lastComparableDatum = eachComparableDatum;\n          }\n        }\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the smallest value among all values produced by ```selector``` function applied to each element in the collection or\n   * throws {@link KoconutNoSuchElementException} if there are no elements.\n   *\n   * @param {Selector<CombinedDataType, number | string | ComparableType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @returns {KoconutPrimitive<number | string | ComparableType>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,7,9)\n   *\n   * const smallestRemainderNumberDividedBy5OfArray = await koconutArray\n   *                                           .minOf(eachNumber => eachNumber % 5)\n   *                                           .yield()\n   * console.log(smallestRemainderNumberDividedBy5OfArray)\n   * // ↑ 1\n   *\n   * try {\n   *   await koconutArray\n   *           .filter(eachNumber => eachNumber > 10)\n   *           .minOf(eachNumber => eachNumber % 5)\n   *           .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut No Such Element Exception\n   *   // i.e. -- Array is filtered.\n   *   // No element in 1 to 5 is greater than 10.\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const shortestStringLengthOfSet = await koconutSet\n   *                           .minOf(eachString => eachString.length)\n   *                           .yield()\n   * console.log(shortestStringLengthOfSet)\n   * // ↑ 1\n   *\n   * class ComparableString implements KoconutComparable{\n   *   str : string\n   *   constructor(str : string) {\n   *       this.str = str\n   *   }\n   *   // Override\n   *   compareTo(other : ComparableString) : number {\n   *       return this.str.length - other.str.length\n   *   }\n   * }\n   * const minComparableString = await koconutSet\n   *                       .minOf(eachString => new ComparableString(eachString))\n   *                       .yield()\n   * console.log(minComparableString)\n   * // ↑ ComparableString { str: 'a' }\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *               .associate(eachString => [eachString.length, eachString])\n   *\n   * const shortestStringLengthOfMap = await koconutMap\n   *                               .minOf(eachEntry => eachEntry.key)\n   *                               .yield()\n   * console.log(shortestStringLengthOfMap)\n   * // ↑ 1\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const smallestNumberOfArray2 = await koconutArray2\n   *                       .minOf(async eachNumber => eachNumber)\n   *                       .yield()\n   * console.log(smallestNumberOfArray2)\n   * // ↑ 12\n   *\n   * const smallest1sDigitOfArray2 = await koconutArray2\n   *                       .minOf(eachNumber => new Promise(resolve => {\n   *                           resolve(eachNumber % 10)\n   *                       }))\n   *                       .yield()\n   * console.log(smallest1sDigitOfArray2)\n   * // ↑ 0\n   * ```\n   */\n  minOf<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, number | string | ComparableType>,\n    thisArg: any,\n  ): KoconutPrimitive<number | string | ComparableType>;\n  /** @ignore */\n  minOf(\n    selector: Selector<CombinedDataType, number>,\n    thisArg: any,\n  ): KoconutPrimitive<number>;\n  /** @ignore */\n  minOf(selector: Selector<CombinedDataType, number>): KoconutPrimitive<number>;\n  /** @ignore */\n  minOf(\n    selector: Selector<CombinedDataType, string>,\n    thisArg: any,\n  ): KoconutPrimitive<string>;\n  /** @ignore */\n  minOf(selector: Selector<CombinedDataType, string>): KoconutPrimitive<string>;\n  /** @ignore */\n  minOf<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, ComparableType>,\n    thisArg: any,\n  ): KoconutPrimitive<ComparableType>;\n  /** @ignore */\n  minOf<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, ComparableType>,\n  ): KoconutPrimitive<ComparableType>;\n  minOf<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, number | string | ComparableType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<number | string | ComparableType> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<\n      number | string | ComparableType\n    >();\n    (koconutToReturn as any as KoconutOpener<number | string | ComparableType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null)\n          throw new KoconutNoSuchElementException(`Source data is null`);\n        let lastComparableDatumToReturn:\n          | number\n          | string\n          | ComparableType\n          | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n          let shouldBeChanged = lastComparableDatumToReturn == null;\n          if (!shouldBeChanged) {\n            if (KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n              const eachCompareResult = eachComparableDatum.compareTo(\n                lastComparableDatumToReturn,\n              );\n              let numberResult = 0;\n              if (eachCompareResult instanceof KoconutPrimitive)\n                numberResult = await eachCompareResult.yield();\n              else numberResult = eachCompareResult;\n              if (numberResult < 0) shouldBeChanged = true;\n            } else\n              shouldBeChanged =\n                lastComparableDatumToReturn! > eachComparableDatum;\n          }\n          if (shouldBeChanged)\n            lastComparableDatumToReturn = eachComparableDatum;\n        }\n        if (lastComparableDatumToReturn == null)\n          throw new KoconutNoSuchElementException(`Source data is empty`);\n        return lastComparableDatumToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the smallest value among all values produced by ```selector``` function applied to each element in the collection or\n   * ```null``` if there are no elements.\n   *\n   * @param {Selector<CombinedDataType, number | string | ComparableType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @returns {KoconutPrimitive<number | string | ComparableType | null>}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,7,9)\n   *\n   * const smallestRemainderNumberDividedBy5OfArray = await koconutArray\n   *                                           .minOfOrNull(eachNumber => eachNumber % 5)\n   *                                           .yield()\n   * console.log(smallestRemainderNumberDividedBy5OfArray)\n   * // ↑ 1\n   *\n   * const smallestRemainderNumberDividedBy5OfEmptyArray = await koconutArray\n   *                                       .filter(eachNumber => eachNumber > 10)\n   *                                       .minOfOrNull(eachNumber => eachNumber % 5)\n   *                                       .yield()\n   * console.log(smallestRemainderNumberDividedBy5OfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const shortestStringLengthOfSet = await koconutSet\n   *                           .minOfOrNull(eachString => eachString.length)\n   *                           .yield()\n   * console.log(shortestStringLengthOfSet)\n   * // ↑ 1\n   *\n   * class ComparableString implements KoconutComparable{\n   *   str : string\n   *   constructor(str : string) {\n   *       this.str = str\n   *   }\n   *   // Override\n   *   compareTo(other : ComparableString) : number {\n   *       return this.str.length - other.str.length\n   *   }\n   * }\n   * const minComparableString = await koconutSet\n   *                       .minOfOrNull(eachString => new ComparableString(eachString))\n   *                       .yield()\n   * console.log(minComparableString)\n   * // ↑ ComparableString { str: 'a' }\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *               .associate(eachString => [eachString.length, eachString])\n   *\n   * const shortestStringLengthOfMap = await koconutMap\n   *                               .minOfOrNull(eachEntry => eachEntry.key)\n   *                               .yield()\n   * console.log(shortestStringLengthOfMap)\n   * // ↑ 1\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const smallestNumberOfArray2 = await koconutArray2\n   *                       .minOfOrNull(async eachNumber => eachNumber)\n   *                       .yield()\n   * console.log(smallestNumberOfArray2)\n   * // ↑ 12\n   *\n   * const smallest1sDigitOfArray2 = await koconutArray2\n   *                       .minOfOrNull(eachNumber => new Promise(resolve => {\n   *                           resolve(eachNumber % 10)\n   *                       }))\n   *                       .yield()\n   * console.log(smallest1sDigitOfArray2)\n   * // ↑ 0\n   * ```\n   */\n  minOfOrNull<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, number | string | ComparableType>,\n    thisArg: any,\n  ): KoconutPrimitive<number | string | ComparableType | null>;\n  /** @ignore */\n  minOfOrNull(\n    selector: Selector<CombinedDataType, number>,\n    thisArg: any,\n  ): KoconutPrimitive<number | null>;\n  /** @ignore */\n  minOfOrNull(\n    selector: Selector<CombinedDataType, number>,\n  ): KoconutPrimitive<number | null>;\n  /** @ignore */\n  minOfOrNull(\n    selector: Selector<CombinedDataType, string>,\n    thisArg: any,\n  ): KoconutPrimitive<string | null>;\n  /** @ignore */\n  minOfOrNull(\n    selector: Selector<CombinedDataType, string>,\n  ): KoconutPrimitive<string | null>;\n  /** @ignore */\n  minOfOrNull<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, ComparableType>,\n    thisArg: any,\n  ): KoconutPrimitive<ComparableType | null>;\n  /** @ignore */\n  minOfOrNull<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, ComparableType>,\n  ): KoconutPrimitive<ComparableType>;\n  minOfOrNull<ComparableType extends KoconutComparable>(\n    selector: Selector<CombinedDataType, number | string | ComparableType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<number | string | ComparableType | null> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<\n      number | string | ComparableType | null\n    >();\n    (\n      koconutToReturn as any as KoconutOpener<\n        number | string | ComparableType | null\n      >\n    )\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return null;\n        let lastComparableDatumToReturn:\n          | number\n          | string\n          | ComparableType\n          | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n          let shouldBeChanged = lastComparableDatumToReturn == null;\n          if (!shouldBeChanged) {\n            if (KoconutTypeChecker.checkIsComparable(eachComparableDatum)) {\n              const eachCompareResult = eachComparableDatum.compareTo(\n                lastComparableDatumToReturn,\n              );\n              let numberResult = 0;\n              if (eachCompareResult instanceof KoconutPrimitive)\n                numberResult = await eachCompareResult.yield();\n              else numberResult = eachCompareResult;\n              if (numberResult < 0) shouldBeChanged = true;\n            } else\n              shouldBeChanged =\n                lastComparableDatumToReturn! > eachComparableDatum;\n          }\n          if (shouldBeChanged)\n            lastComparableDatumToReturn = eachComparableDatum;\n        }\n        return lastComparableDatumToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the smallest value according to the provided ```comparator``` among all values\n   * produced by ```selector``` function applied to each element in the collection all throws {@link KoconutNoSuchElementException}\n   * if elements are empty.\n   *\n   * @param {Selector<CombinedDataType, ResultDataType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {Comparator<ResultDataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\n   *\n   * @param {any} selectorThisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @param {any} comparatorThisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<ResultDataType>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n   *\n   * const smallestNumberedStringOfArray = await koconutArray\n   *                               .minOfWith(\n   *                                   parseInt,\n   *                                   (front, rear) => front - rear\n   *                               )\n   *                               .yield()\n   * console.log(smallestNumberedStringOfArray)\n   * // ↑ 1\n   *\n   * try {\n   *   await koconutArray\n   *           .filter(eachString => eachString.length > 2)\n   *           .minOfWith(\n   *               parseInt,\n   *               (front, rear) => front - rear\n   *           )\n   *           .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut No Such Element Exception\n   *   // i.e. -- Array is filtered.\n   *   // No string in \"1\" to \"5\" is logner than 2.\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const shortestStringLengthOfSet = await koconutSet\n   *                           .minOfWith(\n   *                               eachString => eachString.length,\n   *                               (front, rear) => front - rear\n   *                           )\n   *                           .yield()\n   * console.log(shortestStringLengthOfSet)\n   * // ↑ 1\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *               .associate(eachString => [eachString.length, eachString])\n   *\n   * const shortestStringLengthOfMap = await koconutMap\n   *                               .minOfWith(\n   *                                   eachEntry => eachEntry.key,\n   *                                   (front, rear) => front - rear\n   *                               )\n   *                               .yield()\n   * console.log(shortestStringLengthOfMap)\n   * // ↑ 1\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const smallestNumberOfArray2 = await koconutArray2\n   *                           .minOfWith(\n   *                               async eachNumber => eachNumber,\n   *                               async (front, rear) => front - rear\n   *                           )\n   *                           .yield()\n   * console.log(smallestNumberOfArray2)\n   * // ↑ 12\n   *\n   * const smallest1sDigitOfArray2 = await koconutArray2\n   *                           .minOfWith(\n   *                               (eachNumber) => new Promise<number>(resolve => {\n   *                                   resolve(eachNumber % 10)\n   *                               }),\n   *                               (front, rear) => new Promise(resolve => {\n   *                                   resolve(front - rear)\n   *                               })\n   *                           )\n   *                           .yield()\n   * console.log(smallest1sDigitOfArray2)\n   * // ↑ 0\n   * ```\n   */\n  minOfWith<ResultDataType>(\n    selector: Selector<CombinedDataType, ResultDataType>,\n    comparator: Comparator<ResultDataType>,\n    selectorThisArg: any = null,\n    comparatorThisArg: any = null,\n  ): KoconutPrimitive<ResultDataType> {\n    selector = selector.bind(selectorThisArg);\n    comparator = comparator.bind(comparatorThisArg);\n    const koconutToReturn = new KoconutPrimitive<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<ResultDataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null)\n          throw new KoconutNoSuchElementException(`Source data is null`);\n        let lastComparableDatumToReturn: ResultDataType | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n          if (\n            lastComparableDatumToReturn == null ||\n            (await comparator(\n              lastComparableDatumToReturn,\n              eachComparableDatum,\n            )) > 0\n          )\n            lastComparableDatumToReturn = eachComparableDatum;\n        }\n        if (lastComparableDatumToReturn == null)\n          throw new KoconutNoSuchElementException(`Source data is empty`);\n        return lastComparableDatumToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the smallest value according to the provided ```comparator``` among all values\n   * produced by ```selector``` function applied to each element in the collection all ```null```\n   * if elements are empty.\n   *\n   * @param {Selector<CombinedDataType, ResultDataType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\n   *\n   * @param {Comparator<ResultDataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\n   *\n   * @param {any} selectorThisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @param {any} comparatorThisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<ResultDataType | null>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n   *\n   * const smallestNumberedStringOfArray = await koconutArray\n   *                               .minOfWithOrNull(\n   *                                   parseInt,\n   *                                   (front, rear) => front - rear\n   *                               )\n   *                               .yield()\n   * console.log(smallestNumberedStringOfArray)\n   * // ↑ 1\n   *\n   * const smallestNumberedStringOfEmptyArray = await koconutArray\n   *                           .filter(eachString => eachString.length > 2)\n   *                           .minOfWithOrNull(\n   *                               parseInt,\n   *                               (front, rear) => front - rear\n   *                           )\n   *                           .yield()\n   * console.log(smallestNumberedStringOfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\n   *\n   * const shortestStringLengthOfSet = await koconutSet\n   *                           .minOfWithOrNull(\n   *                               eachString => eachString.length,\n   *                               (front, rear) => front - rear\n   *                           )\n   *                           .yield()\n   * console.log(shortestStringLengthOfSet)\n   * // ↑ 1\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *               .associate(eachString => [eachString.length, eachString])\n   *\n   * const shortestStringLengthOfMap = await koconutMap\n   *                               .minOfWithOrNull(\n   *                                   eachEntry => eachEntry.key,\n   *                                   (front, rear) => front - rear\n   *                               )\n   *                               .yield()\n   * console.log(shortestStringLengthOfMap)\n   * // ↑ 1\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const smallestNumberOfArray2 = await koconutArray2\n   *                           .minOfWithOrNull(\n   *                               async eachNumber => eachNumber,\n   *                               async (front, rear) => front - rear\n   *                           )\n   *                           .yield()\n   * console.log(smallestNumberOfArray2)\n   * // ↑ 12\n   *\n   * const smallest1sDigitOfArray2 = await koconutArray2\n   *                           .minOfWithOrNull(\n   *                               (eachNumber) => new Promise<number>(resolve => {\n   *                                   resolve(eachNumber % 10)\n   *                               }),\n   *                               (front, rear) => new Promise(resolve => {\n   *                                   resolve(front - rear)\n   *                               })\n   *                           )\n   *                           .yield()\n   * console.log(smallest1sDigitOfArray2)\n   * // ↑ 0\n   * ```\n   */\n  minOfWithOrNull<ResultDataType>(\n    selector: Selector<CombinedDataType, ResultDataType>,\n    comparator: Comparator<ResultDataType>,\n    selectorThisArg: any = null,\n    comparatorThisArg: any = null,\n  ): KoconutPrimitive<ResultDataType | null> {\n    selector = selector.bind(selectorThisArg);\n    comparator = comparator.bind(comparatorThisArg);\n    const koconutToReturn = new KoconutPrimitive<ResultDataType | null>();\n    (koconutToReturn as any as KoconutOpener<ResultDataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return null;\n        let lastComparableDatumToReturn: ResultDataType | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          const eachComparableDatum = await selector(eachCombinedDatum);\n          if (\n            lastComparableDatumToReturn == null ||\n            (await comparator(\n              lastComparableDatumToReturn,\n              eachComparableDatum,\n            )) > 0\n          )\n            lastComparableDatumToReturn = eachComparableDatum;\n        }\n        return lastComparableDatumToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element having the smallest value according to the provided ```comparator``` or throws {@link KoconutNoSuchElementException}\n   * if elements are empty.\n   * @param {Comparator<CombinedDataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<CombinedDataType>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const smallestNumberOfArray = await koconutArray\n   *                               .minWith((front, rear) => front - rear)\n   *                               .yield()\n   * console.log(smallestNumberOfArray)\n   * // ↑ 1\n   *\n   * try {\n   *   await koconutArray\n   *           .filter(eachNumber => eachNumber > 10)\n   *           .minWith((front, rear) => front - rear)\n   *           .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut No Such Element Exception\n   *   // i.e. -- Array is filtered.\n   *   // No element in 1 to 5 is greater than 10.\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\", \"abcd\")\n   *\n   * const shortestStringLengthOfSet = await koconutSet\n   *                                   .minWith((front, rear) => front.length - rear.length)\n   *                                   .yield()\n   * console.log(shortestStringLengthOfSet)\n   * // ↑ a\n   *\n   * // Case 3\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *               .associate(eachString => [eachString.length, eachString])\n   *\n   * const shortestStringLengthEntryOfMap = await koconutMap\n   *                               .minWith((front, rear) => front.key - rear.key)\n   *                               .yield()\n   * console.log(shortestStringLengthEntryOfMap)\n   * // ↑ Entry { keyElement: 1, valueElement: 'a' }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const smallestNumberOfArray2 = await koconutArray2\n   *                   .minWith(async (front, rear) => front - rear)\n   *                   .yield()\n   * console.log(smallestNumberOfArray2)\n   * // ↑ 12\n   *\n   * const smallest1sDigitNumberOfArray2 = await koconutArray2\n   *                   .minWith((front, rear) => new Promise(resolve => {\n   *                       resolve(front % 10 - rear % 10)\n   *                   }))\n   *                   .yield()\n   * console.log(smallest1sDigitNumberOfArray2)\n   * // ↑ 50\n   * ```\n   */\n  minWith(\n    comparator: Comparator<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<CombinedDataType> {\n    comparator = comparator.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<CombinedDataType>();\n    (koconutToReturn as any as KoconutOpener<CombinedDataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null)\n          throw new KoconutNoSuchElementException(`Source data is null`);\n        let dataToReturn: CombinedDataType | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          if (\n            dataToReturn == null ||\n            (await comparator(dataToReturn, eachCombinedDatum)) > 0\n          )\n            dataToReturn = eachCombinedDatum;\n        }\n        if (dataToReturn == null)\n          throw new KoconutNoSuchElementException(`Source data is empty`);\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element having the smallest value according to the provided ```comparator``` or ```null```\n   * if elements are empty.\n   * @param {Comparator<CombinedDataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<CombinedDataType | null>}\n   *\n   * @category Calculator\n   *\n   * @since 1.0.10\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const smallestNumberOfArray = await koconutArray\n   *                               .minWithOrNull((front, rear) => front - rear)\n   *                               .yield()\n   * console.log(smallestNumberOfArray)\n   * // ↑ 1\n   *\n   * const smallestNumberOfEmptyArray = await koconutArray\n   *                           .filter(eachNumber => eachNumber > 10)\n   *                           .minWithOrNull((front, rear) => front - rear)\n   *                           .yield()\n   * console.log(smallestNumberOfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\", \"abcd\")\n   *\n   * const shortestStringLengthOfSet = await koconutSet\n   *                                   .minWithOrNull((front, rear) => front.length - rear.length)\n   *                                   .yield()\n   * console.log(shortestStringLengthOfSet)\n   * // ↑ a\n   *\n   * // Case 3\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\n   *                .associate(eachString => [eachString.length, eachString])\n   *\n   * const shortestStringLengthEntryOfMap = await koconutMap\n   *                               .minWithOrNull((front, rear) => front.key - rear.key)\n   *                               .yield()\n   * console.log(shortestStringLengthEntryOfMap)\n   * // ↑ Entry { keyElement: 1, valueElement: 'a' }\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\n   *\n   * const smallestNumberOfArray2 = await koconutArray2\n   *                   .minWithOrNull(async (front, rear) => front - rear)\n   *                   .yield()\n   * console.log(smallestNumberOfArray2)\n   * // ↑ 12\n   *\n   * const smallest1sDigitNumberOfArray2 = await koconutArray2\n   *                   .minWithOrNull((front, rear) => new Promise(resolve => {\n   *                       resolve(front % 10 - rear % 10)\n   *                   }))\n   *                   .yield()\n   * console.log(smallest1sDigitNumberOfArray2)\n   * // ↑ 50\n   * ```\n   */\n  minWithOrNull(\n    comparator: Comparator<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<CombinedDataType | null> {\n    comparator = comparator.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<CombinedDataType | null>();\n    (koconutToReturn as any as KoconutOpener<CombinedDataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return null;\n        let dataToReturn: CombinedDataType | null = null;\n        for (const eachCombinedDatum of this.combinedDataWrapper) {\n          if (\n            dataToReturn == null ||\n            (await comparator(dataToReturn, eachCombinedDatum)) > 0\n          )\n            dataToReturn = eachCombinedDatum;\n        }\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  // Caster\n  /**\n   * Creates an {@link KoconutArray} instance that wraps original data.\n   *\n   * @return {KoconutArray<CombinedDataType>}\n   *\n   * @since 1.0.13\n   *\n   * @category Caster\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const arrToArr = await koconutArray\n   *                           .asArray()\n   *                           .yield()\n   * console.log(arrToArr)\n   * // ↑ [ 1, 2, 3, 4, 5 ]\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,1,2,2,3,3,4,4,5,5)\n   *\n   * const setToArr = await koconutSet\n   *                           .asArray()\n   *                           .yield()\n   * console.log(setToArr)\n   * // ↑ [ 1, 2, 3, 4, 5 ]\n   *\n   * // Case 3 -- KoconutFlow\n   * const koconutFlow = KoconutFlow.ofSimple(1,2,3,4,5)\n   *\n   * const flowToArr = await koconutFlow\n   *                           .asArray()\n   *                           .yield()\n   * console.log(flowToArr)\n   * // ↑\n   * // [\n   * //    Entry { keyElement: 0, valueElement: 1 },\n   * //    Entry { keyElement: 1, valueElement: 2 },\n   * //    Entry { keyElement: 2, valueElement: 3 },\n   * //    Entry { keyElement: 3, valueElement: 4 },\n   * //    Entry { keyElement: 4, valueElement: 5 }\n   * //  ]\n   *\n   * // Case 4 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\n   *                           .associate(eachNumber => [eachNumber, eachNumber])\n   *\n   * const mapToArr = await koconutMap\n   *                           .asArray()\n   *                           .yield()\n   * console.log(mapToArr)\n   * // ↑\n   * // [\n   * //    Entry { keyElement: 1, valueElement: 1 },\n   * //    Entry { keyElement: 2, valueElement: 2 },\n   * //    Entry { keyElement: 3, valueElement: 3 },\n   * //    Entry { keyElement: 4, valueElement: 4 },\n   * //    Entry { keyElement: 5, valueElement: 5 }\n   * //  ]\n   * ```\n   */\n  asArray(): KoconutArray<CombinedDataType> {\n    const koconutToReturn = new KoconutArray<CombinedDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<CombinedDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        return Array.from(this.combinedDataWrapper!);\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Creates an {@link KoconutSet} instance that wraps original data.\n   *\n   * @return {KoconutSet<CombinedDataType>}\n   *\n   * @since 1.0.13\n   *\n   * @category Caster\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const arrToSet = await koconutArray\n   *                           .asSet()\n   *                           .yield()\n   * console.log(arrToSet)\n   * // ↑ Set { 1, 2, 3, 4, 5 }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,1,2,2,3,3,4,4,5,5)\n   *\n   * const setToSet = await koconutSet\n   *                           .asSet()\n   *                           .yield()\n   * console.log(setToSet)\n   * // ↑ Set { 1, 2, 3, 4, 5 }\n   *\n   * // Case 3 -- KoconutFlow\n   * const koconutFlow = KoconutFlow.ofSimple(1,2,3,4,5)\n   *\n   * const flowToSet = await koconutFlow\n   *                           .asSet()\n   *                           .yield()\n   * console.log(flowToSet)\n   * // ↑\n   * // Set {\n   * //    Entry { keyElement: 0, valueElement: 1 },\n   * //    Entry { keyElement: 1, valueElement: 2 },\n   * //    Entry { keyElement: 2, valueElement: 3 },\n   * //    Entry { keyElement: 3, valueElement: 4 },\n   * //    Entry { keyElement: 4, valueElement: 5 }\n   * //  }\n   *\n   * // Case 4 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\n   *                           .associate(eachNumber => [eachNumber, eachNumber])\n   *\n   * const mapToSet = await koconutMap\n   *                           .asSet()\n   *                           .yield()\n   * console.log(mapToSet)\n   * // ↑\n   * // Set {\n   * //    Entry { keyElement: 1, valueElement: 1 },\n   * //    Entry { keyElement: 2, valueElement: 2 },\n   * //    Entry { keyElement: 3, valueElement: 3 },\n   * //    Entry { keyElement: 4, valueElement: 4 },\n   * //    Entry { keyElement: 5, valueElement: 5 }\n   * //  }\n   * ```\n   */\n  asSet(): KoconutSet<CombinedDataType> {\n    const koconutToReturn = new KoconutSet<CombinedDataType>();\n    (koconutToReturn as any as KoconutOpener<Set<CombinedDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        return new Set(this.combinedDataWrapper);\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Creates an {@link KoconutFlow} instance that wraps original data.\n   *\n   * @since 1.0.13\n   *\n   * @category Caster\n   *c\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const arrToFlow = await koconutArray\n   *                           .asFlow()\n   *                           .yield()\n   * console.log(arrToFlow.dataArray)\n   * // ↑ [ 1, 2, 3, 4, 5 ]\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,1,2,2,3,3,4,4,5,5)\n   *\n   * const setToFlow = await koconutSet\n   *                           .asFlow()\n   *                           .yield()\n   * console.log(setToFlow.dataArray)\n   * // ↑ [ 1, 2, 3, 4, 5 ]\n   *\n   * // Case 3 -- KoconutFlow\n   * const koconutFlow = KoconutFlow.ofSimple(1,2,3,4,5)\n   *\n   * const flowToFlow = await koconutFlow\n   *                           .asFlow()\n   *                           .yield()\n   * console.log(flowToFlow.dataArray)\n   * // ↑\n   * // [\n   * //    Entry { keyElement: 0, valueElement: 1 },\n   * //    Entry { keyElement: 1, valueElement: 2 },\n   * //    Entry { keyElement: 2, valueElement: 3 },\n   * //    Entry { keyElement: 3, valueElement: 4 },\n   * //    Entry { keyElement: 4, valueElement: 5 }\n   * // ]\n   *\n   * // Case 4 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\n   *                           .associate(eachNumber => [eachNumber, eachNumber])\n   *\n   * const mapToFlow = await koconutMap\n   *                           .asFlow()\n   *                           .yield()\n   * console.log(mapToFlow.dataArray)\n   * // ↑\n   * // [\n   * //    Entry { keyElement: 1, valueElement: 1 },\n   * //    Entry { keyElement: 2, valueElement: 2 },\n   * //    Entry { keyElement: 3, valueElement: 3 },\n   * //    Entry { keyElement: 4, valueElement: 4 },\n   * //    Entry { keyElement: 5, valueElement: 5 }\n   * // ]\n   * ```\n   */\n  /*\n     asFlow() : KoconutFlow<CombinedDataType> {\n\n        const koconutToReturn = new KoconutFlow<CombinedDataType>();\n        (koconutToReturn as any as KoconutOpener<Flow<CombinedDataType>>)\n            .setPrevYieldable(this)\n            .setProcessor(async () => {\n                return Flow.fromSimple(this.combinedDataWrapper)\n            })\n        return koconutToReturn\n\n    }\n    */\n\n  // Inspector\n  /**\n   * Return ```true``` if all elements match te given ```predicate```.\n   *\n   * @param {Predicator<CombinedDataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutBoolean}\n   *\n   * @since 1.0.10\n   *\n   * @category Inspector\n   *\n   * @example\n   * ``` typescript\n   *   // Case 1 -- KoconutArray\n   *   const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   *   const areAllArrayElementsGreaterThan0 = await koconutArray\n   *                                           .all(eachNumber => eachNumber > 0)\n   *                                           .yield()\n   *   console.log(areAllArrayElementsGreaterThan0)\n   *   // ↑ true\n   *\n   *   const areAllArrayElementsEven = await koconutArray\n   *                                   .all(eachNumber => eachNumber % 2 == 0)\n   *                                   .yield()\n   *   console.log(areAllArrayElementsEven)\n   *   // ↑ false -- i.e. '1' is not an even number.\n   *\n   *\n   *   // Case 2 -- KoconutSet\n   *   const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   *   const areAllSetElementsGreaterThan0 = await koconutSet\n   *                                           .all(eachNumber => eachNumber > 0)\n   *                                           .yield()\n   *   console.log(areAllSetElementsGreaterThan0)\n   *   // ↑ true\n   *\n   *   const areAllSetElementsOdd = await koconutSet\n   *                                   .all(eachNumber => eachNumber % 2 == 1)\n   *                                   .yield()\n   *   console.log(areAllSetElementsOdd)\n   *   // ↑ false -- i.e. '2' is not an odd number.\n   *\n   *\n   *   // Case 3 -- KoconutMap\n   *   const koconutMap = KoconutMap.of(\n   *       [0, 0],\n   *       [1, 1],\n   *       [2, 2]\n   *   )\n   *\n   *   const areAllMapEntriesKeyEqualsToValue = await koconutMap\n   *                                          .all(eachEntry => eachEntry.key == eachEntry.value)\n   *                                          .yield()\n   *   console.log(areAllMapEntriesKeyEqualsToValue)\n   *   // ↑ true\n   *\n   *   const areAllMapEntriesSumGreaterThan3 = await koconutMap\n   *                                         .all(eachEntry => eachEntry.key + eachEntry.value > 3)\n   *                                         .yield()\n   *   console.log(areAllMapEntriesSumGreaterThan3)\n   *   // ↑ false -- i.e. Sum of key and value of first Entry { 0, 0 } is 0.\n   *   // It's definetly less than 3\n   *\n   *   // Case 4 -- You can also do it asynchronously\n   *   const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   *   const areAllArrayElementsLessThan10 = await koconutArray2\n   *                                       .all(async eachNumber => eachNumber < 10)\n   *                                       .yield()\n   *   console.log(areAllArrayElementsLessThan10)\n   *   // ↑ true\n   *\n   *   const areAllArrayElementsOdd = await koconutArray2\n   *                                   .all(eachNumber => new Promise(resolve => {\n   *                                       resolve(eachNumber % 2 == 1)\n   *                                   }))\n   *                                   .yield()\n   *   console.log(areAllArrayElementsOdd)\n   *   // ↑ false -- i.e. '2' is not an odd number.\n   * ```\n   */\n  all(\n    predicate: Predicator<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutBoolean {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutBoolean();\n    (koconutToReturn as any as KoconutOpener<boolean>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return false;\n        for (const eachCombinedDatum of this.combinedDataWrapper)\n          if (!(await predicate(eachCombinedDatum))) return false;\n        return true;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns ```true``` if the collection has at least one element matches the given ```predicate```.\n   *\n   * @param {Predicator<CombinedDataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutBoolean}\n   *\n   * @since 1.0.10\n   *\n   * @category Inspector\n   *\n   * @example\n   * ``` typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const isAnyArrayElementGreaterThan4 = await koconutArray\n   *                                           .any(eachNumber => eachNumber > 4)\n   *                                           .yield()\n   * console.log(isAnyArrayElementGreaterThan4)\n   * // ↑ true -- i.e. '5' is greater than 4.\n   *\n   * const isAnyArrayElementMultipleOf6 = await koconutArray\n   *                                           .any(eachNumber => eachNumber % 6 == 0)\n   *                                           .yield()\n   * console.log(isAnyArrayElementMultipleOf6)\n   * // ↑ false\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const isAnySetElementGreaterThan3 = await koconutSet\n   *                                           .any(eachNumber => eachNumber > 3)\n   *                                           .yield()\n   * console.log(isAnySetElementGreaterThan3)\n   * // ↑ true -- i.e. '4' is greater than 3.\n   *\n   * const isAnySetElementLessThan0 = await koconutSet\n   *                                       .any(eachNumber => eachNumber < 0)\n   *                                       .yield()\n   * console.log(isAnySetElementLessThan0)\n   * // ↑ false\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutMap.of(\n   *   [0, 0],\n   *   [1, 1],\n   *   [2, 2]\n   * )\n   *\n   * const isAnyMapEntrySumGreaterThan3 = await koconutMap\n   *                                        .any(eachEntry => eachEntry.key + eachEntry.value > 3)\n   *                                        .yield()\n   * console.log(isAnyMapEntrySumGreaterThan3)\n   * // ↑ true -- i.e. Sum of key and value of third Entry { 2, 2 } is 4.\n   * // It's grater than 4.\n   *\n   * const isAnyMapEntryKeyMultipleOf4 = await koconutMap\n   *                                  .any(eachEntry => eachEntry.key > 0 && eachEntry.key % 4 == 0)\n   *                                  .yield()\n   * console.log(isAnyMapEntryKeyMultipleOf4)\n   * // ↑ false\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const isAnyArrayElementLessThan2 = await koconutArray2\n   *                                   .any(async eachNumber => eachNumber < 2)\n   *                                   .yield()\n   * console.log(isAnyArrayElementLessThan2)\n   * // ↑ true -- i.e. '1' is less than 2.\n   *\n   * const isAnyArrayElementGreaterThan7 = await koconutArray2\n   *                                       .any(eachNumber => new Promise(resolve => {\n   *                                           resolve(eachNumber > 7)\n   *                                       }))\n   *                                       .yield()\n   * console.log(isAnyArrayElementGreaterThan7)\n   * // ↑ false\n   * ```\n   */\n  any(\n    predicate: Predicator<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutBoolean {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutBoolean();\n    (koconutToReturn as any as KoconutOpener<boolean>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null) return false;\n        for (const eachCombinedDatum of this.combinedDataWrapper)\n          if (await predicate(eachCombinedDatum)) return true;\n        return false;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns ```true``` if the collection is empty (contains no elements), ```false``` otherwise.\n   *\n   * @return {KoconutBoolean}\n   *\n   * @since 1.0.10\n   *\n   * @category Inspector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const isNumberArrayEmpty = await koconutArray\n   *                           .isEmpty()\n   *                           .yield()\n   * console.log(isNumberArrayEmpty)\n   * // ↑ false\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const isFilteredNumberSetEmpty = await koconutSet\n   *                           .filter(eachNumber => eachNumber > 10)\n   *                           .isEmpty()\n   *                           .yield()\n   * console.log(isFilteredNumberSetEmpty)\n   * // ↑ true\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = new KoconutMap<number, number>()\n   *\n   * const isNumberPairedMapEmpty = await koconutMap\n   *                                   .isEmpty()\n   *                                   .yield()\n   * console.log(isNumberPairedMapEmpty)\n   * // ↑ true\n   * ```\n   */\n  isEmpty(): KoconutBoolean {\n    const koconutToReturn = new KoconutBoolean();\n    (koconutToReturn as any as KoconutOpener<boolean>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        return this.combinedDataWrapper != null && this.mSize == 0;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns ```true``` if the collection is not empty.\n   *\n   * @return {KoconutBoolean}\n   *\n   * @since 1.0.10\n   *\n   * @category Inspector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const isNumberArrayEmpty = await koconutArray\n   *                           .isNotEmpty()\n   *                           .yield()\n   * console.log(isNumberArrayEmpty)\n   * // ↑ true\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const isFilteredNumberSetEmpty = await koconutSet\n   *                           .filter(eachNumber => eachNumber > 10)\n   *                           .isNotEmpty()\n   *                           .yield()\n   * console.log(isFilteredNumberSetEmpty)\n   * // ↑ false\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = new KoconutMap<number, number>()\n   *\n   * const isNumberPairedMapEmpty = await koconutMap\n   *                                   .isNotEmpty()\n   *                                   .yield()\n   * console.log(isNumberPairedMapEmpty)\n   * // ↑ false\n   * ```\n   */\n  isNotEmpty(): KoconutBoolean {\n    const koconutToReturn = new KoconutBoolean();\n    (koconutToReturn as any as KoconutOpener<boolean>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        return this.mSize != 0;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns ```true``` if this nullable collection is either null or empty.\n   *\n   * @return {KoconutBoolean}\n   *\n   * @since 1.0.10\n   *\n   * @deprecated Use {@link isEmpty} instead.\n   *\n   * @until 1.3.0\n   *\n   * @category Inspector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const isNumberArrayEmpty = await koconutArray\n   *                           .isNullOrEmpty()\n   *                           .yield()\n   * console.log(isNumberArrayEmpty)\n   * // ↑ false\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const isFilteredNumberSetEmpty = await koconutSet\n   *                           .filter(eachNumber => eachNumber > 10)\n   *                           .isNullOrEmpty()\n   *                           .yield()\n   * console.log(isFilteredNumberSetEmpty)\n   * // ↑ true\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = new KoconutMap<number, number>()\n   *\n   * const isNumberPairedMapEmpty = await koconutMap\n   *                                   .isNullOrEmpty()\n   *                                   .yield()\n   * console.log(isNumberPairedMapEmpty)\n   * // ↑ true\n   * ```\n   */\n  isNullOrEmpty(): KoconutBoolean {\n    KoconutDeprecation.showDeprecationWarning('1.3.0', this.isEmpty);\n    const koconutToReturn = new KoconutBoolean();\n    (koconutToReturn as any as KoconutOpener<boolean>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        return this.combinedDataWrapper == null || this.mSize == 0;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * ```predicate``` callback function is optional. If it's omitted the method returns ```true``` if the collection has no elements.\n   * Otherwise, returns ```true``` if no elements match the given ```predicate```.\n   *\n   * @param {Predicator<CombinedDataType> | null} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutBoolean}\n   *\n   * @since 1.0.10\n   *\n   * @category Inspector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = new KoconutArray<number>()\n   *\n   * const isNoneOfAnEmptyArray = await koconutArray\n   *                                   .none()\n   *                                   .yield()\n   * console.log(isNoneOfAnEmptyArray)\n   * // ↑ true\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const isNoneOfSetElementGreaterThan10 = await koconutSet\n   *                                       .none(eachNumber => eachNumber >= 10)\n   *                                       .yield()\n   * console.log(isNoneOfSetElementGreaterThan10)\n   * // ↑ true\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\n   *                   .associateWith(eachNumber => eachNumber * 2)\n   *\n   * const isNoneOfEntryOfMapHasLessThan3DifferenceBetweenKeyAndValue\n   *                       = await koconutMap\n   *                           .none(eachEntry => eachEntry.value - eachEntry.key <= 3)\n   *                           .yield()\n   * console.log(isNoneOfEntryOfMapHasLessThan3DifferenceBetweenKeyAndValue)\n   * // ↑ false\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const isNoneOfArrayElementGreaterThan3 = await koconutArray2\n   *                                   .none(async eachNumber => eachNumber >= 3)\n   *                                   .yield()\n   * console.log(isNoneOfArrayElementGreaterThan3)\n   * // ↑ false\n   *\n   * const isNoneOfArrayelementLessThan0 = await koconutArray2\n   *                   .none(eachNumber => new Promise(resolve => {\n   *                       resolve(eachNumber <= 0)\n   *                   }))\n   *                   .yield()\n   * console.log(isNoneOfArrayelementLessThan0)\n   * // ↑ true\n   * ```\n   */\n  none(\n    predicate: Predicator<CombinedDataType> | null = null,\n    thisArg: any = null,\n  ): KoconutBoolean {\n    if (predicate) predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutBoolean();\n    (koconutToReturn as any as KoconutOpener<boolean>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper == null || this.mSize == 0) return true;\n        if (predicate) {\n          for (const eachCombinedDatum of this.combinedDataWrapper)\n            if (await predicate(eachCombinedDatum)) return false;\n          return true;\n        }\n        return false;\n      });\n    return koconutToReturn;\n  }\n\n  // Iterator\n  /**\n   * Performs the given ```action``` on each element.\n   * When you want to stop iteration in the meantime ```return``` ```false``` or {@link KoconutLoopSignal.BREAK}.\n   *\n   * @param {Action<CombinedDataType>} action A callback function that accepts an argument. The method calls the ```action``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```action```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<void>}\n   *\n   * @since 1.0.10\n   *\n   * @category Iterator\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5,6,7)\n   * await koconutArray\n   *   .forEach(console.log)\n   *   // ↑ 1 2 3 4 5 6 7  -- i.e. This will print out each number\n   *   .process()\n   *\n   * await koconutArray\n   *   .forEach(eachNumber => {\n   *       if(eachNumber > 4) return KoconutLoopSignal.BREAK\n   *       console.log(eachNumber)\n   *   })\n   *   // ↑ 1 2 3 4  -- i.e. Since '5', it is greater than 4, so the loop is broken.\n   *   .process()\n   *\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,1,2,3)\n   *\n   * await koconutSet\n   *   .forEach(console.log)\n   *   // ↑ 1 2 3 -- i.e. All conflicted numbers will be ignored.\n   *   .process()\n   *\n   * await koconutSet\n   *   .forEach(eachNumber => {\n   *       if(eachNumber % 2 == 0) return false\n   *       console.log(eachNumber)\n   *   })\n   *   // ↑ 1 -- i.e. Since '2', it is an even number, so the loop is broken.\n   *   .process()\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1,2,3)\n   *                   .associateWith(eachElement => eachElement)\n   *\n   * await koconutMap\n   *   .forEach(console.log)\n   *   // ↑\n   *   // Entry { keyElement: 1, valueElement: 1 }\n   *   // Entry { keyElement: 2, valueElement: 2 }\n   *   // Entry { keyElement: 3, valueElement: 3 }\n   *   .process()\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3)\n   *\n   * await koconutArray2\n   *   .forEach(async eachNumber => console.log(eachNumber))\n   *   // ↑ 1 2 3\n   *   .process()\n   *\n   * await koconutArray2\n   *   .forEach(eachNumber => new Promise(resolve => resolve(console.log(eachNumber))))\n   *   // ↑ 1 2 3\n   *   .process()\n   * ```\n   */\n  forEach(\n    action: Action<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<void> {\n    action = action.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<void>();\n    (koconutToReturn as any as KoconutOpener<void>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper != null) {\n          for (const eachCombinedDatum of this.combinedDataWrapper) {\n            const signal = await action(eachCombinedDatum);\n            if (signal == false || signal == KoconutLoopSignal.BREAK) break;\n          }\n        }\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet/KoconutMap\n  onEach(\n    action: Action<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutIterable<\n    DataType,\n    CombinedDataType,\n    WrapperType,\n    CombinedWrapperType\n  > {\n    action = action.bind(thisArg);\n    const koconutToReturn = new KoconutIterable<\n      DataType,\n      CombinedDataType,\n      WrapperType,\n      CombinedWrapperType\n    >();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.combinedDataWrapper != null) {\n          for (const eachCombinedDatum of this.combinedDataWrapper) {\n            const signal = await action(eachCombinedDatum);\n            if (signal == false || signal == KoconutLoopSignal.BREAK) break;\n          }\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  // Manipulator\n  // No Comment - KoconutArray/KoconutSet/KoconutMap\n  filter(\n    predicate: Predicator<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutIterable<\n    DataType,\n    CombinedDataType,\n    WrapperType,\n    CombinedWrapperType\n  > {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutIterable<\n      DataType,\n      CombinedDataType,\n      WrapperType,\n      CombinedWrapperType\n    >();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<CombinedDataType>();\n        if (this.combinedDataWrapper != null) {\n          for (const eachCombinedDatum of this.combinedDataWrapper)\n            if (await predicate(eachCombinedDatum))\n              processedArray.push(eachCombinedDatum);\n        }\n        if (this.data instanceof Array)\n          return processedArray as any as WrapperType;\n        else if (this.data instanceof Set)\n          return new Set(processedArray) as any as WrapperType;\n        else {\n          const processedMap = new Map();\n          processedArray.forEach((eachProcessedDatum) => {\n            const eachEntry = eachProcessedDatum as any as Entry<any, any>;\n            processedMap.set(eachEntry.key, eachEntry.value);\n          });\n          return processedMap as any as WrapperType;\n        }\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet/KoconutMap\n  filterNot(\n    predicate: Predicator<CombinedDataType>,\n    thisArg: any = null,\n  ): KoconutIterable<\n    DataType,\n    CombinedDataType,\n    WrapperType,\n    CombinedWrapperType\n  > {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutIterable<\n      DataType,\n      CombinedDataType,\n      WrapperType,\n      CombinedWrapperType\n    >();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<CombinedDataType>();\n        if (this.combinedDataWrapper != null) {\n          for (const eachCombinedDatum of this.combinedDataWrapper)\n            if (!(await predicate(eachCombinedDatum)))\n              processedArray.push(eachCombinedDatum);\n        }\n        if (this.data instanceof Array)\n          return processedArray as any as WrapperType;\n        else if (this.data instanceof Set)\n          return new Set(processedArray) as any as WrapperType;\n        else {\n          const processedMap = new Map();\n          processedArray.forEach((eachProcessedDatum) => {\n            const eachEntry = eachProcessedDatum as any as Entry<any, any>;\n            processedMap.set(eachEntry.key, eachEntry.value);\n          });\n          return processedMap as any as WrapperType;\n        }\n      });\n    return koconutToReturn;\n  }\n\n  // Transformer\n  /**\n   * Returns a single list of all elements yielded from results of ```transform``` function being invoked on each element of original collection.\n   *\n   * @param {Transformer<CombinedDataType, Iterable<ResultDataType>>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutArray<ResultDataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(\"123\", \"45\")\n   *\n   * const allNumberInArray = await koconutArray\n   *                           .flatMap(eachString => eachString)\n   *                           // ↑ The string itself can be used as Iterable<string>.\n   *                           // If you want to make it clear, also possible to type\n   *                           // as eachString => eachString.split('')\n   *                           .map(parseInt)\n   *                           .yield()\n   * console.log(allNumberInArray)\n   * // ↑ [ 1, 2, 3, 4, 5 ]\n   *\n   * // Case 2 - KoconutSet\n   * const koconutSet = KoconutSet.of(\"abc\", \"de\")\n   *\n   * const allCharactersInSet = await koconutSet\n   *                           .flatMap(eachString => eachString)\n   *                           .yield()\n   * console.log(allCharactersInSet)\n   * // ↑ [ 'a', 'b', 'c', 'd', 'e' ]\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\n   *                   .associateWith(eachNumber => eachNumber * 2)\n   *\n   * const allKeysAndValuesInMap = await koconutMap\n   *                               .flatMap(eachEntry => [eachEntry.key, eachEntry.value])\n   *                               .yield()\n   * console.log(allKeysAndValuesInMap)\n   * // ↑ [1, 2, 2, 4, 3, 6, 4, 8, 5, 10]\n   *\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(123, 987)\n   *\n   * const allDigitsInArray = await koconutArray2\n   *                               .flatMap(async eachNumber => {\n   *                                   const digits = new Array<number>()\n   *                                   while(eachNumber != 0) {\n   *                                       digits.unshift(eachNumber % 10)\n   *                                       eachNumber = Math.floor(eachNumber / 10)\n   *                                   }\n   *                                   return digits\n   *                               })\n   *                               .yield()\n   * console.log(allDigitsInArray)\n   * // ↑ [ 1, 2, 3, 9, 8, 7 ]\n   *\n   * const allNumberCharactersInArray = await koconutArray2\n   *                                       .flatMap(eachNumber => new Promise<string>(resolve => {\n   *                                           resolve(eachNumber.toString())\n   *                                       }))\n   *                                       .yield()\n   * console.log(allNumberCharactersInArray)\n   * // ↑ [ '1', '2', '3', '9', '8', '7' ]\n   * ```\n   */\n  flatMap<ResultDataType>(\n    transform: Transformer<CombinedDataType, Iterable<ResultDataType>>,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        if (this.combinedDataWrapper != null) {\n          for (const eachCombinedDatum of this.combinedDataWrapper)\n            for (const eachSubElement of await transform(eachCombinedDatum))\n              processedArray.push(eachSubElement);\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet/KoconutMap\n  flatMapTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: Transformer<CombinedDataType, Iterable<ResultDataType>>,\n    thisArg: any = null,\n  ): KoconutIterable<\n    DataType,\n    CombinedDataType,\n    WrapperType,\n    CombinedWrapperType\n  > {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutIterable<\n      DataType,\n      CombinedDataType,\n      WrapperType,\n      CombinedWrapperType\n    >();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const flattenIterable = this.flatMap(transform, thisArg);\n        if (destination instanceof Array) {\n          await flattenIterable\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await flattenIterable\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns a list containing the results of applying the given ```transform``` function\n   * to each element in the original collection.\n   *\n   * @param {Transformer<CombinedDataType, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutArray<ResultDataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const doubledNumbersInArray = await koconutArray\n   *                           .map(eachNumber => eachNumber * 2)\n   *                           .yield()\n   * console.log(doubledNumbersInArray)\n   * // ↑ [ 2, 4, 6, 8, 10 ]\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const doubledNumbersInSet = await koconutSet\n   *                           .map(eachNumber => eachNumber * 2)\n   *                           .yield()\n   * console.log(doubledNumbersInSet)\n   * // ↑ [ 2, 4, 6, 8, 10 ]\n   *\n   * // Case 3 -- KoconutMap\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\n   *                   .associate(eachNumber => [eachNumber, eachNumber * 2])\n   *\n   * const keyValueSumOfMap = await koconutMap\n   *                       .map(eachEntry => eachEntry.key + eachEntry.value)\n   *                       .yield()\n   * console.log(keyValueSumOfMap)\n   * // ↑ [ 3, 6, 9, 12, 15 ]\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const squaredNumberInArray = await koconutArray2\n   *                           .map(async eachNumber => eachNumber * eachNumber)\n   *                           .yield()\n   * console.log(squaredNumberInArray)\n   * // ↑ [ 1, 4, 9, 16, 25 ]\n   *\n   * const trippledNumbersInArray = await koconutArray2\n   *                               .map(eachNumber => new Promise(resolve => {\n   *                                   resolve(eachNumber * 3)\n   *                               }))\n   *                               .yield()\n   * console.log(trippledNumbersInArray)\n   * // ↑ [ 3, 6, 9, 12, 15 ]\n   * ```\n   */\n  map<ResultDataType>(\n    transform: Transformer<CombinedDataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        if (this.combinedDataWrapper != null) {\n          for (const eachCombinedDatum of this.combinedDataWrapper) {\n            processedArray.push(await transform(eachCombinedDatum));\n          }\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment -- KoconutArray/KoconutSet/KoconutMap\n  mapTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: Transformer<CombinedDataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutIterable<\n    DataType,\n    CombinedDataType,\n    WrapperType,\n    CombinedWrapperType\n  > {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutIterable<\n      DataType,\n      CombinedDataType,\n      WrapperType,\n      CombinedWrapperType\n    >();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const mappedIterable = this.map(transform, thisArg);\n        if (destination instanceof Array) {\n          await mappedIterable\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await mappedIterable\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns a list containing results that are not ```null``` nor ```undefined``` of applying\n   * the given ```transfrom``` function to each element in the original collection. You can use this method as ```filter``` then ```map```.\n   *\n   * @param {Transformer<CombinedDataType,ResultDataType | void | null | undefined>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutArray<ResultDataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const squaredOddNumbersInArray = await koconutArray\n   *                       .mapNotNull(eachNumber => {\n   *                           if(eachNumber % 2 == 1)\n   *                               return eachNumber * eachNumber\n   *                           // return\n   *                           // return null\n   *                           // return undefined\n   *                           // ↑ You can use any one of\n   *                           //   them or just omit it.\n   *                       })\n   *                       .yield()\n   * console.log(squaredOddNumbersInArray)\n   * // ↑ [ 1, 9, 25 ]\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(\"1\", \"54\", \"26\", \"5\")\n   *\n   * const twoDigitsNumbersInSet = await koconutSet\n   *                       .mapNotNull(eachString => {\n   *                           if(eachString.length == 2)\n   *                               return parseInt(eachString)\n   *                       })\n   *                       .yield()\n   * console.log(twoDigitsNumbersInSet)\n   * // ↑ [ 54, 26 ]\n   *\n   * // Case 3 -- KoconutMap\n   * const KoconutMap = KoconutArray.of(1,2,3,4,5)\n   *               .associate(eachNumber => [eachNumber, eachNumber * 2])\n   *\n   * const oddKeyKeyValueSumInMap = await KoconutMap\n   *                       .mapNotNull(eachEntry => {\n   *                           if(eachEntry.key % 2 == 1)\n   *                               return eachEntry.key + eachEntry.value\n   *                       })\n   *                       .yield()\n   * console.log(oddKeyKeyValueSumInMap)\n   * // ↑ [ 3, 9, 15 ]\n   *\n   * // Case 4 -- You can also do it asynchronously\n   * const koocnutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const squaredEvenNumbersInArray = await koocnutArray2\n   *                           .mapNotNull(async eachNumber => {\n   *                               if(eachNumber % 2 == 0)\n   *                                   return eachNumber * eachNumber\n   *                           })\n   *                           .yield()\n   * console.log(squaredEvenNumbersInArray)\n   * // ↑ [ 4, 16 ]\n   *\n   * const doubledOddNumbersInArray = await koocnutArray2\n   *                       .mapNotNull(eachNumber => new Promise<number | null>(resolve => {\n   *                           if(eachNumber % 2 == 1)\n   *                               resolve(eachNumber * 2)\n   *                           else resolve(null)\n   *                       }))\n   *                       .yield()\n   * console.log(doubledOddNumbersInArray)\n   * // ↑ [ 2, 6, 10 ]\n   * ```\n   */\n  mapNotNull<ResultDataType>(\n    transform: Transformer<\n      CombinedDataType,\n      ResultDataType | void | null | undefined\n    >,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        if (this.combinedDataWrapper != null) {\n          for (const eachCombinedDatum of this.combinedDataWrapper) {\n            const dataToAdd = await transform(eachCombinedDatum);\n            if (dataToAdd != null && dataToAdd != undefined)\n              processedArray.push(dataToAdd);\n          }\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment -- KoconutArray/KoconutSet/KoconutMap\n  mapNotNullTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: Transformer<\n      CombinedDataType,\n      ResultDataType | void | null | undefined\n    >,\n    thisArg: any = null,\n  ): KoconutIterable<\n    DataType,\n    CombinedDataType,\n    WrapperType,\n    CombinedWrapperType\n  > {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutIterable<\n      DataType,\n      CombinedDataType,\n      WrapperType,\n      CombinedWrapperType\n    >();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const mappedIterable = this.mapNotNull(transform, thisArg);\n        if (destination instanceof Array) {\n          await mappedIterable\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await mappedIterable\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"02416956466dfaf904317dc1874ef64a459691cc","contentHash":"ce46c15f04f83f0c7accb554b50ba86c76e89dfdae04da065789022030622dea"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\collection\\KoconutCollection.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\collection\\KoconutCollection.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":13}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":43}},"4":{"start":{"line":6,"column":23},"end":{"line":6,"column":54}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":28}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":36}},"7":{"start":{"line":15,"column":8},"end":{"line":22,"column":9}},"8":{"start":{"line":16,"column":30},"end":{"line":16,"column":46}},"9":{"start":{"line":17,"column":12},"end":{"line":17,"column":42}},"10":{"start":{"line":18,"column":12},"end":{"line":20,"column":71}},"11":{"start":{"line":19,"column":37},"end":{"line":19,"column":57}},"12":{"start":{"line":20,"column":40},"end":{"line":20,"column":69}},"13":{"start":{"line":21,"column":12},"end":{"line":21,"column":44}},"14":{"start":{"line":25,"column":32},"end":{"line":25,"column":71}},"15":{"start":{"line":26,"column":8},"end":{"line":26,"column":58}},"16":{"start":{"line":27,"column":8},"end":{"line":27,"column":66}},"17":{"start":{"line":28,"column":8},"end":{"line":28,"column":31}},"18":{"start":{"line":32,"column":32},"end":{"line":32,"column":63}},"19":{"start":{"line":33,"column":8},"end":{"line":35,"column":50}},"20":{"start":{"line":35,"column":38},"end":{"line":35,"column":48}},"21":{"start":{"line":36,"column":8},"end":{"line":36,"column":31}},"22":{"start":{"line":39,"column":32},"end":{"line":39,"column":59}},"23":{"start":{"line":40,"column":8},"end":{"line":42,"column":53}},"24":{"start":{"line":42,"column":38},"end":{"line":42,"column":51}},"25":{"start":{"line":43,"column":8},"end":{"line":43,"column":31}},"26":{"start":{"line":88,"column":8},"end":{"line":88,"column":44}},"27":{"start":{"line":89,"column":32},"end":{"line":89,"column":63}},"28":{"start":{"line":90,"column":8},"end":{"line":99,"column":11}},"29":{"start":{"line":93,"column":31},"end":{"line":93,"column":38}},"30":{"start":{"line":94,"column":12},"end":{"line":97,"column":13}},"31":{"start":{"line":95,"column":16},"end":{"line":96,"column":76}},"32":{"start":{"line":96,"column":20},"end":{"line":96,"column":76}},"33":{"start":{"line":98,"column":12},"end":{"line":98,"column":32}},"34":{"start":{"line":100,"column":8},"end":{"line":100,"column":31}},"35":{"start":{"line":147,"column":8},"end":{"line":147,"column":44}},"36":{"start":{"line":148,"column":32},"end":{"line":148,"column":63}},"37":{"start":{"line":149,"column":8},"end":{"line":158,"column":11}},"38":{"start":{"line":152,"column":31},"end":{"line":152,"column":38}},"39":{"start":{"line":153,"column":12},"end":{"line":156,"column":13}},"40":{"start":{"line":154,"column":16},"end":{"line":155,"column":87}},"41":{"start":{"line":155,"column":20},"end":{"line":155,"column":87}},"42":{"start":{"line":157,"column":12},"end":{"line":157,"column":32}},"43":{"start":{"line":159,"column":8},"end":{"line":159,"column":31}},"44":{"start":{"line":194,"column":32},"end":{"line":194,"column":61}},"45":{"start":{"line":195,"column":8},"end":{"line":215,"column":11}},"46":{"start":{"line":198,"column":12},"end":{"line":199,"column":29}},"47":{"start":{"line":199,"column":16},"end":{"line":199,"column":29}},"48":{"start":{"line":200,"column":12},"end":{"line":213,"column":13}},"49":{"start":{"line":201,"column":34},"end":{"line":201,"column":39}},"50":{"start":{"line":202,"column":16},"end":{"line":210,"column":55}},"51":{"start":{"line":203,"column":43},"end":{"line":203,"column":70}},"52":{"start":{"line":204,"column":20},"end":{"line":207,"column":53}},"53":{"start":{"line":205,"column":24},"end":{"line":205,"column":67}},"54":{"start":{"line":207,"column":24},"end":{"line":207,"column":53}},"55":{"start":{"line":210,"column":20},"end":{"line":210,"column":55}},"56":{"start":{"line":211,"column":16},"end":{"line":212,"column":32}},"57":{"start":{"line":212,"column":20},"end":{"line":212,"column":32}},"58":{"start":{"line":214,"column":12},"end":{"line":214,"column":25}},"59":{"start":{"line":216,"column":8},"end":{"line":216,"column":31}},"60":{"start":{"line":251,"column":32},"end":{"line":251,"column":61}},"61":{"start":{"line":252,"column":8},"end":{"line":278,"column":11}},"62":{"start":{"line":255,"column":12},"end":{"line":256,"column":29}},"63":{"start":{"line":256,"column":16},"end":{"line":256,"column":29}},"64":{"start":{"line":257,"column":30},"end":{"line":257,"column":51}},"65":{"start":{"line":258,"column":12},"end":{"line":276,"column":13}},"66":{"start":{"line":259,"column":16},"end":{"line":275,"column":33}},"67":{"start":{"line":260,"column":37},"end":{"line":260,"column":42}},"68":{"start":{"line":261,"column":20},"end":{"line":270,"column":21}},"69":{"start":{"line":262,"column":47},"end":{"line":262,"column":85}},"70":{"start":{"line":263,"column":24},"end":{"line":269,"column":25}},"71":{"start":{"line":267,"column":28},"end":{"line":267,"column":46}},"72":{"start":{"line":268,"column":28},"end":{"line":268,"column":34}},"73":{"start":{"line":271,"column":20},"end":{"line":272,"column":37}},"74":{"start":{"line":272,"column":24},"end":{"line":272,"column":37}},"75":{"start":{"line":274,"column":21},"end":{"line":275,"column":33}},"76":{"start":{"line":275,"column":20},"end":{"line":275,"column":33}},"77":{"start":{"line":277,"column":12},"end":{"line":277,"column":24}},"78":{"start":{"line":279,"column":8},"end":{"line":279,"column":31}},"79":{"start":{"line":361,"column":8},"end":{"line":361,"column":38}},"80":{"start":{"line":362,"column":32},"end":{"line":362,"column":63}},"81":{"start":{"line":363,"column":8},"end":{"line":374,"column":11}},"82":{"start":{"line":366,"column":12},"end":{"line":373,"column":13}},"83":{"start":{"line":367,"column":32},"end":{"line":367,"column":33}},"84":{"start":{"line":368,"column":16},"end":{"line":372,"column":17}},"85":{"start":{"line":369,"column":35},"end":{"line":369,"column":79}},"86":{"start":{"line":370,"column":20},"end":{"line":371,"column":30}},"87":{"start":{"line":371,"column":24},"end":{"line":371,"column":30}},"88":{"start":{"line":375,"column":8},"end":{"line":375,"column":31}},"89":{"start":{"line":379,"column":8},"end":{"line":379,"column":77}},"90":{"start":{"line":383,"column":8},"end":{"line":383,"column":38}},"91":{"start":{"line":384,"column":32},"end":{"line":384,"column":55}},"92":{"start":{"line":385,"column":8},"end":{"line":397,"column":11}},"93":{"start":{"line":388,"column":12},"end":{"line":395,"column":13}},"94":{"start":{"line":389,"column":32},"end":{"line":389,"column":33}},"95":{"start":{"line":390,"column":16},"end":{"line":394,"column":17}},"96":{"start":{"line":391,"column":35},"end":{"line":391,"column":71}},"97":{"start":{"line":392,"column":20},"end":{"line":393,"column":30}},"98":{"start":{"line":393,"column":24},"end":{"line":393,"column":30}},"99":{"start":{"line":396,"column":12},"end":{"line":396,"column":29}},"100":{"start":{"line":398,"column":8},"end":{"line":398,"column":31}},"101":{"start":{"line":403,"column":32},"end":{"line":403,"column":55}},"102":{"start":{"line":404,"column":8},"end":{"line":435,"column":11}},"103":{"start":{"line":407,"column":33},"end":{"line":407,"column":44}},"104":{"start":{"line":408,"column":12},"end":{"line":430,"column":13}},"105":{"start":{"line":409,"column":16},"end":{"line":429,"column":17}},"106":{"start":{"line":410,"column":20},"end":{"line":428,"column":21}},"107":{"start":{"line":411,"column":41},"end":{"line":411,"column":46}},"108":{"start":{"line":412,"column":24},"end":{"line":421,"column":25}},"109":{"start":{"line":413,"column":51},"end":{"line":413,"column":93}},"110":{"start":{"line":414,"column":28},"end":{"line":420,"column":29}},"111":{"start":{"line":418,"column":32},"end":{"line":418,"column":50}},"112":{"start":{"line":419,"column":32},"end":{"line":419,"column":38}},"113":{"start":{"line":422,"column":24},"end":{"line":423,"column":59}},"114":{"start":{"line":423,"column":28},"end":{"line":423,"column":59}},"115":{"start":{"line":426,"column":24},"end":{"line":426,"column":72}},"116":{"start":{"line":427,"column":24},"end":{"line":427,"column":30}},"117":{"start":{"line":431,"column":12},"end":{"line":434,"column":47}},"118":{"start":{"line":432,"column":16},"end":{"line":432,"column":38}},"119":{"start":{"line":434,"column":16},"end":{"line":434,"column":47}},"120":{"start":{"line":436,"column":8},"end":{"line":436,"column":31}},"121":{"start":{"line":440,"column":8},"end":{"line":440,"column":42}},"122":{"start":{"line":441,"column":32},"end":{"line":441,"column":55}},"123":{"start":{"line":442,"column":8},"end":{"line":480,"column":11}},"124":{"start":{"line":445,"column":35},"end":{"line":445,"column":46}},"125":{"start":{"line":446,"column":12},"end":{"line":475,"column":13}},"126":{"start":{"line":447,"column":33},"end":{"line":447,"column":44}},"127":{"start":{"line":448,"column":42},"end":{"line":448,"column":53}},"128":{"start":{"line":449,"column":16},"end":{"line":474,"column":17}},"129":{"start":{"line":450,"column":36},"end":{"line":450,"column":61}},"130":{"start":{"line":451,"column":20},"end":{"line":473,"column":21}},"131":{"start":{"line":452,"column":41},"end":{"line":452,"column":46}},"132":{"start":{"line":453,"column":24},"end":{"line":462,"column":25}},"133":{"start":{"line":454,"column":51},"end":{"line":454,"column":89}},"134":{"start":{"line":455,"column":28},"end":{"line":461,"column":29}},"135":{"start":{"line":459,"column":32},"end":{"line":459,"column":50}},"136":{"start":{"line":460,"column":32},"end":{"line":460,"column":38}},"137":{"start":{"line":463,"column":24},"end":{"line":466,"column":25}},"138":{"start":{"line":464,"column":28},"end":{"line":464,"column":60}},"139":{"start":{"line":465,"column":28},"end":{"line":465,"column":59}},"140":{"start":{"line":469,"column":24},"end":{"line":472,"column":25}},"141":{"start":{"line":470,"column":28},"end":{"line":470,"column":51}},"142":{"start":{"line":471,"column":28},"end":{"line":471,"column":59}},"143":{"start":{"line":476,"column":12},"end":{"line":479,"column":47}},"144":{"start":{"line":477,"column":16},"end":{"line":477,"column":38}},"145":{"start":{"line":479,"column":16},"end":{"line":479,"column":47}},"146":{"start":{"line":481,"column":8},"end":{"line":481,"column":31}},"147":{"start":{"line":485,"column":8},"end":{"line":486,"column":125}},"148":{"start":{"line":486,"column":12},"end":{"line":486,"column":125}},"149":{"start":{"line":487,"column":32},"end":{"line":487,"column":55}},"150":{"start":{"line":488,"column":8},"end":{"line":498,"column":11}},"151":{"start":{"line":491,"column":33},"end":{"line":491,"column":44}},"152":{"start":{"line":492,"column":12},"end":{"line":493,"column":64}},"153":{"start":{"line":493,"column":16},"end":{"line":493,"column":64}},"154":{"start":{"line":494,"column":12},"end":{"line":497,"column":47}},"155":{"start":{"line":495,"column":16},"end":{"line":495,"column":38}},"156":{"start":{"line":497,"column":16},"end":{"line":497,"column":47}},"157":{"start":{"line":499,"column":8},"end":{"line":499,"column":31}},"158":{"start":{"line":503,"column":8},"end":{"line":504,"column":125}},"159":{"start":{"line":504,"column":12},"end":{"line":504,"column":125}},"160":{"start":{"line":505,"column":32},"end":{"line":505,"column":55}},"161":{"start":{"line":506,"column":8},"end":{"line":516,"column":11}},"162":{"start":{"line":509,"column":33},"end":{"line":509,"column":44}},"163":{"start":{"line":510,"column":12},"end":{"line":511,"column":68}},"164":{"start":{"line":511,"column":16},"end":{"line":511,"column":68}},"165":{"start":{"line":512,"column":12},"end":{"line":515,"column":47}},"166":{"start":{"line":513,"column":16},"end":{"line":513,"column":38}},"167":{"start":{"line":515,"column":16},"end":{"line":515,"column":47}},"168":{"start":{"line":517,"column":8},"end":{"line":517,"column":31}},"169":{"start":{"line":521,"column":8},"end":{"line":521,"column":44}},"170":{"start":{"line":522,"column":32},"end":{"line":522,"column":55}},"171":{"start":{"line":523,"column":8},"end":{"line":542,"column":11}},"172":{"start":{"line":526,"column":33},"end":{"line":526,"column":44}},"173":{"start":{"line":527,"column":12},"end":{"line":537,"column":13}},"174":{"start":{"line":528,"column":34},"end":{"line":528,"column":55}},"175":{"start":{"line":529,"column":34},"end":{"line":529,"column":35}},"176":{"start":{"line":530,"column":16},"end":{"line":535,"column":17}},"177":{"start":{"line":530,"column":37},"end":{"line":530,"column":57}},"178":{"start":{"line":531,"column":20},"end":{"line":534,"column":21}},"179":{"start":{"line":532,"column":24},"end":{"line":532,"column":48}},"180":{"start":{"line":533,"column":24},"end":{"line":533,"column":30}},"181":{"start":{"line":536,"column":16},"end":{"line":536,"column":69}},"182":{"start":{"line":538,"column":12},"end":{"line":541,"column":47}},"183":{"start":{"line":539,"column":16},"end":{"line":539,"column":38}},"184":{"start":{"line":541,"column":16},"end":{"line":541,"column":47}},"185":{"start":{"line":543,"column":8},"end":{"line":543,"column":31}},"186":{"start":{"line":547,"column":8},"end":{"line":547,"column":44}},"187":{"start":{"line":548,"column":32},"end":{"line":548,"column":55}},"188":{"start":{"line":549,"column":8},"end":{"line":568,"column":11}},"189":{"start":{"line":552,"column":33},"end":{"line":552,"column":44}},"190":{"start":{"line":553,"column":12},"end":{"line":563,"column":13}},"191":{"start":{"line":554,"column":34},"end":{"line":554,"column":55}},"192":{"start":{"line":555,"column":34},"end":{"line":555,"column":50}},"193":{"start":{"line":556,"column":16},"end":{"line":561,"column":17}},"194":{"start":{"line":557,"column":20},"end":{"line":560,"column":21}},"195":{"start":{"line":558,"column":24},"end":{"line":558,"column":58}},"196":{"start":{"line":559,"column":24},"end":{"line":559,"column":30}},"197":{"start":{"line":562,"column":16},"end":{"line":562,"column":62}},"198":{"start":{"line":564,"column":12},"end":{"line":567,"column":47}},"199":{"start":{"line":565,"column":16},"end":{"line":565,"column":38}},"200":{"start":{"line":567,"column":16},"end":{"line":567,"column":47}},"201":{"start":{"line":569,"column":8},"end":{"line":569,"column":31}},"202":{"start":{"line":573,"column":8},"end":{"line":573,"column":80}},"203":{"start":{"line":577,"column":8},"end":{"line":577,"column":83}},"204":{"start":{"line":581,"column":8},"end":{"line":581,"column":44}},"205":{"start":{"line":582,"column":32},"end":{"line":582,"column":55}},"206":{"start":{"line":583,"column":8},"end":{"line":603,"column":11}},"207":{"start":{"line":586,"column":39},"end":{"line":586,"column":70}},"208":{"start":{"line":587,"column":12},"end":{"line":601,"column":13}},"209":{"start":{"line":588,"column":16},"end":{"line":592,"column":31}},"210":{"start":{"line":590,"column":20},"end":{"line":590,"column":50}},"211":{"start":{"line":595,"column":16},"end":{"line":600,"column":31}},"212":{"start":{"line":598,"column":20},"end":{"line":598,"column":49}},"213":{"start":{"line":602,"column":12},"end":{"line":602,"column":29}},"214":{"start":{"line":604,"column":8},"end":{"line":604,"column":31}},"215":{"start":{"line":608,"column":8},"end":{"line":608,"column":44}},"216":{"start":{"line":609,"column":32},"end":{"line":609,"column":55}},"217":{"start":{"line":610,"column":8},"end":{"line":630,"column":11}},"218":{"start":{"line":613,"column":39},"end":{"line":613,"column":73}},"219":{"start":{"line":614,"column":12},"end":{"line":628,"column":13}},"220":{"start":{"line":615,"column":16},"end":{"line":619,"column":31}},"221":{"start":{"line":617,"column":20},"end":{"line":617,"column":50}},"222":{"start":{"line":622,"column":16},"end":{"line":627,"column":31}},"223":{"start":{"line":625,"column":20},"end":{"line":625,"column":49}},"224":{"start":{"line":629,"column":12},"end":{"line":629,"column":29}},"225":{"start":{"line":631,"column":8},"end":{"line":631,"column":31}},"226":{"start":{"line":635,"column":8},"end":{"line":635,"column":44}},"227":{"start":{"line":636,"column":32},"end":{"line":636,"column":55}},"228":{"start":{"line":637,"column":8},"end":{"line":650,"column":11}},"229":{"start":{"line":640,"column":35},"end":{"line":640,"column":46}},"230":{"start":{"line":641,"column":12},"end":{"line":645,"column":13}},"231":{"start":{"line":642,"column":16},"end":{"line":644,"column":55}},"232":{"start":{"line":643,"column":20},"end":{"line":644,"column":55}},"233":{"start":{"line":644,"column":24},"end":{"line":644,"column":55}},"234":{"start":{"line":646,"column":12},"end":{"line":649,"column":47}},"235":{"start":{"line":647,"column":16},"end":{"line":647,"column":38}},"236":{"start":{"line":649,"column":16},"end":{"line":649,"column":47}},"237":{"start":{"line":651,"column":8},"end":{"line":651,"column":31}},"238":{"start":{"line":655,"column":8},"end":{"line":655,"column":44}},"239":{"start":{"line":656,"column":32},"end":{"line":656,"column":55}},"240":{"start":{"line":657,"column":8},"end":{"line":677,"column":11}},"241":{"start":{"line":660,"column":39},"end":{"line":660,"column":77}},"242":{"start":{"line":661,"column":12},"end":{"line":675,"column":13}},"243":{"start":{"line":662,"column":16},"end":{"line":666,"column":31}},"244":{"start":{"line":664,"column":20},"end":{"line":664,"column":50}},"245":{"start":{"line":669,"column":16},"end":{"line":674,"column":31}},"246":{"start":{"line":672,"column":20},"end":{"line":672,"column":49}},"247":{"start":{"line":676,"column":12},"end":{"line":676,"column":29}},"248":{"start":{"line":678,"column":8},"end":{"line":678,"column":31}},"249":{"start":{"line":684,"column":32},"end":{"line":684,"column":55}},"250":{"start":{"line":685,"column":8},"end":{"line":698,"column":11}},"251":{"start":{"line":688,"column":35},"end":{"line":688,"column":46}},"252":{"start":{"line":689,"column":12},"end":{"line":693,"column":13}},"253":{"start":{"line":690,"column":16},"end":{"line":692,"column":55}},"254":{"start":{"line":691,"column":20},"end":{"line":692,"column":55}},"255":{"start":{"line":692,"column":24},"end":{"line":692,"column":55}},"256":{"start":{"line":694,"column":12},"end":{"line":697,"column":47}},"257":{"start":{"line":695,"column":16},"end":{"line":695,"column":38}},"258":{"start":{"line":697,"column":16},"end":{"line":697,"column":47}},"259":{"start":{"line":699,"column":8},"end":{"line":699,"column":31}},"260":{"start":{"line":703,"column":32},"end":{"line":703,"column":55}},"261":{"start":{"line":704,"column":8},"end":{"line":724,"column":11}},"262":{"start":{"line":707,"column":39},"end":{"line":707,"column":59}},"263":{"start":{"line":708,"column":12},"end":{"line":722,"column":13}},"264":{"start":{"line":709,"column":16},"end":{"line":713,"column":31}},"265":{"start":{"line":711,"column":20},"end":{"line":711,"column":50}},"266":{"start":{"line":716,"column":16},"end":{"line":721,"column":31}},"267":{"start":{"line":719,"column":20},"end":{"line":719,"column":49}},"268":{"start":{"line":723,"column":12},"end":{"line":723,"column":29}},"269":{"start":{"line":725,"column":8},"end":{"line":725,"column":31}},"270":{"start":{"line":729,"column":8},"end":{"line":729,"column":42}},"271":{"start":{"line":730,"column":32},"end":{"line":730,"column":55}},"272":{"start":{"line":731,"column":8},"end":{"line":772,"column":11}},"273":{"start":{"line":734,"column":35},"end":{"line":734,"column":46}},"274":{"start":{"line":735,"column":12},"end":{"line":767,"column":13}},"275":{"start":{"line":736,"column":34},"end":{"line":736,"column":55}},"276":{"start":{"line":737,"column":16},"end":{"line":766,"column":17}},"277":{"start":{"line":738,"column":20},"end":{"line":765,"column":21}},"278":{"start":{"line":739,"column":50},"end":{"line":739,"column":86}},"279":{"start":{"line":740,"column":41},"end":{"line":740,"column":42}},"280":{"start":{"line":742,"column":39},"end":{"line":742,"column":60}},"281":{"start":{"line":743,"column":24},"end":{"line":763,"column":25}},"282":{"start":{"line":744,"column":28},"end":{"line":744,"column":82}},"283":{"start":{"line":745,"column":53},"end":{"line":745,"column":96}},"284":{"start":{"line":746,"column":51},"end":{"line":746,"column":56}},"285":{"start":{"line":747,"column":28},"end":{"line":758,"column":88}},"286":{"start":{"line":748,"column":58},"end":{"line":748,"column":103}},"287":{"start":{"line":749,"column":51},"end":{"line":749,"column":52}},"288":{"start":{"line":750,"column":32},"end":{"line":753,"column":69}},"289":{"start":{"line":751,"column":36},"end":{"line":751,"column":83}},"290":{"start":{"line":753,"column":36},"end":{"line":753,"column":69}},"291":{"start":{"line":754,"column":32},"end":{"line":755,"column":60}},"292":{"start":{"line":755,"column":36},"end":{"line":755,"column":60}},"293":{"start":{"line":758,"column":32},"end":{"line":758,"column":88}},"294":{"start":{"line":759,"column":28},"end":{"line":762,"column":55}},"295":{"start":{"line":760,"column":32},"end":{"line":760,"column":61}},"296":{"start":{"line":762,"column":32},"end":{"line":762,"column":55}},"297":{"start":{"line":764,"column":24},"end":{"line":764,"column":81}},"298":{"start":{"line":768,"column":12},"end":{"line":771,"column":47}},"299":{"start":{"line":769,"column":16},"end":{"line":769,"column":38}},"300":{"start":{"line":771,"column":16},"end":{"line":771,"column":47}},"301":{"start":{"line":773,"column":8},"end":{"line":773,"column":31}},"302":{"start":{"line":777,"column":8},"end":{"line":777,"column":42}},"303":{"start":{"line":778,"column":32},"end":{"line":778,"column":55}},"304":{"start":{"line":779,"column":8},"end":{"line":820,"column":11}},"305":{"start":{"line":782,"column":35},"end":{"line":782,"column":46}},"306":{"start":{"line":783,"column":12},"end":{"line":815,"column":13}},"307":{"start":{"line":784,"column":34},"end":{"line":784,"column":55}},"308":{"start":{"line":785,"column":16},"end":{"line":814,"column":17}},"309":{"start":{"line":786,"column":20},"end":{"line":813,"column":21}},"310":{"start":{"line":787,"column":50},"end":{"line":787,"column":86}},"311":{"start":{"line":788,"column":41},"end":{"line":788,"column":42}},"312":{"start":{"line":790,"column":39},"end":{"line":790,"column":60}},"313":{"start":{"line":791,"column":24},"end":{"line":811,"column":25}},"314":{"start":{"line":792,"column":28},"end":{"line":792,"column":82}},"315":{"start":{"line":793,"column":53},"end":{"line":793,"column":96}},"316":{"start":{"line":794,"column":50},"end":{"line":794,"column":55}},"317":{"start":{"line":795,"column":28},"end":{"line":806,"column":87}},"318":{"start":{"line":796,"column":58},"end":{"line":796,"column":103}},"319":{"start":{"line":797,"column":51},"end":{"line":797,"column":52}},"320":{"start":{"line":798,"column":32},"end":{"line":801,"column":69}},"321":{"start":{"line":799,"column":36},"end":{"line":799,"column":83}},"322":{"start":{"line":801,"column":36},"end":{"line":801,"column":69}},"323":{"start":{"line":802,"column":32},"end":{"line":803,"column":59}},"324":{"start":{"line":803,"column":36},"end":{"line":803,"column":59}},"325":{"start":{"line":806,"column":32},"end":{"line":806,"column":87}},"326":{"start":{"line":807,"column":28},"end":{"line":810,"column":55}},"327":{"start":{"line":808,"column":32},"end":{"line":808,"column":61}},"328":{"start":{"line":810,"column":32},"end":{"line":810,"column":55}},"329":{"start":{"line":812,"column":24},"end":{"line":812,"column":81}},"330":{"start":{"line":816,"column":12},"end":{"line":819,"column":47}},"331":{"start":{"line":817,"column":16},"end":{"line":817,"column":38}},"332":{"start":{"line":819,"column":16},"end":{"line":819,"column":47}},"333":{"start":{"line":821,"column":8},"end":{"line":821,"column":31}},"334":{"start":{"line":825,"column":8},"end":{"line":825,"column":46}},"335":{"start":{"line":826,"column":32},"end":{"line":826,"column":55}},"336":{"start":{"line":827,"column":8},"end":{"line":853,"column":11}},"337":{"start":{"line":830,"column":35},"end":{"line":830,"column":46}},"338":{"start":{"line":831,"column":12},"end":{"line":848,"column":13}},"339":{"start":{"line":832,"column":34},"end":{"line":832,"column":55}},"340":{"start":{"line":833,"column":16},"end":{"line":847,"column":17}},"341":{"start":{"line":834,"column":20},"end":{"line":846,"column":21}},"342":{"start":{"line":835,"column":41},"end":{"line":835,"column":42}},"343":{"start":{"line":837,"column":39},"end":{"line":837,"column":60}},"344":{"start":{"line":838,"column":24},"end":{"line":844,"column":25}},"345":{"start":{"line":839,"column":28},"end":{"line":839,"column":82}},"346":{"start":{"line":840,"column":28},"end":{"line":843,"column":55}},"347":{"start":{"line":841,"column":32},"end":{"line":841,"column":61}},"348":{"start":{"line":843,"column":32},"end":{"line":843,"column":55}},"349":{"start":{"line":845,"column":24},"end":{"line":845,"column":81}},"350":{"start":{"line":849,"column":12},"end":{"line":852,"column":47}},"351":{"start":{"line":850,"column":16},"end":{"line":850,"column":38}},"352":{"start":{"line":852,"column":16},"end":{"line":852,"column":47}},"353":{"start":{"line":854,"column":8},"end":{"line":854,"column":31}},"354":{"start":{"line":858,"column":32},"end":{"line":858,"column":55}},"355":{"start":{"line":859,"column":8},"end":{"line":869,"column":11}},"356":{"start":{"line":862,"column":35},"end":{"line":864,"column":29}},"357":{"start":{"line":865,"column":12},"end":{"line":868,"column":47}},"358":{"start":{"line":866,"column":16},"end":{"line":866,"column":38}},"359":{"start":{"line":868,"column":16},"end":{"line":868,"column":47}},"360":{"start":{"line":870,"column":8},"end":{"line":870,"column":31}},"361":{"start":{"line":874,"column":32},"end":{"line":874,"column":55}},"362":{"start":{"line":875,"column":8},"end":{"line":885,"column":11}},"363":{"start":{"line":878,"column":35},"end":{"line":880,"column":29}},"364":{"start":{"line":881,"column":12},"end":{"line":884,"column":47}},"365":{"start":{"line":882,"column":16},"end":{"line":882,"column":38}},"366":{"start":{"line":884,"column":16},"end":{"line":884,"column":47}},"367":{"start":{"line":886,"column":8},"end":{"line":886,"column":31}},"368":{"start":{"line":890,"column":8},"end":{"line":890,"column":44}},"369":{"start":{"line":891,"column":32},"end":{"line":891,"column":55}},"370":{"start":{"line":892,"column":8},"end":{"line":909,"column":11}},"371":{"start":{"line":895,"column":33},"end":{"line":895,"column":44}},"372":{"start":{"line":896,"column":12},"end":{"line":904,"column":13}},"373":{"start":{"line":897,"column":34},"end":{"line":897,"column":55}},"374":{"start":{"line":898,"column":34},"end":{"line":898,"column":48}},"375":{"start":{"line":899,"column":16},"end":{"line":902,"column":17}},"376":{"start":{"line":900,"column":20},"end":{"line":901,"column":30}},"377":{"start":{"line":901,"column":24},"end":{"line":901,"column":30}},"378":{"start":{"line":903,"column":16},"end":{"line":903,"column":78}},"379":{"start":{"line":905,"column":12},"end":{"line":908,"column":47}},"380":{"start":{"line":906,"column":16},"end":{"line":906,"column":38}},"381":{"start":{"line":908,"column":16},"end":{"line":908,"column":47}},"382":{"start":{"line":910,"column":8},"end":{"line":910,"column":31}},"383":{"start":{"line":914,"column":8},"end":{"line":914,"column":44}},"384":{"start":{"line":915,"column":32},"end":{"line":915,"column":55}},"385":{"start":{"line":916,"column":8},"end":{"line":933,"column":11}},"386":{"start":{"line":919,"column":33},"end":{"line":919,"column":44}},"387":{"start":{"line":920,"column":12},"end":{"line":928,"column":13}},"388":{"start":{"line":921,"column":37},"end":{"line":921,"column":38}},"389":{"start":{"line":922,"column":16},"end":{"line":926,"column":17}},"390":{"start":{"line":923,"column":20},"end":{"line":924,"column":30}},"391":{"start":{"line":924,"column":24},"end":{"line":924,"column":30}},"392":{"start":{"line":925,"column":20},"end":{"line":925,"column":37}},"393":{"start":{"line":927,"column":16},"end":{"line":927,"column":80}},"394":{"start":{"line":929,"column":12},"end":{"line":932,"column":47}},"395":{"start":{"line":930,"column":16},"end":{"line":930,"column":38}},"396":{"start":{"line":932,"column":16},"end":{"line":932,"column":47}},"397":{"start":{"line":934,"column":8},"end":{"line":934,"column":31}},"398":{"start":{"line":991,"column":32},"end":{"line":991,"column":63}},"399":{"start":{"line":992,"column":8},"end":{"line":998,"column":11}},"400":{"start":{"line":995,"column":12},"end":{"line":996,"column":115}},"401":{"start":{"line":996,"column":16},"end":{"line":996,"column":115}},"402":{"start":{"line":997,"column":12},"end":{"line":997,"column":48}},"403":{"start":{"line":999,"column":8},"end":{"line":999,"column":31}},"404":{"start":{"line":1048,"column":8},"end":{"line":1048,"column":50}},"405":{"start":{"line":1049,"column":32},"end":{"line":1049,"column":63}},"406":{"start":{"line":1050,"column":8},"end":{"line":1057,"column":11}},"407":{"start":{"line":1053,"column":12},"end":{"line":1056,"column":52}},"408":{"start":{"line":1054,"column":16},"end":{"line":1054,"column":49}},"409":{"start":{"line":1056,"column":16},"end":{"line":1056,"column":52}},"410":{"start":{"line":1058,"column":8},"end":{"line":1058,"column":31}},"411":{"start":{"line":1104,"column":32},"end":{"line":1104,"column":63}},"412":{"start":{"line":1105,"column":8},"end":{"line":1111,"column":11}},"413":{"start":{"line":1108,"column":12},"end":{"line":1109,"column":28}},"414":{"start":{"line":1109,"column":16},"end":{"line":1109,"column":28}},"415":{"start":{"line":1110,"column":12},"end":{"line":1110,"column":48}},"416":{"start":{"line":1112,"column":8},"end":{"line":1112,"column":31}},"417":{"start":{"line":1161,"column":8},"end":{"line":1161,"column":44}},"418":{"start":{"line":1162,"column":32},"end":{"line":1162,"column":63}},"419":{"start":{"line":1163,"column":8},"end":{"line":1172,"column":11}},"420":{"start":{"line":1166,"column":12},"end":{"line":1167,"column":28}},"421":{"start":{"line":1167,"column":16},"end":{"line":1167,"column":28}},"422":{"start":{"line":1168,"column":12},"end":{"line":1170,"column":37}},"423":{"start":{"line":1169,"column":16},"end":{"line":1170,"column":37}},"424":{"start":{"line":1170,"column":20},"end":{"line":1170,"column":37}},"425":{"start":{"line":1171,"column":12},"end":{"line":1171,"column":24}},"426":{"start":{"line":1173,"column":8},"end":{"line":1173,"column":31}},"427":{"start":{"line":1222,"column":8},"end":{"line":1222,"column":44}},"428":{"start":{"line":1223,"column":32},"end":{"line":1223,"column":63}},"429":{"start":{"line":1224,"column":8},"end":{"line":1235,"column":11}},"430":{"start":{"line":1227,"column":12},"end":{"line":1228,"column":28}},"431":{"start":{"line":1228,"column":16},"end":{"line":1228,"column":28}},"432":{"start":{"line":1229,"column":30},"end":{"line":1229,"column":51}},"433":{"start":{"line":1230,"column":12},"end":{"line":1233,"column":13}},"434":{"start":{"line":1230,"column":33},"end":{"line":1230,"column":53}},"435":{"start":{"line":1231,"column":16},"end":{"line":1232,"column":48}},"436":{"start":{"line":1232,"column":20},"end":{"line":1232,"column":48}},"437":{"start":{"line":1234,"column":12},"end":{"line":1234,"column":24}},"438":{"start":{"line":1236,"column":8},"end":{"line":1236,"column":31}},"439":{"start":{"line":1306,"column":8},"end":{"line":1307,"column":48}},"440":{"start":{"line":1307,"column":12},"end":{"line":1307,"column":48}},"441":{"start":{"line":1308,"column":32},"end":{"line":1308,"column":63}},"442":{"start":{"line":1309,"column":8},"end":{"line":1321,"column":11}},"443":{"start":{"line":1312,"column":12},"end":{"line":1313,"column":97}},"444":{"start":{"line":1313,"column":16},"end":{"line":1313,"column":97}},"445":{"start":{"line":1314,"column":12},"end":{"line":1319,"column":13}},"446":{"start":{"line":1315,"column":16},"end":{"line":1317,"column":41}},"447":{"start":{"line":1316,"column":20},"end":{"line":1317,"column":41}},"448":{"start":{"line":1317,"column":24},"end":{"line":1317,"column":41}},"449":{"start":{"line":1318,"column":16},"end":{"line":1318,"column":93}},"450":{"start":{"line":1320,"column":12},"end":{"line":1320,"column":44}},"451":{"start":{"line":1322,"column":8},"end":{"line":1322,"column":31}},"452":{"start":{"line":1378,"column":8},"end":{"line":1379,"column":48}},"453":{"start":{"line":1379,"column":12},"end":{"line":1379,"column":48}},"454":{"start":{"line":1380,"column":32},"end":{"line":1380,"column":63}},"455":{"start":{"line":1381,"column":8},"end":{"line":1393,"column":11}},"456":{"start":{"line":1384,"column":12},"end":{"line":1385,"column":28}},"457":{"start":{"line":1385,"column":16},"end":{"line":1385,"column":28}},"458":{"start":{"line":1386,"column":12},"end":{"line":1391,"column":13}},"459":{"start":{"line":1387,"column":16},"end":{"line":1389,"column":41}},"460":{"start":{"line":1388,"column":20},"end":{"line":1389,"column":41}},"461":{"start":{"line":1389,"column":24},"end":{"line":1389,"column":41}},"462":{"start":{"line":1390,"column":16},"end":{"line":1390,"column":28}},"463":{"start":{"line":1392,"column":12},"end":{"line":1392,"column":44}},"464":{"start":{"line":1394,"column":8},"end":{"line":1394,"column":31}},"465":{"start":{"line":1428,"column":32},"end":{"line":1428,"column":63}},"466":{"start":{"line":1429,"column":8},"end":{"line":1447,"column":11}},"467":{"start":{"line":1432,"column":12},"end":{"line":1445,"column":13}},"468":{"start":{"line":1433,"column":16},"end":{"line":1444,"column":17}},"469":{"start":{"line":1434,"column":20},"end":{"line":1443,"column":37}},"470":{"start":{"line":1435,"column":47},"end":{"line":1435,"column":78}},"471":{"start":{"line":1436,"column":24},"end":{"line":1440,"column":41}},"472":{"start":{"line":1440,"column":28},"end":{"line":1440,"column":41}},"473":{"start":{"line":1442,"column":25},"end":{"line":1443,"column":37}},"474":{"start":{"line":1443,"column":24},"end":{"line":1443,"column":37}},"475":{"start":{"line":1446,"column":12},"end":{"line":1446,"column":22}},"476":{"start":{"line":1448,"column":8},"end":{"line":1448,"column":31}},"477":{"start":{"line":1486,"column":8},"end":{"line":1486,"column":44}},"478":{"start":{"line":1487,"column":32},"end":{"line":1487,"column":63}},"479":{"start":{"line":1488,"column":8},"end":{"line":1497,"column":11}},"480":{"start":{"line":1491,"column":12},"end":{"line":1495,"column":13}},"481":{"start":{"line":1492,"column":16},"end":{"line":1494,"column":37}},"482":{"start":{"line":1493,"column":20},"end":{"line":1494,"column":37}},"483":{"start":{"line":1494,"column":24},"end":{"line":1494,"column":37}},"484":{"start":{"line":1496,"column":12},"end":{"line":1496,"column":22}},"485":{"start":{"line":1498,"column":8},"end":{"line":1498,"column":31}},"486":{"start":{"line":1536,"column":8},"end":{"line":1536,"column":44}},"487":{"start":{"line":1537,"column":32},"end":{"line":1537,"column":63}},"488":{"start":{"line":1538,"column":8},"end":{"line":1548,"column":11}},"489":{"start":{"line":1541,"column":12},"end":{"line":1546,"column":13}},"490":{"start":{"line":1542,"column":34},"end":{"line":1542,"column":55}},"491":{"start":{"line":1543,"column":16},"end":{"line":1545,"column":41}},"492":{"start":{"line":1543,"column":37},"end":{"line":1543,"column":57}},"493":{"start":{"line":1544,"column":20},"end":{"line":1545,"column":41}},"494":{"start":{"line":1545,"column":24},"end":{"line":1545,"column":41}},"495":{"start":{"line":1547,"column":12},"end":{"line":1547,"column":22}},"496":{"start":{"line":1549,"column":8},"end":{"line":1549,"column":31}},"497":{"start":{"line":1612,"column":8},"end":{"line":1612,"column":44}},"498":{"start":{"line":1613,"column":32},"end":{"line":1613,"column":57}},"499":{"start":{"line":1614,"column":8},"end":{"line":1640,"column":11}},"500":{"start":{"line":1617,"column":33},"end":{"line":1617,"column":42}},"501":{"start":{"line":1618,"column":12},"end":{"line":1638,"column":13}},"502":{"start":{"line":1619,"column":16},"end":{"line":1637,"column":17}},"503":{"start":{"line":1620,"column":48},"end":{"line":1620,"column":74}},"504":{"start":{"line":1621,"column":20},"end":{"line":1636,"column":89}},"505":{"start":{"line":1622,"column":41},"end":{"line":1622,"column":74}},"506":{"start":{"line":1623,"column":24},"end":{"line":1624,"column":78}},"507":{"start":{"line":1624,"column":28},"end":{"line":1624,"column":78}},"508":{"start":{"line":1626,"column":25},"end":{"line":1636,"column":89}},"509":{"start":{"line":1627,"column":24},"end":{"line":1627,"column":96}},"510":{"start":{"line":1628,"column":25},"end":{"line":1636,"column":89}},"511":{"start":{"line":1629,"column":42},"end":{"line":1629,"column":75}},"512":{"start":{"line":1630,"column":24},"end":{"line":1631,"column":77}},"513":{"start":{"line":1631,"column":28},"end":{"line":1631,"column":77}},"514":{"start":{"line":1633,"column":25},"end":{"line":1636,"column":89}},"515":{"start":{"line":1634,"column":24},"end":{"line":1634,"column":93}},"516":{"start":{"line":1636,"column":24},"end":{"line":1636,"column":89}},"517":{"start":{"line":1639,"column":12},"end":{"line":1639,"column":32}},"518":{"start":{"line":1641,"column":8},"end":{"line":1641,"column":31}},"519":{"start":{"line":1703,"column":8},"end":{"line":1703,"column":59}},"520":{"start":{"line":1704,"column":8},"end":{"line":1705,"column":72}},"521":{"start":{"line":1705,"column":12},"end":{"line":1705,"column":72}},"522":{"start":{"line":1706,"column":32},"end":{"line":1706,"column":57}},"523":{"start":{"line":1707,"column":8},"end":{"line":1721,"column":11}},"524":{"start":{"line":1710,"column":33},"end":{"line":1710,"column":42}},"525":{"start":{"line":1711,"column":12},"end":{"line":1719,"column":13}},"526":{"start":{"line":1712,"column":16},"end":{"line":1718,"column":17}},"527":{"start":{"line":1713,"column":36},"end":{"line":1713,"column":64}},"528":{"start":{"line":1714,"column":38},"end":{"line":1716,"column":35}},"529":{"start":{"line":1717,"column":20},"end":{"line":1717,"column":57}},"530":{"start":{"line":1720,"column":12},"end":{"line":1720,"column":32}},"531":{"start":{"line":1722,"column":8},"end":{"line":1722,"column":31}},"532":{"start":{"line":1726,"column":8},"end":{"line":1726,"column":59}},"533":{"start":{"line":1727,"column":8},"end":{"line":1728,"column":72}},"534":{"start":{"line":1728,"column":12},"end":{"line":1728,"column":72}},"535":{"start":{"line":1729,"column":32},"end":{"line":1729,"column":55}},"536":{"start":{"line":1730,"column":8},"end":{"line":1739,"column":11}},"537":{"start":{"line":1733,"column":12},"end":{"line":1737,"column":27}},"538":{"start":{"line":1735,"column":16},"end":{"line":1735,"column":64}},"539":{"start":{"line":1738,"column":12},"end":{"line":1738,"column":29}},"540":{"start":{"line":1740,"column":8},"end":{"line":1740,"column":31}},"541":{"start":{"line":1744,"column":8},"end":{"line":1744,"column":44}},"542":{"start":{"line":1745,"column":32},"end":{"line":1745,"column":55}},"543":{"start":{"line":1746,"column":8},"end":{"line":1755,"column":11}},"544":{"start":{"line":1749,"column":12},"end":{"line":1753,"column":27}},"545":{"start":{"line":1751,"column":16},"end":{"line":1751,"column":64}},"546":{"start":{"line":1754,"column":12},"end":{"line":1754,"column":29}},"547":{"start":{"line":1756,"column":8},"end":{"line":1756,"column":31}},"548":{"start":{"line":1811,"column":8},"end":{"line":1811,"column":52}},"549":{"start":{"line":1812,"column":32},"end":{"line":1812,"column":57}},"550":{"start":{"line":1813,"column":8},"end":{"line":1824,"column":11}},"551":{"start":{"line":1816,"column":33},"end":{"line":1816,"column":42}},"552":{"start":{"line":1817,"column":12},"end":{"line":1822,"column":13}},"553":{"start":{"line":1818,"column":16},"end":{"line":1821,"column":17}},"554":{"start":{"line":1819,"column":38},"end":{"line":1819,"column":68}},"555":{"start":{"line":1820,"column":20},"end":{"line":1820,"column":59}},"556":{"start":{"line":1823,"column":12},"end":{"line":1823,"column":32}},"557":{"start":{"line":1825,"column":8},"end":{"line":1825,"column":31}},"558":{"start":{"line":1829,"column":8},"end":{"line":1829,"column":52}},"559":{"start":{"line":1830,"column":32},"end":{"line":1830,"column":55}},"560":{"start":{"line":1831,"column":8},"end":{"line":1840,"column":11}},"561":{"start":{"line":1834,"column":12},"end":{"line":1838,"column":27}},"562":{"start":{"line":1836,"column":16},"end":{"line":1836,"column":64}},"563":{"start":{"line":1839,"column":12},"end":{"line":1839,"column":29}},"564":{"start":{"line":1841,"column":8},"end":{"line":1841,"column":31}},"565":{"start":{"line":1844,"column":8},"end":{"line":1845,"column":48}},"566":{"start":{"line":1845,"column":12},"end":{"line":1845,"column":48}},"567":{"start":{"line":1846,"column":32},"end":{"line":1846,"column":59}},"568":{"start":{"line":1847,"column":8},"end":{"line":1869,"column":11}},"569":{"start":{"line":1850,"column":12},"end":{"line":1851,"column":121}},"570":{"start":{"line":1851,"column":16},"end":{"line":1851,"column":121}},"571":{"start":{"line":1852,"column":35},"end":{"line":1852,"column":46}},"572":{"start":{"line":1853,"column":12},"end":{"line":1860,"column":13}},"573":{"start":{"line":1854,"column":35},"end":{"line":1854,"column":36}},"574":{"start":{"line":1855,"column":34},"end":{"line":1855,"column":55}},"575":{"start":{"line":1856,"column":16},"end":{"line":1859,"column":17}},"576":{"start":{"line":1857,"column":20},"end":{"line":1857,"column":92}},"577":{"start":{"line":1858,"column":20},"end":{"line":1858,"column":41}},"578":{"start":{"line":1861,"column":12},"end":{"line":1867,"column":13}},"579":{"start":{"line":1862,"column":41},"end":{"line":1862,"column":52}},"580":{"start":{"line":1863,"column":16},"end":{"line":1865,"column":99}},"581":{"start":{"line":1864,"column":20},"end":{"line":1865,"column":99}},"582":{"start":{"line":1865,"column":24},"end":{"line":1865,"column":99}},"583":{"start":{"line":1866,"column":16},"end":{"line":1866,"column":40}},"584":{"start":{"line":1868,"column":12},"end":{"line":1868,"column":34}},"585":{"start":{"line":1870,"column":8},"end":{"line":1870,"column":31}},"586":{"start":{"line":1942,"column":8},"end":{"line":1942,"column":44}},"587":{"start":{"line":1943,"column":32},"end":{"line":1943,"column":59}},"588":{"start":{"line":1944,"column":8},"end":{"line":1955,"column":11}},"589":{"start":{"line":1947,"column":35},"end":{"line":1947,"column":46}},"590":{"start":{"line":1948,"column":12},"end":{"line":1953,"column":13}},"591":{"start":{"line":1949,"column":32},"end":{"line":1949,"column":33}},"592":{"start":{"line":1950,"column":16},"end":{"line":1952,"column":60}},"593":{"start":{"line":1951,"column":20},"end":{"line":1952,"column":60}},"594":{"start":{"line":1952,"column":24},"end":{"line":1952,"column":60}},"595":{"start":{"line":1954,"column":12},"end":{"line":1954,"column":34}},"596":{"start":{"line":1956,"column":8},"end":{"line":1956,"column":31}},"597":{"start":{"line":1960,"column":8},"end":{"line":1960,"column":96}},"598":{"start":{"line":1964,"column":8},"end":{"line":1964,"column":44}},"599":{"start":{"line":1965,"column":32},"end":{"line":1965,"column":55}},"600":{"start":{"line":1966,"column":8},"end":{"line":1986,"column":11}},"601":{"start":{"line":1969,"column":38},"end":{"line":1969,"column":77}},"602":{"start":{"line":1970,"column":12},"end":{"line":1984,"column":13}},"603":{"start":{"line":1971,"column":16},"end":{"line":1975,"column":31}},"604":{"start":{"line":1973,"column":20},"end":{"line":1973,"column":50}},"605":{"start":{"line":1978,"column":16},"end":{"line":1983,"column":31}},"606":{"start":{"line":1981,"column":20},"end":{"line":1981,"column":49}},"607":{"start":{"line":1985,"column":12},"end":{"line":1985,"column":29}},"608":{"start":{"line":1987,"column":8},"end":{"line":1987,"column":31}},"609":{"start":{"line":2035,"column":8},"end":{"line":2035,"column":59}},"610":{"start":{"line":2036,"column":8},"end":{"line":2037,"column":72}},"611":{"start":{"line":2037,"column":12},"end":{"line":2037,"column":72}},"612":{"start":{"line":2038,"column":32},"end":{"line":2038,"column":57}},"613":{"start":{"line":2039,"column":8},"end":{"line":2055,"column":11}},"614":{"start":{"line":2042,"column":33},"end":{"line":2042,"column":42}},"615":{"start":{"line":2043,"column":12},"end":{"line":2053,"column":13}},"616":{"start":{"line":2044,"column":16},"end":{"line":2052,"column":17}},"617":{"start":{"line":2045,"column":36},"end":{"line":2045,"column":64}},"618":{"start":{"line":2046,"column":38},"end":{"line":2048,"column":35}},"619":{"start":{"line":2049,"column":20},"end":{"line":2050,"column":63}},"620":{"start":{"line":2050,"column":24},"end":{"line":2050,"column":63}},"621":{"start":{"line":2051,"column":20},"end":{"line":2051,"column":63}},"622":{"start":{"line":2054,"column":12},"end":{"line":2054,"column":32}},"623":{"start":{"line":2056,"column":8},"end":{"line":2056,"column":31}},"624":{"start":{"line":2060,"column":8},"end":{"line":2060,"column":59}},"625":{"start":{"line":2061,"column":8},"end":{"line":2062,"column":72}},"626":{"start":{"line":2062,"column":12},"end":{"line":2062,"column":72}},"627":{"start":{"line":2063,"column":32},"end":{"line":2063,"column":55}},"628":{"start":{"line":2064,"column":8},"end":{"line":2079,"column":11}},"629":{"start":{"line":2067,"column":12},"end":{"line":2077,"column":13}},"630":{"start":{"line":2068,"column":16},"end":{"line":2076,"column":17}},"631":{"start":{"line":2069,"column":36},"end":{"line":2069,"column":64}},"632":{"start":{"line":2070,"column":38},"end":{"line":2072,"column":35}},"633":{"start":{"line":2073,"column":20},"end":{"line":2074,"column":62}},"634":{"start":{"line":2074,"column":24},"end":{"line":2074,"column":62}},"635":{"start":{"line":2075,"column":20},"end":{"line":2075,"column":62}},"636":{"start":{"line":2078,"column":12},"end":{"line":2078,"column":29}},"637":{"start":{"line":2080,"column":8},"end":{"line":2080,"column":31}},"638":{"start":{"line":2084,"column":8},"end":{"line":2084,"column":92}},"639":{"start":{"line":2088,"column":8},"end":{"line":2088,"column":99}},"640":{"start":{"line":2143,"column":8},"end":{"line":2143,"column":44}},"641":{"start":{"line":2144,"column":32},"end":{"line":2144,"column":59}},"642":{"start":{"line":2145,"column":8},"end":{"line":2154,"column":11}},"643":{"start":{"line":2148,"column":35},"end":{"line":2148,"column":46}},"644":{"start":{"line":2149,"column":12},"end":{"line":2152,"column":13}},"645":{"start":{"line":2150,"column":16},"end":{"line":2151,"column":79}},"646":{"start":{"line":2151,"column":20},"end":{"line":2151,"column":79}},"647":{"start":{"line":2153,"column":12},"end":{"line":2153,"column":34}},"648":{"start":{"line":2155,"column":8},"end":{"line":2155,"column":31}},"649":{"start":{"line":2159,"column":8},"end":{"line":2159,"column":44}},"650":{"start":{"line":2160,"column":32},"end":{"line":2160,"column":55}},"651":{"start":{"line":2161,"column":8},"end":{"line":2181,"column":11}},"652":{"start":{"line":2164,"column":37},"end":{"line":2164,"column":72}},"653":{"start":{"line":2165,"column":12},"end":{"line":2179,"column":13}},"654":{"start":{"line":2166,"column":16},"end":{"line":2170,"column":31}},"655":{"start":{"line":2168,"column":20},"end":{"line":2168,"column":50}},"656":{"start":{"line":2173,"column":16},"end":{"line":2178,"column":31}},"657":{"start":{"line":2176,"column":20},"end":{"line":2176,"column":49}},"658":{"start":{"line":2180,"column":12},"end":{"line":2180,"column":29}},"659":{"start":{"line":2182,"column":8},"end":{"line":2182,"column":31}},"660":{"start":{"line":2253,"column":8},"end":{"line":2253,"column":44}},"661":{"start":{"line":2254,"column":32},"end":{"line":2254,"column":59}},"662":{"start":{"line":2255,"column":8},"end":{"line":2267,"column":11}},"663":{"start":{"line":2258,"column":35},"end":{"line":2258,"column":46}},"664":{"start":{"line":2259,"column":12},"end":{"line":2265,"column":13}},"665":{"start":{"line":2260,"column":16},"end":{"line":2264,"column":17}},"666":{"start":{"line":2261,"column":43},"end":{"line":2261,"column":80}},"667":{"start":{"line":2262,"column":20},"end":{"line":2263,"column":60}},"668":{"start":{"line":2263,"column":24},"end":{"line":2263,"column":60}},"669":{"start":{"line":2266,"column":12},"end":{"line":2266,"column":34}},"670":{"start":{"line":2268,"column":8},"end":{"line":2268,"column":31}},"671":{"start":{"line":2272,"column":8},"end":{"line":2272,"column":44}},"672":{"start":{"line":2273,"column":32},"end":{"line":2273,"column":55}},"673":{"start":{"line":2274,"column":8},"end":{"line":2294,"column":11}},"674":{"start":{"line":2277,"column":37},"end":{"line":2277,"column":79}},"675":{"start":{"line":2278,"column":12},"end":{"line":2292,"column":13}},"676":{"start":{"line":2279,"column":16},"end":{"line":2283,"column":31}},"677":{"start":{"line":2281,"column":20},"end":{"line":2281,"column":50}},"678":{"start":{"line":2286,"column":16},"end":{"line":2291,"column":31}},"679":{"start":{"line":2289,"column":20},"end":{"line":2289,"column":49}},"680":{"start":{"line":2293,"column":12},"end":{"line":2293,"column":29}},"681":{"start":{"line":2295,"column":8},"end":{"line":2295,"column":31}},"682":{"start":{"line":2299,"column":32},"end":{"line":2299,"column":57}},"683":{"start":{"line":2300,"column":8},"end":{"line":2312,"column":11}},"684":{"start":{"line":2303,"column":33},"end":{"line":2303,"column":42}},"685":{"start":{"line":2304,"column":12},"end":{"line":2310,"column":13}},"686":{"start":{"line":2305,"column":35},"end":{"line":2305,"column":68}},"687":{"start":{"line":2306,"column":16},"end":{"line":2309,"column":17}},"688":{"start":{"line":2307,"column":20},"end":{"line":2308,"column":52}},"689":{"start":{"line":2308,"column":24},"end":{"line":2308,"column":52}},"690":{"start":{"line":2311,"column":12},"end":{"line":2311,"column":32}},"691":{"start":{"line":2313,"column":8},"end":{"line":2313,"column":31}},"692":{"start":{"line":2318,"column":8},"end":{"line":2319,"column":48}},"693":{"start":{"line":2319,"column":12},"end":{"line":2319,"column":48}},"694":{"start":{"line":2320,"column":32},"end":{"line":2320,"column":63}},"695":{"start":{"line":2321,"column":8},"end":{"line":2341,"column":11}},"696":{"start":{"line":2324,"column":31},"end":{"line":2324,"column":37}},"697":{"start":{"line":2325,"column":12},"end":{"line":2338,"column":13}},"698":{"start":{"line":2326,"column":35},"end":{"line":2326,"column":36}},"699":{"start":{"line":2327,"column":31},"end":{"line":2327,"column":41}},"700":{"start":{"line":2328,"column":16},"end":{"line":2337,"column":17}},"701":{"start":{"line":2329,"column":20},"end":{"line":2332,"column":21}},"702":{"start":{"line":2330,"column":24},"end":{"line":2330,"column":50}},"703":{"start":{"line":2331,"column":24},"end":{"line":2331,"column":30}},"704":{"start":{"line":2333,"column":20},"end":{"line":2333,"column":87}},"705":{"start":{"line":2334,"column":20},"end":{"line":2334,"column":35}},"706":{"start":{"line":2335,"column":20},"end":{"line":2336,"column":50}},"707":{"start":{"line":2336,"column":24},"end":{"line":2336,"column":50}},"708":{"start":{"line":2339,"column":12},"end":{"line":2339,"column":36}},"709":{"start":{"line":2340,"column":12},"end":{"line":2340,"column":32}},"710":{"start":{"line":2342,"column":8},"end":{"line":2342,"column":31}},"711":{"start":{"line":2345,"column":8},"end":{"line":2346,"column":48}},"712":{"start":{"line":2346,"column":12},"end":{"line":2346,"column":48}},"713":{"start":{"line":2347,"column":32},"end":{"line":2347,"column":63}},"714":{"start":{"line":2348,"column":8},"end":{"line":2361,"column":11}},"715":{"start":{"line":2351,"column":12},"end":{"line":2352,"column":97}},"716":{"start":{"line":2352,"column":16},"end":{"line":2352,"column":97}},"717":{"start":{"line":2353,"column":30},"end":{"line":2353,"column":51}},"718":{"start":{"line":2354,"column":12},"end":{"line":2359,"column":13}},"719":{"start":{"line":2355,"column":16},"end":{"line":2357,"column":52}},"720":{"start":{"line":2355,"column":37},"end":{"line":2355,"column":53}},"721":{"start":{"line":2356,"column":20},"end":{"line":2357,"column":52}},"722":{"start":{"line":2357,"column":24},"end":{"line":2357,"column":52}},"723":{"start":{"line":2358,"column":16},"end":{"line":2358,"column":93}},"724":{"start":{"line":2360,"column":12},"end":{"line":2360,"column":51}},"725":{"start":{"line":2362,"column":8},"end":{"line":2362,"column":31}},"726":{"start":{"line":2365,"column":32},"end":{"line":2365,"column":63}},"727":{"start":{"line":2366,"column":8},"end":{"line":2386,"column":11}},"728":{"start":{"line":2369,"column":12},"end":{"line":2384,"column":13}},"729":{"start":{"line":2370,"column":34},"end":{"line":2370,"column":55}},"730":{"start":{"line":2371,"column":16},"end":{"line":2383,"column":17}},"731":{"start":{"line":2371,"column":37},"end":{"line":2371,"column":57}},"732":{"start":{"line":2372,"column":40},"end":{"line":2372,"column":60}},"733":{"start":{"line":2373,"column":20},"end":{"line":2382,"column":41}},"734":{"start":{"line":2374,"column":47},"end":{"line":2374,"column":76}},"735":{"start":{"line":2375,"column":24},"end":{"line":2379,"column":45}},"736":{"start":{"line":2379,"column":28},"end":{"line":2379,"column":45}},"737":{"start":{"line":2381,"column":25},"end":{"line":2382,"column":41}},"738":{"start":{"line":2382,"column":24},"end":{"line":2382,"column":41}},"739":{"start":{"line":2385,"column":12},"end":{"line":2385,"column":22}},"740":{"start":{"line":2387,"column":8},"end":{"line":2387,"column":31}},"741":{"start":{"line":2390,"column":8},"end":{"line":2391,"column":48}},"742":{"start":{"line":2391,"column":12},"end":{"line":2391,"column":48}},"743":{"start":{"line":2392,"column":32},"end":{"line":2392,"column":63}},"744":{"start":{"line":2393,"column":8},"end":{"line":2414,"column":11}},"745":{"start":{"line":2396,"column":12},"end":{"line":2412,"column":13}},"746":{"start":{"line":2397,"column":34},"end":{"line":2397,"column":55}},"747":{"start":{"line":2398,"column":31},"end":{"line":2398,"column":47}},"748":{"start":{"line":2399,"column":16},"end":{"line":2400,"column":32}},"749":{"start":{"line":2400,"column":20},"end":{"line":2400,"column":32}},"750":{"start":{"line":2401,"column":16},"end":{"line":2411,"column":31}},"751":{"start":{"line":2402,"column":20},"end":{"line":2406,"column":39}},"752":{"start":{"line":2402,"column":41},"end":{"line":2402,"column":51}},"753":{"start":{"line":2403,"column":24},"end":{"line":2406,"column":39}},"754":{"start":{"line":2404,"column":28},"end":{"line":2406,"column":39}},"755":{"start":{"line":2409,"column":20},"end":{"line":2411,"column":31}},"756":{"start":{"line":2413,"column":12},"end":{"line":2413,"column":24}},"757":{"start":{"line":2415,"column":8},"end":{"line":2415,"column":31}},"758":{"start":{"line":2418,"column":32},"end":{"line":2418,"column":55}},"759":{"start":{"line":2419,"column":8},"end":{"line":2439,"column":11}},"760":{"start":{"line":2422,"column":35},"end":{"line":2422,"column":46}},"761":{"start":{"line":2423,"column":12},"end":{"line":2434,"column":13}},"762":{"start":{"line":2424,"column":35},"end":{"line":2424,"column":46}},"763":{"start":{"line":2425,"column":16},"end":{"line":2428,"column":48}},"764":{"start":{"line":2426,"column":20},"end":{"line":2426,"column":56}},"765":{"start":{"line":2428,"column":20},"end":{"line":2428,"column":48}},"766":{"start":{"line":2429,"column":49},"end":{"line":2429,"column":89}},"767":{"start":{"line":2430,"column":16},"end":{"line":2433,"column":17}},"768":{"start":{"line":2431,"column":20},"end":{"line":2432,"column":55}},"769":{"start":{"line":2432,"column":24},"end":{"line":2432,"column":55}},"770":{"start":{"line":2435,"column":12},"end":{"line":2438,"column":47}},"771":{"start":{"line":2436,"column":16},"end":{"line":2436,"column":38}},"772":{"start":{"line":2438,"column":16},"end":{"line":2438,"column":47}},"773":{"start":{"line":2440,"column":8},"end":{"line":2440,"column":31}},"774":{"start":{"line":2443,"column":8},"end":{"line":2443,"column":35}},"775":{"start":{"line":2447,"column":8},"end":{"line":2447,"column":44}},"776":{"start":{"line":2448,"column":32},"end":{"line":2448,"column":58}},"777":{"start":{"line":2449,"column":8},"end":{"line":2466,"column":11}},"778":{"start":{"line":2452,"column":40},"end":{"line":2452,"column":51}},"779":{"start":{"line":2453,"column":41},"end":{"line":2453,"column":52}},"780":{"start":{"line":2454,"column":12},"end":{"line":2461,"column":13}},"781":{"start":{"line":2455,"column":16},"end":{"line":2460,"column":17}},"782":{"start":{"line":2456,"column":20},"end":{"line":2459,"column":61}},"783":{"start":{"line":2457,"column":24},"end":{"line":2457,"column":60}},"784":{"start":{"line":2459,"column":24},"end":{"line":2459,"column":61}},"785":{"start":{"line":2462,"column":12},"end":{"line":2465,"column":102}},"786":{"start":{"line":2463,"column":16},"end":{"line":2463,"column":84}},"787":{"start":{"line":2465,"column":16},"end":{"line":2465,"column":102}},"788":{"start":{"line":2467,"column":8},"end":{"line":2467,"column":31}},"789":{"start":{"line":2470,"column":32},"end":{"line":2470,"column":55}},"790":{"start":{"line":2471,"column":8},"end":{"line":2488,"column":11}},"791":{"start":{"line":2474,"column":35},"end":{"line":2476,"column":29}},"792":{"start":{"line":2477,"column":12},"end":{"line":2483,"column":46}},"793":{"start":{"line":2478,"column":38},"end":{"line":2478,"column":58}},"794":{"start":{"line":2479,"column":16},"end":{"line":2480,"column":51}},"795":{"start":{"line":2480,"column":20},"end":{"line":2480,"column":51}},"796":{"start":{"line":2483,"column":16},"end":{"line":2483,"column":46}},"797":{"start":{"line":2484,"column":12},"end":{"line":2487,"column":47}},"798":{"start":{"line":2485,"column":16},"end":{"line":2485,"column":38}},"799":{"start":{"line":2487,"column":16},"end":{"line":2487,"column":47}},"800":{"start":{"line":2489,"column":8},"end":{"line":2489,"column":31}},"801":{"start":{"line":2492,"column":8},"end":{"line":2492,"column":34}},"802":{"start":{"line":2495,"column":32},"end":{"line":2495,"column":63}},"803":{"start":{"line":2496,"column":8},"end":{"line":2503,"column":11}},"804":{"start":{"line":2499,"column":12},"end":{"line":2500,"column":97}},"805":{"start":{"line":2500,"column":16},"end":{"line":2500,"column":97}},"806":{"start":{"line":2501,"column":30},"end":{"line":2501,"column":51}},"807":{"start":{"line":2502,"column":12},"end":{"line":2502,"column":75}},"808":{"start":{"line":2504,"column":8},"end":{"line":2504,"column":31}},"809":{"start":{"line":2507,"column":32},"end":{"line":2507,"column":63}},"810":{"start":{"line":2508,"column":8},"end":{"line":2515,"column":11}},"811":{"start":{"line":2511,"column":12},"end":{"line":2512,"column":28}},"812":{"start":{"line":2512,"column":16},"end":{"line":2512,"column":28}},"813":{"start":{"line":2513,"column":30},"end":{"line":2513,"column":51}},"814":{"start":{"line":2514,"column":12},"end":{"line":2514,"column":75}},"815":{"start":{"line":2516,"column":8},"end":{"line":2516,"column":31}},"816":{"start":{"line":2519,"column":8},"end":{"line":2519,"column":44}},"817":{"start":{"line":2520,"column":32},"end":{"line":2520,"column":63}},"818":{"start":{"line":2521,"column":8},"end":{"line":2531,"column":11}},"819":{"start":{"line":2524,"column":12},"end":{"line":2525,"column":97}},"820":{"start":{"line":2525,"column":16},"end":{"line":2525,"column":97}},"821":{"start":{"line":2526,"column":30},"end":{"line":2526,"column":51}},"822":{"start":{"line":2527,"column":22},"end":{"line":2527,"column":34}},"823":{"start":{"line":2528,"column":12},"end":{"line":2529,"column":65}},"824":{"start":{"line":2528,"column":33},"end":{"line":2528,"column":34}},"825":{"start":{"line":2529,"column":16},"end":{"line":2529,"column":65}},"826":{"start":{"line":2530,"column":12},"end":{"line":2530,"column":23}},"827":{"start":{"line":2532,"column":8},"end":{"line":2532,"column":31}},"828":{"start":{"line":2535,"column":8},"end":{"line":2535,"column":44}},"829":{"start":{"line":2536,"column":32},"end":{"line":2536,"column":63}},"830":{"start":{"line":2537,"column":8},"end":{"line":2547,"column":11}},"831":{"start":{"line":2540,"column":12},"end":{"line":2541,"column":97}},"832":{"start":{"line":2541,"column":16},"end":{"line":2541,"column":97}},"833":{"start":{"line":2542,"column":30},"end":{"line":2542,"column":51}},"834":{"start":{"line":2543,"column":22},"end":{"line":2543,"column":34}},"835":{"start":{"line":2544,"column":12},"end":{"line":2545,"column":76}},"836":{"start":{"line":2544,"column":33},"end":{"line":2544,"column":34}},"837":{"start":{"line":2545,"column":16},"end":{"line":2545,"column":76}},"838":{"start":{"line":2546,"column":12},"end":{"line":2546,"column":23}},"839":{"start":{"line":2548,"column":8},"end":{"line":2548,"column":31}},"840":{"start":{"line":2551,"column":8},"end":{"line":2551,"column":44}},"841":{"start":{"line":2552,"column":32},"end":{"line":2552,"column":63}},"842":{"start":{"line":2553,"column":8},"end":{"line":2563,"column":11}},"843":{"start":{"line":2556,"column":12},"end":{"line":2557,"column":28}},"844":{"start":{"line":2557,"column":16},"end":{"line":2557,"column":28}},"845":{"start":{"line":2558,"column":30},"end":{"line":2558,"column":51}},"846":{"start":{"line":2559,"column":22},"end":{"line":2559,"column":34}},"847":{"start":{"line":2560,"column":12},"end":{"line":2561,"column":76}},"848":{"start":{"line":2560,"column":33},"end":{"line":2560,"column":34}},"849":{"start":{"line":2561,"column":16},"end":{"line":2561,"column":76}},"850":{"start":{"line":2562,"column":12},"end":{"line":2562,"column":23}},"851":{"start":{"line":2564,"column":8},"end":{"line":2564,"column":31}},"852":{"start":{"line":2567,"column":8},"end":{"line":2567,"column":44}},"853":{"start":{"line":2568,"column":32},"end":{"line":2568,"column":63}},"854":{"start":{"line":2569,"column":8},"end":{"line":2579,"column":11}},"855":{"start":{"line":2572,"column":12},"end":{"line":2573,"column":28}},"856":{"start":{"line":2573,"column":16},"end":{"line":2573,"column":28}},"857":{"start":{"line":2574,"column":30},"end":{"line":2574,"column":51}},"858":{"start":{"line":2575,"column":22},"end":{"line":2575,"column":34}},"859":{"start":{"line":2576,"column":12},"end":{"line":2577,"column":65}},"860":{"start":{"line":2576,"column":33},"end":{"line":2576,"column":34}},"861":{"start":{"line":2577,"column":16},"end":{"line":2577,"column":65}},"862":{"start":{"line":2578,"column":12},"end":{"line":2578,"column":23}},"863":{"start":{"line":2580,"column":8},"end":{"line":2580,"column":31}},"864":{"start":{"line":2584,"column":32},"end":{"line":2584,"column":55}},"865":{"start":{"line":2585,"column":8},"end":{"line":2595,"column":11}},"866":{"start":{"line":2588,"column":35},"end":{"line":2590,"column":29}},"867":{"start":{"line":2591,"column":12},"end":{"line":2594,"column":47}},"868":{"start":{"line":2592,"column":16},"end":{"line":2592,"column":38}},"869":{"start":{"line":2594,"column":16},"end":{"line":2594,"column":47}},"870":{"start":{"line":2596,"column":8},"end":{"line":2596,"column":31}},"871":{"start":{"line":2599,"column":8},"end":{"line":2599,"column":44}},"872":{"start":{"line":2600,"column":32},"end":{"line":2600,"column":59}},"873":{"start":{"line":2601,"column":8},"end":{"line":2613,"column":11}},"874":{"start":{"line":2604,"column":35},"end":{"line":2604,"column":46}},"875":{"start":{"line":2605,"column":12},"end":{"line":2605,"column":41}},"876":{"start":{"line":2606,"column":12},"end":{"line":2611,"column":13}},"877":{"start":{"line":2607,"column":16},"end":{"line":2610,"column":17}},"878":{"start":{"line":2608,"column":20},"end":{"line":2608,"column":66}},"879":{"start":{"line":2609,"column":20},"end":{"line":2609,"column":49}},"880":{"start":{"line":2612,"column":12},"end":{"line":2612,"column":34}},"881":{"start":{"line":2614,"column":8},"end":{"line":2614,"column":31}},"882":{"start":{"line":2617,"column":8},"end":{"line":2617,"column":44}},"883":{"start":{"line":2618,"column":32},"end":{"line":2618,"column":59}},"884":{"start":{"line":2619,"column":8},"end":{"line":2631,"column":11}},"885":{"start":{"line":2622,"column":35},"end":{"line":2622,"column":46}},"886":{"start":{"line":2623,"column":12},"end":{"line":2623,"column":41}},"887":{"start":{"line":2624,"column":12},"end":{"line":2629,"column":13}},"888":{"start":{"line":2625,"column":16},"end":{"line":2628,"column":17}},"889":{"start":{"line":2626,"column":20},"end":{"line":2626,"column":77}},"890":{"start":{"line":2627,"column":20},"end":{"line":2627,"column":49}},"891":{"start":{"line":2630,"column":12},"end":{"line":2630,"column":34}},"892":{"start":{"line":2632,"column":8},"end":{"line":2632,"column":31}},"893":{"start":{"line":2635,"column":8},"end":{"line":2635,"column":44}},"894":{"start":{"line":2636,"column":32},"end":{"line":2636,"column":59}},"895":{"start":{"line":2637,"column":8},"end":{"line":2651,"column":11}},"896":{"start":{"line":2640,"column":12},"end":{"line":2641,"column":97}},"897":{"start":{"line":2641,"column":16},"end":{"line":2641,"column":97}},"898":{"start":{"line":2642,"column":35},"end":{"line":2642,"column":46}},"899":{"start":{"line":2643,"column":30},"end":{"line":2643,"column":51}},"900":{"start":{"line":2644,"column":22},"end":{"line":2644,"column":34}},"901":{"start":{"line":2645,"column":12},"end":{"line":2645,"column":37}},"902":{"start":{"line":2646,"column":12},"end":{"line":2649,"column":13}},"903":{"start":{"line":2646,"column":33},"end":{"line":2646,"column":34}},"904":{"start":{"line":2647,"column":16},"end":{"line":2647,"column":65}},"905":{"start":{"line":2648,"column":16},"end":{"line":2648,"column":41}},"906":{"start":{"line":2650,"column":12},"end":{"line":2650,"column":34}},"907":{"start":{"line":2652,"column":8},"end":{"line":2652,"column":31}},"908":{"start":{"line":2655,"column":8},"end":{"line":2655,"column":44}},"909":{"start":{"line":2656,"column":32},"end":{"line":2656,"column":59}},"910":{"start":{"line":2657,"column":8},"end":{"line":2671,"column":11}},"911":{"start":{"line":2660,"column":12},"end":{"line":2661,"column":97}},"912":{"start":{"line":2661,"column":16},"end":{"line":2661,"column":97}},"913":{"start":{"line":2662,"column":35},"end":{"line":2662,"column":46}},"914":{"start":{"line":2663,"column":30},"end":{"line":2663,"column":51}},"915":{"start":{"line":2664,"column":22},"end":{"line":2664,"column":34}},"916":{"start":{"line":2665,"column":12},"end":{"line":2665,"column":37}},"917":{"start":{"line":2666,"column":12},"end":{"line":2669,"column":13}},"918":{"start":{"line":2666,"column":33},"end":{"line":2666,"column":34}},"919":{"start":{"line":2667,"column":16},"end":{"line":2667,"column":76}},"920":{"start":{"line":2668,"column":16},"end":{"line":2668,"column":41}},"921":{"start":{"line":2670,"column":12},"end":{"line":2670,"column":34}},"922":{"start":{"line":2672,"column":8},"end":{"line":2672,"column":31}},"923":{"start":{"line":2675,"column":8},"end":{"line":2675,"column":44}},"924":{"start":{"line":2676,"column":32},"end":{"line":2676,"column":59}},"925":{"start":{"line":2677,"column":8},"end":{"line":2689,"column":11}},"926":{"start":{"line":2680,"column":35},"end":{"line":2680,"column":46}},"927":{"start":{"line":2681,"column":12},"end":{"line":2681,"column":41}},"928":{"start":{"line":2682,"column":12},"end":{"line":2687,"column":13}},"929":{"start":{"line":2683,"column":16},"end":{"line":2686,"column":17}},"930":{"start":{"line":2684,"column":20},"end":{"line":2684,"column":66}},"931":{"start":{"line":2685,"column":20},"end":{"line":2685,"column":49}},"932":{"start":{"line":2688,"column":12},"end":{"line":2688,"column":34}},"933":{"start":{"line":2690,"column":8},"end":{"line":2690,"column":31}},"934":{"start":{"line":2693,"column":8},"end":{"line":2693,"column":44}},"935":{"start":{"line":2694,"column":32},"end":{"line":2694,"column":59}},"936":{"start":{"line":2695,"column":8},"end":{"line":2707,"column":11}},"937":{"start":{"line":2698,"column":35},"end":{"line":2698,"column":46}},"938":{"start":{"line":2699,"column":12},"end":{"line":2699,"column":41}},"939":{"start":{"line":2700,"column":12},"end":{"line":2705,"column":13}},"940":{"start":{"line":2701,"column":16},"end":{"line":2704,"column":17}},"941":{"start":{"line":2702,"column":20},"end":{"line":2702,"column":77}},"942":{"start":{"line":2703,"column":20},"end":{"line":2703,"column":49}},"943":{"start":{"line":2706,"column":12},"end":{"line":2706,"column":34}},"944":{"start":{"line":2708,"column":8},"end":{"line":2708,"column":31}},"945":{"start":{"line":2711,"column":32},"end":{"line":2711,"column":55}},"946":{"start":{"line":2712,"column":8},"end":{"line":2726,"column":11}},"947":{"start":{"line":2715,"column":35},"end":{"line":2715,"column":46}},"948":{"start":{"line":2716,"column":12},"end":{"line":2721,"column":13}},"949":{"start":{"line":2717,"column":34},"end":{"line":2717,"column":55}},"950":{"start":{"line":2718,"column":32},"end":{"line":2718,"column":94}},"951":{"start":{"line":2718,"column":74},"end":{"line":2718,"column":93}},"952":{"start":{"line":2719,"column":16},"end":{"line":2720,"column":117}},"953":{"start":{"line":2720,"column":20},"end":{"line":2720,"column":117}},"954":{"start":{"line":2722,"column":12},"end":{"line":2725,"column":47}},"955":{"start":{"line":2723,"column":16},"end":{"line":2723,"column":38}},"956":{"start":{"line":2725,"column":16},"end":{"line":2725,"column":47}},"957":{"start":{"line":2727,"column":8},"end":{"line":2727,"column":31}},"958":{"start":{"line":2730,"column":8},"end":{"line":2731,"column":48}},"959":{"start":{"line":2731,"column":12},"end":{"line":2731,"column":48}},"960":{"start":{"line":2732,"column":32},"end":{"line":2732,"column":63}},"961":{"start":{"line":2733,"column":8},"end":{"line":2755,"column":11}},"962":{"start":{"line":2736,"column":12},"end":{"line":2737,"column":97}},"963":{"start":{"line":2737,"column":16},"end":{"line":2737,"column":97}},"964":{"start":{"line":2738,"column":12},"end":{"line":2754,"column":48}},"965":{"start":{"line":2739,"column":35},"end":{"line":2739,"column":39}},"966":{"start":{"line":2740,"column":16},"end":{"line":2747,"column":17}},"967":{"start":{"line":2741,"column":20},"end":{"line":2746,"column":21}},"968":{"start":{"line":2742,"column":24},"end":{"line":2745,"column":134}},"969":{"start":{"line":2743,"column":28},"end":{"line":2743,"column":53}},"970":{"start":{"line":2745,"column":28},"end":{"line":2745,"column":134}},"971":{"start":{"line":2748,"column":16},"end":{"line":2751,"column":40}},"972":{"start":{"line":2749,"column":20},"end":{"line":2749,"column":119}},"973":{"start":{"line":2751,"column":20},"end":{"line":2751,"column":40}},"974":{"start":{"line":2754,"column":16},"end":{"line":2754,"column":48}},"975":{"start":{"line":2756,"column":8},"end":{"line":2756,"column":31}},"976":{"start":{"line":2759,"column":8},"end":{"line":2760,"column":48}},"977":{"start":{"line":2760,"column":12},"end":{"line":2760,"column":48}},"978":{"start":{"line":2761,"column":32},"end":{"line":2761,"column":63}},"979":{"start":{"line":2762,"column":8},"end":{"line":2780,"column":11}},"980":{"start":{"line":2765,"column":12},"end":{"line":2766,"column":28}},"981":{"start":{"line":2766,"column":16},"end":{"line":2766,"column":28}},"982":{"start":{"line":2767,"column":12},"end":{"line":2779,"column":48}},"983":{"start":{"line":2768,"column":35},"end":{"line":2768,"column":39}},"984":{"start":{"line":2769,"column":16},"end":{"line":2775,"column":17}},"985":{"start":{"line":2770,"column":20},"end":{"line":2774,"column":40}},"986":{"start":{"line":2771,"column":24},"end":{"line":2774,"column":40}},"987":{"start":{"line":2772,"column":28},"end":{"line":2772,"column":53}},"988":{"start":{"line":2774,"column":28},"end":{"line":2774,"column":40}},"989":{"start":{"line":2776,"column":16},"end":{"line":2776,"column":36}},"990":{"start":{"line":2779,"column":16},"end":{"line":2779,"column":48}},"991":{"start":{"line":2781,"column":8},"end":{"line":2781,"column":31}},"992":{"start":{"line":2784,"column":32},"end":{"line":2784,"column":57}},"993":{"start":{"line":2785,"column":8},"end":{"line":2797,"column":11}},"994":{"start":{"line":2788,"column":33},"end":{"line":2788,"column":42}},"995":{"start":{"line":2789,"column":12},"end":{"line":2795,"column":13}},"996":{"start":{"line":2790,"column":49},"end":{"line":2790,"column":82}},"997":{"start":{"line":2791,"column":16},"end":{"line":2794,"column":17}},"998":{"start":{"line":2792,"column":20},"end":{"line":2793,"column":52}},"999":{"start":{"line":2793,"column":24},"end":{"line":2793,"column":52}},"1000":{"start":{"line":2796,"column":12},"end":{"line":2796,"column":32}},"1001":{"start":{"line":2798,"column":8},"end":{"line":2798,"column":31}},"1002":{"start":{"line":2801,"column":8},"end":{"line":2801,"column":42}},"1003":{"start":{"line":2802,"column":32},"end":{"line":2802,"column":63}},"1004":{"start":{"line":2803,"column":8},"end":{"line":2813,"column":11}},"1005":{"start":{"line":2806,"column":22},"end":{"line":2806,"column":23}},"1006":{"start":{"line":2807,"column":12},"end":{"line":2811,"column":13}},"1007":{"start":{"line":2808,"column":16},"end":{"line":2810,"column":17}},"1008":{"start":{"line":2809,"column":20},"end":{"line":2809,"column":53}},"1009":{"start":{"line":2812,"column":12},"end":{"line":2812,"column":23}},"1010":{"start":{"line":2814,"column":8},"end":{"line":2814,"column":31}},"1011":{"start":{"line":2819,"column":32},"end":{"line":2819,"column":57}},"1012":{"start":{"line":2820,"column":8},"end":{"line":2829,"column":11}},"1013":{"start":{"line":2823,"column":33},"end":{"line":2823,"column":83}},"1014":{"start":{"line":2824,"column":12},"end":{"line":2825,"column":44}},"1015":{"start":{"line":2825,"column":16},"end":{"line":2825,"column":44}},"1016":{"start":{"line":2826,"column":12},"end":{"line":2828,"column":26}},"1017":{"start":{"line":2830,"column":8},"end":{"line":2830,"column":31}},"1018":{"start":{"line":2833,"column":8},"end":{"line":2834,"column":25}},"1019":{"start":{"line":2834,"column":12},"end":{"line":2834,"column":25}},"1020":{"start":{"line":2835,"column":8},"end":{"line":2836,"column":25}},"1021":{"start":{"line":2836,"column":12},"end":{"line":2836,"column":25}},"1022":{"start":{"line":2837,"column":8},"end":{"line":2838,"column":48}},"1023":{"start":{"line":2838,"column":12},"end":{"line":2838,"column":48}},"1024":{"start":{"line":2839,"column":32},"end":{"line":2839,"column":59}},"1025":{"start":{"line":2840,"column":8},"end":{"line":2861,"column":11}},"1026":{"start":{"line":2843,"column":35},"end":{"line":2843,"column":46}},"1027":{"start":{"line":2844,"column":12},"end":{"line":2853,"column":13}},"1028":{"start":{"line":2845,"column":35},"end":{"line":2845,"column":36}},"1029":{"start":{"line":2846,"column":34},"end":{"line":2846,"column":55}},"1030":{"start":{"line":2847,"column":16},"end":{"line":2852,"column":17}},"1031":{"start":{"line":2848,"column":44},"end":{"line":2848,"column":94}},"1032":{"start":{"line":2849,"column":20},"end":{"line":2849,"column":41}},"1033":{"start":{"line":2850,"column":20},"end":{"line":2851,"column":61}},"1034":{"start":{"line":2851,"column":24},"end":{"line":2851,"column":61}},"1035":{"start":{"line":2854,"column":12},"end":{"line":2859,"column":13}},"1036":{"start":{"line":2855,"column":41},"end":{"line":2855,"column":52}},"1037":{"start":{"line":2856,"column":16},"end":{"line":2857,"column":79}},"1038":{"start":{"line":2857,"column":20},"end":{"line":2857,"column":79}},"1039":{"start":{"line":2858,"column":16},"end":{"line":2858,"column":40}},"1040":{"start":{"line":2860,"column":12},"end":{"line":2860,"column":34}},"1041":{"start":{"line":2862,"column":8},"end":{"line":2862,"column":31}},"1042":{"start":{"line":2865,"column":32},"end":{"line":2865,"column":59}},"1043":{"start":{"line":2866,"column":8},"end":{"line":2876,"column":11}},"1044":{"start":{"line":2869,"column":35},"end":{"line":2869,"column":46}},"1045":{"start":{"line":2870,"column":12},"end":{"line":2874,"column":13}},"1046":{"start":{"line":2871,"column":16},"end":{"line":2873,"column":17}},"1047":{"start":{"line":2872,"column":20},"end":{"line":2872,"column":76}},"1048":{"start":{"line":2875,"column":12},"end":{"line":2875,"column":34}},"1049":{"start":{"line":2877,"column":8},"end":{"line":2877,"column":31}},"1050":{"start":{"line":2880,"column":8},"end":{"line":2881,"column":48}},"1051":{"start":{"line":2881,"column":12},"end":{"line":2881,"column":48}},"1052":{"start":{"line":2882,"column":32},"end":{"line":2882,"column":59}},"1053":{"start":{"line":2883,"column":8},"end":{"line":2903,"column":11}},"1054":{"start":{"line":2886,"column":35},"end":{"line":2886,"column":46}},"1055":{"start":{"line":2887,"column":12},"end":{"line":2895,"column":13}},"1056":{"start":{"line":2888,"column":34},"end":{"line":2888,"column":55}},"1057":{"start":{"line":2889,"column":35},"end":{"line":2889,"column":52}},"1058":{"start":{"line":2890,"column":34},"end":{"line":2892,"column":39}},"1059":{"start":{"line":2893,"column":16},"end":{"line":2894,"column":104}},"1060":{"start":{"line":2893,"column":37},"end":{"line":2893,"column":38}},"1061":{"start":{"line":2894,"column":20},"end":{"line":2894,"column":104}},"1062":{"start":{"line":2896,"column":12},"end":{"line":2901,"column":13}},"1063":{"start":{"line":2897,"column":41},"end":{"line":2897,"column":52}},"1064":{"start":{"line":2898,"column":16},"end":{"line":2899,"column":110}},"1065":{"start":{"line":2899,"column":20},"end":{"line":2899,"column":110}},"1066":{"start":{"line":2900,"column":16},"end":{"line":2900,"column":40}},"1067":{"start":{"line":2902,"column":12},"end":{"line":2902,"column":34}},"1068":{"start":{"line":2904,"column":8},"end":{"line":2904,"column":31}},"1069":{"start":{"line":2907,"column":8},"end":{"line":2908,"column":36}},"1070":{"start":{"line":2908,"column":12},"end":{"line":2908,"column":36}},"1071":{"start":{"line":2909,"column":32},"end":{"line":2909,"column":59}},"1072":{"start":{"line":2910,"column":8},"end":{"line":2928,"column":11}},"1073":{"start":{"line":2913,"column":35},"end":{"line":2913,"column":46}},"1074":{"start":{"line":2914,"column":12},"end":{"line":2920,"column":13}},"1075":{"start":{"line":2915,"column":34},"end":{"line":2915,"column":55}},"1076":{"start":{"line":2916,"column":16},"end":{"line":2919,"column":17}},"1077":{"start":{"line":2917,"column":20},"end":{"line":2918,"column":111}},"1078":{"start":{"line":2917,"column":41},"end":{"line":2917,"column":42}},"1079":{"start":{"line":2918,"column":24},"end":{"line":2918,"column":111}},"1080":{"start":{"line":2921,"column":12},"end":{"line":2926,"column":13}},"1081":{"start":{"line":2922,"column":41},"end":{"line":2922,"column":52}},"1082":{"start":{"line":2923,"column":16},"end":{"line":2924,"column":112}},"1083":{"start":{"line":2924,"column":20},"end":{"line":2924,"column":112}},"1084":{"start":{"line":2925,"column":16},"end":{"line":2925,"column":40}},"1085":{"start":{"line":2927,"column":12},"end":{"line":2927,"column":34}},"1086":{"start":{"line":2929,"column":8},"end":{"line":2929,"column":31}},"1087":{"start":{"line":2932,"column":0},"end":{"line":2932,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":18},"end":{"line":12,"column":5}},"line":9},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":25},"end":{"line":23,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":21},"end":{"line":19,"column":22}},"loc":{"start":{"line":19,"column":37},"end":{"line":19,"column":57}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":25},"end":{"line":20,"column":26}},"loc":{"start":{"line":20,"column":40},"end":{"line":20,"column":69}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":34},"end":{"line":29,"column":5}},"line":24},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":11},"end":{"line":37,"column":5}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":35,"column":26},"end":{"line":35,"column":27}},"loc":{"start":{"line":35,"column":38},"end":{"line":35,"column":48}},"line":35},"7":{"name":"(anonymous_7)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":14},"end":{"line":44,"column":5}},"line":38},"8":{"name":"(anonymous_8)","decl":{"start":{"line":42,"column":26},"end":{"line":42,"column":27}},"loc":{"start":{"line":42,"column":38},"end":{"line":42,"column":51}},"line":42},"9":{"name":"(anonymous_9)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":45},"end":{"line":101,"column":5}},"line":87},"10":{"name":"(anonymous_10)","decl":{"start":{"line":92,"column":26},"end":{"line":92,"column":27}},"loc":{"start":{"line":92,"column":38},"end":{"line":99,"column":9}},"line":92},"11":{"name":"(anonymous_11)","decl":{"start":{"line":146,"column":4},"end":{"line":146,"column":5}},"loc":{"start":{"line":146,"column":52},"end":{"line":160,"column":5}},"line":146},"12":{"name":"(anonymous_12)","decl":{"start":{"line":151,"column":26},"end":{"line":151,"column":27}},"loc":{"start":{"line":151,"column":38},"end":{"line":158,"column":9}},"line":151},"13":{"name":"(anonymous_13)","decl":{"start":{"line":193,"column":4},"end":{"line":193,"column":5}},"loc":{"start":{"line":193,"column":22},"end":{"line":217,"column":5}},"line":193},"14":{"name":"(anonymous_14)","decl":{"start":{"line":197,"column":26},"end":{"line":197,"column":27}},"loc":{"start":{"line":197,"column":38},"end":{"line":215,"column":9}},"line":197},"15":{"name":"(anonymous_15)","decl":{"start":{"line":250,"column":4},"end":{"line":250,"column":5}},"loc":{"start":{"line":250,"column":26},"end":{"line":280,"column":5}},"line":250},"16":{"name":"(anonymous_16)","decl":{"start":{"line":254,"column":26},"end":{"line":254,"column":27}},"loc":{"start":{"line":254,"column":38},"end":{"line":278,"column":9}},"line":254},"17":{"name":"(anonymous_17)","decl":{"start":{"line":360,"column":4},"end":{"line":360,"column":5}},"loc":{"start":{"line":360,"column":43},"end":{"line":376,"column":5}},"line":360},"18":{"name":"(anonymous_18)","decl":{"start":{"line":365,"column":26},"end":{"line":365,"column":27}},"loc":{"start":{"line":365,"column":38},"end":{"line":374,"column":9}},"line":365},"19":{"name":"(anonymous_19)","decl":{"start":{"line":378,"column":4},"end":{"line":378,"column":5}},"loc":{"start":{"line":378,"column":35},"end":{"line":380,"column":5}},"line":378},"20":{"name":"(anonymous_20)","decl":{"start":{"line":382,"column":4},"end":{"line":382,"column":5}},"loc":{"start":{"line":382,"column":42},"end":{"line":399,"column":5}},"line":382},"21":{"name":"(anonymous_21)","decl":{"start":{"line":387,"column":26},"end":{"line":387,"column":27}},"loc":{"start":{"line":387,"column":38},"end":{"line":397,"column":9}},"line":387},"22":{"name":"(anonymous_22)","decl":{"start":{"line":402,"column":4},"end":{"line":402,"column":5}},"loc":{"start":{"line":402,"column":15},"end":{"line":437,"column":5}},"line":402},"23":{"name":"(anonymous_23)","decl":{"start":{"line":406,"column":26},"end":{"line":406,"column":27}},"loc":{"start":{"line":406,"column":38},"end":{"line":435,"column":9}},"line":406},"24":{"name":"(anonymous_24)","decl":{"start":{"line":439,"column":4},"end":{"line":439,"column":5}},"loc":{"start":{"line":439,"column":41},"end":{"line":482,"column":5}},"line":439},"25":{"name":"(anonymous_25)","decl":{"start":{"line":444,"column":26},"end":{"line":444,"column":27}},"loc":{"start":{"line":444,"column":38},"end":{"line":480,"column":9}},"line":444},"26":{"name":"(anonymous_26)","decl":{"start":{"line":484,"column":4},"end":{"line":484,"column":5}},"loc":{"start":{"line":484,"column":12},"end":{"line":500,"column":5}},"line":484},"27":{"name":"(anonymous_27)","decl":{"start":{"line":490,"column":26},"end":{"line":490,"column":27}},"loc":{"start":{"line":490,"column":38},"end":{"line":498,"column":9}},"line":490},"28":{"name":"(anonymous_28)","decl":{"start":{"line":502,"column":4},"end":{"line":502,"column":5}},"loc":{"start":{"line":502,"column":16},"end":{"line":518,"column":5}},"line":502},"29":{"name":"(anonymous_29)","decl":{"start":{"line":508,"column":26},"end":{"line":508,"column":27}},"loc":{"start":{"line":508,"column":38},"end":{"line":516,"column":9}},"line":508},"30":{"name":"(anonymous_30)","decl":{"start":{"line":520,"column":4},"end":{"line":520,"column":5}},"loc":{"start":{"line":520,"column":45},"end":{"line":544,"column":5}},"line":520},"31":{"name":"(anonymous_31)","decl":{"start":{"line":525,"column":26},"end":{"line":525,"column":27}},"loc":{"start":{"line":525,"column":38},"end":{"line":542,"column":9}},"line":525},"32":{"name":"(anonymous_32)","decl":{"start":{"line":546,"column":4},"end":{"line":546,"column":5}},"loc":{"start":{"line":546,"column":41},"end":{"line":570,"column":5}},"line":546},"33":{"name":"(anonymous_33)","decl":{"start":{"line":551,"column":26},"end":{"line":551,"column":27}},"loc":{"start":{"line":551,"column":38},"end":{"line":568,"column":9}},"line":551},"34":{"name":"(anonymous_34)","decl":{"start":{"line":572,"column":4},"end":{"line":572,"column":5}},"loc":{"start":{"line":572,"column":38},"end":{"line":574,"column":5}},"line":572},"35":{"name":"(anonymous_35)","decl":{"start":{"line":576,"column":4},"end":{"line":576,"column":5}},"loc":{"start":{"line":576,"column":41},"end":{"line":578,"column":5}},"line":576},"36":{"name":"(anonymous_36)","decl":{"start":{"line":580,"column":4},"end":{"line":580,"column":5}},"loc":{"start":{"line":580,"column":53},"end":{"line":605,"column":5}},"line":580},"37":{"name":"(anonymous_37)","decl":{"start":{"line":585,"column":26},"end":{"line":585,"column":27}},"loc":{"start":{"line":585,"column":38},"end":{"line":603,"column":9}},"line":585},"38":{"name":"(anonymous_38)","decl":{"start":{"line":589,"column":29},"end":{"line":589,"column":30}},"loc":{"start":{"line":589,"column":46},"end":{"line":591,"column":17}},"line":589},"39":{"name":"(anonymous_39)","decl":{"start":{"line":597,"column":29},"end":{"line":597,"column":30}},"loc":{"start":{"line":597,"column":46},"end":{"line":599,"column":17}},"line":597},"40":{"name":"(anonymous_40)","decl":{"start":{"line":607,"column":4},"end":{"line":607,"column":5}},"loc":{"start":{"line":607,"column":56},"end":{"line":632,"column":5}},"line":607},"41":{"name":"(anonymous_41)","decl":{"start":{"line":612,"column":26},"end":{"line":612,"column":27}},"loc":{"start":{"line":612,"column":38},"end":{"line":630,"column":9}},"line":612},"42":{"name":"(anonymous_42)","decl":{"start":{"line":616,"column":29},"end":{"line":616,"column":30}},"loc":{"start":{"line":616,"column":46},"end":{"line":618,"column":17}},"line":616},"43":{"name":"(anonymous_43)","decl":{"start":{"line":624,"column":29},"end":{"line":624,"column":30}},"loc":{"start":{"line":624,"column":46},"end":{"line":626,"column":17}},"line":624},"44":{"name":"(anonymous_44)","decl":{"start":{"line":634,"column":4},"end":{"line":634,"column":5}},"loc":{"start":{"line":634,"column":45},"end":{"line":652,"column":5}},"line":634},"45":{"name":"(anonymous_45)","decl":{"start":{"line":639,"column":26},"end":{"line":639,"column":27}},"loc":{"start":{"line":639,"column":38},"end":{"line":650,"column":9}},"line":639},"46":{"name":"(anonymous_46)","decl":{"start":{"line":654,"column":4},"end":{"line":654,"column":5}},"loc":{"start":{"line":654,"column":60},"end":{"line":679,"column":5}},"line":654},"47":{"name":"(anonymous_47)","decl":{"start":{"line":659,"column":26},"end":{"line":659,"column":27}},"loc":{"start":{"line":659,"column":38},"end":{"line":677,"column":9}},"line":659},"48":{"name":"(anonymous_48)","decl":{"start":{"line":663,"column":29},"end":{"line":663,"column":30}},"loc":{"start":{"line":663,"column":46},"end":{"line":665,"column":17}},"line":663},"49":{"name":"(anonymous_49)","decl":{"start":{"line":671,"column":29},"end":{"line":671,"column":30}},"loc":{"start":{"line":671,"column":46},"end":{"line":673,"column":17}},"line":671},"50":{"name":"(anonymous_50)","decl":{"start":{"line":683,"column":4},"end":{"line":683,"column":5}},"loc":{"start":{"line":683,"column":20},"end":{"line":700,"column":5}},"line":683},"51":{"name":"(anonymous_51)","decl":{"start":{"line":687,"column":26},"end":{"line":687,"column":27}},"loc":{"start":{"line":687,"column":38},"end":{"line":698,"column":9}},"line":687},"52":{"name":"(anonymous_52)","decl":{"start":{"line":702,"column":4},"end":{"line":702,"column":5}},"loc":{"start":{"line":702,"column":33},"end":{"line":726,"column":5}},"line":702},"53":{"name":"(anonymous_53)","decl":{"start":{"line":706,"column":26},"end":{"line":706,"column":27}},"loc":{"start":{"line":706,"column":38},"end":{"line":724,"column":9}},"line":706},"54":{"name":"(anonymous_54)","decl":{"start":{"line":710,"column":29},"end":{"line":710,"column":30}},"loc":{"start":{"line":710,"column":46},"end":{"line":712,"column":17}},"line":710},"55":{"name":"(anonymous_55)","decl":{"start":{"line":718,"column":29},"end":{"line":718,"column":30}},"loc":{"start":{"line":718,"column":46},"end":{"line":720,"column":17}},"line":718},"56":{"name":"(anonymous_56)","decl":{"start":{"line":728,"column":4},"end":{"line":728,"column":5}},"loc":{"start":{"line":728,"column":39},"end":{"line":774,"column":5}},"line":728},"57":{"name":"(anonymous_57)","decl":{"start":{"line":733,"column":26},"end":{"line":733,"column":27}},"loc":{"start":{"line":733,"column":38},"end":{"line":772,"column":9}},"line":733},"58":{"name":"(anonymous_58)","decl":{"start":{"line":776,"column":4},"end":{"line":776,"column":5}},"loc":{"start":{"line":776,"column":49},"end":{"line":822,"column":5}},"line":776},"59":{"name":"(anonymous_59)","decl":{"start":{"line":781,"column":26},"end":{"line":781,"column":27}},"loc":{"start":{"line":781,"column":38},"end":{"line":820,"column":9}},"line":781},"60":{"name":"(anonymous_60)","decl":{"start":{"line":824,"column":4},"end":{"line":824,"column":5}},"loc":{"start":{"line":824,"column":43},"end":{"line":855,"column":5}},"line":824},"61":{"name":"(anonymous_61)","decl":{"start":{"line":829,"column":26},"end":{"line":829,"column":27}},"loc":{"start":{"line":829,"column":38},"end":{"line":853,"column":9}},"line":829},"62":{"name":"(anonymous_62)","decl":{"start":{"line":857,"column":4},"end":{"line":857,"column":5}},"loc":{"start":{"line":857,"column":12},"end":{"line":871,"column":5}},"line":857},"63":{"name":"(anonymous_63)","decl":{"start":{"line":861,"column":26},"end":{"line":861,"column":27}},"loc":{"start":{"line":861,"column":38},"end":{"line":869,"column":9}},"line":861},"64":{"name":"(anonymous_64)","decl":{"start":{"line":873,"column":4},"end":{"line":873,"column":5}},"loc":{"start":{"line":873,"column":16},"end":{"line":887,"column":5}},"line":873},"65":{"name":"(anonymous_65)","decl":{"start":{"line":877,"column":26},"end":{"line":877,"column":27}},"loc":{"start":{"line":877,"column":38},"end":{"line":885,"column":9}},"line":877},"66":{"name":"(anonymous_66)","decl":{"start":{"line":889,"column":4},"end":{"line":889,"column":5}},"loc":{"start":{"line":889,"column":45},"end":{"line":911,"column":5}},"line":889},"67":{"name":"(anonymous_67)","decl":{"start":{"line":894,"column":26},"end":{"line":894,"column":27}},"loc":{"start":{"line":894,"column":38},"end":{"line":909,"column":9}},"line":894},"68":{"name":"(anonymous_68)","decl":{"start":{"line":913,"column":4},"end":{"line":913,"column":5}},"loc":{"start":{"line":913,"column":41},"end":{"line":935,"column":5}},"line":913},"69":{"name":"(anonymous_69)","decl":{"start":{"line":918,"column":26},"end":{"line":918,"column":27}},"loc":{"start":{"line":918,"column":38},"end":{"line":933,"column":9}},"line":918},"70":{"name":"(anonymous_70)","decl":{"start":{"line":990,"column":4},"end":{"line":990,"column":5}},"loc":{"start":{"line":990,"column":21},"end":{"line":1000,"column":5}},"line":990},"71":{"name":"(anonymous_71)","decl":{"start":{"line":994,"column":26},"end":{"line":994,"column":27}},"loc":{"start":{"line":994,"column":38},"end":{"line":998,"column":9}},"line":994},"72":{"name":"(anonymous_72)","decl":{"start":{"line":1047,"column":4},"end":{"line":1047,"column":5}},"loc":{"start":{"line":1047,"column":57},"end":{"line":1059,"column":5}},"line":1047},"73":{"name":"(anonymous_73)","decl":{"start":{"line":1052,"column":26},"end":{"line":1052,"column":27}},"loc":{"start":{"line":1052,"column":38},"end":{"line":1057,"column":9}},"line":1052},"74":{"name":"(anonymous_74)","decl":{"start":{"line":1103,"column":4},"end":{"line":1103,"column":5}},"loc":{"start":{"line":1103,"column":27},"end":{"line":1113,"column":5}},"line":1103},"75":{"name":"(anonymous_75)","decl":{"start":{"line":1107,"column":26},"end":{"line":1107,"column":27}},"loc":{"start":{"line":1107,"column":38},"end":{"line":1111,"column":9}},"line":1107},"76":{"name":"(anonymous_76)","decl":{"start":{"line":1160,"column":4},"end":{"line":1160,"column":5}},"loc":{"start":{"line":1160,"column":36},"end":{"line":1174,"column":5}},"line":1160},"77":{"name":"(anonymous_77)","decl":{"start":{"line":1165,"column":26},"end":{"line":1165,"column":27}},"loc":{"start":{"line":1165,"column":38},"end":{"line":1172,"column":9}},"line":1165},"78":{"name":"(anonymous_78)","decl":{"start":{"line":1221,"column":4},"end":{"line":1221,"column":5}},"loc":{"start":{"line":1221,"column":40},"end":{"line":1237,"column":5}},"line":1221},"79":{"name":"(anonymous_79)","decl":{"start":{"line":1226,"column":26},"end":{"line":1226,"column":27}},"loc":{"start":{"line":1226,"column":38},"end":{"line":1235,"column":9}},"line":1226},"80":{"name":"(anonymous_80)","decl":{"start":{"line":1299,"column":4},"end":{"line":1299,"column":5}},"loc":{"start":{"line":1305,"column":20},"end":{"line":1323,"column":5}},"line":1305},"81":{"name":"(anonymous_81)","decl":{"start":{"line":1311,"column":26},"end":{"line":1311,"column":27}},"loc":{"start":{"line":1311,"column":38},"end":{"line":1321,"column":9}},"line":1311},"82":{"name":"(anonymous_82)","decl":{"start":{"line":1377,"column":4},"end":{"line":1377,"column":5}},"loc":{"start":{"line":1377,"column":50},"end":{"line":1395,"column":5}},"line":1377},"83":{"name":"(anonymous_83)","decl":{"start":{"line":1383,"column":26},"end":{"line":1383,"column":27}},"loc":{"start":{"line":1383,"column":38},"end":{"line":1393,"column":9}},"line":1383},"84":{"name":"(anonymous_84)","decl":{"start":{"line":1427,"column":4},"end":{"line":1427,"column":5}},"loc":{"start":{"line":1427,"column":27},"end":{"line":1449,"column":5}},"line":1427},"85":{"name":"(anonymous_85)","decl":{"start":{"line":1431,"column":26},"end":{"line":1431,"column":27}},"loc":{"start":{"line":1431,"column":38},"end":{"line":1447,"column":9}},"line":1431},"86":{"name":"(anonymous_86)","decl":{"start":{"line":1485,"column":4},"end":{"line":1485,"column":5}},"loc":{"start":{"line":1485,"column":44},"end":{"line":1499,"column":5}},"line":1485},"87":{"name":"(anonymous_87)","decl":{"start":{"line":1490,"column":26},"end":{"line":1490,"column":27}},"loc":{"start":{"line":1490,"column":38},"end":{"line":1497,"column":9}},"line":1490},"88":{"name":"(anonymous_88)","decl":{"start":{"line":1535,"column":4},"end":{"line":1535,"column":5}},"loc":{"start":{"line":1535,"column":43},"end":{"line":1550,"column":5}},"line":1535},"89":{"name":"(anonymous_89)","decl":{"start":{"line":1540,"column":26},"end":{"line":1540,"column":27}},"loc":{"start":{"line":1540,"column":38},"end":{"line":1548,"column":9}},"line":1540},"90":{"name":"(anonymous_90)","decl":{"start":{"line":1611,"column":4},"end":{"line":1611,"column":5}},"loc":{"start":{"line":1611,"column":41},"end":{"line":1642,"column":5}},"line":1611},"91":{"name":"(anonymous_91)","decl":{"start":{"line":1616,"column":26},"end":{"line":1616,"column":27}},"loc":{"start":{"line":1616,"column":38},"end":{"line":1640,"column":9}},"line":1616},"92":{"name":"(anonymous_92)","decl":{"start":{"line":1702,"column":4},"end":{"line":1702,"column":5}},"loc":{"start":{"line":1702,"column":109},"end":{"line":1723,"column":5}},"line":1702},"93":{"name":"(anonymous_93)","decl":{"start":{"line":1709,"column":26},"end":{"line":1709,"column":27}},"loc":{"start":{"line":1709,"column":38},"end":{"line":1721,"column":9}},"line":1709},"94":{"name":"(anonymous_94)","decl":{"start":{"line":1725,"column":4},"end":{"line":1725,"column":5}},"loc":{"start":{"line":1725,"column":124},"end":{"line":1741,"column":5}},"line":1725},"95":{"name":"(anonymous_95)","decl":{"start":{"line":1732,"column":26},"end":{"line":1732,"column":27}},"loc":{"start":{"line":1732,"column":38},"end":{"line":1739,"column":9}},"line":1732},"96":{"name":"(anonymous_96)","decl":{"start":{"line":1734,"column":25},"end":{"line":1734,"column":26}},"loc":{"start":{"line":1734,"column":40},"end":{"line":1736,"column":13}},"line":1734},"97":{"name":"(anonymous_97)","decl":{"start":{"line":1743,"column":4},"end":{"line":1743,"column":5}},"loc":{"start":{"line":1743,"column":56},"end":{"line":1757,"column":5}},"line":1743},"98":{"name":"(anonymous_98)","decl":{"start":{"line":1748,"column":26},"end":{"line":1748,"column":27}},"loc":{"start":{"line":1748,"column":38},"end":{"line":1755,"column":9}},"line":1748},"99":{"name":"(anonymous_99)","decl":{"start":{"line":1750,"column":25},"end":{"line":1750,"column":26}},"loc":{"start":{"line":1750,"column":40},"end":{"line":1752,"column":13}},"line":1750},"100":{"name":"(anonymous_100)","decl":{"start":{"line":1810,"column":4},"end":{"line":1810,"column":5}},"loc":{"start":{"line":1810,"column":49},"end":{"line":1826,"column":5}},"line":1810},"101":{"name":"(anonymous_101)","decl":{"start":{"line":1815,"column":26},"end":{"line":1815,"column":27}},"loc":{"start":{"line":1815,"column":38},"end":{"line":1824,"column":9}},"line":1815},"102":{"name":"(anonymous_102)","decl":{"start":{"line":1828,"column":4},"end":{"line":1828,"column":5}},"loc":{"start":{"line":1828,"column":64},"end":{"line":1842,"column":5}},"line":1828},"103":{"name":"(anonymous_103)","decl":{"start":{"line":1833,"column":26},"end":{"line":1833,"column":27}},"loc":{"start":{"line":1833,"column":38},"end":{"line":1840,"column":9}},"line":1833},"104":{"name":"(anonymous_104)","decl":{"start":{"line":1835,"column":25},"end":{"line":1835,"column":26}},"loc":{"start":{"line":1835,"column":40},"end":{"line":1837,"column":13}},"line":1835},"105":{"name":"(anonymous_105)","decl":{"start":{"line":1843,"column":4},"end":{"line":1843,"column":5}},"loc":{"start":{"line":1843,"column":52},"end":{"line":1871,"column":5}},"line":1843},"106":{"name":"(anonymous_106)","decl":{"start":{"line":1849,"column":26},"end":{"line":1849,"column":27}},"loc":{"start":{"line":1849,"column":38},"end":{"line":1869,"column":9}},"line":1849},"107":{"name":"(anonymous_107)","decl":{"start":{"line":1941,"column":4},"end":{"line":1941,"column":5}},"loc":{"start":{"line":1941,"column":46},"end":{"line":1957,"column":5}},"line":1941},"108":{"name":"(anonymous_108)","decl":{"start":{"line":1946,"column":26},"end":{"line":1946,"column":27}},"loc":{"start":{"line":1946,"column":38},"end":{"line":1955,"column":9}},"line":1946},"109":{"name":"(anonymous_109)","decl":{"start":{"line":1959,"column":4},"end":{"line":1959,"column":5}},"loc":{"start":{"line":1959,"column":54},"end":{"line":1961,"column":5}},"line":1959},"110":{"name":"(anonymous_110)","decl":{"start":{"line":1963,"column":4},"end":{"line":1963,"column":5}},"loc":{"start":{"line":1963,"column":61},"end":{"line":1988,"column":5}},"line":1963},"111":{"name":"(anonymous_111)","decl":{"start":{"line":1968,"column":26},"end":{"line":1968,"column":27}},"loc":{"start":{"line":1968,"column":38},"end":{"line":1986,"column":9}},"line":1968},"112":{"name":"(anonymous_112)","decl":{"start":{"line":1972,"column":29},"end":{"line":1972,"column":30}},"loc":{"start":{"line":1972,"column":46},"end":{"line":1974,"column":17}},"line":1972},"113":{"name":"(anonymous_113)","decl":{"start":{"line":1980,"column":29},"end":{"line":1980,"column":30}},"loc":{"start":{"line":1980,"column":46},"end":{"line":1982,"column":17}},"line":1980},"114":{"name":"(anonymous_114)","decl":{"start":{"line":2034,"column":4},"end":{"line":2034,"column":5}},"loc":{"start":{"line":2034,"column":105},"end":{"line":2057,"column":5}},"line":2034},"115":{"name":"(anonymous_115)","decl":{"start":{"line":2041,"column":26},"end":{"line":2041,"column":27}},"loc":{"start":{"line":2041,"column":38},"end":{"line":2055,"column":9}},"line":2041},"116":{"name":"(anonymous_116)","decl":{"start":{"line":2059,"column":4},"end":{"line":2059,"column":5}},"loc":{"start":{"line":2059,"column":120},"end":{"line":2081,"column":5}},"line":2059},"117":{"name":"(anonymous_117)","decl":{"start":{"line":2066,"column":26},"end":{"line":2066,"column":27}},"loc":{"start":{"line":2066,"column":38},"end":{"line":2079,"column":9}},"line":2066},"118":{"name":"(anonymous_118)","decl":{"start":{"line":2083,"column":4},"end":{"line":2083,"column":5}},"loc":{"start":{"line":2083,"column":50},"end":{"line":2085,"column":5}},"line":2083},"119":{"name":"(anonymous_119)","decl":{"start":{"line":2087,"column":4},"end":{"line":2087,"column":5}},"loc":{"start":{"line":2087,"column":57},"end":{"line":2089,"column":5}},"line":2087},"120":{"name":"(anonymous_120)","decl":{"start":{"line":2142,"column":4},"end":{"line":2142,"column":5}},"loc":{"start":{"line":2142,"column":42},"end":{"line":2156,"column":5}},"line":2142},"121":{"name":"(anonymous_121)","decl":{"start":{"line":2147,"column":26},"end":{"line":2147,"column":27}},"loc":{"start":{"line":2147,"column":38},"end":{"line":2154,"column":9}},"line":2147},"122":{"name":"(anonymous_122)","decl":{"start":{"line":2158,"column":4},"end":{"line":2158,"column":5}},"loc":{"start":{"line":2158,"column":57},"end":{"line":2183,"column":5}},"line":2158},"123":{"name":"(anonymous_123)","decl":{"start":{"line":2163,"column":26},"end":{"line":2163,"column":27}},"loc":{"start":{"line":2163,"column":38},"end":{"line":2181,"column":9}},"line":2163},"124":{"name":"(anonymous_124)","decl":{"start":{"line":2167,"column":29},"end":{"line":2167,"column":30}},"loc":{"start":{"line":2167,"column":46},"end":{"line":2169,"column":17}},"line":2167},"125":{"name":"(anonymous_125)","decl":{"start":{"line":2175,"column":29},"end":{"line":2175,"column":30}},"loc":{"start":{"line":2175,"column":46},"end":{"line":2177,"column":17}},"line":2175},"126":{"name":"(anonymous_126)","decl":{"start":{"line":2252,"column":4},"end":{"line":2252,"column":5}},"loc":{"start":{"line":2252,"column":49},"end":{"line":2269,"column":5}},"line":2252},"127":{"name":"(anonymous_127)","decl":{"start":{"line":2257,"column":26},"end":{"line":2257,"column":27}},"loc":{"start":{"line":2257,"column":38},"end":{"line":2267,"column":9}},"line":2257},"128":{"name":"(anonymous_128)","decl":{"start":{"line":2271,"column":4},"end":{"line":2271,"column":5}},"loc":{"start":{"line":2271,"column":64},"end":{"line":2296,"column":5}},"line":2271},"129":{"name":"(anonymous_129)","decl":{"start":{"line":2276,"column":26},"end":{"line":2276,"column":27}},"loc":{"start":{"line":2276,"column":38},"end":{"line":2294,"column":9}},"line":2276},"130":{"name":"(anonymous_130)","decl":{"start":{"line":2280,"column":29},"end":{"line":2280,"column":30}},"loc":{"start":{"line":2280,"column":46},"end":{"line":2282,"column":17}},"line":2280},"131":{"name":"(anonymous_131)","decl":{"start":{"line":2288,"column":29},"end":{"line":2288,"column":30}},"loc":{"start":{"line":2288,"column":46},"end":{"line":2290,"column":17}},"line":2288},"132":{"name":"(anonymous_132)","decl":{"start":{"line":2298,"column":4},"end":{"line":2298,"column":5}},"loc":{"start":{"line":2298,"column":21},"end":{"line":2314,"column":5}},"line":2298},"133":{"name":"(anonymous_133)","decl":{"start":{"line":2302,"column":26},"end":{"line":2302,"column":27}},"loc":{"start":{"line":2302,"column":38},"end":{"line":2312,"column":9}},"line":2302},"134":{"name":"(anonymous_134)","decl":{"start":{"line":2317,"column":4},"end":{"line":2317,"column":5}},"loc":{"start":{"line":2317,"column":119},"end":{"line":2343,"column":5}},"line":2317},"135":{"name":"(anonymous_135)","decl":{"start":{"line":2323,"column":26},"end":{"line":2323,"column":27}},"loc":{"start":{"line":2323,"column":38},"end":{"line":2341,"column":9}},"line":2323},"136":{"name":"(anonymous_136)","decl":{"start":{"line":2344,"column":4},"end":{"line":2344,"column":5}},"loc":{"start":{"line":2344,"column":43},"end":{"line":2363,"column":5}},"line":2344},"137":{"name":"(anonymous_137)","decl":{"start":{"line":2350,"column":26},"end":{"line":2350,"column":27}},"loc":{"start":{"line":2350,"column":38},"end":{"line":2361,"column":9}},"line":2350},"138":{"name":"(anonymous_138)","decl":{"start":{"line":2364,"column":4},"end":{"line":2364,"column":5}},"loc":{"start":{"line":2364,"column":25},"end":{"line":2388,"column":5}},"line":2364},"139":{"name":"(anonymous_139)","decl":{"start":{"line":2368,"column":26},"end":{"line":2368,"column":27}},"loc":{"start":{"line":2368,"column":38},"end":{"line":2386,"column":9}},"line":2368},"140":{"name":"(anonymous_140)","decl":{"start":{"line":2389,"column":4},"end":{"line":2389,"column":5}},"loc":{"start":{"line":2389,"column":49},"end":{"line":2416,"column":5}},"line":2389},"141":{"name":"(anonymous_141)","decl":{"start":{"line":2395,"column":26},"end":{"line":2395,"column":27}},"loc":{"start":{"line":2395,"column":38},"end":{"line":2414,"column":9}},"line":2395},"142":{"name":"(anonymous_142)","decl":{"start":{"line":2417,"column":4},"end":{"line":2417,"column":5}},"loc":{"start":{"line":2417,"column":20},"end":{"line":2441,"column":5}},"line":2417},"143":{"name":"(anonymous_143)","decl":{"start":{"line":2421,"column":26},"end":{"line":2421,"column":27}},"loc":{"start":{"line":2421,"column":38},"end":{"line":2439,"column":9}},"line":2421},"144":{"name":"(anonymous_144)","decl":{"start":{"line":2442,"column":4},"end":{"line":2442,"column":5}},"loc":{"start":{"line":2442,"column":26},"end":{"line":2444,"column":5}},"line":2442},"145":{"name":"(anonymous_145)","decl":{"start":{"line":2446,"column":4},"end":{"line":2446,"column":5}},"loc":{"start":{"line":2446,"column":41},"end":{"line":2468,"column":5}},"line":2446},"146":{"name":"(anonymous_146)","decl":{"start":{"line":2451,"column":26},"end":{"line":2451,"column":27}},"loc":{"start":{"line":2451,"column":38},"end":{"line":2466,"column":9}},"line":2451},"147":{"name":"(anonymous_147)","decl":{"start":{"line":2469,"column":4},"end":{"line":2469,"column":5}},"loc":{"start":{"line":2469,"column":19},"end":{"line":2490,"column":5}},"line":2469},"148":{"name":"(anonymous_148)","decl":{"start":{"line":2473,"column":26},"end":{"line":2473,"column":27}},"loc":{"start":{"line":2473,"column":38},"end":{"line":2488,"column":9}},"line":2473},"149":{"name":"(anonymous_149)","decl":{"start":{"line":2491,"column":4},"end":{"line":2491,"column":5}},"loc":{"start":{"line":2491,"column":25},"end":{"line":2493,"column":5}},"line":2491},"150":{"name":"(anonymous_150)","decl":{"start":{"line":2494,"column":4},"end":{"line":2494,"column":5}},"loc":{"start":{"line":2494,"column":13},"end":{"line":2505,"column":5}},"line":2494},"151":{"name":"(anonymous_151)","decl":{"start":{"line":2498,"column":26},"end":{"line":2498,"column":27}},"loc":{"start":{"line":2498,"column":38},"end":{"line":2503,"column":9}},"line":2498},"152":{"name":"(anonymous_152)","decl":{"start":{"line":2506,"column":4},"end":{"line":2506,"column":5}},"loc":{"start":{"line":2506,"column":19},"end":{"line":2517,"column":5}},"line":2506},"153":{"name":"(anonymous_153)","decl":{"start":{"line":2510,"column":26},"end":{"line":2510,"column":27}},"loc":{"start":{"line":2510,"column":38},"end":{"line":2515,"column":9}},"line":2510},"154":{"name":"(anonymous_154)","decl":{"start":{"line":2518,"column":4},"end":{"line":2518,"column":5}},"loc":{"start":{"line":2518,"column":38},"end":{"line":2533,"column":5}},"line":2518},"155":{"name":"(anonymous_155)","decl":{"start":{"line":2523,"column":26},"end":{"line":2523,"column":27}},"loc":{"start":{"line":2523,"column":38},"end":{"line":2531,"column":9}},"line":2523},"156":{"name":"(anonymous_156)","decl":{"start":{"line":2534,"column":4},"end":{"line":2534,"column":5}},"loc":{"start":{"line":2534,"column":45},"end":{"line":2549,"column":5}},"line":2534},"157":{"name":"(anonymous_157)","decl":{"start":{"line":2539,"column":26},"end":{"line":2539,"column":27}},"loc":{"start":{"line":2539,"column":38},"end":{"line":2547,"column":9}},"line":2539},"158":{"name":"(anonymous_158)","decl":{"start":{"line":2550,"column":4},"end":{"line":2550,"column":5}},"loc":{"start":{"line":2550,"column":51},"end":{"line":2565,"column":5}},"line":2550},"159":{"name":"(anonymous_159)","decl":{"start":{"line":2555,"column":26},"end":{"line":2555,"column":27}},"loc":{"start":{"line":2555,"column":38},"end":{"line":2563,"column":9}},"line":2555},"160":{"name":"(anonymous_160)","decl":{"start":{"line":2566,"column":4},"end":{"line":2566,"column":5}},"loc":{"start":{"line":2566,"column":44},"end":{"line":2581,"column":5}},"line":2566},"161":{"name":"(anonymous_161)","decl":{"start":{"line":2571,"column":26},"end":{"line":2571,"column":27}},"loc":{"start":{"line":2571,"column":38},"end":{"line":2579,"column":9}},"line":2571},"162":{"name":"(anonymous_162)","decl":{"start":{"line":2583,"column":4},"end":{"line":2583,"column":5}},"loc":{"start":{"line":2583,"column":15},"end":{"line":2597,"column":5}},"line":2583},"163":{"name":"(anonymous_163)","decl":{"start":{"line":2587,"column":26},"end":{"line":2587,"column":27}},"loc":{"start":{"line":2587,"column":38},"end":{"line":2595,"column":9}},"line":2587},"164":{"name":"(anonymous_164)","decl":{"start":{"line":2598,"column":4},"end":{"line":2598,"column":5}},"loc":{"start":{"line":2598,"column":52},"end":{"line":2615,"column":5}},"line":2598},"165":{"name":"(anonymous_165)","decl":{"start":{"line":2603,"column":26},"end":{"line":2603,"column":27}},"loc":{"start":{"line":2603,"column":38},"end":{"line":2613,"column":9}},"line":2603},"166":{"name":"(anonymous_166)","decl":{"start":{"line":2616,"column":4},"end":{"line":2616,"column":5}},"loc":{"start":{"line":2616,"column":59},"end":{"line":2633,"column":5}},"line":2616},"167":{"name":"(anonymous_167)","decl":{"start":{"line":2621,"column":26},"end":{"line":2621,"column":27}},"loc":{"start":{"line":2621,"column":38},"end":{"line":2631,"column":9}},"line":2621},"168":{"name":"(anonymous_168)","decl":{"start":{"line":2634,"column":4},"end":{"line":2634,"column":5}},"loc":{"start":{"line":2634,"column":45},"end":{"line":2653,"column":5}},"line":2634},"169":{"name":"(anonymous_169)","decl":{"start":{"line":2639,"column":26},"end":{"line":2639,"column":27}},"loc":{"start":{"line":2639,"column":38},"end":{"line":2651,"column":9}},"line":2639},"170":{"name":"(anonymous_170)","decl":{"start":{"line":2654,"column":4},"end":{"line":2654,"column":5}},"loc":{"start":{"line":2654,"column":52},"end":{"line":2673,"column":5}},"line":2654},"171":{"name":"(anonymous_171)","decl":{"start":{"line":2659,"column":26},"end":{"line":2659,"column":27}},"loc":{"start":{"line":2659,"column":38},"end":{"line":2671,"column":9}},"line":2659},"172":{"name":"(anonymous_172)","decl":{"start":{"line":2674,"column":4},"end":{"line":2674,"column":5}},"loc":{"start":{"line":2674,"column":45},"end":{"line":2691,"column":5}},"line":2674},"173":{"name":"(anonymous_173)","decl":{"start":{"line":2679,"column":26},"end":{"line":2679,"column":27}},"loc":{"start":{"line":2679,"column":38},"end":{"line":2689,"column":9}},"line":2679},"174":{"name":"(anonymous_174)","decl":{"start":{"line":2692,"column":4},"end":{"line":2692,"column":5}},"loc":{"start":{"line":2692,"column":52},"end":{"line":2709,"column":5}},"line":2692},"175":{"name":"(anonymous_175)","decl":{"start":{"line":2697,"column":26},"end":{"line":2697,"column":27}},"loc":{"start":{"line":2697,"column":38},"end":{"line":2707,"column":9}},"line":2697},"176":{"name":"(anonymous_176)","decl":{"start":{"line":2710,"column":4},"end":{"line":2710,"column":5}},"loc":{"start":{"line":2710,"column":15},"end":{"line":2728,"column":5}},"line":2710},"177":{"name":"(anonymous_177)","decl":{"start":{"line":2714,"column":26},"end":{"line":2714,"column":27}},"loc":{"start":{"line":2714,"column":38},"end":{"line":2726,"column":9}},"line":2714},"178":{"name":"(anonymous_178)","decl":{"start":{"line":2718,"column":59},"end":{"line":2718,"column":60}},"loc":{"start":{"line":2718,"column":74},"end":{"line":2718,"column":93}},"line":2718},"179":{"name":"(anonymous_179)","decl":{"start":{"line":2729,"column":4},"end":{"line":2729,"column":5}},"loc":{"start":{"line":2729,"column":45},"end":{"line":2757,"column":5}},"line":2729},"180":{"name":"(anonymous_180)","decl":{"start":{"line":2735,"column":26},"end":{"line":2735,"column":27}},"loc":{"start":{"line":2735,"column":38},"end":{"line":2755,"column":9}},"line":2735},"181":{"name":"(anonymous_181)","decl":{"start":{"line":2758,"column":4},"end":{"line":2758,"column":5}},"loc":{"start":{"line":2758,"column":51},"end":{"line":2782,"column":5}},"line":2758},"182":{"name":"(anonymous_182)","decl":{"start":{"line":2764,"column":26},"end":{"line":2764,"column":27}},"loc":{"start":{"line":2764,"column":38},"end":{"line":2780,"column":9}},"line":2764},"183":{"name":"(anonymous_183)","decl":{"start":{"line":2783,"column":4},"end":{"line":2783,"column":5}},"loc":{"start":{"line":2783,"column":20},"end":{"line":2799,"column":5}},"line":2783},"184":{"name":"(anonymous_184)","decl":{"start":{"line":2787,"column":26},"end":{"line":2787,"column":27}},"loc":{"start":{"line":2787,"column":38},"end":{"line":2797,"column":9}},"line":2787},"185":{"name":"(anonymous_185)","decl":{"start":{"line":2800,"column":4},"end":{"line":2800,"column":5}},"loc":{"start":{"line":2800,"column":36},"end":{"line":2815,"column":5}},"line":2800},"186":{"name":"(anonymous_186)","decl":{"start":{"line":2805,"column":26},"end":{"line":2805,"column":27}},"loc":{"start":{"line":2805,"column":38},"end":{"line":2813,"column":9}},"line":2805},"187":{"name":"(anonymous_187)","decl":{"start":{"line":2818,"column":4},"end":{"line":2818,"column":5}},"loc":{"start":{"line":2818,"column":17},"end":{"line":2831,"column":5}},"line":2818},"188":{"name":"(anonymous_188)","decl":{"start":{"line":2822,"column":26},"end":{"line":2822,"column":27}},"loc":{"start":{"line":2822,"column":38},"end":{"line":2829,"column":9}},"line":2822},"189":{"name":"(anonymous_189)","decl":{"start":{"line":2832,"column":4},"end":{"line":2832,"column":5}},"loc":{"start":{"line":2832,"column":87},"end":{"line":2863,"column":5}},"line":2832},"190":{"name":"(anonymous_190)","decl":{"start":{"line":2842,"column":26},"end":{"line":2842,"column":27}},"loc":{"start":{"line":2842,"column":38},"end":{"line":2861,"column":9}},"line":2842},"191":{"name":"(anonymous_191)","decl":{"start":{"line":2864,"column":4},"end":{"line":2864,"column":5}},"loc":{"start":{"line":2864,"column":16},"end":{"line":2878,"column":5}},"line":2864},"192":{"name":"(anonymous_192)","decl":{"start":{"line":2868,"column":26},"end":{"line":2868,"column":27}},"loc":{"start":{"line":2868,"column":38},"end":{"line":2876,"column":9}},"line":2868},"193":{"name":"(anonymous_193)","decl":{"start":{"line":2879,"column":4},"end":{"line":2879,"column":5}},"loc":{"start":{"line":2879,"column":49},"end":{"line":2905,"column":5}},"line":2879},"194":{"name":"(anonymous_194)","decl":{"start":{"line":2885,"column":26},"end":{"line":2885,"column":27}},"loc":{"start":{"line":2885,"column":38},"end":{"line":2903,"column":9}},"line":2885},"195":{"name":"(anonymous_195)","decl":{"start":{"line":2906,"column":4},"end":{"line":2906,"column":5}},"loc":{"start":{"line":2906,"column":50},"end":{"line":2930,"column":5}},"line":2906},"196":{"name":"(anonymous_196)","decl":{"start":{"line":2912,"column":26},"end":{"line":2912,"column":27}},"loc":{"start":{"line":2912,"column":38},"end":{"line":2928,"column":9}},"line":2912}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":8},"end":{"line":22,"column":9}},"type":"if","locations":[{"start":{"line":15,"column":8},"end":{"line":22,"column":9}},{"start":{"line":15,"column":8},"end":{"line":22,"column":9}}],"line":15},"1":{"loc":{"start":{"line":87,"column":29},"end":{"line":87,"column":43}},"type":"default-arg","locations":[{"start":{"line":87,"column":39},"end":{"line":87,"column":43}}],"line":87},"2":{"loc":{"start":{"line":94,"column":12},"end":{"line":97,"column":13}},"type":"if","locations":[{"start":{"line":94,"column":12},"end":{"line":97,"column":13}},{"start":{"line":94,"column":12},"end":{"line":97,"column":13}}],"line":94},"3":{"loc":{"start":{"line":146,"column":36},"end":{"line":146,"column":50}},"type":"default-arg","locations":[{"start":{"line":146,"column":46},"end":{"line":146,"column":50}}],"line":146},"4":{"loc":{"start":{"line":153,"column":12},"end":{"line":156,"column":13}},"type":"if","locations":[{"start":{"line":153,"column":12},"end":{"line":156,"column":13}},{"start":{"line":153,"column":12},"end":{"line":156,"column":13}}],"line":153},"5":{"loc":{"start":{"line":198,"column":12},"end":{"line":199,"column":29}},"type":"if","locations":[{"start":{"line":198,"column":12},"end":{"line":199,"column":29}},{"start":{"line":198,"column":12},"end":{"line":199,"column":29}}],"line":198},"6":{"loc":{"start":{"line":202,"column":16},"end":{"line":210,"column":55}},"type":"if","locations":[{"start":{"line":202,"column":16},"end":{"line":210,"column":55}},{"start":{"line":202,"column":16},"end":{"line":210,"column":55}}],"line":202},"7":{"loc":{"start":{"line":204,"column":20},"end":{"line":207,"column":53}},"type":"if","locations":[{"start":{"line":204,"column":20},"end":{"line":207,"column":53}},{"start":{"line":204,"column":20},"end":{"line":207,"column":53}}],"line":204},"8":{"loc":{"start":{"line":211,"column":16},"end":{"line":212,"column":32}},"type":"if","locations":[{"start":{"line":211,"column":16},"end":{"line":212,"column":32}},{"start":{"line":211,"column":16},"end":{"line":212,"column":32}}],"line":211},"9":{"loc":{"start":{"line":255,"column":12},"end":{"line":256,"column":29}},"type":"if","locations":[{"start":{"line":255,"column":12},"end":{"line":256,"column":29}},{"start":{"line":255,"column":12},"end":{"line":256,"column":29}}],"line":255},"10":{"loc":{"start":{"line":259,"column":16},"end":{"line":275,"column":33}},"type":"if","locations":[{"start":{"line":259,"column":16},"end":{"line":275,"column":33}},{"start":{"line":259,"column":16},"end":{"line":275,"column":33}}],"line":259},"11":{"loc":{"start":{"line":263,"column":24},"end":{"line":269,"column":25}},"type":"if","locations":[{"start":{"line":263,"column":24},"end":{"line":269,"column":25}},{"start":{"line":263,"column":24},"end":{"line":269,"column":25}}],"line":263},"12":{"loc":{"start":{"line":263,"column":28},"end":{"line":266,"column":47}},"type":"binary-expr","locations":[{"start":{"line":263,"column":29},"end":{"line":263,"column":80}},{"start":{"line":264,"column":29},"end":{"line":264,"column":57}},{"start":{"line":265,"column":29},"end":{"line":265,"column":83}},{"start":{"line":266,"column":32},"end":{"line":266,"column":46}}],"line":263},"13":{"loc":{"start":{"line":271,"column":20},"end":{"line":272,"column":37}},"type":"if","locations":[{"start":{"line":271,"column":20},"end":{"line":272,"column":37}},{"start":{"line":271,"column":20},"end":{"line":272,"column":37}}],"line":271},"14":{"loc":{"start":{"line":274,"column":21},"end":{"line":275,"column":33}},"type":"if","locations":[{"start":{"line":274,"column":21},"end":{"line":275,"column":33}},{"start":{"line":274,"column":21},"end":{"line":275,"column":33}}],"line":274},"15":{"loc":{"start":{"line":360,"column":27},"end":{"line":360,"column":41}},"type":"default-arg","locations":[{"start":{"line":360,"column":37},"end":{"line":360,"column":41}}],"line":360},"16":{"loc":{"start":{"line":366,"column":12},"end":{"line":373,"column":13}},"type":"if","locations":[{"start":{"line":366,"column":12},"end":{"line":373,"column":13}},{"start":{"line":366,"column":12},"end":{"line":373,"column":13}}],"line":366},"17":{"loc":{"start":{"line":370,"column":20},"end":{"line":371,"column":30}},"type":"if","locations":[{"start":{"line":370,"column":20},"end":{"line":371,"column":30}},{"start":{"line":370,"column":20},"end":{"line":371,"column":30}}],"line":370},"18":{"loc":{"start":{"line":370,"column":24},"end":{"line":370,"column":85}},"type":"binary-expr","locations":[{"start":{"line":370,"column":24},"end":{"line":370,"column":39}},{"start":{"line":370,"column":43},"end":{"line":370,"column":85}}],"line":370},"19":{"loc":{"start":{"line":378,"column":19},"end":{"line":378,"column":33}},"type":"default-arg","locations":[{"start":{"line":378,"column":29},"end":{"line":378,"column":33}}],"line":378},"20":{"loc":{"start":{"line":382,"column":26},"end":{"line":382,"column":40}},"type":"default-arg","locations":[{"start":{"line":382,"column":36},"end":{"line":382,"column":40}}],"line":382},"21":{"loc":{"start":{"line":388,"column":12},"end":{"line":395,"column":13}},"type":"if","locations":[{"start":{"line":388,"column":12},"end":{"line":395,"column":13}},{"start":{"line":388,"column":12},"end":{"line":395,"column":13}}],"line":388},"22":{"loc":{"start":{"line":392,"column":20},"end":{"line":393,"column":30}},"type":"if","locations":[{"start":{"line":392,"column":20},"end":{"line":393,"column":30}},{"start":{"line":392,"column":20},"end":{"line":393,"column":30}}],"line":392},"23":{"loc":{"start":{"line":392,"column":24},"end":{"line":392,"column":85}},"type":"binary-expr","locations":[{"start":{"line":392,"column":24},"end":{"line":392,"column":39}},{"start":{"line":392,"column":43},"end":{"line":392,"column":85}}],"line":392},"24":{"loc":{"start":{"line":408,"column":12},"end":{"line":430,"column":13}},"type":"if","locations":[{"start":{"line":408,"column":12},"end":{"line":430,"column":13}},{"start":{"line":408,"column":12},"end":{"line":430,"column":13}}],"line":408},"25":{"loc":{"start":{"line":410,"column":20},"end":{"line":428,"column":21}},"type":"if","locations":[{"start":{"line":410,"column":20},"end":{"line":428,"column":21}},{"start":{"line":410,"column":20},"end":{"line":428,"column":21}}],"line":410},"26":{"loc":{"start":{"line":414,"column":28},"end":{"line":420,"column":29}},"type":"if","locations":[{"start":{"line":414,"column":28},"end":{"line":420,"column":29}},{"start":{"line":414,"column":28},"end":{"line":420,"column":29}}],"line":414},"27":{"loc":{"start":{"line":414,"column":32},"end":{"line":417,"column":51}},"type":"binary-expr","locations":[{"start":{"line":414,"column":33},"end":{"line":414,"column":84}},{"start":{"line":415,"column":33},"end":{"line":415,"column":61}},{"start":{"line":416,"column":33},"end":{"line":416,"column":87}},{"start":{"line":417,"column":36},"end":{"line":417,"column":50}}],"line":414},"28":{"loc":{"start":{"line":422,"column":24},"end":{"line":423,"column":59}},"type":"if","locations":[{"start":{"line":422,"column":24},"end":{"line":423,"column":59}},{"start":{"line":422,"column":24},"end":{"line":423,"column":59}}],"line":422},"29":{"loc":{"start":{"line":431,"column":12},"end":{"line":434,"column":47}},"type":"if","locations":[{"start":{"line":431,"column":12},"end":{"line":434,"column":47}},{"start":{"line":431,"column":12},"end":{"line":434,"column":47}}],"line":431},"30":{"loc":{"start":{"line":439,"column":25},"end":{"line":439,"column":39}},"type":"default-arg","locations":[{"start":{"line":439,"column":35},"end":{"line":439,"column":39}}],"line":439},"31":{"loc":{"start":{"line":446,"column":12},"end":{"line":475,"column":13}},"type":"if","locations":[{"start":{"line":446,"column":12},"end":{"line":475,"column":13}},{"start":{"line":446,"column":12},"end":{"line":475,"column":13}}],"line":446},"32":{"loc":{"start":{"line":451,"column":20},"end":{"line":473,"column":21}},"type":"if","locations":[{"start":{"line":451,"column":20},"end":{"line":473,"column":21}},{"start":{"line":451,"column":20},"end":{"line":473,"column":21}}],"line":451},"33":{"loc":{"start":{"line":455,"column":28},"end":{"line":461,"column":29}},"type":"if","locations":[{"start":{"line":455,"column":28},"end":{"line":461,"column":29}},{"start":{"line":455,"column":28},"end":{"line":461,"column":29}}],"line":455},"34":{"loc":{"start":{"line":455,"column":32},"end":{"line":458,"column":51}},"type":"binary-expr","locations":[{"start":{"line":455,"column":33},"end":{"line":455,"column":84}},{"start":{"line":456,"column":33},"end":{"line":456,"column":61}},{"start":{"line":457,"column":33},"end":{"line":457,"column":87}},{"start":{"line":458,"column":36},"end":{"line":458,"column":50}}],"line":455},"35":{"loc":{"start":{"line":463,"column":24},"end":{"line":466,"column":25}},"type":"if","locations":[{"start":{"line":463,"column":24},"end":{"line":466,"column":25}},{"start":{"line":463,"column":24},"end":{"line":466,"column":25}}],"line":463},"36":{"loc":{"start":{"line":469,"column":24},"end":{"line":472,"column":25}},"type":"if","locations":[{"start":{"line":469,"column":24},"end":{"line":472,"column":25}},{"start":{"line":469,"column":24},"end":{"line":472,"column":25}}],"line":469},"37":{"loc":{"start":{"line":476,"column":12},"end":{"line":479,"column":47}},"type":"if","locations":[{"start":{"line":476,"column":12},"end":{"line":479,"column":47}},{"start":{"line":476,"column":12},"end":{"line":479,"column":47}}],"line":476},"38":{"loc":{"start":{"line":485,"column":8},"end":{"line":486,"column":125}},"type":"if","locations":[{"start":{"line":485,"column":8},"end":{"line":486,"column":125}},{"start":{"line":485,"column":8},"end":{"line":486,"column":125}}],"line":485},"39":{"loc":{"start":{"line":492,"column":12},"end":{"line":493,"column":64}},"type":"if","locations":[{"start":{"line":492,"column":12},"end":{"line":493,"column":64}},{"start":{"line":492,"column":12},"end":{"line":493,"column":64}}],"line":492},"40":{"loc":{"start":{"line":494,"column":12},"end":{"line":497,"column":47}},"type":"if","locations":[{"start":{"line":494,"column":12},"end":{"line":497,"column":47}},{"start":{"line":494,"column":12},"end":{"line":497,"column":47}}],"line":494},"41":{"loc":{"start":{"line":503,"column":8},"end":{"line":504,"column":125}},"type":"if","locations":[{"start":{"line":503,"column":8},"end":{"line":504,"column":125}},{"start":{"line":503,"column":8},"end":{"line":504,"column":125}}],"line":503},"42":{"loc":{"start":{"line":510,"column":12},"end":{"line":511,"column":68}},"type":"if","locations":[{"start":{"line":510,"column":12},"end":{"line":511,"column":68}},{"start":{"line":510,"column":12},"end":{"line":511,"column":68}}],"line":510},"43":{"loc":{"start":{"line":512,"column":12},"end":{"line":515,"column":47}},"type":"if","locations":[{"start":{"line":512,"column":12},"end":{"line":515,"column":47}},{"start":{"line":512,"column":12},"end":{"line":515,"column":47}}],"line":512},"44":{"loc":{"start":{"line":520,"column":29},"end":{"line":520,"column":43}},"type":"default-arg","locations":[{"start":{"line":520,"column":39},"end":{"line":520,"column":43}}],"line":520},"45":{"loc":{"start":{"line":527,"column":12},"end":{"line":537,"column":13}},"type":"if","locations":[{"start":{"line":527,"column":12},"end":{"line":537,"column":13}},{"start":{"line":527,"column":12},"end":{"line":537,"column":13}}],"line":527},"46":{"loc":{"start":{"line":531,"column":20},"end":{"line":534,"column":21}},"type":"if","locations":[{"start":{"line":531,"column":20},"end":{"line":534,"column":21}},{"start":{"line":531,"column":20},"end":{"line":534,"column":21}}],"line":531},"47":{"loc":{"start":{"line":538,"column":12},"end":{"line":541,"column":47}},"type":"if","locations":[{"start":{"line":538,"column":12},"end":{"line":541,"column":47}},{"start":{"line":538,"column":12},"end":{"line":541,"column":47}}],"line":538},"48":{"loc":{"start":{"line":546,"column":25},"end":{"line":546,"column":39}},"type":"default-arg","locations":[{"start":{"line":546,"column":35},"end":{"line":546,"column":39}}],"line":546},"49":{"loc":{"start":{"line":553,"column":12},"end":{"line":563,"column":13}},"type":"if","locations":[{"start":{"line":553,"column":12},"end":{"line":563,"column":13}},{"start":{"line":553,"column":12},"end":{"line":563,"column":13}}],"line":553},"50":{"loc":{"start":{"line":557,"column":20},"end":{"line":560,"column":21}},"type":"if","locations":[{"start":{"line":557,"column":20},"end":{"line":560,"column":21}},{"start":{"line":557,"column":20},"end":{"line":560,"column":21}}],"line":557},"51":{"loc":{"start":{"line":564,"column":12},"end":{"line":567,"column":47}},"type":"if","locations":[{"start":{"line":564,"column":12},"end":{"line":567,"column":47}},{"start":{"line":564,"column":12},"end":{"line":567,"column":47}}],"line":564},"52":{"loc":{"start":{"line":572,"column":22},"end":{"line":572,"column":36}},"type":"default-arg","locations":[{"start":{"line":572,"column":32},"end":{"line":572,"column":36}}],"line":572},"53":{"loc":{"start":{"line":576,"column":25},"end":{"line":576,"column":39}},"type":"default-arg","locations":[{"start":{"line":576,"column":35},"end":{"line":576,"column":39}}],"line":576},"54":{"loc":{"start":{"line":580,"column":37},"end":{"line":580,"column":51}},"type":"default-arg","locations":[{"start":{"line":580,"column":47},"end":{"line":580,"column":51}}],"line":580},"55":{"loc":{"start":{"line":587,"column":12},"end":{"line":601,"column":13}},"type":"if","locations":[{"start":{"line":587,"column":12},"end":{"line":601,"column":13}},{"start":{"line":587,"column":12},"end":{"line":601,"column":13}}],"line":587},"56":{"loc":{"start":{"line":607,"column":40},"end":{"line":607,"column":54}},"type":"default-arg","locations":[{"start":{"line":607,"column":50},"end":{"line":607,"column":54}}],"line":607},"57":{"loc":{"start":{"line":614,"column":12},"end":{"line":628,"column":13}},"type":"if","locations":[{"start":{"line":614,"column":12},"end":{"line":628,"column":13}},{"start":{"line":614,"column":12},"end":{"line":628,"column":13}}],"line":614},"58":{"loc":{"start":{"line":634,"column":29},"end":{"line":634,"column":43}},"type":"default-arg","locations":[{"start":{"line":634,"column":39},"end":{"line":634,"column":43}}],"line":634},"59":{"loc":{"start":{"line":641,"column":12},"end":{"line":645,"column":13}},"type":"if","locations":[{"start":{"line":641,"column":12},"end":{"line":645,"column":13}},{"start":{"line":641,"column":12},"end":{"line":645,"column":13}}],"line":641},"60":{"loc":{"start":{"line":643,"column":20},"end":{"line":644,"column":55}},"type":"if","locations":[{"start":{"line":643,"column":20},"end":{"line":644,"column":55}},{"start":{"line":643,"column":20},"end":{"line":644,"column":55}}],"line":643},"61":{"loc":{"start":{"line":646,"column":12},"end":{"line":649,"column":47}},"type":"if","locations":[{"start":{"line":646,"column":12},"end":{"line":649,"column":47}},{"start":{"line":646,"column":12},"end":{"line":649,"column":47}}],"line":646},"62":{"loc":{"start":{"line":654,"column":44},"end":{"line":654,"column":58}},"type":"default-arg","locations":[{"start":{"line":654,"column":54},"end":{"line":654,"column":58}}],"line":654},"63":{"loc":{"start":{"line":661,"column":12},"end":{"line":675,"column":13}},"type":"if","locations":[{"start":{"line":661,"column":12},"end":{"line":675,"column":13}},{"start":{"line":661,"column":12},"end":{"line":675,"column":13}}],"line":661},"64":{"loc":{"start":{"line":689,"column":12},"end":{"line":693,"column":13}},"type":"if","locations":[{"start":{"line":689,"column":12},"end":{"line":693,"column":13}},{"start":{"line":689,"column":12},"end":{"line":693,"column":13}}],"line":689},"65":{"loc":{"start":{"line":691,"column":20},"end":{"line":692,"column":55}},"type":"if","locations":[{"start":{"line":691,"column":20},"end":{"line":692,"column":55}},{"start":{"line":691,"column":20},"end":{"line":692,"column":55}}],"line":691},"66":{"loc":{"start":{"line":694,"column":12},"end":{"line":697,"column":47}},"type":"if","locations":[{"start":{"line":694,"column":12},"end":{"line":697,"column":47}},{"start":{"line":694,"column":12},"end":{"line":697,"column":47}}],"line":694},"67":{"loc":{"start":{"line":708,"column":12},"end":{"line":722,"column":13}},"type":"if","locations":[{"start":{"line":708,"column":12},"end":{"line":722,"column":13}},{"start":{"line":708,"column":12},"end":{"line":722,"column":13}}],"line":708},"68":{"loc":{"start":{"line":728,"column":23},"end":{"line":728,"column":37}},"type":"default-arg","locations":[{"start":{"line":728,"column":33},"end":{"line":728,"column":37}}],"line":728},"69":{"loc":{"start":{"line":735,"column":12},"end":{"line":767,"column":13}},"type":"if","locations":[{"start":{"line":735,"column":12},"end":{"line":767,"column":13}},{"start":{"line":735,"column":12},"end":{"line":767,"column":13}}],"line":735},"70":{"loc":{"start":{"line":738,"column":20},"end":{"line":765,"column":21}},"type":"if","locations":[{"start":{"line":738,"column":20},"end":{"line":765,"column":21}},{"start":{"line":738,"column":20},"end":{"line":765,"column":21}}],"line":738},"71":{"loc":{"start":{"line":747,"column":28},"end":{"line":758,"column":88}},"type":"if","locations":[{"start":{"line":747,"column":28},"end":{"line":758,"column":88}},{"start":{"line":747,"column":28},"end":{"line":758,"column":88}}],"line":747},"72":{"loc":{"start":{"line":750,"column":32},"end":{"line":753,"column":69}},"type":"if","locations":[{"start":{"line":750,"column":32},"end":{"line":753,"column":69}},{"start":{"line":750,"column":32},"end":{"line":753,"column":69}}],"line":750},"73":{"loc":{"start":{"line":754,"column":32},"end":{"line":755,"column":60}},"type":"if","locations":[{"start":{"line":754,"column":32},"end":{"line":755,"column":60}},{"start":{"line":754,"column":32},"end":{"line":755,"column":60}}],"line":754},"74":{"loc":{"start":{"line":759,"column":28},"end":{"line":762,"column":55}},"type":"if","locations":[{"start":{"line":759,"column":28},"end":{"line":762,"column":55}},{"start":{"line":759,"column":28},"end":{"line":762,"column":55}}],"line":759},"75":{"loc":{"start":{"line":768,"column":12},"end":{"line":771,"column":47}},"type":"if","locations":[{"start":{"line":768,"column":12},"end":{"line":771,"column":47}},{"start":{"line":768,"column":12},"end":{"line":771,"column":47}}],"line":768},"76":{"loc":{"start":{"line":776,"column":33},"end":{"line":776,"column":47}},"type":"default-arg","locations":[{"start":{"line":776,"column":43},"end":{"line":776,"column":47}}],"line":776},"77":{"loc":{"start":{"line":783,"column":12},"end":{"line":815,"column":13}},"type":"if","locations":[{"start":{"line":783,"column":12},"end":{"line":815,"column":13}},{"start":{"line":783,"column":12},"end":{"line":815,"column":13}}],"line":783},"78":{"loc":{"start":{"line":786,"column":20},"end":{"line":813,"column":21}},"type":"if","locations":[{"start":{"line":786,"column":20},"end":{"line":813,"column":21}},{"start":{"line":786,"column":20},"end":{"line":813,"column":21}}],"line":786},"79":{"loc":{"start":{"line":795,"column":28},"end":{"line":806,"column":87}},"type":"if","locations":[{"start":{"line":795,"column":28},"end":{"line":806,"column":87}},{"start":{"line":795,"column":28},"end":{"line":806,"column":87}}],"line":795},"80":{"loc":{"start":{"line":798,"column":32},"end":{"line":801,"column":69}},"type":"if","locations":[{"start":{"line":798,"column":32},"end":{"line":801,"column":69}},{"start":{"line":798,"column":32},"end":{"line":801,"column":69}}],"line":798},"81":{"loc":{"start":{"line":802,"column":32},"end":{"line":803,"column":59}},"type":"if","locations":[{"start":{"line":802,"column":32},"end":{"line":803,"column":59}},{"start":{"line":802,"column":32},"end":{"line":803,"column":59}}],"line":802},"82":{"loc":{"start":{"line":807,"column":28},"end":{"line":810,"column":55}},"type":"if","locations":[{"start":{"line":807,"column":28},"end":{"line":810,"column":55}},{"start":{"line":807,"column":28},"end":{"line":810,"column":55}}],"line":807},"83":{"loc":{"start":{"line":816,"column":12},"end":{"line":819,"column":47}},"type":"if","locations":[{"start":{"line":816,"column":12},"end":{"line":819,"column":47}},{"start":{"line":816,"column":12},"end":{"line":819,"column":47}}],"line":816},"84":{"loc":{"start":{"line":824,"column":27},"end":{"line":824,"column":41}},"type":"default-arg","locations":[{"start":{"line":824,"column":37},"end":{"line":824,"column":41}}],"line":824},"85":{"loc":{"start":{"line":831,"column":12},"end":{"line":848,"column":13}},"type":"if","locations":[{"start":{"line":831,"column":12},"end":{"line":848,"column":13}},{"start":{"line":831,"column":12},"end":{"line":848,"column":13}}],"line":831},"86":{"loc":{"start":{"line":834,"column":20},"end":{"line":846,"column":21}},"type":"if","locations":[{"start":{"line":834,"column":20},"end":{"line":846,"column":21}},{"start":{"line":834,"column":20},"end":{"line":846,"column":21}}],"line":834},"87":{"loc":{"start":{"line":840,"column":28},"end":{"line":843,"column":55}},"type":"if","locations":[{"start":{"line":840,"column":28},"end":{"line":843,"column":55}},{"start":{"line":840,"column":28},"end":{"line":843,"column":55}}],"line":840},"88":{"loc":{"start":{"line":849,"column":12},"end":{"line":852,"column":47}},"type":"if","locations":[{"start":{"line":849,"column":12},"end":{"line":852,"column":47}},{"start":{"line":849,"column":12},"end":{"line":852,"column":47}}],"line":849},"89":{"loc":{"start":{"line":862,"column":35},"end":{"line":864,"column":29}},"type":"cond-expr","locations":[{"start":{"line":863,"column":18},"end":{"line":863,"column":51}},{"start":{"line":864,"column":18},"end":{"line":864,"column":29}}],"line":862},"90":{"loc":{"start":{"line":865,"column":12},"end":{"line":868,"column":47}},"type":"if","locations":[{"start":{"line":865,"column":12},"end":{"line":868,"column":47}},{"start":{"line":865,"column":12},"end":{"line":868,"column":47}}],"line":865},"91":{"loc":{"start":{"line":878,"column":35},"end":{"line":880,"column":29}},"type":"cond-expr","locations":[{"start":{"line":879,"column":18},"end":{"line":879,"column":73}},{"start":{"line":880,"column":18},"end":{"line":880,"column":29}}],"line":878},"92":{"loc":{"start":{"line":881,"column":12},"end":{"line":884,"column":47}},"type":"if","locations":[{"start":{"line":881,"column":12},"end":{"line":884,"column":47}},{"start":{"line":881,"column":12},"end":{"line":884,"column":47}}],"line":881},"93":{"loc":{"start":{"line":889,"column":29},"end":{"line":889,"column":43}},"type":"default-arg","locations":[{"start":{"line":889,"column":39},"end":{"line":889,"column":43}}],"line":889},"94":{"loc":{"start":{"line":896,"column":12},"end":{"line":904,"column":13}},"type":"if","locations":[{"start":{"line":896,"column":12},"end":{"line":904,"column":13}},{"start":{"line":896,"column":12},"end":{"line":904,"column":13}}],"line":896},"95":{"loc":{"start":{"line":900,"column":20},"end":{"line":901,"column":30}},"type":"if","locations":[{"start":{"line":900,"column":20},"end":{"line":901,"column":30}},{"start":{"line":900,"column":20},"end":{"line":901,"column":30}}],"line":900},"96":{"loc":{"start":{"line":905,"column":12},"end":{"line":908,"column":47}},"type":"if","locations":[{"start":{"line":905,"column":12},"end":{"line":908,"column":47}},{"start":{"line":905,"column":12},"end":{"line":908,"column":47}}],"line":905},"97":{"loc":{"start":{"line":913,"column":25},"end":{"line":913,"column":39}},"type":"default-arg","locations":[{"start":{"line":913,"column":35},"end":{"line":913,"column":39}}],"line":913},"98":{"loc":{"start":{"line":920,"column":12},"end":{"line":928,"column":13}},"type":"if","locations":[{"start":{"line":920,"column":12},"end":{"line":928,"column":13}},{"start":{"line":920,"column":12},"end":{"line":928,"column":13}}],"line":920},"99":{"loc":{"start":{"line":923,"column":20},"end":{"line":924,"column":30}},"type":"if","locations":[{"start":{"line":923,"column":20},"end":{"line":924,"column":30}},{"start":{"line":923,"column":20},"end":{"line":924,"column":30}}],"line":923},"100":{"loc":{"start":{"line":929,"column":12},"end":{"line":932,"column":47}},"type":"if","locations":[{"start":{"line":929,"column":12},"end":{"line":932,"column":47}},{"start":{"line":929,"column":12},"end":{"line":932,"column":47}}],"line":929},"101":{"loc":{"start":{"line":995,"column":12},"end":{"line":996,"column":115}},"type":"if","locations":[{"start":{"line":995,"column":12},"end":{"line":996,"column":115}},{"start":{"line":995,"column":12},"end":{"line":996,"column":115}}],"line":995},"102":{"loc":{"start":{"line":995,"column":16},"end":{"line":995,"column":48}},"type":"binary-expr","locations":[{"start":{"line":995,"column":16},"end":{"line":995,"column":25}},{"start":{"line":995,"column":29},"end":{"line":995,"column":48}}],"line":995},"103":{"loc":{"start":{"line":1047,"column":41},"end":{"line":1047,"column":55}},"type":"default-arg","locations":[{"start":{"line":1047,"column":51},"end":{"line":1047,"column":55}}],"line":1047},"104":{"loc":{"start":{"line":1053,"column":12},"end":{"line":1056,"column":52}},"type":"if","locations":[{"start":{"line":1053,"column":12},"end":{"line":1056,"column":52}},{"start":{"line":1053,"column":12},"end":{"line":1056,"column":52}}],"line":1053},"105":{"loc":{"start":{"line":1053,"column":16},"end":{"line":1053,"column":48}},"type":"binary-expr","locations":[{"start":{"line":1053,"column":16},"end":{"line":1053,"column":25}},{"start":{"line":1053,"column":29},"end":{"line":1053,"column":48}}],"line":1053},"106":{"loc":{"start":{"line":1108,"column":12},"end":{"line":1109,"column":28}},"type":"if","locations":[{"start":{"line":1108,"column":12},"end":{"line":1109,"column":28}},{"start":{"line":1108,"column":12},"end":{"line":1109,"column":28}}],"line":1108},"107":{"loc":{"start":{"line":1108,"column":16},"end":{"line":1108,"column":48}},"type":"binary-expr","locations":[{"start":{"line":1108,"column":16},"end":{"line":1108,"column":25}},{"start":{"line":1108,"column":29},"end":{"line":1108,"column":48}}],"line":1108},"108":{"loc":{"start":{"line":1160,"column":20},"end":{"line":1160,"column":34}},"type":"default-arg","locations":[{"start":{"line":1160,"column":30},"end":{"line":1160,"column":34}}],"line":1160},"109":{"loc":{"start":{"line":1166,"column":12},"end":{"line":1167,"column":28}},"type":"if","locations":[{"start":{"line":1166,"column":12},"end":{"line":1167,"column":28}},{"start":{"line":1166,"column":12},"end":{"line":1167,"column":28}}],"line":1166},"110":{"loc":{"start":{"line":1169,"column":16},"end":{"line":1170,"column":37}},"type":"if","locations":[{"start":{"line":1169,"column":16},"end":{"line":1170,"column":37}},{"start":{"line":1169,"column":16},"end":{"line":1170,"column":37}}],"line":1169},"111":{"loc":{"start":{"line":1221,"column":24},"end":{"line":1221,"column":38}},"type":"default-arg","locations":[{"start":{"line":1221,"column":34},"end":{"line":1221,"column":38}}],"line":1221},"112":{"loc":{"start":{"line":1227,"column":12},"end":{"line":1228,"column":28}},"type":"if","locations":[{"start":{"line":1227,"column":12},"end":{"line":1228,"column":28}},{"start":{"line":1227,"column":12},"end":{"line":1228,"column":28}}],"line":1227},"113":{"loc":{"start":{"line":1231,"column":16},"end":{"line":1232,"column":48}},"type":"if","locations":[{"start":{"line":1231,"column":16},"end":{"line":1232,"column":48}},{"start":{"line":1231,"column":16},"end":{"line":1232,"column":48}}],"line":1231},"114":{"loc":{"start":{"line":1299,"column":10},"end":{"line":1299,"column":26}},"type":"default-arg","locations":[{"start":{"line":1299,"column":22},"end":{"line":1299,"column":26}}],"line":1299},"115":{"loc":{"start":{"line":1305,"column":4},"end":{"line":1305,"column":18}},"type":"default-arg","locations":[{"start":{"line":1305,"column":14},"end":{"line":1305,"column":18}}],"line":1305},"116":{"loc":{"start":{"line":1306,"column":8},"end":{"line":1307,"column":48}},"type":"if","locations":[{"start":{"line":1306,"column":8},"end":{"line":1307,"column":48}},{"start":{"line":1306,"column":8},"end":{"line":1307,"column":48}}],"line":1306},"117":{"loc":{"start":{"line":1312,"column":12},"end":{"line":1313,"column":97}},"type":"if","locations":[{"start":{"line":1312,"column":12},"end":{"line":1313,"column":97}},{"start":{"line":1312,"column":12},"end":{"line":1313,"column":97}}],"line":1312},"118":{"loc":{"start":{"line":1312,"column":16},"end":{"line":1312,"column":52}},"type":"binary-expr","locations":[{"start":{"line":1312,"column":16},"end":{"line":1312,"column":33}},{"start":{"line":1312,"column":37},"end":{"line":1312,"column":52}}],"line":1312},"119":{"loc":{"start":{"line":1314,"column":12},"end":{"line":1319,"column":13}},"type":"if","locations":[{"start":{"line":1314,"column":12},"end":{"line":1319,"column":13}},{"start":{"line":1314,"column":12},"end":{"line":1319,"column":13}}],"line":1314},"120":{"loc":{"start":{"line":1316,"column":20},"end":{"line":1317,"column":41}},"type":"if","locations":[{"start":{"line":1316,"column":20},"end":{"line":1317,"column":41}},{"start":{"line":1316,"column":20},"end":{"line":1317,"column":41}}],"line":1316},"121":{"loc":{"start":{"line":1377,"column":16},"end":{"line":1377,"column":32}},"type":"default-arg","locations":[{"start":{"line":1377,"column":28},"end":{"line":1377,"column":32}}],"line":1377},"122":{"loc":{"start":{"line":1377,"column":34},"end":{"line":1377,"column":48}},"type":"default-arg","locations":[{"start":{"line":1377,"column":44},"end":{"line":1377,"column":48}}],"line":1377},"123":{"loc":{"start":{"line":1378,"column":8},"end":{"line":1379,"column":48}},"type":"if","locations":[{"start":{"line":1378,"column":8},"end":{"line":1379,"column":48}},{"start":{"line":1378,"column":8},"end":{"line":1379,"column":48}}],"line":1378},"124":{"loc":{"start":{"line":1384,"column":12},"end":{"line":1385,"column":28}},"type":"if","locations":[{"start":{"line":1384,"column":12},"end":{"line":1385,"column":28}},{"start":{"line":1384,"column":12},"end":{"line":1385,"column":28}}],"line":1384},"125":{"loc":{"start":{"line":1384,"column":16},"end":{"line":1384,"column":52}},"type":"binary-expr","locations":[{"start":{"line":1384,"column":16},"end":{"line":1384,"column":33}},{"start":{"line":1384,"column":37},"end":{"line":1384,"column":52}}],"line":1384},"126":{"loc":{"start":{"line":1386,"column":12},"end":{"line":1391,"column":13}},"type":"if","locations":[{"start":{"line":1386,"column":12},"end":{"line":1391,"column":13}},{"start":{"line":1386,"column":12},"end":{"line":1391,"column":13}}],"line":1386},"127":{"loc":{"start":{"line":1388,"column":20},"end":{"line":1389,"column":41}},"type":"if","locations":[{"start":{"line":1388,"column":20},"end":{"line":1389,"column":41}},{"start":{"line":1388,"column":20},"end":{"line":1389,"column":41}}],"line":1388},"128":{"loc":{"start":{"line":1432,"column":12},"end":{"line":1445,"column":13}},"type":"if","locations":[{"start":{"line":1432,"column":12},"end":{"line":1445,"column":13}},{"start":{"line":1432,"column":12},"end":{"line":1445,"column":13}}],"line":1432},"129":{"loc":{"start":{"line":1434,"column":20},"end":{"line":1443,"column":37}},"type":"if","locations":[{"start":{"line":1434,"column":20},"end":{"line":1443,"column":37}},{"start":{"line":1434,"column":20},"end":{"line":1443,"column":37}}],"line":1434},"130":{"loc":{"start":{"line":1436,"column":24},"end":{"line":1440,"column":41}},"type":"if","locations":[{"start":{"line":1436,"column":24},"end":{"line":1440,"column":41}},{"start":{"line":1436,"column":24},"end":{"line":1440,"column":41}}],"line":1436},"131":{"loc":{"start":{"line":1436,"column":28},"end":{"line":1439,"column":47}},"type":"binary-expr","locations":[{"start":{"line":1436,"column":29},"end":{"line":1436,"column":80}},{"start":{"line":1437,"column":29},"end":{"line":1437,"column":57}},{"start":{"line":1438,"column":29},"end":{"line":1438,"column":83}},{"start":{"line":1439,"column":32},"end":{"line":1439,"column":46}}],"line":1436},"132":{"loc":{"start":{"line":1442,"column":25},"end":{"line":1443,"column":37}},"type":"if","locations":[{"start":{"line":1442,"column":25},"end":{"line":1443,"column":37}},{"start":{"line":1442,"column":25},"end":{"line":1443,"column":37}}],"line":1442},"133":{"loc":{"start":{"line":1485,"column":28},"end":{"line":1485,"column":42}},"type":"default-arg","locations":[{"start":{"line":1485,"column":38},"end":{"line":1485,"column":42}}],"line":1485},"134":{"loc":{"start":{"line":1491,"column":12},"end":{"line":1495,"column":13}},"type":"if","locations":[{"start":{"line":1491,"column":12},"end":{"line":1495,"column":13}},{"start":{"line":1491,"column":12},"end":{"line":1495,"column":13}}],"line":1491},"135":{"loc":{"start":{"line":1493,"column":20},"end":{"line":1494,"column":37}},"type":"if","locations":[{"start":{"line":1493,"column":20},"end":{"line":1494,"column":37}},{"start":{"line":1493,"column":20},"end":{"line":1494,"column":37}}],"line":1493},"136":{"loc":{"start":{"line":1535,"column":27},"end":{"line":1535,"column":41}},"type":"default-arg","locations":[{"start":{"line":1535,"column":37},"end":{"line":1535,"column":41}}],"line":1535},"137":{"loc":{"start":{"line":1541,"column":12},"end":{"line":1546,"column":13}},"type":"if","locations":[{"start":{"line":1541,"column":12},"end":{"line":1546,"column":13}},{"start":{"line":1541,"column":12},"end":{"line":1546,"column":13}}],"line":1541},"138":{"loc":{"start":{"line":1544,"column":20},"end":{"line":1545,"column":41}},"type":"if","locations":[{"start":{"line":1544,"column":20},"end":{"line":1545,"column":41}},{"start":{"line":1544,"column":20},"end":{"line":1545,"column":41}}],"line":1544},"139":{"loc":{"start":{"line":1611,"column":25},"end":{"line":1611,"column":39}},"type":"default-arg","locations":[{"start":{"line":1611,"column":35},"end":{"line":1611,"column":39}}],"line":1611},"140":{"loc":{"start":{"line":1618,"column":12},"end":{"line":1638,"column":13}},"type":"if","locations":[{"start":{"line":1618,"column":12},"end":{"line":1638,"column":13}},{"start":{"line":1618,"column":12},"end":{"line":1638,"column":13}}],"line":1618},"141":{"loc":{"start":{"line":1621,"column":20},"end":{"line":1636,"column":89}},"type":"if","locations":[{"start":{"line":1621,"column":20},"end":{"line":1636,"column":89}},{"start":{"line":1621,"column":20},"end":{"line":1636,"column":89}}],"line":1621},"142":{"loc":{"start":{"line":1623,"column":24},"end":{"line":1624,"column":78}},"type":"if","locations":[{"start":{"line":1623,"column":24},"end":{"line":1624,"column":78}},{"start":{"line":1623,"column":24},"end":{"line":1624,"column":78}}],"line":1623},"143":{"loc":{"start":{"line":1626,"column":25},"end":{"line":1636,"column":89}},"type":"if","locations":[{"start":{"line":1626,"column":25},"end":{"line":1636,"column":89}},{"start":{"line":1626,"column":25},"end":{"line":1636,"column":89}}],"line":1626},"144":{"loc":{"start":{"line":1628,"column":25},"end":{"line":1636,"column":89}},"type":"if","locations":[{"start":{"line":1628,"column":25},"end":{"line":1636,"column":89}},{"start":{"line":1628,"column":25},"end":{"line":1636,"column":89}}],"line":1628},"145":{"loc":{"start":{"line":1630,"column":24},"end":{"line":1631,"column":77}},"type":"if","locations":[{"start":{"line":1630,"column":24},"end":{"line":1631,"column":77}},{"start":{"line":1630,"column":24},"end":{"line":1631,"column":77}}],"line":1630},"146":{"loc":{"start":{"line":1633,"column":25},"end":{"line":1636,"column":89}},"type":"if","locations":[{"start":{"line":1633,"column":25},"end":{"line":1636,"column":89}},{"start":{"line":1633,"column":25},"end":{"line":1636,"column":89}}],"line":1633},"147":{"loc":{"start":{"line":1702,"column":29},"end":{"line":1702,"column":50}},"type":"default-arg","locations":[{"start":{"line":1702,"column":46},"end":{"line":1702,"column":50}}],"line":1702},"148":{"loc":{"start":{"line":1702,"column":52},"end":{"line":1702,"column":77}},"type":"default-arg","locations":[{"start":{"line":1702,"column":73},"end":{"line":1702,"column":77}}],"line":1702},"149":{"loc":{"start":{"line":1702,"column":79},"end":{"line":1702,"column":107}},"type":"default-arg","locations":[{"start":{"line":1702,"column":103},"end":{"line":1702,"column":107}}],"line":1702},"150":{"loc":{"start":{"line":1704,"column":8},"end":{"line":1705,"column":72}},"type":"if","locations":[{"start":{"line":1704,"column":8},"end":{"line":1705,"column":72}},{"start":{"line":1704,"column":8},"end":{"line":1705,"column":72}}],"line":1704},"151":{"loc":{"start":{"line":1711,"column":12},"end":{"line":1719,"column":13}},"type":"if","locations":[{"start":{"line":1711,"column":12},"end":{"line":1719,"column":13}},{"start":{"line":1711,"column":12},"end":{"line":1719,"column":13}}],"line":1711},"152":{"loc":{"start":{"line":1714,"column":38},"end":{"line":1716,"column":35}},"type":"cond-expr","locations":[{"start":{"line":1715,"column":26},"end":{"line":1715,"column":57}},{"start":{"line":1716,"column":26},"end":{"line":1716,"column":35}}],"line":1714},"153":{"loc":{"start":{"line":1725,"column":44},"end":{"line":1725,"column":65}},"type":"default-arg","locations":[{"start":{"line":1725,"column":61},"end":{"line":1725,"column":65}}],"line":1725},"154":{"loc":{"start":{"line":1725,"column":67},"end":{"line":1725,"column":92}},"type":"default-arg","locations":[{"start":{"line":1725,"column":88},"end":{"line":1725,"column":92}}],"line":1725},"155":{"loc":{"start":{"line":1725,"column":94},"end":{"line":1725,"column":122}},"type":"default-arg","locations":[{"start":{"line":1725,"column":118},"end":{"line":1725,"column":122}}],"line":1725},"156":{"loc":{"start":{"line":1727,"column":8},"end":{"line":1728,"column":72}},"type":"if","locations":[{"start":{"line":1727,"column":8},"end":{"line":1728,"column":72}},{"start":{"line":1727,"column":8},"end":{"line":1728,"column":72}}],"line":1727},"157":{"loc":{"start":{"line":1743,"column":40},"end":{"line":1743,"column":54}},"type":"default-arg","locations":[{"start":{"line":1743,"column":50},"end":{"line":1743,"column":54}}],"line":1743},"158":{"loc":{"start":{"line":1810,"column":33},"end":{"line":1810,"column":47}},"type":"default-arg","locations":[{"start":{"line":1810,"column":43},"end":{"line":1810,"column":47}}],"line":1810},"159":{"loc":{"start":{"line":1817,"column":12},"end":{"line":1822,"column":13}},"type":"if","locations":[{"start":{"line":1817,"column":12},"end":{"line":1822,"column":13}},{"start":{"line":1817,"column":12},"end":{"line":1822,"column":13}}],"line":1817},"160":{"loc":{"start":{"line":1828,"column":48},"end":{"line":1828,"column":62}},"type":"default-arg","locations":[{"start":{"line":1828,"column":58},"end":{"line":1828,"column":62}}],"line":1828},"161":{"loc":{"start":{"line":1843,"column":18},"end":{"line":1843,"column":34}},"type":"default-arg","locations":[{"start":{"line":1843,"column":30},"end":{"line":1843,"column":34}}],"line":1843},"162":{"loc":{"start":{"line":1843,"column":36},"end":{"line":1843,"column":50}},"type":"default-arg","locations":[{"start":{"line":1843,"column":46},"end":{"line":1843,"column":50}}],"line":1843},"163":{"loc":{"start":{"line":1844,"column":8},"end":{"line":1845,"column":48}},"type":"if","locations":[{"start":{"line":1844,"column":8},"end":{"line":1845,"column":48}},{"start":{"line":1844,"column":8},"end":{"line":1845,"column":48}}],"line":1844},"164":{"loc":{"start":{"line":1850,"column":12},"end":{"line":1851,"column":121}},"type":"if","locations":[{"start":{"line":1850,"column":12},"end":{"line":1851,"column":121}},{"start":{"line":1850,"column":12},"end":{"line":1851,"column":121}}],"line":1850},"165":{"loc":{"start":{"line":1853,"column":12},"end":{"line":1860,"column":13}},"type":"if","locations":[{"start":{"line":1853,"column":12},"end":{"line":1860,"column":13}},{"start":{"line":1853,"column":12},"end":{"line":1860,"column":13}}],"line":1853},"166":{"loc":{"start":{"line":1861,"column":12},"end":{"line":1867,"column":13}},"type":"if","locations":[{"start":{"line":1861,"column":12},"end":{"line":1867,"column":13}},{"start":{"line":1861,"column":12},"end":{"line":1867,"column":13}}],"line":1861},"167":{"loc":{"start":{"line":1864,"column":20},"end":{"line":1865,"column":99}},"type":"if","locations":[{"start":{"line":1864,"column":20},"end":{"line":1865,"column":99}},{"start":{"line":1864,"column":20},"end":{"line":1865,"column":99}}],"line":1864},"168":{"loc":{"start":{"line":1941,"column":30},"end":{"line":1941,"column":44}},"type":"default-arg","locations":[{"start":{"line":1941,"column":40},"end":{"line":1941,"column":44}}],"line":1941},"169":{"loc":{"start":{"line":1948,"column":12},"end":{"line":1953,"column":13}},"type":"if","locations":[{"start":{"line":1948,"column":12},"end":{"line":1953,"column":13}},{"start":{"line":1948,"column":12},"end":{"line":1953,"column":13}}],"line":1948},"170":{"loc":{"start":{"line":1959,"column":38},"end":{"line":1959,"column":52}},"type":"default-arg","locations":[{"start":{"line":1959,"column":48},"end":{"line":1959,"column":52}}],"line":1959},"171":{"loc":{"start":{"line":1963,"column":45},"end":{"line":1963,"column":59}},"type":"default-arg","locations":[{"start":{"line":1963,"column":55},"end":{"line":1963,"column":59}}],"line":1963},"172":{"loc":{"start":{"line":1970,"column":12},"end":{"line":1984,"column":13}},"type":"if","locations":[{"start":{"line":1970,"column":12},"end":{"line":1984,"column":13}},{"start":{"line":1970,"column":12},"end":{"line":1984,"column":13}}],"line":1970},"173":{"loc":{"start":{"line":2034,"column":25},"end":{"line":2034,"column":46}},"type":"default-arg","locations":[{"start":{"line":2034,"column":42},"end":{"line":2034,"column":46}}],"line":2034},"174":{"loc":{"start":{"line":2034,"column":48},"end":{"line":2034,"column":73}},"type":"default-arg","locations":[{"start":{"line":2034,"column":69},"end":{"line":2034,"column":73}}],"line":2034},"175":{"loc":{"start":{"line":2034,"column":75},"end":{"line":2034,"column":103}},"type":"default-arg","locations":[{"start":{"line":2034,"column":99},"end":{"line":2034,"column":103}}],"line":2034},"176":{"loc":{"start":{"line":2036,"column":8},"end":{"line":2037,"column":72}},"type":"if","locations":[{"start":{"line":2036,"column":8},"end":{"line":2037,"column":72}},{"start":{"line":2036,"column":8},"end":{"line":2037,"column":72}}],"line":2036},"177":{"loc":{"start":{"line":2043,"column":12},"end":{"line":2053,"column":13}},"type":"if","locations":[{"start":{"line":2043,"column":12},"end":{"line":2053,"column":13}},{"start":{"line":2043,"column":12},"end":{"line":2053,"column":13}}],"line":2043},"178":{"loc":{"start":{"line":2046,"column":38},"end":{"line":2048,"column":35}},"type":"cond-expr","locations":[{"start":{"line":2047,"column":26},"end":{"line":2047,"column":57}},{"start":{"line":2048,"column":26},"end":{"line":2048,"column":35}}],"line":2046},"179":{"loc":{"start":{"line":2049,"column":20},"end":{"line":2050,"column":63}},"type":"if","locations":[{"start":{"line":2049,"column":20},"end":{"line":2050,"column":63}},{"start":{"line":2049,"column":20},"end":{"line":2050,"column":63}}],"line":2049},"180":{"loc":{"start":{"line":2059,"column":40},"end":{"line":2059,"column":61}},"type":"default-arg","locations":[{"start":{"line":2059,"column":57},"end":{"line":2059,"column":61}}],"line":2059},"181":{"loc":{"start":{"line":2059,"column":63},"end":{"line":2059,"column":88}},"type":"default-arg","locations":[{"start":{"line":2059,"column":84},"end":{"line":2059,"column":88}}],"line":2059},"182":{"loc":{"start":{"line":2059,"column":90},"end":{"line":2059,"column":118}},"type":"default-arg","locations":[{"start":{"line":2059,"column":114},"end":{"line":2059,"column":118}}],"line":2059},"183":{"loc":{"start":{"line":2061,"column":8},"end":{"line":2062,"column":72}},"type":"if","locations":[{"start":{"line":2061,"column":8},"end":{"line":2062,"column":72}},{"start":{"line":2061,"column":8},"end":{"line":2062,"column":72}}],"line":2061},"184":{"loc":{"start":{"line":2067,"column":12},"end":{"line":2077,"column":13}},"type":"if","locations":[{"start":{"line":2067,"column":12},"end":{"line":2077,"column":13}},{"start":{"line":2067,"column":12},"end":{"line":2077,"column":13}}],"line":2067},"185":{"loc":{"start":{"line":2070,"column":38},"end":{"line":2072,"column":35}},"type":"cond-expr","locations":[{"start":{"line":2071,"column":26},"end":{"line":2071,"column":57}},{"start":{"line":2072,"column":26},"end":{"line":2072,"column":35}}],"line":2070},"186":{"loc":{"start":{"line":2073,"column":20},"end":{"line":2074,"column":62}},"type":"if","locations":[{"start":{"line":2073,"column":20},"end":{"line":2074,"column":62}},{"start":{"line":2073,"column":20},"end":{"line":2074,"column":62}}],"line":2073},"187":{"loc":{"start":{"line":2083,"column":34},"end":{"line":2083,"column":48}},"type":"default-arg","locations":[{"start":{"line":2083,"column":44},"end":{"line":2083,"column":48}}],"line":2083},"188":{"loc":{"start":{"line":2087,"column":41},"end":{"line":2087,"column":55}},"type":"default-arg","locations":[{"start":{"line":2087,"column":51},"end":{"line":2087,"column":55}}],"line":2087},"189":{"loc":{"start":{"line":2142,"column":26},"end":{"line":2142,"column":40}},"type":"default-arg","locations":[{"start":{"line":2142,"column":36},"end":{"line":2142,"column":40}}],"line":2142},"190":{"loc":{"start":{"line":2149,"column":12},"end":{"line":2152,"column":13}},"type":"if","locations":[{"start":{"line":2149,"column":12},"end":{"line":2152,"column":13}},{"start":{"line":2149,"column":12},"end":{"line":2152,"column":13}}],"line":2149},"191":{"loc":{"start":{"line":2158,"column":41},"end":{"line":2158,"column":55}},"type":"default-arg","locations":[{"start":{"line":2158,"column":51},"end":{"line":2158,"column":55}}],"line":2158},"192":{"loc":{"start":{"line":2165,"column":12},"end":{"line":2179,"column":13}},"type":"if","locations":[{"start":{"line":2165,"column":12},"end":{"line":2179,"column":13}},{"start":{"line":2165,"column":12},"end":{"line":2179,"column":13}}],"line":2165},"193":{"loc":{"start":{"line":2252,"column":33},"end":{"line":2252,"column":47}},"type":"default-arg","locations":[{"start":{"line":2252,"column":43},"end":{"line":2252,"column":47}}],"line":2252},"194":{"loc":{"start":{"line":2259,"column":12},"end":{"line":2265,"column":13}},"type":"if","locations":[{"start":{"line":2259,"column":12},"end":{"line":2265,"column":13}},{"start":{"line":2259,"column":12},"end":{"line":2265,"column":13}}],"line":2259},"195":{"loc":{"start":{"line":2262,"column":20},"end":{"line":2263,"column":60}},"type":"if","locations":[{"start":{"line":2262,"column":20},"end":{"line":2263,"column":60}},{"start":{"line":2262,"column":20},"end":{"line":2263,"column":60}}],"line":2262},"196":{"loc":{"start":{"line":2262,"column":24},"end":{"line":2262,"column":77}},"type":"binary-expr","locations":[{"start":{"line":2262,"column":24},"end":{"line":2262,"column":46}},{"start":{"line":2262,"column":50},"end":{"line":2262,"column":77}}],"line":2262},"197":{"loc":{"start":{"line":2271,"column":48},"end":{"line":2271,"column":62}},"type":"default-arg","locations":[{"start":{"line":2271,"column":58},"end":{"line":2271,"column":62}}],"line":2271},"198":{"loc":{"start":{"line":2278,"column":12},"end":{"line":2292,"column":13}},"type":"if","locations":[{"start":{"line":2278,"column":12},"end":{"line":2292,"column":13}},{"start":{"line":2278,"column":12},"end":{"line":2292,"column":13}}],"line":2278},"199":{"loc":{"start":{"line":2304,"column":12},"end":{"line":2310,"column":13}},"type":"if","locations":[{"start":{"line":2304,"column":12},"end":{"line":2310,"column":13}},{"start":{"line":2304,"column":12},"end":{"line":2310,"column":13}}],"line":2304},"200":{"loc":{"start":{"line":2307,"column":20},"end":{"line":2308,"column":52}},"type":"if","locations":[{"start":{"line":2307,"column":20},"end":{"line":2308,"column":52}},{"start":{"line":2307,"column":20},"end":{"line":2308,"column":52}}],"line":2307},"201":{"loc":{"start":{"line":2317,"column":9},"end":{"line":2317,"column":25}},"type":"default-arg","locations":[{"start":{"line":2317,"column":21},"end":{"line":2317,"column":25}}],"line":2317},"202":{"loc":{"start":{"line":2317,"column":27},"end":{"line":2317,"column":38}},"type":"default-arg","locations":[{"start":{"line":2317,"column":36},"end":{"line":2317,"column":38}}],"line":2317},"203":{"loc":{"start":{"line":2317,"column":40},"end":{"line":2317,"column":52}},"type":"default-arg","locations":[{"start":{"line":2317,"column":50},"end":{"line":2317,"column":52}}],"line":2317},"204":{"loc":{"start":{"line":2317,"column":54},"end":{"line":2317,"column":64}},"type":"default-arg","locations":[{"start":{"line":2317,"column":62},"end":{"line":2317,"column":64}}],"line":2317},"205":{"loc":{"start":{"line":2317,"column":66},"end":{"line":2317,"column":83}},"type":"default-arg","locations":[{"start":{"line":2317,"column":78},"end":{"line":2317,"column":83}}],"line":2317},"206":{"loc":{"start":{"line":2317,"column":85},"end":{"line":2317,"column":101}},"type":"default-arg","locations":[{"start":{"line":2317,"column":97},"end":{"line":2317,"column":101}}],"line":2317},"207":{"loc":{"start":{"line":2317,"column":103},"end":{"line":2317,"column":117}},"type":"default-arg","locations":[{"start":{"line":2317,"column":113},"end":{"line":2317,"column":117}}],"line":2317},"208":{"loc":{"start":{"line":2318,"column":8},"end":{"line":2319,"column":48}},"type":"if","locations":[{"start":{"line":2318,"column":8},"end":{"line":2319,"column":48}},{"start":{"line":2318,"column":8},"end":{"line":2319,"column":48}}],"line":2318},"209":{"loc":{"start":{"line":2325,"column":12},"end":{"line":2338,"column":13}},"type":"if","locations":[{"start":{"line":2325,"column":12},"end":{"line":2338,"column":13}},{"start":{"line":2325,"column":12},"end":{"line":2338,"column":13}}],"line":2325},"210":{"loc":{"start":{"line":2329,"column":20},"end":{"line":2332,"column":21}},"type":"if","locations":[{"start":{"line":2329,"column":20},"end":{"line":2332,"column":21}},{"start":{"line":2329,"column":20},"end":{"line":2332,"column":21}}],"line":2329},"211":{"loc":{"start":{"line":2333,"column":36},"end":{"line":2333,"column":86}},"type":"cond-expr","locations":[{"start":{"line":2333,"column":48},"end":{"line":2333,"column":74}},{"start":{"line":2333,"column":77},"end":{"line":2333,"column":86}}],"line":2333},"212":{"loc":{"start":{"line":2335,"column":20},"end":{"line":2336,"column":50}},"type":"if","locations":[{"start":{"line":2335,"column":20},"end":{"line":2336,"column":50}},{"start":{"line":2335,"column":20},"end":{"line":2336,"column":50}}],"line":2335},"213":{"loc":{"start":{"line":2335,"column":24},"end":{"line":2335,"column":71}},"type":"binary-expr","locations":[{"start":{"line":2335,"column":24},"end":{"line":2335,"column":46}},{"start":{"line":2335,"column":50},"end":{"line":2335,"column":71}}],"line":2335},"214":{"loc":{"start":{"line":2344,"column":9},"end":{"line":2344,"column":25}},"type":"default-arg","locations":[{"start":{"line":2344,"column":21},"end":{"line":2344,"column":25}}],"line":2344},"215":{"loc":{"start":{"line":2344,"column":27},"end":{"line":2344,"column":41}},"type":"default-arg","locations":[{"start":{"line":2344,"column":37},"end":{"line":2344,"column":41}}],"line":2344},"216":{"loc":{"start":{"line":2345,"column":8},"end":{"line":2346,"column":48}},"type":"if","locations":[{"start":{"line":2345,"column":8},"end":{"line":2346,"column":48}},{"start":{"line":2345,"column":8},"end":{"line":2346,"column":48}}],"line":2345},"217":{"loc":{"start":{"line":2351,"column":12},"end":{"line":2352,"column":97}},"type":"if","locations":[{"start":{"line":2351,"column":12},"end":{"line":2352,"column":97}},{"start":{"line":2351,"column":12},"end":{"line":2352,"column":97}}],"line":2351},"218":{"loc":{"start":{"line":2351,"column":16},"end":{"line":2351,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2351,"column":16},"end":{"line":2351,"column":33}},{"start":{"line":2351,"column":37},"end":{"line":2351,"column":52}}],"line":2351},"219":{"loc":{"start":{"line":2354,"column":12},"end":{"line":2359,"column":13}},"type":"if","locations":[{"start":{"line":2354,"column":12},"end":{"line":2359,"column":13}},{"start":{"line":2354,"column":12},"end":{"line":2359,"column":13}}],"line":2354},"220":{"loc":{"start":{"line":2356,"column":20},"end":{"line":2357,"column":52}},"type":"if","locations":[{"start":{"line":2356,"column":20},"end":{"line":2357,"column":52}},{"start":{"line":2356,"column":20},"end":{"line":2357,"column":52}}],"line":2356},"221":{"loc":{"start":{"line":2369,"column":12},"end":{"line":2384,"column":13}},"type":"if","locations":[{"start":{"line":2369,"column":12},"end":{"line":2384,"column":13}},{"start":{"line":2369,"column":12},"end":{"line":2384,"column":13}}],"line":2369},"222":{"loc":{"start":{"line":2373,"column":20},"end":{"line":2382,"column":41}},"type":"if","locations":[{"start":{"line":2373,"column":20},"end":{"line":2382,"column":41}},{"start":{"line":2373,"column":20},"end":{"line":2382,"column":41}}],"line":2373},"223":{"loc":{"start":{"line":2375,"column":24},"end":{"line":2379,"column":45}},"type":"if","locations":[{"start":{"line":2375,"column":24},"end":{"line":2379,"column":45}},{"start":{"line":2375,"column":24},"end":{"line":2379,"column":45}}],"line":2375},"224":{"loc":{"start":{"line":2375,"column":28},"end":{"line":2378,"column":47}},"type":"binary-expr","locations":[{"start":{"line":2375,"column":29},"end":{"line":2375,"column":80}},{"start":{"line":2376,"column":29},"end":{"line":2376,"column":57}},{"start":{"line":2377,"column":29},"end":{"line":2377,"column":83}},{"start":{"line":2378,"column":32},"end":{"line":2378,"column":46}}],"line":2375},"225":{"loc":{"start":{"line":2381,"column":25},"end":{"line":2382,"column":41}},"type":"if","locations":[{"start":{"line":2381,"column":25},"end":{"line":2382,"column":41}},{"start":{"line":2381,"column":25},"end":{"line":2382,"column":41}}],"line":2381},"226":{"loc":{"start":{"line":2389,"column":15},"end":{"line":2389,"column":31}},"type":"default-arg","locations":[{"start":{"line":2389,"column":27},"end":{"line":2389,"column":31}}],"line":2389},"227":{"loc":{"start":{"line":2389,"column":33},"end":{"line":2389,"column":47}},"type":"default-arg","locations":[{"start":{"line":2389,"column":43},"end":{"line":2389,"column":47}}],"line":2389},"228":{"loc":{"start":{"line":2390,"column":8},"end":{"line":2391,"column":48}},"type":"if","locations":[{"start":{"line":2390,"column":8},"end":{"line":2391,"column":48}},{"start":{"line":2390,"column":8},"end":{"line":2391,"column":48}}],"line":2390},"229":{"loc":{"start":{"line":2396,"column":12},"end":{"line":2412,"column":13}},"type":"if","locations":[{"start":{"line":2396,"column":12},"end":{"line":2412,"column":13}},{"start":{"line":2396,"column":12},"end":{"line":2412,"column":13}}],"line":2396},"230":{"loc":{"start":{"line":2399,"column":16},"end":{"line":2400,"column":32}},"type":"if","locations":[{"start":{"line":2399,"column":16},"end":{"line":2400,"column":32}},{"start":{"line":2399,"column":16},"end":{"line":2400,"column":32}}],"line":2399},"231":{"loc":{"start":{"line":2401,"column":16},"end":{"line":2411,"column":31}},"type":"if","locations":[{"start":{"line":2401,"column":16},"end":{"line":2411,"column":31}},{"start":{"line":2401,"column":16},"end":{"line":2411,"column":31}}],"line":2401},"232":{"loc":{"start":{"line":2403,"column":24},"end":{"line":2406,"column":39}},"type":"if","locations":[{"start":{"line":2403,"column":24},"end":{"line":2406,"column":39}},{"start":{"line":2403,"column":24},"end":{"line":2406,"column":39}}],"line":2403},"233":{"loc":{"start":{"line":2404,"column":35},"end":{"line":2406,"column":38}},"type":"cond-expr","locations":[{"start":{"line":2405,"column":34},"end":{"line":2405,"column":54}},{"start":{"line":2406,"column":34},"end":{"line":2406,"column":38}}],"line":2404},"234":{"loc":{"start":{"line":2409,"column":27},"end":{"line":2411,"column":30}},"type":"cond-expr","locations":[{"start":{"line":2410,"column":26},"end":{"line":2410,"column":47}},{"start":{"line":2411,"column":26},"end":{"line":2411,"column":30}}],"line":2409},"235":{"loc":{"start":{"line":2423,"column":12},"end":{"line":2434,"column":13}},"type":"if","locations":[{"start":{"line":2423,"column":12},"end":{"line":2434,"column":13}},{"start":{"line":2423,"column":12},"end":{"line":2434,"column":13}}],"line":2423},"236":{"loc":{"start":{"line":2425,"column":16},"end":{"line":2428,"column":48}},"type":"if","locations":[{"start":{"line":2425,"column":16},"end":{"line":2428,"column":48}},{"start":{"line":2425,"column":16},"end":{"line":2428,"column":48}}],"line":2425},"237":{"loc":{"start":{"line":2431,"column":20},"end":{"line":2432,"column":55}},"type":"if","locations":[{"start":{"line":2431,"column":20},"end":{"line":2432,"column":55}},{"start":{"line":2431,"column":20},"end":{"line":2432,"column":55}}],"line":2431},"238":{"loc":{"start":{"line":2435,"column":12},"end":{"line":2438,"column":47}},"type":"if","locations":[{"start":{"line":2435,"column":12},"end":{"line":2438,"column":47}},{"start":{"line":2435,"column":12},"end":{"line":2438,"column":47}}],"line":2435},"239":{"loc":{"start":{"line":2446,"column":25},"end":{"line":2446,"column":39}},"type":"default-arg","locations":[{"start":{"line":2446,"column":35},"end":{"line":2446,"column":39}}],"line":2446},"240":{"loc":{"start":{"line":2454,"column":12},"end":{"line":2461,"column":13}},"type":"if","locations":[{"start":{"line":2454,"column":12},"end":{"line":2461,"column":13}},{"start":{"line":2454,"column":12},"end":{"line":2461,"column":13}}],"line":2454},"241":{"loc":{"start":{"line":2456,"column":20},"end":{"line":2459,"column":61}},"type":"if","locations":[{"start":{"line":2456,"column":20},"end":{"line":2459,"column":61}},{"start":{"line":2456,"column":20},"end":{"line":2459,"column":61}}],"line":2456},"242":{"loc":{"start":{"line":2462,"column":12},"end":{"line":2465,"column":102}},"type":"if","locations":[{"start":{"line":2462,"column":12},"end":{"line":2465,"column":102}},{"start":{"line":2462,"column":12},"end":{"line":2465,"column":102}}],"line":2462},"243":{"loc":{"start":{"line":2474,"column":35},"end":{"line":2476,"column":29}},"type":"cond-expr","locations":[{"start":{"line":2475,"column":18},"end":{"line":2475,"column":39}},{"start":{"line":2476,"column":18},"end":{"line":2476,"column":29}}],"line":2474},"244":{"loc":{"start":{"line":2477,"column":12},"end":{"line":2483,"column":46}},"type":"if","locations":[{"start":{"line":2477,"column":12},"end":{"line":2483,"column":46}},{"start":{"line":2477,"column":12},"end":{"line":2483,"column":46}}],"line":2477},"245":{"loc":{"start":{"line":2484,"column":12},"end":{"line":2487,"column":47}},"type":"if","locations":[{"start":{"line":2484,"column":12},"end":{"line":2487,"column":47}},{"start":{"line":2484,"column":12},"end":{"line":2487,"column":47}}],"line":2484},"246":{"loc":{"start":{"line":2499,"column":12},"end":{"line":2500,"column":97}},"type":"if","locations":[{"start":{"line":2499,"column":12},"end":{"line":2500,"column":97}},{"start":{"line":2499,"column":12},"end":{"line":2500,"column":97}}],"line":2499},"247":{"loc":{"start":{"line":2499,"column":16},"end":{"line":2499,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2499,"column":16},"end":{"line":2499,"column":33}},{"start":{"line":2499,"column":37},"end":{"line":2499,"column":52}}],"line":2499},"248":{"loc":{"start":{"line":2511,"column":12},"end":{"line":2512,"column":28}},"type":"if","locations":[{"start":{"line":2511,"column":12},"end":{"line":2512,"column":28}},{"start":{"line":2511,"column":12},"end":{"line":2512,"column":28}}],"line":2511},"249":{"loc":{"start":{"line":2511,"column":16},"end":{"line":2511,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2511,"column":16},"end":{"line":2511,"column":33}},{"start":{"line":2511,"column":37},"end":{"line":2511,"column":52}}],"line":2511},"250":{"loc":{"start":{"line":2518,"column":22},"end":{"line":2518,"column":36}},"type":"default-arg","locations":[{"start":{"line":2518,"column":32},"end":{"line":2518,"column":36}}],"line":2518},"251":{"loc":{"start":{"line":2524,"column":12},"end":{"line":2525,"column":97}},"type":"if","locations":[{"start":{"line":2524,"column":12},"end":{"line":2525,"column":97}},{"start":{"line":2524,"column":12},"end":{"line":2525,"column":97}}],"line":2524},"252":{"loc":{"start":{"line":2524,"column":16},"end":{"line":2524,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2524,"column":16},"end":{"line":2524,"column":33}},{"start":{"line":2524,"column":37},"end":{"line":2524,"column":52}}],"line":2524},"253":{"loc":{"start":{"line":2534,"column":29},"end":{"line":2534,"column":43}},"type":"default-arg","locations":[{"start":{"line":2534,"column":39},"end":{"line":2534,"column":43}}],"line":2534},"254":{"loc":{"start":{"line":2540,"column":12},"end":{"line":2541,"column":97}},"type":"if","locations":[{"start":{"line":2540,"column":12},"end":{"line":2541,"column":97}},{"start":{"line":2540,"column":12},"end":{"line":2541,"column":97}}],"line":2540},"255":{"loc":{"start":{"line":2540,"column":16},"end":{"line":2540,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2540,"column":16},"end":{"line":2540,"column":33}},{"start":{"line":2540,"column":37},"end":{"line":2540,"column":52}}],"line":2540},"256":{"loc":{"start":{"line":2550,"column":35},"end":{"line":2550,"column":49}},"type":"default-arg","locations":[{"start":{"line":2550,"column":45},"end":{"line":2550,"column":49}}],"line":2550},"257":{"loc":{"start":{"line":2556,"column":12},"end":{"line":2557,"column":28}},"type":"if","locations":[{"start":{"line":2556,"column":12},"end":{"line":2557,"column":28}},{"start":{"line":2556,"column":12},"end":{"line":2557,"column":28}}],"line":2556},"258":{"loc":{"start":{"line":2556,"column":16},"end":{"line":2556,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2556,"column":16},"end":{"line":2556,"column":33}},{"start":{"line":2556,"column":37},"end":{"line":2556,"column":52}}],"line":2556},"259":{"loc":{"start":{"line":2566,"column":28},"end":{"line":2566,"column":42}},"type":"default-arg","locations":[{"start":{"line":2566,"column":38},"end":{"line":2566,"column":42}}],"line":2566},"260":{"loc":{"start":{"line":2572,"column":12},"end":{"line":2573,"column":28}},"type":"if","locations":[{"start":{"line":2572,"column":12},"end":{"line":2573,"column":28}},{"start":{"line":2572,"column":12},"end":{"line":2573,"column":28}}],"line":2572},"261":{"loc":{"start":{"line":2572,"column":16},"end":{"line":2572,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2572,"column":16},"end":{"line":2572,"column":33}},{"start":{"line":2572,"column":37},"end":{"line":2572,"column":52}}],"line":2572},"262":{"loc":{"start":{"line":2588,"column":35},"end":{"line":2590,"column":29}},"type":"cond-expr","locations":[{"start":{"line":2589,"column":18},"end":{"line":2589,"column":49}},{"start":{"line":2590,"column":18},"end":{"line":2590,"column":29}}],"line":2588},"263":{"loc":{"start":{"line":2591,"column":12},"end":{"line":2594,"column":47}},"type":"if","locations":[{"start":{"line":2591,"column":12},"end":{"line":2594,"column":47}},{"start":{"line":2591,"column":12},"end":{"line":2594,"column":47}}],"line":2591},"264":{"loc":{"start":{"line":2598,"column":36},"end":{"line":2598,"column":50}},"type":"default-arg","locations":[{"start":{"line":2598,"column":46},"end":{"line":2598,"column":50}}],"line":2598},"265":{"loc":{"start":{"line":2606,"column":12},"end":{"line":2611,"column":13}},"type":"if","locations":[{"start":{"line":2606,"column":12},"end":{"line":2611,"column":13}},{"start":{"line":2606,"column":12},"end":{"line":2611,"column":13}}],"line":2606},"266":{"loc":{"start":{"line":2616,"column":43},"end":{"line":2616,"column":57}},"type":"default-arg","locations":[{"start":{"line":2616,"column":53},"end":{"line":2616,"column":57}}],"line":2616},"267":{"loc":{"start":{"line":2624,"column":12},"end":{"line":2629,"column":13}},"type":"if","locations":[{"start":{"line":2624,"column":12},"end":{"line":2629,"column":13}},{"start":{"line":2624,"column":12},"end":{"line":2629,"column":13}}],"line":2624},"268":{"loc":{"start":{"line":2634,"column":29},"end":{"line":2634,"column":43}},"type":"default-arg","locations":[{"start":{"line":2634,"column":39},"end":{"line":2634,"column":43}}],"line":2634},"269":{"loc":{"start":{"line":2640,"column":12},"end":{"line":2641,"column":97}},"type":"if","locations":[{"start":{"line":2640,"column":12},"end":{"line":2641,"column":97}},{"start":{"line":2640,"column":12},"end":{"line":2641,"column":97}}],"line":2640},"270":{"loc":{"start":{"line":2640,"column":16},"end":{"line":2640,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2640,"column":16},"end":{"line":2640,"column":33}},{"start":{"line":2640,"column":37},"end":{"line":2640,"column":52}}],"line":2640},"271":{"loc":{"start":{"line":2654,"column":36},"end":{"line":2654,"column":50}},"type":"default-arg","locations":[{"start":{"line":2654,"column":46},"end":{"line":2654,"column":50}}],"line":2654},"272":{"loc":{"start":{"line":2660,"column":12},"end":{"line":2661,"column":97}},"type":"if","locations":[{"start":{"line":2660,"column":12},"end":{"line":2661,"column":97}},{"start":{"line":2660,"column":12},"end":{"line":2661,"column":97}}],"line":2660},"273":{"loc":{"start":{"line":2660,"column":16},"end":{"line":2660,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2660,"column":16},"end":{"line":2660,"column":33}},{"start":{"line":2660,"column":37},"end":{"line":2660,"column":52}}],"line":2660},"274":{"loc":{"start":{"line":2674,"column":29},"end":{"line":2674,"column":43}},"type":"default-arg","locations":[{"start":{"line":2674,"column":39},"end":{"line":2674,"column":43}}],"line":2674},"275":{"loc":{"start":{"line":2682,"column":12},"end":{"line":2687,"column":13}},"type":"if","locations":[{"start":{"line":2682,"column":12},"end":{"line":2687,"column":13}},{"start":{"line":2682,"column":12},"end":{"line":2687,"column":13}}],"line":2682},"276":{"loc":{"start":{"line":2692,"column":36},"end":{"line":2692,"column":50}},"type":"default-arg","locations":[{"start":{"line":2692,"column":46},"end":{"line":2692,"column":50}}],"line":2692},"277":{"loc":{"start":{"line":2700,"column":12},"end":{"line":2705,"column":13}},"type":"if","locations":[{"start":{"line":2700,"column":12},"end":{"line":2705,"column":13}},{"start":{"line":2700,"column":12},"end":{"line":2705,"column":13}}],"line":2700},"278":{"loc":{"start":{"line":2716,"column":12},"end":{"line":2721,"column":13}},"type":"if","locations":[{"start":{"line":2716,"column":12},"end":{"line":2721,"column":13}},{"start":{"line":2716,"column":12},"end":{"line":2721,"column":13}}],"line":2716},"279":{"loc":{"start":{"line":2722,"column":12},"end":{"line":2725,"column":47}},"type":"if","locations":[{"start":{"line":2722,"column":12},"end":{"line":2725,"column":47}},{"start":{"line":2722,"column":12},"end":{"line":2725,"column":47}}],"line":2722},"280":{"loc":{"start":{"line":2729,"column":11},"end":{"line":2729,"column":27}},"type":"default-arg","locations":[{"start":{"line":2729,"column":23},"end":{"line":2729,"column":27}}],"line":2729},"281":{"loc":{"start":{"line":2729,"column":29},"end":{"line":2729,"column":43}},"type":"default-arg","locations":[{"start":{"line":2729,"column":39},"end":{"line":2729,"column":43}}],"line":2729},"282":{"loc":{"start":{"line":2730,"column":8},"end":{"line":2731,"column":48}},"type":"if","locations":[{"start":{"line":2730,"column":8},"end":{"line":2731,"column":48}},{"start":{"line":2730,"column":8},"end":{"line":2731,"column":48}}],"line":2730},"283":{"loc":{"start":{"line":2736,"column":12},"end":{"line":2737,"column":97}},"type":"if","locations":[{"start":{"line":2736,"column":12},"end":{"line":2737,"column":97}},{"start":{"line":2736,"column":12},"end":{"line":2737,"column":97}}],"line":2736},"284":{"loc":{"start":{"line":2736,"column":16},"end":{"line":2736,"column":52}},"type":"binary-expr","locations":[{"start":{"line":2736,"column":16},"end":{"line":2736,"column":33}},{"start":{"line":2736,"column":37},"end":{"line":2736,"column":52}}],"line":2736},"285":{"loc":{"start":{"line":2738,"column":12},"end":{"line":2754,"column":48}},"type":"if","locations":[{"start":{"line":2738,"column":12},"end":{"line":2754,"column":48}},{"start":{"line":2738,"column":12},"end":{"line":2754,"column":48}}],"line":2738},"286":{"loc":{"start":{"line":2741,"column":20},"end":{"line":2746,"column":21}},"type":"if","locations":[{"start":{"line":2741,"column":20},"end":{"line":2746,"column":21}},{"start":{"line":2741,"column":20},"end":{"line":2746,"column":21}}],"line":2741},"287":{"loc":{"start":{"line":2742,"column":24},"end":{"line":2745,"column":134}},"type":"if","locations":[{"start":{"line":2742,"column":24},"end":{"line":2745,"column":134}},{"start":{"line":2742,"column":24},"end":{"line":2745,"column":134}}],"line":2742},"288":{"loc":{"start":{"line":2748,"column":16},"end":{"line":2751,"column":40}},"type":"if","locations":[{"start":{"line":2748,"column":16},"end":{"line":2751,"column":40}},{"start":{"line":2748,"column":16},"end":{"line":2751,"column":40}}],"line":2748},"289":{"loc":{"start":{"line":2758,"column":17},"end":{"line":2758,"column":33}},"type":"default-arg","locations":[{"start":{"line":2758,"column":29},"end":{"line":2758,"column":33}}],"line":2758},"290":{"loc":{"start":{"line":2758,"column":35},"end":{"line":2758,"column":49}},"type":"default-arg","locations":[{"start":{"line":2758,"column":45},"end":{"line":2758,"column":49}}],"line":2758},"291":{"loc":{"start":{"line":2759,"column":8},"end":{"line":2760,"column":48}},"type":"if","locations":[{"start":{"line":2759,"column":8},"end":{"line":2760,"column":48}},{"start":{"line":2759,"column":8},"end":{"line":2760,"column":48}}],"line":2759},"292":{"loc":{"start":{"line":2765,"column":12},"end":{"line":2766,"column":28}},"type":"if","locations":[{"start":{"line":2765,"column":12},"end":{"line":2766,"column":28}},{"start":{"line":2765,"column":12},"end":{"line":2766,"column":28}}],"line":2765},"293":{"loc":{"start":{"line":2765,"column":16},"end":{"line":2765,"column":70}},"type":"binary-expr","locations":[{"start":{"line":2765,"column":16},"end":{"line":2765,"column":33}},{"start":{"line":2765,"column":37},"end":{"line":2765,"column":70}}],"line":2765},"294":{"loc":{"start":{"line":2767,"column":12},"end":{"line":2779,"column":48}},"type":"if","locations":[{"start":{"line":2767,"column":12},"end":{"line":2779,"column":48}},{"start":{"line":2767,"column":12},"end":{"line":2779,"column":48}}],"line":2767},"295":{"loc":{"start":{"line":2770,"column":20},"end":{"line":2774,"column":40}},"type":"if","locations":[{"start":{"line":2770,"column":20},"end":{"line":2774,"column":40}},{"start":{"line":2770,"column":20},"end":{"line":2774,"column":40}}],"line":2770},"296":{"loc":{"start":{"line":2771,"column":24},"end":{"line":2774,"column":40}},"type":"if","locations":[{"start":{"line":2771,"column":24},"end":{"line":2774,"column":40}},{"start":{"line":2771,"column":24},"end":{"line":2774,"column":40}}],"line":2771},"297":{"loc":{"start":{"line":2789,"column":12},"end":{"line":2795,"column":13}},"type":"if","locations":[{"start":{"line":2789,"column":12},"end":{"line":2795,"column":13}},{"start":{"line":2789,"column":12},"end":{"line":2795,"column":13}}],"line":2789},"298":{"loc":{"start":{"line":2792,"column":20},"end":{"line":2793,"column":52}},"type":"if","locations":[{"start":{"line":2792,"column":20},"end":{"line":2793,"column":52}},{"start":{"line":2792,"column":20},"end":{"line":2793,"column":52}}],"line":2792},"299":{"loc":{"start":{"line":2800,"column":20},"end":{"line":2800,"column":34}},"type":"default-arg","locations":[{"start":{"line":2800,"column":30},"end":{"line":2800,"column":34}}],"line":2800},"300":{"loc":{"start":{"line":2807,"column":12},"end":{"line":2811,"column":13}},"type":"if","locations":[{"start":{"line":2807,"column":12},"end":{"line":2811,"column":13}},{"start":{"line":2807,"column":12},"end":{"line":2811,"column":13}}],"line":2807},"301":{"loc":{"start":{"line":2823,"column":33},"end":{"line":2823,"column":83}},"type":"cond-expr","locations":[{"start":{"line":2823,"column":53},"end":{"line":2823,"column":62}},{"start":{"line":2823,"column":65},"end":{"line":2823,"column":83}}],"line":2823},"302":{"loc":{"start":{"line":2832,"column":19},"end":{"line":2832,"column":27}},"type":"default-arg","locations":[{"start":{"line":2832,"column":26},"end":{"line":2832,"column":27}}],"line":2832},"303":{"loc":{"start":{"line":2832,"column":29},"end":{"line":2832,"column":51}},"type":"default-arg","locations":[{"start":{"line":2832,"column":46},"end":{"line":2832,"column":51}}],"line":2832},"304":{"loc":{"start":{"line":2832,"column":53},"end":{"line":2832,"column":69}},"type":"default-arg","locations":[{"start":{"line":2832,"column":65},"end":{"line":2832,"column":69}}],"line":2832},"305":{"loc":{"start":{"line":2832,"column":71},"end":{"line":2832,"column":85}},"type":"default-arg","locations":[{"start":{"line":2832,"column":81},"end":{"line":2832,"column":85}}],"line":2832},"306":{"loc":{"start":{"line":2833,"column":8},"end":{"line":2834,"column":25}},"type":"if","locations":[{"start":{"line":2833,"column":8},"end":{"line":2834,"column":25}},{"start":{"line":2833,"column":8},"end":{"line":2834,"column":25}}],"line":2833},"307":{"loc":{"start":{"line":2835,"column":8},"end":{"line":2836,"column":25}},"type":"if","locations":[{"start":{"line":2835,"column":8},"end":{"line":2836,"column":25}},{"start":{"line":2835,"column":8},"end":{"line":2836,"column":25}}],"line":2835},"308":{"loc":{"start":{"line":2837,"column":8},"end":{"line":2838,"column":48}},"type":"if","locations":[{"start":{"line":2837,"column":8},"end":{"line":2838,"column":48}},{"start":{"line":2837,"column":8},"end":{"line":2838,"column":48}}],"line":2837},"309":{"loc":{"start":{"line":2844,"column":12},"end":{"line":2853,"column":13}},"type":"if","locations":[{"start":{"line":2844,"column":12},"end":{"line":2853,"column":13}},{"start":{"line":2844,"column":12},"end":{"line":2853,"column":13}}],"line":2844},"310":{"loc":{"start":{"line":2850,"column":20},"end":{"line":2851,"column":61}},"type":"if","locations":[{"start":{"line":2850,"column":20},"end":{"line":2851,"column":61}},{"start":{"line":2850,"column":20},"end":{"line":2851,"column":61}}],"line":2850},"311":{"loc":{"start":{"line":2850,"column":24},"end":{"line":2850,"column":72}},"type":"binary-expr","locations":[{"start":{"line":2850,"column":24},"end":{"line":2850,"column":38}},{"start":{"line":2850,"column":42},"end":{"line":2850,"column":72}}],"line":2850},"312":{"loc":{"start":{"line":2854,"column":12},"end":{"line":2859,"column":13}},"type":"if","locations":[{"start":{"line":2854,"column":12},"end":{"line":2859,"column":13}},{"start":{"line":2854,"column":12},"end":{"line":2859,"column":13}}],"line":2854},"313":{"loc":{"start":{"line":2870,"column":12},"end":{"line":2874,"column":13}},"type":"if","locations":[{"start":{"line":2870,"column":12},"end":{"line":2874,"column":13}},{"start":{"line":2870,"column":12},"end":{"line":2874,"column":13}}],"line":2870},"314":{"loc":{"start":{"line":2879,"column":15},"end":{"line":2879,"column":31}},"type":"default-arg","locations":[{"start":{"line":2879,"column":27},"end":{"line":2879,"column":31}}],"line":2879},"315":{"loc":{"start":{"line":2879,"column":33},"end":{"line":2879,"column":47}},"type":"default-arg","locations":[{"start":{"line":2879,"column":43},"end":{"line":2879,"column":47}}],"line":2879},"316":{"loc":{"start":{"line":2880,"column":8},"end":{"line":2881,"column":48}},"type":"if","locations":[{"start":{"line":2880,"column":8},"end":{"line":2881,"column":48}},{"start":{"line":2880,"column":8},"end":{"line":2881,"column":48}}],"line":2880},"317":{"loc":{"start":{"line":2887,"column":12},"end":{"line":2895,"column":13}},"type":"if","locations":[{"start":{"line":2887,"column":12},"end":{"line":2895,"column":13}},{"start":{"line":2887,"column":12},"end":{"line":2895,"column":13}}],"line":2887},"318":{"loc":{"start":{"line":2890,"column":34},"end":{"line":2892,"column":39}},"type":"cond-expr","locations":[{"start":{"line":2891,"column":22},"end":{"line":2891,"column":38}},{"start":{"line":2892,"column":22},"end":{"line":2892,"column":39}}],"line":2890},"319":{"loc":{"start":{"line":2896,"column":12},"end":{"line":2901,"column":13}},"type":"if","locations":[{"start":{"line":2896,"column":12},"end":{"line":2901,"column":13}},{"start":{"line":2896,"column":12},"end":{"line":2901,"column":13}}],"line":2896},"320":{"loc":{"start":{"line":2906,"column":16},"end":{"line":2906,"column":32}},"type":"default-arg","locations":[{"start":{"line":2906,"column":28},"end":{"line":2906,"column":32}}],"line":2906},"321":{"loc":{"start":{"line":2906,"column":34},"end":{"line":2906,"column":48}},"type":"default-arg","locations":[{"start":{"line":2906,"column":44},"end":{"line":2906,"column":48}}],"line":2906},"322":{"loc":{"start":{"line":2907,"column":8},"end":{"line":2908,"column":36}},"type":"if","locations":[{"start":{"line":2907,"column":8},"end":{"line":2908,"column":36}},{"start":{"line":2907,"column":8},"end":{"line":2908,"column":36}}],"line":2907},"323":{"loc":{"start":{"line":2914,"column":12},"end":{"line":2920,"column":13}},"type":"if","locations":[{"start":{"line":2914,"column":12},"end":{"line":2920,"column":13}},{"start":{"line":2914,"column":12},"end":{"line":2920,"column":13}}],"line":2914},"324":{"loc":{"start":{"line":2916,"column":16},"end":{"line":2919,"column":17}},"type":"if","locations":[{"start":{"line":2916,"column":16},"end":{"line":2919,"column":17}},{"start":{"line":2916,"column":16},"end":{"line":2919,"column":17}}],"line":2916},"325":{"loc":{"start":{"line":2921,"column":12},"end":{"line":2926,"column":13}},"type":"if","locations":[{"start":{"line":2921,"column":12},"end":{"line":2926,"column":13}},{"start":{"line":2921,"column":12},"end":{"line":2926,"column":13}}],"line":2921}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":872,"6":872,"7":419,"8":419,"9":419,"10":419,"11":1623,"12":1623,"13":419,"14":66,"15":66,"16":66,"17":66,"18":2,"19":2,"20":2,"21":2,"22":2,"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2,"31":2,"32":10,"33":2,"34":2,"35":2,"36":2,"37":2,"38":2,"39":2,"40":2,"41":10,"42":2,"43":2,"44":100,"45":100,"46":100,"47":0,"48":100,"49":197,"50":197,"51":58,"52":58,"53":0,"54":58,"55":139,"56":197,"57":44,"58":56,"59":100,"60":8,"61":8,"62":8,"63":0,"64":8,"65":8,"66":20,"67":8,"68":8,"69":19,"70":19,"71":6,"72":6,"73":8,"74":2,"75":12,"76":2,"77":4,"78":8,"79":3,"80":3,"81":3,"82":3,"83":3,"84":3,"85":15,"86":15,"87":0,"88":3,"89":2,"90":2,"91":2,"92":2,"93":2,"94":2,"95":2,"96":10,"97":10,"98":0,"99":2,"100":2,"101":9,"102":9,"103":9,"104":9,"105":9,"106":20,"107":15,"108":15,"109":20,"110":20,"111":1,"112":1,"113":15,"114":14,"115":5,"116":5,"117":9,"118":3,"119":6,"120":9,"121":4,"122":4,"123":4,"124":4,"125":4,"126":4,"127":4,"128":4,"129":21,"130":21,"131":7,"132":7,"133":8,"134":8,"135":1,"136":1,"137":7,"138":6,"139":6,"140":14,"141":6,"142":6,"143":4,"144":2,"145":2,"146":4,"147":2,"148":0,"149":2,"150":2,"151":2,"152":2,"153":2,"154":2,"155":1,"156":1,"157":2,"158":2,"159":0,"160":2,"161":2,"162":2,"163":2,"164":2,"165":2,"166":1,"167":1,"168":2,"169":2,"170":2,"171":2,"172":2,"173":2,"174":2,"175":2,"176":2,"177":2,"178":10,"179":2,"180":2,"181":2,"182":2,"183":1,"184":1,"185":2,"186":2,"187":2,"188":2,"189":2,"190":2,"191":2,"192":2,"193":2,"194":8,"195":2,"196":2,"197":2,"198":2,"199":1,"200":1,"201":2,"202":54,"203":4,"204":2,"205":2,"206":2,"207":2,"208":2,"209":1,"210":3,"211":1,"212":3,"213":2,"214":2,"215":2,"216":2,"217":2,"218":2,"219":2,"220":1,"221":5,"222":1,"223":5,"224":2,"225":2,"226":4,"227":4,"228":4,"229":4,"230":4,"231":4,"232":28,"233":24,"234":4,"235":2,"236":2,"237":4,"238":2,"239":2,"240":2,"241":2,"242":2,"243":1,"244":6,"245":1,"246":6,"247":2,"248":2,"249":4,"250":4,"251":4,"252":4,"253":4,"254":16,"255":12,"256":4,"257":2,"258":2,"259":4,"260":2,"261":2,"262":2,"263":2,"264":1,"265":3,"266":1,"267":3,"268":2,"269":2,"270":7,"271":7,"272":7,"273":7,"274":7,"275":7,"276":7,"277":28,"278":28,"279":28,"280":28,"281":28,"282":34,"283":34,"284":34,"285":34,"286":6,"287":6,"288":6,"289":0,"290":6,"291":6,"292":2,"293":28,"294":34,"295":15,"296":19,"297":28,"298":7,"299":4,"300":3,"301":7,"302":6,"303":6,"304":6,"305":6,"306":6,"307":6,"308":6,"309":20,"310":20,"311":20,"312":20,"313":20,"314":20,"315":20,"316":20,"317":20,"318":6,"319":6,"320":6,"321":0,"322":6,"323":6,"324":4,"325":14,"326":20,"327":14,"328":6,"329":20,"330":6,"331":3,"332":3,"333":6,"334":4,"335":4,"336":4,"337":4,"338":4,"339":4,"340":4,"341":12,"342":12,"343":12,"344":12,"345":10,"346":10,"347":4,"348":6,"349":12,"350":4,"351":2,"352":2,"353":4,"354":2,"355":2,"356":2,"357":2,"358":1,"359":1,"360":2,"361":2,"362":2,"363":2,"364":2,"365":1,"366":1,"367":2,"368":2,"369":2,"370":2,"371":2,"372":2,"373":2,"374":2,"375":2,"376":10,"377":2,"378":2,"379":2,"380":1,"381":1,"382":2,"383":2,"384":2,"385":2,"386":2,"387":2,"388":2,"389":2,"390":12,"391":2,"392":10,"393":2,"394":2,"395":1,"396":1,"397":2,"398":2,"399":2,"400":2,"401":0,"402":2,"403":2,"404":4,"405":4,"406":4,"407":4,"408":2,"409":2,"410":4,"411":4,"412":4,"413":4,"414":2,"415":2,"416":4,"417":2,"418":2,"419":2,"420":2,"421":0,"422":2,"423":4,"424":2,"425":0,"426":2,"427":2,"428":2,"429":2,"430":2,"431":0,"432":2,"433":2,"434":2,"435":2,"436":2,"437":0,"438":2,"439":10,"440":6,"441":10,"442":10,"443":10,"444":2,"445":8,"446":6,"447":18,"448":4,"449":2,"450":2,"451":10,"452":6,"453":2,"454":6,"455":6,"456":6,"457":2,"458":4,"459":2,"460":6,"461":0,"462":2,"463":2,"464":6,"465":6,"466":6,"467":6,"468":6,"469":12,"470":2,"471":2,"472":2,"473":10,"474":2,"475":2,"476":6,"477":4,"478":4,"479":4,"480":4,"481":4,"482":20,"483":2,"484":2,"485":4,"486":4,"487":4,"488":4,"489":4,"490":4,"491":4,"492":4,"493":18,"494":2,"495":2,"496":4,"497":56,"498":56,"499":56,"500":56,"501":56,"502":56,"503":249,"504":249,"505":16,"506":16,"507":16,"508":233,"509":34,"510":199,"511":0,"512":0,"513":0,"514":199,"515":0,"516":199,"517":56,"518":56,"519":16,"520":16,"521":4,"522":16,"523":16,"524":16,"525":16,"526":16,"527":52,"528":52,"529":52,"530":16,"531":16,"532":4,"533":4,"534":2,"535":4,"536":4,"537":4,"538":12,"539":4,"540":4,"541":6,"542":6,"543":6,"544":6,"545":18,"546":6,"547":6,"548":4,"549":4,"550":4,"551":4,"552":4,"553":4,"554":16,"555":16,"556":4,"557":4,"558":2,"559":2,"560":2,"561":2,"562":8,"563":2,"564":2,"565":4,"566":2,"567":4,"568":4,"569":4,"570":0,"571":4,"572":4,"573":4,"574":4,"575":4,"576":16,"577":16,"578":4,"579":2,"580":2,"581":8,"582":8,"583":2,"584":2,"585":4,"586":4,"587":4,"588":4,"589":4,"590":4,"591":4,"592":4,"593":16,"594":24,"595":4,"596":4,"597":2,"598":2,"599":2,"600":2,"601":2,"602":2,"603":2,"604":12,"605":0,"606":0,"607":2,"608":2,"609":4,"610":4,"611":2,"612":4,"613":4,"614":4,"615":4,"616":4,"617":17,"618":17,"619":17,"620":14,"621":17,"622":4,"623":4,"624":4,"625":4,"626":2,"627":4,"628":4,"629":4,"630":4,"631":17,"632":17,"633":17,"634":14,"635":17,"636":4,"637":4,"638":2,"639":2,"640":4,"641":4,"642":4,"643":4,"644":4,"645":4,"646":12,"647":4,"648":4,"649":2,"650":2,"651":2,"652":2,"653":2,"654":1,"655":3,"656":1,"657":3,"658":2,"659":2,"660":4,"661":4,"662":4,"663":4,"664":4,"665":4,"666":20,"667":20,"668":12,"669":4,"670":4,"671":2,"672":2,"673":2,"674":2,"675":2,"676":1,"677":3,"678":1,"679":3,"680":2,"681":2,"682":4,"683":4,"684":4,"685":4,"686":4,"687":4,"688":20,"689":10,"690":4,"691":4,"692":6,"693":2,"694":6,"695":6,"696":6,"697":6,"698":6,"699":6,"700":6,"701":40,"702":2,"703":2,"704":38,"705":38,"706":38,"707":32,"708":6,"709":6,"710":6,"711":8,"712":4,"713":8,"714":8,"715":8,"716":2,"717":6,"718":6,"719":4,"720":4,"721":14,"722":2,"723":2,"724":2,"725":8,"726":4,"727":4,"728":4,"729":4,"730":4,"731":4,"732":8,"733":8,"734":4,"735":4,"736":2,"737":4,"738":2,"739":0,"740":4,"741":8,"742":4,"743":8,"744":8,"745":8,"746":8,"747":8,"748":8,"749":2,"750":6,"751":4,"752":4,"753":16,"754":2,"755":2,"756":2,"757":8,"758":12,"759":12,"760":12,"761":12,"762":12,"763":12,"764":4,"765":8,"766":12,"767":12,"768":51,"769":34,"770":12,"771":6,"772":6,"773":12,"774":4,"775":2,"776":2,"777":2,"778":2,"779":2,"780":2,"781":2,"782":10,"783":4,"784":6,"785":2,"786":1,"787":1,"788":2,"789":6,"790":6,"791":6,"792":6,"793":2,"794":2,"795":6,"796":4,"797":6,"798":3,"799":3,"800":6,"801":2,"802":2,"803":2,"804":2,"805":0,"806":2,"807":2,"808":2,"809":4,"810":4,"811":4,"812":2,"813":2,"814":2,"815":4,"816":2,"817":2,"818":2,"819":2,"820":0,"821":2,"822":2,"823":2,"824":2,"825":6,"826":2,"827":2,"828":2,"829":2,"830":2,"831":2,"832":0,"833":2,"834":2,"835":2,"836":2,"837":6,"838":2,"839":2,"840":4,"841":4,"842":4,"843":4,"844":2,"845":2,"846":2,"847":2,"848":2,"849":6,"850":2,"851":4,"852":4,"853":4,"854":4,"855":4,"856":2,"857":2,"858":2,"859":2,"860":2,"861":6,"862":2,"863":4,"864":2,"865":2,"866":2,"867":2,"868":1,"869":1,"870":2,"871":2,"872":2,"873":2,"874":2,"875":2,"876":2,"877":2,"878":8,"879":8,"880":2,"881":2,"882":2,"883":2,"884":2,"885":2,"886":2,"887":2,"888":2,"889":8,"890":8,"891":2,"892":2,"893":2,"894":2,"895":2,"896":2,"897":0,"898":2,"899":2,"900":2,"901":2,"902":2,"903":2,"904":6,"905":6,"906":2,"907":2,"908":2,"909":2,"910":2,"911":2,"912":0,"913":2,"914":2,"915":2,"916":2,"917":2,"918":2,"919":6,"920":6,"921":2,"922":2,"923":2,"924":2,"925":2,"926":2,"927":2,"928":2,"929":2,"930":8,"931":8,"932":2,"933":2,"934":2,"935":2,"936":2,"937":2,"938":2,"939":2,"940":2,"941":8,"942":8,"943":2,"944":2,"945":2,"946":2,"947":2,"948":2,"949":2,"950":2,"951":8,"952":2,"953":8,"954":2,"955":1,"956":1,"957":2,"958":10,"959":6,"960":10,"961":10,"962":10,"963":2,"964":8,"965":6,"966":6,"967":28,"968":6,"969":4,"970":2,"971":4,"972":2,"973":2,"974":2,"975":10,"976":10,"977":6,"978":10,"979":10,"980":10,"981":2,"982":8,"983":6,"984":6,"985":28,"986":6,"987":4,"988":2,"989":4,"990":2,"991":10,"992":4,"993":4,"994":4,"995":4,"996":4,"997":4,"998":17,"999":6,"1000":4,"1001":4,"1002":4,"1003":4,"1004":4,"1005":4,"1006":4,"1007":4,"1008":16,"1009":4,"1010":4,"1011":4,"1012":4,"1013":4,"1014":4,"1015":14,"1016":4,"1017":4,"1018":8,"1019":0,"1020":8,"1021":0,"1022":8,"1023":2,"1024":8,"1025":8,"1026":8,"1027":8,"1028":8,"1029":8,"1030":8,"1031":38,"1032":38,"1033":38,"1034":30,"1035":8,"1036":2,"1037":2,"1038":6,"1039":2,"1040":6,"1041":8,"1042":2,"1043":2,"1044":2,"1045":2,"1046":2,"1047":10,"1048":2,"1049":2,"1050":4,"1051":2,"1052":4,"1053":4,"1054":4,"1055":4,"1056":4,"1057":4,"1058":4,"1059":4,"1060":4,"1061":16,"1062":4,"1063":2,"1064":2,"1065":6,"1066":2,"1067":2,"1068":4,"1069":4,"1070":2,"1071":4,"1072":4,"1073":4,"1074":4,"1075":4,"1076":4,"1077":4,"1078":4,"1079":16,"1080":4,"1081":2,"1082":2,"1083":8,"1084":2,"1085":2,"1086":4,"1087":1},"f":{"0":872,"1":419,"2":1623,"3":1623,"4":66,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":100,"14":100,"15":8,"16":8,"17":3,"18":3,"19":2,"20":2,"21":2,"22":9,"23":9,"24":4,"25":4,"26":2,"27":2,"28":2,"29":2,"30":2,"31":2,"32":2,"33":2,"34":54,"35":4,"36":2,"37":2,"38":3,"39":3,"40":2,"41":2,"42":5,"43":5,"44":4,"45":4,"46":2,"47":2,"48":6,"49":6,"50":4,"51":4,"52":2,"53":2,"54":3,"55":3,"56":7,"57":7,"58":6,"59":6,"60":4,"61":4,"62":2,"63":2,"64":2,"65":2,"66":2,"67":2,"68":2,"69":2,"70":2,"71":2,"72":4,"73":4,"74":4,"75":4,"76":2,"77":2,"78":2,"79":2,"80":10,"81":10,"82":6,"83":6,"84":6,"85":6,"86":4,"87":4,"88":4,"89":4,"90":56,"91":56,"92":16,"93":16,"94":4,"95":4,"96":12,"97":6,"98":6,"99":18,"100":4,"101":4,"102":2,"103":2,"104":8,"105":4,"106":4,"107":4,"108":4,"109":2,"110":2,"111":2,"112":12,"113":0,"114":4,"115":4,"116":4,"117":4,"118":2,"119":2,"120":4,"121":4,"122":2,"123":2,"124":3,"125":3,"126":4,"127":4,"128":2,"129":2,"130":3,"131":3,"132":4,"133":4,"134":6,"135":6,"136":8,"137":8,"138":4,"139":4,"140":8,"141":8,"142":12,"143":12,"144":4,"145":2,"146":2,"147":6,"148":6,"149":2,"150":2,"151":2,"152":4,"153":4,"154":2,"155":2,"156":2,"157":2,"158":4,"159":4,"160":4,"161":4,"162":2,"163":2,"164":2,"165":2,"166":2,"167":2,"168":2,"169":2,"170":2,"171":2,"172":2,"173":2,"174":2,"175":2,"176":2,"177":2,"178":8,"179":10,"180":10,"181":10,"182":10,"183":4,"184":4,"185":4,"186":4,"187":4,"188":4,"189":8,"190":8,"191":2,"192":2,"193":4,"194":4,"195":4,"196":4},"b":{"0":[419,0],"1":[2],"2":[2,0],"3":[2],"4":[2,0],"5":[0,100],"6":[58,139],"7":[0,58],"8":[44,153],"9":[0,8],"10":[8,12],"11":[6,13],"12":[19,0,19,19],"13":[2,6],"14":[2,10],"15":[3],"16":[3,0],"17":[0,15],"18":[15,15],"19":[0],"20":[0],"21":[2,0],"22":[0,10],"23":[10,10],"24":[9,0],"25":[15,5],"26":[1,19],"27":[20,0,20,20],"28":[14,1],"29":[3,6],"30":[0],"31":[4,0],"32":[7,14],"33":[1,7],"34":[8,0,8,8],"35":[6,1],"36":[6,8],"37":[2,2],"38":[0,2],"39":[2,0],"40":[1,1],"41":[0,2],"42":[2,0],"43":[1,1],"44":[0],"45":[2,0],"46":[2,8],"47":[1,1],"48":[0],"49":[2,0],"50":[2,6],"51":[1,1],"52":[0],"53":[0],"54":[0],"55":[1,1],"56":[0],"57":[1,1],"58":[0],"59":[4,0],"60":[24,4],"61":[2,2],"62":[0],"63":[1,1],"64":[4,0],"65":[12,4],"66":[2,2],"67":[1,1],"68":[0],"69":[7,0],"70":[28,0],"71":[6,28],"72":[0,6],"73":[2,4],"74":[15,19],"75":[4,3],"76":[0],"77":[6,0],"78":[20,0],"79":[6,14],"80":[0,6],"81":[4,2],"82":[14,6],"83":[3,3],"84":[0],"85":[4,0],"86":[12,0],"87":[4,6],"88":[2,2],"89":[2,0],"90":[1,1],"91":[2,0],"92":[1,1],"93":[0],"94":[2,0],"95":[2,8],"96":[1,1],"97":[0],"98":[2,0],"99":[2,10],"100":[1,1],"101":[0,2],"102":[2,2],"103":[4],"104":[2,2],"105":[4,4],"106":[2,2],"107":[4,4],"108":[2],"109":[0,2],"110":[2,2],"111":[2],"112":[0,2],"113":[2,0],"114":[4],"115":[10],"116":[6,4],"117":[2,8],"118":[10,10],"119":[6,2],"120":[4,14],"121":[4],"122":[6],"123":[2,4],"124":[2,4],"125":[6,6],"126":[2,2],"127":[0,6],"128":[6,0],"129":[2,10],"130":[2,0],"131":[2,0,2,2],"132":[2,8],"133":[4],"134":[4,0],"135":[2,18],"136":[4],"137":[4,0],"138":[2,16],"139":[50],"140":[56,0],"141":[16,233],"142":[16,0],"143":[34,199],"144":[0,199],"145":[0,0],"146":[0,199],"147":[10],"148":[12],"149":[12],"150":[4,12],"151":[16,0],"152":[14,38],"153":[0],"154":[0],"155":[0],"156":[2,2],"157":[0],"158":[2],"159":[4,0],"160":[0],"161":[2],"162":[4],"163":[2,2],"164":[0,4],"165":[4,0],"166":[2,2],"167":[8,0],"168":[2],"169":[4,0],"170":[0],"171":[0],"172":[2,0],"173":[2],"174":[4],"175":[4],"176":[2,2],"177":[4,0],"178":[7,10],"179":[14,3],"180":[0],"181":[0],"182":[0],"183":[2,2],"184":[4,0],"185":[7,10],"186":[14,3],"187":[0],"188":[0],"189":[2],"190":[4,0],"191":[0],"192":[1,1],"193":[2],"194":[4,0],"195":[12,8],"196":[20,12],"197":[0],"198":[1,1],"199":[4,0],"200":[10,10],"201":[2],"202":[2],"203":[2],"204":[4],"205":[4],"206":[4],"207":[6],"208":[2,4],"209":[6,0],"210":[2,38],"211":[10,28],"212":[32,6],"213":[38,34],"214":[4],"215":[8],"216":[4,4],"217":[2,6],"218":[8,8],"219":[4,2],"220":[2,12],"221":[4,0],"222":[4,4],"223":[2,2],"224":[4,0,4,4],"225":[2,2],"226":[4],"227":[8],"228":[4,4],"229":[8,0],"230":[2,6],"231":[4,2],"232":[2,14],"233":[2,0],"234":[2,0],"235":[12,0],"236":[4,8],"237":[34,17],"238":[6,6],"239":[2],"240":[2,0],"241":[4,6],"242":[1,1],"243":[6,0],"244":[2,4],"245":[3,3],"246":[0,2],"247":[2,2],"248":[2,2],"249":[4,4],"250":[2],"251":[0,2],"252":[2,2],"253":[2],"254":[0,2],"255":[2,2],"256":[4],"257":[2,2],"258":[4,4],"259":[4],"260":[2,2],"261":[4,4],"262":[2,0],"263":[1,1],"264":[2],"265":[2,0],"266":[2],"267":[2,0],"268":[2],"269":[0,2],"270":[2,2],"271":[2],"272":[0,2],"273":[2,2],"274":[2],"275":[2,0],"276":[2],"277":[2,0],"278":[2,0],"279":[1,1],"280":[4],"281":[10],"282":[6,4],"283":[2,8],"284":[10,10],"285":[6,2],"286":[6,22],"287":[4,2],"288":[2,2],"289":[4],"290":[10],"291":[6,4],"292":[2,8],"293":[10,10],"294":[6,2],"295":[6,22],"296":[4,2],"297":[4,0],"298":[6,11],"299":[4],"300":[4,0],"301":[0,4],"302":[2],"303":[4],"304":[6],"305":[8],"306":[0,8],"307":[0,8],"308":[2,6],"309":[8,0],"310":[30,8],"311":[38,30],"312":[2,6],"313":[2,0],"314":[2],"315":[4],"316":[2,2],"317":[4,0],"318":[2,2],"319":[2,2],"320":[2],"321":[4],"322":[2,2],"323":[4,0],"324":[4,0],"325":[2,2]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/collection/KoconutCollection.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/collection/KoconutCollection.ts"],"names":[],"mappings":"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","sourcesContent":["`use strict`;\n\nimport {\n  /* Tool */\n  KoconutPrimitive,\n  KoconutOpener,\n  KoconutTypeChecker,\n\n  /* Base */\n  KoconutPair,\n  Pair,\n  Entry,\n\n  /* Container */\n  KoconutIterable,\n  KoconutArray,\n  KoconutSet,\n  KoconutMap,\n  KoconutBoolean,\n  Sequence,\n\n  /* Enum*/\n  KoconutLoopSignal,\n\n  /* Exception */\n  KoconutInvalidArgumentException,\n  KoconutIndexOutOfBoundsException,\n  KoconutNoSuchElementException,\n  KoconutConflictException,\n\n  /* Protocol */\n  KoconutEquatable,\n  KoconutComparable,\n\n  /* Callbacks */\n  Action,\n  Comparator,\n  Operator,\n  IndexedOperator,\n  IndexedAction,\n  Selector,\n  Predicator,\n  IndexedPredicator,\n  Transformer,\n  IndexedTransformer,\n  Zipper,\n} from '../../../module';\nimport { KoconutEntry } from '../base/KoconutEntry';\n\n/** @internal */\nexport class KoconutCollection<\n  DataType,\n  WrapperType extends Array<DataType> | Sequence<DataType> | Set<DataType>,\n> extends KoconutIterable<DataType, DataType, WrapperType, WrapperType> {\n  /* Koconut Primitive */\n  async validate(data: WrapperType | null) {\n    if (data != null) {\n      const dataArray = Array.from(data);\n      this.mSize = dataArray.length;\n      Object.keys(dataArray)\n        .map((eachString) => parseInt(eachString))\n        .forEach((eachIndex) => this.mIndices.push(eachIndex));\n      this.combinedDataWrapper = data;\n    }\n  }\n\n  private static fromIterable<\n    DataType,\n    WrapperType extends Array<DataType> | Sequence<DataType> | Set<DataType>,\n  >(\n    iterable: KoconutIterable<DataType, DataType, WrapperType, WrapperType>,\n  ): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>(\n      iterable['data'],\n    );\n    koconutToReturn.processor = iterable['processor'];\n    koconutToReturn.prevYieldable = iterable['prevYieldable'];\n    return koconutToReturn;\n  }\n\n  /* Properties */\n  size(): KoconutPrimitive<number> {\n    const koconutToReturn = new KoconutPrimitive<number>();\n    (koconutToReturn as any as KoconutOpener<number>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => this.mSize);\n    return koconutToReturn;\n  }\n  protected mIndices = new Array<number>();\n  indices(): KoconutArray<number> {\n    const koconutToReturn = new KoconutArray<number>();\n    (koconutToReturn as any as KoconutOpener<Array<number>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => this.mIndices);\n    return koconutToReturn;\n  }\n\n  // Accumulator\n  /**\n   * Accumulates value starting with ```initial``` value and applying ```operation```\n   * from left to right to current accumulator value and each element.\n   * @param {ResultDataType} initial A value to use as the first argument to the first call of the ```operation```.\n   * @param {Operator<DataType, ResultDataType>} operation A callback function that accepts one argument. The ```operation``` accumulates callback's return value. It's accumulated value\n   * previously returned in the last invocation of the callback or ```initial``` value. The method calls the ```operation``` one time for each element in object.\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```operation```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<ResultDataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Accumulator\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const sumOfArray = await koconutArray\n   *                 .fold(\n   *                     0,\n   *                     (acc, eachNumber) => acc + eachNumber\n   *                 )\n   *                 .yield()\n   * console.log(sumOfArray)\n   * // ↑ 15\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const multiplesOfSet = await koconutSet\n   *                 .fold(\n   *                     1,\n   *                     async (acc, eachNumber) => acc * eachNumber\n   *                 )\n   *                 .yield()\n   * console.log(multiplesOfSet)\n   * // ↑ 120\n   * ```\n   */\n  fold<ResultDataType>(\n    initial: ResultDataType,\n    operation: Operator<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<ResultDataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<ResultDataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let dataToReturn = initial;\n        if (this.data != null) {\n          for (const eachDatum of this.data)\n            dataToReturn = await operation(dataToReturn, eachDatum);\n        }\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Accumulates value starting with ```initial``` value and applying ```operation```\n   * from left to right to current accumulator value and each element.\n   *\n   * @param {ResultDataType} initial A value to use as the first argument to the first call of the ```operation```.\n   *\n   * @param {IndexedOperator<DataType, ResultDataType>} operation A callback function that accepts one argument. The ```operation``` accumulates callback's return value. It's accumulated value\n   * previously returned in the last invocation of the callback or ```initial``` value. The method calls the ```operation``` one time for each element and index in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```operation```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<ResultDataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Accumulator\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const sumOfNumberAndIndexInArray = await koconutArray\n   *                 .foldIndexed(\n   *                     0,\n   *                     (index, acc, eachNumber) => index + acc + eachNumber\n   *                 )\n   *                 .yield()\n   * console.log(sumOfNumberAndIndexInArray)\n   * // ↑ 25\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const multiplesOfNumberAndIndexInSet = await koconutSet\n   *                 .foldIndexed(\n   *                     1,\n   *                     async (index, acc, eachNumber) => index * acc * eachNumber\n   *                 )\n   *                 .yield()\n   * console.log(multiplesOfNumberAndIndexInSet)\n   * // ↑ 0\n   * ```\n   */\n  foldIndexed<ResultDataType>(\n    initial: ResultDataType,\n    operation: IndexedOperator<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<ResultDataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<ResultDataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let dataToReturn = initial;\n        if (this.data != null) {\n          for (const [eachIndex, eachDatum] of Array.from(this.data).entries())\n            dataToReturn = await operation(\n              eachIndex as number,\n              dataToReturn,\n              eachDatum,\n            );\n        }\n        return dataToReturn;\n      });\n    return koconutToReturn;\n  }\n\n  // Inspector\n  /**\n   * Checks if the specified element is contained in this collection.\n   * @param {DataType} element The element to search for.\n   *\n   * @return {KoconutBoolean}\n   *\n   * @since 1.0.10\n   *\n   * @category Inspector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const doesArrayContain3 = await koconutArray\n   *                               .contains(3)\n   *                               .yield()\n   * console.log(doesArrayContain3)\n   * // ↑ true\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const doesSetContains6 = await koconutSet\n   *                               .contains(6)\n   *                               .yield()\n   * console.log(doesSetContains6)\n   * // ↑ false\n   * ```\n   */\n  contains(element: DataType): KoconutBoolean {\n    const koconutToReturn = new KoconutBoolean();\n    (koconutToReturn as any as KoconutOpener<boolean>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null) return false;\n        for (const eachDatum of this.data) {\n          let isContained = false;\n          if (KoconutTypeChecker.checkIsEquatable(eachDatum)) {\n            const equalityResult = eachDatum.equalsTo(element);\n            if (equalityResult instanceof KoconutPrimitive)\n              isContained = await equalityResult.yield();\n            else isContained = equalityResult;\n          } else isContained = eachDatum == element;\n          if (isContained) return true;\n        }\n        return false;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Checks if all the elements are contained in this collection.\n   *\n   * @param {Iterable<DataType>} elements The elements to search for.\n   *\n   * @return {KoconutBoolean}\n   *\n   * @since 1.0.10\n   *\n   * @category Inspector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const doesArrayContain1to3 = await koconutArray\n   *                               .containsAll([1,2,3])\n   *                               .yield()\n   * console.log(doesArrayContain1to3)\n   * // ↑ true\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const doesSetContains5to6 = await koconutSet\n   *                               .containsAll([5,6,7])\n   *                               .yield()\n   * console.log(doesSetContains5to6)\n   * // ↑ false\n   * ```\n   */\n  containsAll(elements: Iterable<DataType>): KoconutBoolean {\n    const koconutToReturn = new KoconutBoolean();\n    (koconutToReturn as any as KoconutOpener<boolean>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null) return false;\n        const dataArray = Array.from(this.data);\n        for (const eachElementToCheck of elements) {\n          if (KoconutTypeChecker.checkIsEquatable(eachElementToCheck)) {\n            let isIncluded = false;\n            for (const eachDatum of dataArray) {\n              const equalityResult = eachElementToCheck.equalsTo(eachDatum);\n              if (\n                (equalityResult instanceof KoconutPrimitive &&\n                  (await equalityResult.yield())) ||\n                (!(equalityResult instanceof KoconutPrimitive) &&\n                  equalityResult)\n              ) {\n                isIncluded = true;\n                break;\n              }\n            }\n            if (!isIncluded) return false;\n          } else if (!dataArray.includes(eachElementToCheck)) return false;\n        }\n        return true;\n      });\n    return koconutToReturn;\n  }\n\n  // Iterator\n  /**\n   * Performs the given ```action``` on each element, providing sequential index with the element.\n   * When you want to stop iteration in the meantime ```return``` ```false``` or {@link KoconutLoopSignal.BREAK}.\n   *\n   * @param {IndexedAction<DataType>} action A callback function that accepts two arguments. The method calls the ```action``` one time for each index and element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```action```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<void>}\n   *\n   * @category Iterator\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5,6,7)\n   *\n   * await koconutArray\n   *       .forEachIndexed(console.log)\n   *       // ↑ 0 1\n   *       //   1 2\n   *       //   2 3\n   *       //   3 4\n   *       //   4 5\n   *       //   5 6\n   *       //   6 7\n   *       .process()\n   *\n   * await koconutArray\n   *       .forEachIndexed((eachIndex, eachNumber) => {\n   *           if(eachIndex == 3) return KoconutLoopSignal.BREAK\n   *           console.log(eachNumber)\n   *       })\n   *       // ↑ 1 2 3 -- i.e. Since when the index is '3', the loop is interrupted.\n   *       // The last printed number(element) would be '3'.\n   *       .process()\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,1,2,3)\n   *\n   * await koconutSet\n   *       .forEachIndexed(console.log)\n   *       // ↑ 0 1\n   *       //   1 2\n   *       //   2 3\n   *       .process()\n   *\n   * await koconutSet\n   *       .forEachIndexed((eachIndex, eachNumber) => {\n   *           if(eachIndex != 0 && eachIndex % 2 == 0) return false\n   *           console.log(eachNumber)\n   *       })\n   *       // ↑ 1 2 -- i.e. Since when the index '2', it's an even number.\n   *       // So the loop is interrupted.\n   *       // The last printed number(element) would be '2'\n   *       .process()\n   *\n   * // Case 3 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3)\n   *\n   * await koconutArray2\n   *       .forEachIndexed(async (eachIndex, eachNumber) =>\n   *                       console.log(eachIndex, eachNumber))\n   *       // ↑ 0 1\n   *       //   1 2\n   *       //   2 3\n   *       .process()\n   *\n   * await koconutArray2\n   *       .forEachIndexed(async (eachIndex, eachNumber) => new Promise(resolve => {\n   *           resolve(console.log(eachIndex, eachNumber))\n   *       }))\n   *       // ↑ 0 1\n   *       //   1 2\n   *       //   2 3\n   *       .process()\n   * ```\n   */\n  forEachIndexed(\n    action: IndexedAction<DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<void> {\n    action = action.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<void>();\n    (koconutToReturn as any as KoconutOpener<void>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data != null) {\n          let eachIndex = 0;\n          for (const eachCombinedDatum of this.data) {\n            const signal = await action(eachIndex++, eachCombinedDatum);\n            if (signal == false || signal == KoconutLoopSignal.BREAK) break;\n          }\n        }\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  onEach(\n    action: Action<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    return KoconutCollection.fromIterable(super.onEach(action, thisArg));\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  onEachIndexed(\n    action: IndexedAction<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    action = action.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data != null) {\n          let eachIndex = 0;\n          for (const eachDatum of this.data) {\n            const signal = await action(eachIndex++, eachDatum);\n            if (signal == false || signal == KoconutLoopSignal.BREAK) break;\n          }\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  // Manipulator\n  // No Comment - KoconutArray/KoconutSet\n  distinct(): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let processedArray = new Array<DataType>();\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            if (KoconutTypeChecker.checkIsEquatable(eachDatum)) {\n              let isConflict = false;\n              for (const eachPrevEquatableDatum of processedArray) {\n                const equalityResult = eachDatum.equalsTo(\n                  eachPrevEquatableDatum,\n                );\n                if (\n                  (equalityResult instanceof KoconutPrimitive &&\n                    (await equalityResult.yield())) ||\n                  (!(equalityResult instanceof KoconutPrimitive) &&\n                    equalityResult)\n                ) {\n                  isConflict = true;\n                  break;\n                }\n              }\n              if (!isConflict) processedArray.push(eachDatum);\n            } else {\n              processedArray = Array.from(new Set(this.data));\n              break;\n            }\n          }\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  distinctBy<KeyType, EquatableKeyType extends KoconutEquatable>(\n    selector: Selector<DataType, KeyType | EquatableKeyType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<DataType>();\n        if (this.data != null) {\n          const keyArray = new Array<KeyType>();\n          const equatableKeyArray = new Array<EquatableKeyType>();\n          for (const eachDatum of this.data) {\n            const eachKey = await selector(eachDatum);\n            if (KoconutTypeChecker.checkIsEquatable(eachKey)) {\n              let isConflict = false;\n              for (const eachPrevEquatableKey of equatableKeyArray) {\n                const equalityResult = eachPrevEquatableKey.equalsTo(eachKey);\n                if (\n                  (equalityResult instanceof KoconutPrimitive &&\n                    (await equalityResult.yield())) ||\n                  (!(equalityResult instanceof KoconutPrimitive) &&\n                    equalityResult)\n                ) {\n                  isConflict = true;\n                  break;\n                }\n              }\n              if (!isConflict) {\n                equatableKeyArray.push(eachKey);\n                processedArray.push(eachDatum);\n              }\n            } else {\n              if (!keyArray.includes(eachKey)) {\n                keyArray.push(eachKey);\n                processedArray.push(eachDatum);\n              }\n            }\n          }\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  drop(n: number): KoconutCollection<DataType, WrapperType> {\n    if (n < 0)\n      throw new KoconutInvalidArgumentException(\n        `Given argument ${n} is invalid, 'n' must be larger than 0.`,\n      );\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let processedArray = new Array<DataType>();\n        if (this.data != null) processedArray = Array.from(this.data).slice(n);\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  dropLast(n: number): KoconutCollection<DataType, WrapperType> {\n    if (n < 0)\n      throw new KoconutInvalidArgumentException(\n        `Given argument ${n} is invalid, 'n' must be larger than 0.`,\n      );\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let processedArray = new Array<DataType>();\n        if (this.data != null)\n          processedArray = Array.from(this.data).slice(0, -n);\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  dropLastWhile(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let processedArray = new Array<DataType>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          let indexNumber = 0;\n          for (\n            let eachIndex = dataArray.length - 1;\n            eachIndex >= 0;\n            eachIndex--\n          ) {\n            if (!(await predicate(dataArray[eachIndex]))) {\n              indexNumber = eachIndex;\n              break;\n            }\n          }\n          processedArray = dataArray.slice(0, indexNumber + 1);\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  dropWhile(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let processedArray = new Array<DataType>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          let indexNumber = dataArray.length;\n          for (const eachIndex in dataArray) {\n            if (!(await predicate(dataArray[eachIndex]))) {\n              indexNumber = parseInt(eachIndex);\n              break;\n            }\n          }\n          processedArray = dataArray.slice(indexNumber);\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  filter(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    return KoconutCollection.fromIterable(super.filter(predicate, thisArg));\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  filterNot(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    return KoconutCollection.fromIterable(super.filterNot(predicate, thisArg));\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  filterTo(\n    destination: Array<DataType> | Set<DataType>,\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const filteredCollection = this.filter(predicate, thisArg);\n        if (destination instanceof Array) {\n          await filteredCollection\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await filteredCollection\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  filterNotTo(\n    destination: Array<DataType> | Set<DataType>,\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const filteredCollection = this.filterNot(predicate, thisArg);\n        if (destination instanceof Array) {\n          await filteredCollection\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await filteredCollection\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  filterIndexed(\n    predicate: IndexedPredicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<DataType>();\n        if (this.data != null) {\n          for (const [eachIndex, eachDatum] of Array.from(this.data).entries())\n            if (await predicate(eachIndex as number, eachDatum))\n              processedArray.push(eachDatum);\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  filterIndexedTo(\n    destination: Array<DataType> | Set<DataType>,\n    predicate: IndexedPredicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const filteredCollection = this.filterIndexed(predicate, thisArg);\n        if (destination instanceof Array) {\n          await filteredCollection\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await filteredCollection\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  // filterIsInstance\n  // filterIsInstanceTo\n\n  // No Comment - KoconutArray/KoconutSet\n  filterNotNull(): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<DataType>();\n        if (this.data != null) {\n          for (const eachDatum of this.data)\n            if (eachDatum != null) processedArray.push(eachDatum);\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  filterNotNullTo(\n    destination: Array<DataType> | Set<DataType>,\n  ): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const filteredCollection = this.filterNotNull();\n        if (destination instanceof Array) {\n          await filteredCollection\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await filteredCollection\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  sortedBy(\n    selector: Selector<DataType, number | string | KoconutComparable>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<DataType>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          for (const eachIndex in dataArray) {\n            if (Object.prototype.hasOwnProperty.call(dataArray, eachIndex)) {\n              const currentComparable = await selector(dataArray[eachIndex]);\n              let startIndex = 0;\n              let middleIndex: number;\n              let endIndex = processedArray.length;\n              while (startIndex < endIndex) {\n                middleIndex = Math.floor((startIndex + endIndex) / 2);\n                const targetComparable = await selector(\n                  processedArray[middleIndex],\n                );\n                let isCurrentGreater = false;\n                if (KoconutTypeChecker.checkIsComparable(currentComparable)) {\n                  const eachCompareResult =\n                    currentComparable.compareTo(targetComparable);\n                  let numberResult = 0;\n                  if (eachCompareResult instanceof KoconutPrimitive)\n                    numberResult = await eachCompareResult.yield();\n                  else numberResult = eachCompareResult;\n                  if (numberResult > 0) isCurrentGreater = true;\n                } else isCurrentGreater = targetComparable < currentComparable;\n                if (isCurrentGreater) startIndex = middleIndex + 1;\n                else endIndex = middleIndex;\n              }\n              processedArray.splice(endIndex, 0, dataArray[eachIndex]);\n            }\n          }\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  sortedByDescending(\n    selector: Selector<DataType, number | string | KoconutComparable>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<DataType>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          for (const eachIndex in dataArray) {\n            if (Object.prototype.hasOwnProperty.call(dataArray, eachIndex)) {\n              const currentComparable = await selector(dataArray[eachIndex]);\n              let startIndex = 0;\n              let middleIndex: number;\n              let endIndex = processedArray.length;\n              while (startIndex < endIndex) {\n                middleIndex = Math.floor((startIndex + endIndex) / 2);\n                const targetComparable = await selector(\n                  processedArray[middleIndex],\n                );\n                let isCurrentLesser = false;\n                if (KoconutTypeChecker.checkIsComparable(currentComparable)) {\n                  const eachCompareResult =\n                    currentComparable.compareTo(targetComparable);\n                  let numberResult = 0;\n                  if (eachCompareResult instanceof KoconutPrimitive)\n                    numberResult = await eachCompareResult.yield();\n                  else numberResult = eachCompareResult;\n                  if (numberResult < 0) isCurrentLesser = true;\n                } else isCurrentLesser = targetComparable > currentComparable;\n                if (isCurrentLesser) startIndex = middleIndex + 1;\n                else endIndex = middleIndex;\n              }\n              processedArray.splice(endIndex, 0, dataArray[eachIndex]);\n            }\n          }\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  sortedWith(\n    comparator: Comparator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    comparator = comparator.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<DataType>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          for (const eachIndex in dataArray) {\n            if (Object.prototype.hasOwnProperty.call(dataArray, eachIndex)) {\n              let startIndex = 0;\n              let middleIndex: number;\n              let endIndex = processedArray.length;\n              while (startIndex < endIndex) {\n                middleIndex = Math.floor((startIndex + endIndex) / 2);\n                if (\n                  (await comparator(\n                    dataArray[eachIndex],\n                    processedArray[middleIndex],\n                  )) >= 0\n                )\n                  startIndex = middleIndex + 1;\n                else endIndex = middleIndex;\n              }\n              processedArray.splice(endIndex, 0, dataArray[eachIndex]);\n            }\n          }\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  take(n: number): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = this.data\n          ? Array.from(this.data).slice(0, n)\n          : new Array<DataType>();\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  takeLast(n: number): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = this.data\n          ? Array.from(this.data).slice(this.mSize - n, this.mSize)\n          : new Array<DataType>();\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  takeLastWhile(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let processedArray = new Array<DataType>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          let targetIndex = this.mSize - 1;\n          for (; targetIndex >= 0; targetIndex--) {\n            if (!(await predicate(dataArray[targetIndex]))) break;\n          }\n          processedArray = dataArray.slice(targetIndex + 1, this.mSize);\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  takeWhile(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let processedArray = new Array<DataType>();\n        if (this.data != null) {\n          let predicateIndex = 0;\n          for (const eachDatum of this.data) {\n            if (!(await predicate(eachDatum))) break;\n            predicateIndex++;\n          }\n          processedArray = Array.from(this.data).slice(0, predicateIndex);\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  // Selector\n  /**\n   * Returns an element at the given ```index``` or throws an {@link KoconutIndexOutOfBoundsException} if the ```index``` is out of bounds of this collection.\n   *\n   * @param {number} index The index of element to search for.\n   *\n   * @return {KoconutPrimitive<DataType>}\n   *\n   * @throws {@link KoconutIndexOutOfBoundsException}\n   * -- When ```index``` is less than 0 or greater than lenth.\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Caes 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const elementAtIndex3OfArray = await koconutArray\n   *                                     .elementAt(3)\n   *                                     .yield()\n   * console.log(elementAtIndex3OfArray)\n   * // ↑ 4\n   *\n   * try {\n   *     await koconutArray\n   *             .elementAt(10)\n   *             .yield()\n   * } catch(error) {\n   *     console.log(error.name)\n   *     // ↑ Koconut Index Out Of Bounds Exception\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const elementAtIndex2OfSet = await koconutSet\n   *                                     .elementAt(2)\n   *                                     .yield()\n   * console.log(elementAtIndex2OfSet)\n   * // ↑ 3\n   *\n   * try {\n   *     await koconutSet\n   *             .elementAt(-2)\n   *             .yield()\n   * } catch(error) {\n   *     console.log(error.name)\n   *     // ↑ Koconut Index Out Of Bounds Exception\n   * }\n   * ```\n   */\n  elementAt(index: number): KoconutPrimitive<DataType> {\n    const koconutToReturn = new KoconutPrimitive<DataType>();\n    (koconutToReturn as any as KoconutOpener<DataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (index < 0 || index >= this.mSize)\n          throw new KoconutIndexOutOfBoundsException(\n            `Cannot search for data at index of ${index}`,\n          );\n        return Array.from(this.data!)[index];\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns an element at the given ```index``` or the result of calling the ```defaultValue``` function\n   * if the ```index``` is out of bounds of this collection.\n   * @param {number} index The index of element to search for.\n   * @param {Selector<number, DataType>} defaultValue A callback function that accepts an argument. The method calls the ```defaultValue``` function when ```index``` is out of bounds.\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```defaultValue```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<DataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const elementAtIndex3OfArray = await koconutArray\n   *                                 .elementAtOrElse(3, index => 0)\n   *                                 .yield()\n   * console.log(elementAtIndex3OfArray)\n   * // ↑ 4\n   *\n   * const elementAtIndex10OfArray = await koconutArray\n   *                                 .elementAtOrElse(10, index => 0)\n   *                                 .yield()\n   * console.log(elementAtIndex10OfArray)\n   * // ↑ 0\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const elementAtIndex2OfSet = await koconutSet\n   *                                 .elementAtOrElse(2, index => 0)\n   *                                 .yield()\n   * console.log(elementAtIndex2OfSet)\n   * // ↑ 3\n   *\n   * const elementAtIndexNegative2OfSet = await koconutSet\n   *                                 .elementAtOrElse(-2, index => 0)\n   *                                 .yield()\n   * console.log(elementAtIndexNegative2OfSet)\n   * // ↑ 0\n   * ```\n   */\n  elementAtOrElse(\n    index: number,\n    defaultValue: Selector<number, DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType> {\n    defaultValue = defaultValue.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType>();\n    (koconutToReturn as any as KoconutOpener<DataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (index < 0 || index >= this.mSize) return await defaultValue(index);\n        else return Array.from(this.data!)[index];\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns an element at the given ```index``` or ```null``` if the index is out of bounds of this collection.\n   * @param {number} index The index of element to search for.\n   *\n   * @return {KoconutPrimitive<DataType | null>}\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const elementAtIndex3OfArray = await koconutArray\n   *                                 .elementAtOrNull(3)\n   *                                 .yield()\n   * console.log(elementAtIndex3OfArray)\n   * // ↑ 4\n   *\n   * const elementAtIndex10OfArray = await koconutArray\n   *                                 .elementAtOrNull(10)\n   *                                 .yield()\n   * console.log(elementAtIndex10OfArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const elementAtIndex2OfSet = await koconutSet\n   *                                 .elementAtOrNull(2)\n   *                                 .yield()\n   * console.log(elementAtIndex2OfSet)\n   * // ↑ 3\n   *\n   * const elementAtIndexNegative2OfSet = await koconutSet\n   *                                 .elementAtOrNull(-2)\n   *                                 .yield()\n   * console.log(elementAtIndexNegative2OfSet)\n   * // ↑ null\n   * ```\n   */\n  elementAtOrNull(index: number): KoconutPrimitive<DataType | null> {\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (index < 0 || index >= this.mSize) return null;\n        return Array.from(this.data!)[index];\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element matching the given ```predicate```, or ```null``` if no such element was found.\n   *\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<DataType | null>}\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const foundEventNumberOfArray = await koconutArray\n   *                                 .find(eachNumber => eachNumber % 2 == 0)\n   *                                 .yield()\n   * console.log(foundEventNumberOfArray)\n   * // ↑ 2\n   *\n   * const foundMultiplesOf10Array = await koconutArray\n   *                                 .find(eachNumber => eachNumber % 10 == 0)\n   *                                 .yield()\n   * console.log(foundMultiplesOf10Array)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const foundOddNumberOfSet = await koconutSet\n   *                                 .find(eachNumber => eachNumber % 2 == 1)\n   *                                 .yield()\n   * console.log(foundOddNumberOfSet)\n   * // ↑ 1\n   *\n   * const foundMultiplesOf10OfSet = await koconutSet\n   *                                 .find(eachNumber => eachNumber % 10 == 0)\n   *                                 .yield()\n   * console.log(foundMultiplesOf10OfSet)\n   * // ↑ null\n   * ```\n   */\n  find(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType | null> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null) return null;\n        for (const eachDatum of this.data)\n          if (await predicate(eachDatum)) return eachDatum;\n        return null;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the last element matching the given ```predicate```, or ```null``` if no such element was found.\n   *\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<DataType | null>}\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const lastEventNumberOfArray = await koconutArray\n   *                                 .findLast(eachNumber => eachNumber % 2 == 0)\n   *                                 .yield()\n   * console.log(lastEventNumberOfArray)\n   * // ↑ 4\n   *\n   * const lastMultiplesOf10Array = await koconutArray\n   *                                 .findLast(eachNumber => eachNumber % 10 == 0)\n   *                                 .yield()\n   * console.log(lastMultiplesOf10Array)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const lastOddNumberOfSet = await koconutSet\n   *                                 .findLast(eachNumber => eachNumber % 2 == 1)\n   *                                 .yield()\n   * console.log(lastOddNumberOfSet)\n   * // ↑ 5\n   *\n   * const lastMultiplesOf10OfSet = await koconutSet\n   *                                 .findLast(eachNumber => eachNumber % 10 == 0)\n   *                                 .yield()\n   * console.log(lastMultiplesOf10OfSet)\n   * // ↑ null\n   * ```\n   */\n  findLast(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType | null> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null) return null;\n        const dataArray = Array.from(this.data);\n        for (\n          let eachIndex = dataArray.length - 1;\n          eachIndex >= 0;\n          eachIndex--\n        ) {\n          if (await predicate(dataArray[eachIndex]))\n            return dataArray[eachIndex];\n        }\n        return null;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element matching the given ```predicate```. Or, if ```predicate``` is omitted\n   * method will just return the very first element of this collection. If source data is null or no element\n   * matching given ```predicate``` is found, it throws {@link KoconutNoSuchElementException}.\n   *\n   * @param {Predicator<DataType> | null } predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<DataType>}\n   *\n   * @throws {@link KoconutNoSuchElementException}\n   * -- When source data is empty or no element matching given ```predicate``` is found.\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const firstNumberOfArray = await koconutArray\n   *                                     .first()\n   *                                     .yield()\n   * console.log(firstNumberOfArray)\n   * // ↑ 1\n   *\n   * const firstEventNumberOfArray = await koconutArray\n   *                             .first(eachNumber => eachNumber % 2 == 0)\n   *                             .yield()\n   * console.log(firstEventNumberOfArray)\n   * // ↑ 2\n   *\n   * try {\n   *     await koconutArray\n   *             .filter(eachNumber => eachNumber > 10)\n   *             .first()\n   *             .yield()\n   * } catch(error) {\n   *     console.log(error.name)\n   *     // ↑ Koconut No Such Element Exception\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const firstNumberOfSet = await koconutSet\n   *                                 .first()\n   *                                 .yield()\n   * console.log(firstNumberOfSet)\n   * // ↑ 1\n   *\n   * const firstOddNumberOfSet = await koconutSet\n   *                             .first(eachNumber => eachNumber % 2 == 1)\n   *                             .yield()\n   * console.log(firstOddNumberOfSet)\n   * // ↑ 1\n   * ```\n   */\n  first(\n    predicate: Predicator<DataType> | null = null,\n    /*\n    predicate:\n      | ((element: DataType) => boolean | Promise<boolean>)\n      | null = null,\n      */\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType> {\n    if (predicate) predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType>();\n    (koconutToReturn as any as KoconutOpener<DataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0)\n          throw new KoconutNoSuchElementException(\n            `Source data is null or empty`,\n          );\n        if (predicate) {\n          for (const eachDatum of this.data)\n            if (await predicate(eachDatum)) return eachDatum;\n          throw new KoconutNoSuchElementException(`No such element is found`);\n        }\n        return Array.from(this.data)[0];\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns the first element matching the given ```predicate```. Or, if ```predicate``` is omitted\n   * method will just return the very first element of this collection. If source data is null or no element\n   * matching given ```predicate``` is found, it returns ```null```.\n   * @param {Predicator<DataType> | null} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<DataType | null>}\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const firstNumberOfArray = await koconutArray\n   *                                     .firstOrNull()\n   *                                     .yield()\n   * console.log(firstNumberOfArray)\n   * // ↑ 1\n   *\n   * const firstEventNumberOfArray = await koconutArray\n   *                             .firstOrNull(eachNumber => eachNumber % 2 == 0)\n   *                             .yield()\n   * console.log(firstEventNumberOfArray)\n   * // ↑ 2\n   *\n   * const firstNumberOfEmptyArray = await koconutArray\n   *                                 .filter(eachNumber => eachNumber > 10)\n   *                                 .firstOrNull()\n   *                                 .yield()\n   * console.log(firstNumberOfEmptyArray)\n   * // ↑ null\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const firstNumberOfSet = await koconutSet\n   *                                 .firstOrNull()\n   *                                 .yield()\n   * console.log(firstNumberOfSet)\n   * // ↑ 1\n   *\n   * const firstOddNumberOfSet = await koconutSet\n   *                             .firstOrNull(eachNumber => eachNumber % 2 == 1)\n   *                             .yield()\n   * console.log(firstOddNumberOfSet)\n   * // ↑ 1\n   * ```\n   */\n  firstOrNull(\n    predicate: Predicator<DataType> | null = null,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType | null> {\n    if (predicate) predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0) return null;\n        if (predicate) {\n          for (const eachDatum of this.data)\n            if (await predicate(eachDatum)) return eachDatum;\n          return null;\n        }\n        return Array.from(this.data)[0];\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns first index of element. or -1 if the collection does not contains element.\n   * @param {DataType} elementToFind The element to search for.\n   *\n   * @return {KoconutPrimitive<number>}\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const indexOf3 = await koconutArray\n   *                         .indexOf(3)\n   *                         .yield()\n   * console.log(indexOf3)\n   * // ↑ 2\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const indexOf10 = await koconutSet\n   *                         .indexOf(10)\n   *                         .yield()\n   * console.log(indexOf10)\n   * // ↑ -1\n   * ```\n   */\n  indexOf(elementToFind: DataType): KoconutPrimitive<number> {\n    const koconutToReturn = new KoconutPrimitive<number>();\n    (koconutToReturn as any as KoconutOpener<number>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data != null) {\n          for (const [index, element] of Array.from(this.data).entries()) {\n            if (KoconutTypeChecker.checkIsEquatable(element)) {\n              const equalityResult = element.equalsTo(elementToFind);\n              if (\n                (equalityResult instanceof KoconutPrimitive &&\n                  (await equalityResult.yield())) ||\n                (!(equalityResult instanceof KoconutPrimitive) &&\n                  equalityResult)\n              )\n                return index as number;\n            } else if (element == elementToFind) return index as number;\n          }\n        }\n        return -1;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns index of the first element matching the given ```predicate```, or -1 if the\n   * collection does not contain such element.\n   *\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<number>}\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const indexOfFirstEven = await koconutArray\n   *                         .indexOfFirst(eachNumber => eachNumber % 2 == 0)\n   *                         .yield()\n   * console.log(indexOfFirstEven)\n   * // ↑ 1\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const indexOfFirstOdd = await koconutSet\n   *                         .indexOfFirst(eachNumber => eachNumber % 2 == 1)\n   *                         .yield()\n   * console.log(indexOfFirstOdd)\n   * // ↑ 0\n   * ```\n   */\n  indexOfFirst(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<number> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<number>();\n    (koconutToReturn as any as KoconutOpener<number>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data != null) {\n          for (const [index, element] of Array.from(this.data).entries())\n            if (await predicate(element)) return index as number;\n        }\n        return -1;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns index of the last element matching the given ```predicate```, or -1 if the\n   * collection does not contain such element.\n   *\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutPrimitive<number>}\n   *\n   * @since 1.0.10\n   *\n   * @category Selector\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const indexOfLastEven = await koconutArray\n   *                         .indexOfLast(eachNumber => eachNumber % 2 == 0)\n   *                         .yield()\n   * console.log(indexOfLastEven)\n   * // ↑ 3\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const indexOfLastOdd = await koconutSet\n   *                         .indexOfLast(eachNumber => eachNumber % 2 == 1)\n   *                         .yield()\n   * console.log(indexOfLastOdd)\n   * // ↑ 4\n   * ```\n   */\n  indexOfLast(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<number> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<number>();\n    (koconutToReturn as any as KoconutOpener<number>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          for (\n            let eachIndex = dataArray.length - 1;\n            eachIndex >= 0;\n            eachIndex--\n          )\n            if (await predicate(dataArray[eachIndex])) return eachIndex;\n        }\n        return -1;\n      });\n    return koconutToReturn;\n  }\n\n  // Transformer\n  /**\n   * Returns a {@link KoconutMap} containing key-value paired {@link Entry} provided by ```transform```\n   * function applied to elements of the given collection.\n   * @param {Transformer<DataType,[KeyType, ValueType]| Pair<KeyType, ValueType> | KoconutPair<KeyType, ValueType> | Entry<KeyType, ValueType>| KoconutEntry<KeyType, ValueType>>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutMap<KeyType, ValueType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const doubledValueMap = await koconutArray\n   *                       .associate(eachNumber =>\n   *                           [eachNumber, eachNumber * 2]\n   *                           // ↑ Also can be\n   *                           //   new Pair(eachNumber, eachNumber * 2)\n   *                           //   Pair.from([eachNumber, eachNumber * 2])\n   *                           //   new KoconutPair(eachNumber, eachNumber * 2)\n   *                           //   new Entry(eachNumber, eachNumber * 2)\n   *                           //   Entry.from([eachNumber, eachNumber * 2])\n   *                           //   new KoconutEntry(eachNumber, eachNumber * 2)\n   *                       )\n   *                       .yield()\n   * console.log(doubledValueMap)\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const doubledKeyMap = await koconutSet\n   *                   .associate(eachNumber => [eachNumber * 2, eachNumber])\n   *                   .yield()\n   * console.log(doubledKeyMap)\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\n   *\n   * // Case 3 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const squaredValueMap = await koconutArray2\n   *               .associate(async eachNumber => [eachNumber, eachNumber * eachNumber])\n   *               .yield()\n   * console.log(squaredValueMap)\n   * // ↑ Map { 1 => 1, 2 => 4, 3 => 9, 4 => 16, 5 => 25 }\n   *\n   * const squaredKeyMap = await koconutArray2\n   *               .associate(async eachNumber => new Promise<[number, number]>(resolve => {\n   *                   resolve([eachNumber * eachNumber, eachNumber])\n   *               }))\n   *               .yield()\n   * console.log(squaredKeyMap)\n   * // ↑ Map { 1 => 1, 4 => 2, 9 => 3, 16 => 4, 25 => 5 }\n   * ```\n   */\n  associate<KeyType, ValueType>(\n    transform: Transformer<\n      DataType,\n      | [KeyType, ValueType]\n      | Pair<KeyType, ValueType>\n      | KoconutPair<KeyType, ValueType>\n      | Entry<KeyType, ValueType>\n      | KoconutEntry<KeyType, ValueType>\n    >,\n    thisArg: any = null,\n  ): KoconutMap<KeyType, ValueType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedMap = new Map<KeyType, ValueType>();\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            const eachTransformResult = await transform(eachDatum);\n            if (eachTransformResult instanceof KoconutPair) {\n              const eachPair = await eachTransformResult.yield();\n              if (eachPair != null)\n                processedMap.set(eachPair.first, eachPair.second);\n            } else if (eachTransformResult instanceof Pair)\n              processedMap.set(\n                eachTransformResult.first,\n                eachTransformResult.second,\n              );\n            else if (eachTransformResult instanceof KoconutEntry) {\n              const eachEntry = await eachTransformResult.yield();\n              if (eachEntry != null)\n                processedMap.set(eachEntry.key, eachEntry.value);\n            } else if (eachTransformResult instanceof Entry)\n              processedMap.set(\n                eachTransformResult.key,\n                eachTransformResult.value,\n              );\n            else\n              processedMap.set(eachTransformResult[0], eachTransformResult[1]);\n          }\n        }\n        return processedMap;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns a {@link KoconutMap} containing the elements from the given collection indexed by the key\n   * returned from ```keySelector``` function applied to each element.\n   * ```valueTransform``` callback function is optional. If it's not omitted the method returns\n   * a {@link KoconutMap} instance containing the values provide by the function and indexed by ```keySelector```\n   * applied to elements of the given collection.\n   *\n   * @param {Selector<DataType, KeyType>} keySelector A callback function that accepts an argument. The method calls the ```keySelector``` one time for each element in object.\n   *\n   * @param {Transformer<DataType, ValueType> | null} valueTransform A callback function that accepts an argument. The method calls the ```valueTransform``` one time for each element in object it it's not omitted.\n   *\n   * @param {any} keySelectorThisArg An object to which the ```this``` keyword can refer in the ```keySelector```. If ```keySelectorThisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @param {any} valueTransformThisArg An object to which the ```this``` keyword can refer in the ```valueTransform```. If ```valueTransformThisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutMap<KeyType, ValueType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const doubledKeyMap = await koconutArray\n   *                       .associateBy(eachNumber => eachNumber * 2)\n   *                       .yield()\n   * console.log(doubledKeyMap)\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const doubledKeyValueMap = await koconutSet\n   *                           .associateBy(\n   *                               eachNumber => eachNumber * 2,\n   *                               eachNumber => eachNumber * 2\n   *                           )\n   *                           .yield()\n   * console.log(doubledKeyValueMap)\n   * // ↑ Map { 2 => 2, 4 => 4, 6 => 6, 8 => 8, 10 => 10 }\n   *\n   * // Case 3 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const doubledKeySquaredValueMap = await koconutArray2\n   *                   .associateBy(\n   *                       async eachNumber => eachNumber * 2,\n   *                       eachNumber => new Promise(resolve => {\n   *                           resolve(eachNumber * eachNumber)\n   *                       })\n   *                   )\n   *                   .yield()\n   * console.log(doubledKeySquaredValueMap)\n   * // ↑ Map { 2 => 1, 4 => 4, 6 => 9, 8 => 16, 10 => 25 }\n   * ```\n   */\n  associateBy<KeyType, ValueType = DataType>(\n    keySelector: Selector<DataType, KeyType>,\n    valueTransform: Transformer<DataType, ValueType> | null = null,\n    keySelectorThisArg: any = null,\n    valueTransformThisArg: any = null,\n  ): KoconutMap<KeyType, ValueType> {\n    keySelector = keySelector.bind(keySelectorThisArg);\n    if (valueTransform)\n      valueTransform = valueTransform.bind(valueTransformThisArg);\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedMap = new Map<KeyType, ValueType>();\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            const eachKey = await keySelector(eachDatum);\n            const eachValue = valueTransform\n              ? await valueTransform(eachDatum)\n              : eachDatum;\n            processedMap.set(eachKey, eachValue as ValueType);\n          }\n        }\n        return processedMap;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  associateByTo<KeyType, ValueType = DataType>(\n    destination: Map<KeyType, ValueType>,\n    keySelector: Selector<DataType, KeyType>,\n    valueTransform: Transformer<DataType, ValueType> | null = null,\n    keySelectorThisArg: any = null,\n    valueTransformThisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    keySelector = keySelector.bind(keySelectorThisArg);\n    if (valueTransform)\n      valueTransform = valueTransform.bind(valueTransformThisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        await this.associateBy(\n          keySelector,\n          valueTransform,\n          keySelectorThisArg,\n          valueTransformThisArg,\n        )\n          .forEach((eachEntry) => {\n            destination.set(eachEntry.key, eachEntry.value);\n          })\n          .process();\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  associateTo<KeyType, ValueType>(\n    destination: Map<KeyType, ValueType>,\n    transform: Transformer<\n      DataType,\n      | [KeyType, ValueType]\n      | Pair<KeyType, ValueType>\n      | KoconutPair<KeyType, ValueType>\n      | Entry<KeyType, ValueType>\n      | KoconutEntry<KeyType, ValueType>\n    >,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        await this.associate(transform, thisArg)\n          .forEach((eachEntry) => {\n            destination.set(eachEntry.key, eachEntry.value);\n          })\n          .process();\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns a {@link KoconutMap} where keys are original elements of the current object and values\n   * are produced by the ```valueSelector``` function applied to each element.\n   *\n   * @param {Selector<DataType, ValueType>} valueSelector A callback function that accepts an argument. The method calls the ```valueSelector``` one time for each element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```valueSelector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutMap<DataType, ValueType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const doubledValueMap = await koconutArray\n   *                       .associateWith(eachNumber => eachNumber * 2)\n   *                       .yield()\n   * console.log(doubledValueMap)\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const stringifiedValueMap = await koconutSet\n   *                       .associateWith(eachNumber => eachNumber.toString())\n   *                       .yield()\n   * console.log(stringifiedValueMap)\n   * // ↑ Map { 1 => '1', 2 => '2', 3 => '3', 4 => '4', 5 => '5' }\n   *\n   * // Case 3 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const squaredValueMap = await koconutArray2\n   *                   .associateWith(async eachNumber => eachNumber * 2)\n   *                   .yield()\n   * console.log(squaredValueMap)\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\n   *\n   * const tripledValueMap = await koconutArray2\n   *                   .associateWith(eachNumber => new Promise(resolve => {\n   *                       resolve(eachNumber * 3)\n   *                   }))\n   *                   .yield()\n   * console.log(tripledValueMap)\n   * // ↑ Map { 1 => 3, 2 => 6, 3 => 9, 4 => 12, 5 => 15 }\n   * ```\n   */\n  associateWith<ValueType>(\n    valueSelector: Selector<DataType, ValueType>,\n    thisArg: any = null,\n  ): KoconutMap<DataType, ValueType> {\n    valueSelector = valueSelector.bind(thisArg);\n    const koconutToReturn = new KoconutMap<DataType, ValueType>();\n    (koconutToReturn as any as KoconutOpener<Map<DataType, ValueType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedMap = new Map<DataType, ValueType>();\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            const eachValue = await valueSelector(eachDatum);\n            processedMap.set(eachDatum, eachValue);\n          }\n        }\n        return processedMap;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  associateWithTo<ValueType>(\n    destination: Map<DataType, ValueType>,\n    valueSelector: Selector<DataType, ValueType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    valueSelector = valueSelector.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        await this.associateWith(valueSelector, thisArg)\n          .forEach((eachEntry) => {\n            destination.set(eachEntry.key, eachEntry.value);\n          })\n          .process();\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Splits this collection into a {@link KoconutArray} of ```Arrays```\n   * each not exceeding the given ```size```.\n   * @param {number} size The number of elements to take in each ```Array```, must be positive and can be greater than the number of elements in this collection.\n   * @param {Transformer<Array<DataType>, ResultDataType> | null} transform A callback function that accepts an argument. The method calls the ```transform``` with chunked data ```array``` when it's not omitted.\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @returns {KoconutArray<Array<DataType> | ResultDataType>}\n   *\n   * @throws {@link KoconutInvalidArgumentException}\n   * -- When ```size``` is not greater than 0.\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const chunkedArray = await koconutArray\n   *                       .chunked(3)\n   *                       .yield()\n   * console.log(chunkedArray)\n   * // ↑ [ [ 1, 2, 3 ], [ 4, 5 ] ]\n   *\n   * try {\n   *   await koconutArray\n   *       .chunked(0)\n   *       .yield()\n   * } catch(error) {\n   *   console.log(error.name)\n   *   // ↑ Koconut Invalid Argument Exception\n   * }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const chunkedSum = await koconutSet\n   *       .chunked(\n   *           3,\n   *           numbers => numbers\n   *                       .reduce(\n   *                           (acc, eachNumber) => acc + eachNumber, 0\n   *                       )\n   *       )\n   *       .yield()\n   * console.log(chunkedSum)\n   * // ↑ [ 6, 9 ]\n   *\n   * // Case 3 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const chunkedMax = await koconutArray2\n   *       .chunked(\n   *           2,\n   *           async numbers => await KoconutArray\n   *                                   .from(numbers)\n   *                                   .maxByOrNull(\n   *                                       eachNumber => eachNumber\n   *                                   )\n   *                                   .yield()\n   *       )\n   *       .yield()\n   * console.log(chunkedMax)\n   * // ↑ [ 2, 4, 5 ]\n   *\n   * const chunkedMin = await koconutArray2\n   *       .chunked(\n   *           2,\n   *           numbers => KoconutArray\n   *                       .from(numbers)\n   *                       .minByOrNull(\n   *                           eachNumber => eachNumber\n   *                       )\n   *                       .yield()\n   *       )\n   *       .yield()\n   * console.log(chunkedMin)\n   * // ↑ [ 1, 3, 5 ]\n   * ```\n   */\n  chunked<ResultDataType>(\n    size: number,\n    transform: Transformer<Array<DataType>, ResultDataType> | null,\n    thisArg: any,\n  ): KoconutArray<Array<DataType> | ResultDataType>;\n  /** @ignore */\n  chunked(size: number): KoconutArray<Array<DataType>>;\n  /** @ignore */\n  chunked<ResultDataType>(\n    size: number,\n    transform: Transformer<Array<DataType>, ResultDataType>,\n  ): KoconutArray<ResultDataType>;\n  /** @ignore */\n  chunked<ResultDataType>(\n    size: number,\n    transform: Transformer<Array<DataType>, ResultDataType>,\n    thisArg: any,\n  ): KoconutArray<ResultDataType>;\n  chunked<ResultDataType>(\n    size: number,\n    transform: Transformer<Array<DataType>, ResultDataType> | null = null,\n    thisArg: any = null,\n  ): KoconutArray<Array<DataType> | ResultDataType> {\n    if (transform) transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<\n      Array<DataType> | ResultDataType\n    >();\n    (\n      koconutToReturn as any as KoconutOpener<\n        Array<Array<DataType>> | Array<ResultDataType>\n      >\n    )\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (size <= 0)\n          throw new KoconutInvalidArgumentException(\n            `Size must be greater than 0. Given size : ${size}.`,\n          );\n        const processedArray = new Array<Array<DataType>>();\n        if (this.data != null) {\n          let currentIndex = 0;\n          const dataArray = Array.from(this.data);\n          while (currentIndex < dataArray.length) {\n            processedArray.push(\n              dataArray.slice(currentIndex, currentIndex + size),\n            );\n            currentIndex += size;\n          }\n        }\n        if (transform) {\n          const transformedArray = new Array<ResultDataType>();\n          for (const eachProcessedIndex in processedArray)\n            if (\n              Object.prototype.hasOwnProperty.call(\n                processedArray,\n                eachProcessedIndex,\n              )\n            )\n              transformedArray.push(\n                await transform(processedArray[eachProcessedIndex]),\n              );\n          return transformedArray;\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns a {@link KoconutArray} of all elements yielded from results of ```transform``` function being invoked on each element of original collection.\n   *\n   * @param {IndexedTransformer<DataType, Iterable<ResultDataType>>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutArray<ResultDataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(100, 101, 102)\n   *\n   * const allNumbersAndIndexOfArray = await koconutArray\n   *                           .flatMapIndexed((eachIndex, eachNumber) =>\n   *                               [eachIndex, eachNumber]\n   *                           )\n   *                           .yield()\n   * console.log(allNumbersAndIndexOfArray)\n   * // ↑ [ 0, 100, 1, 101, 2, 102 ]\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(100, 101, 102)\n   *\n   * const allNumbersAndIndexOfSet = await koconutSet\n   *                           .flatMapIndexed((eachIndex, eachNumber) =>\n   *                               [eachIndex, eachNumber]\n   *                           )\n   *                           .yield()\n   * console.log(allNumbersAndIndexOfSet)\n   * // ↑ [ 0, 100, 1, 101, 2, 102 ]\n   *\n   * // Case 3 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(123, 987)\n   *\n   * const allDigitsAndIndexInArray = await koconutArray2\n   *                       .flatMapIndexed(async (eachIndex, eachNumber) => {\n   *                           const digits = new Array<number>()\n   *                           while(eachNumber != 0) {\n   *                               digits.unshift(eachNumber % 10)\n   *                               eachNumber = Math.floor(eachNumber / 10)\n   *                           }\n   *                           return [eachIndex, ...digits]\n   *                       })\n   *                       .yield()\n   * console.log(allDigitsAndIndexInArray)\n   * // ↑ [\n   * //     0, 1, 2, 3,\n   * //     1, 9, 8, 7\n   * //   ]\n   *\n   * const allNumberAndIndexCharactersInArray = await koconutArray2\n   *           .flatMapIndexed((eachInex, eachNumber) => new Promise<string>(resolve => {\n   *               resolve(`${eachInex}${eachNumber}`)\n   *           }))\n   *           .yield()\n   * console.log(allNumberAndIndexCharactersInArray)\n   * // ↑ [\n   * //     '0', '1', '2',\n   * //     '3', '1', '9',\n   * //     '8', '7'\n   * //   ]\n   * ```\n   */\n  flatMapIndexed<ResultDataType>(\n    transform: IndexedTransformer<DataType, Iterable<ResultDataType>>,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        if (this.data != null) {\n          let eachIndex = 0;\n          for (const eachDatum of this.data)\n            for (const eachSubElement of await transform(\n              eachIndex++,\n              eachDatum,\n            ))\n              processedArray.push(eachSubElement);\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  flatMapTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: Transformer<DataType, Iterable<ResultDataType>>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    return KoconutCollection.fromIterable(\n      super.flatMapTo(destination, transform, thisArg),\n    );\n  }\n\n  // No Comment - KoconutArray/KoconutSet\n  flatMapIndexedTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: IndexedTransformer<DataType, Iterable<ResultDataType>>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const flattenCollection = this.flatMapIndexed(transform, thisArg);\n        if (destination instanceof Array) {\n          await flattenCollection\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await flattenCollection\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Groups values returned by the ```valueTransform``` function applied to each element of the original collection\n   * by the key returned by the given ```keySelector``` function applied to the element and returns a map where each\n   * group key is associated with a list of corresponding values. If ```valueTransform``` is omitted, the ```value``` of\n   * each entry would be original element.\n   *\n   * @param {Selector<DataType, KeyType>} keySelector A callback function that accepts an argument. The method calls the ```keySelector``` one time for each element in object.\n   *\n   * @param {Transformer<DataType, ValueType> | null} valueTransform A callback function that accepts an argument. The method calls the ```valueTransform``` one time for each element in object it it's not omitted.\n   *\n   * @param {any} keySelectorThisArg An object to which the ```this``` keyword can refer in the ```keySelector```. If ```keySelectorThisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @param {any} valueTransformThisArg An object to which the ```this``` keyword can refer in the ```valueTransform```. If ```valueTransformThisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutMap<KeyType, Array<ValueType>>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const groupedByOddParity = await koconutArray\n   *                             .groupBy(eachNumber => eachNumber % 2 == 1)\n   *                             .yield()\n   * console.log(groupedByOddParity)\n   * // ↑ Map { true => [ 1, 3, 5 ], false => [ 2, 4 ] }\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const groupedByEvenParityToString = await koconutSet\n   *                             .groupBy(\n   *                                 eachNumber => eachNumber % 2 == 0,\n   *                                 eachNumber => eachNumber.toString()\n   *                             )\n   *                             .yield()\n   * console.log(groupedByEvenParityToString)\n   * // ↑ Map { false => [ '1', '3', '5' ], true => [ '2', '4' ] }\n   * ```\n   */\n  groupBy<KeyType, ValueType = DataType>(\n    keySelector: Selector<DataType, KeyType>,\n    valueTransform: Transformer<DataType, ValueType> | null = null,\n    keySelectorThisArg: any = null,\n    valueTransformThisArg: any = null,\n  ): KoconutMap<KeyType, Array<ValueType>> {\n    keySelector = keySelector.bind(keySelectorThisArg);\n    if (valueTransform)\n      valueTransform = valueTransform.bind(valueTransformThisArg);\n    const koconutToReturn = new KoconutMap<KeyType, Array<ValueType>>();\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, Array<ValueType>>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedMap = new Map<KeyType, Array<ValueType>>();\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            const eachKey = await keySelector(eachDatum);\n            const eachValue = valueTransform\n              ? await valueTransform(eachDatum)\n              : eachDatum;\n            if (!processedMap.has(eachKey))\n              processedMap.set(eachKey, new Array());\n            processedMap.get(eachKey)?.push(eachValue as ValueType);\n          }\n        }\n        return processedMap;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment -- KoconutArray/KoconutSet\n  groupByTo<KeyType, ValueType = DataType>(\n    destination: Map<KeyType, Array<ValueType>>,\n    keySelector: Selector<DataType, KeyType>,\n    valueTransform: Transformer<DataType, ValueType> | null = null,\n    keySelectorThisArg: any = null,\n    valueTransformThisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    keySelector = keySelector.bind(keySelectorThisArg);\n    if (valueTransform)\n      valueTransform = valueTransform.bind(valueTransformThisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            const eachKey = await keySelector(eachDatum);\n            const eachValue = valueTransform\n              ? await valueTransform(eachDatum)\n              : eachDatum;\n            if (!destination.has(eachKey))\n              destination.set(eachKey, new Array());\n            destination.get(eachKey)?.push(eachValue as ValueType);\n          }\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment -- KoconutArray/KoconutSet\n  mapTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: Transformer<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    return KoconutCollection.fromIterable(\n      super.mapTo(destination, transform, thisArg),\n    );\n  }\n\n  // No Comment -- KoconutArray/KoconutSet\n  mapNotNullTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: Transformer<DataType, ResultDataType | void | null | undefined>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    return KoconutCollection.fromIterable(\n      super.mapNotNullTo(destination, transform, thisArg),\n    );\n  }\n\n  /**\n   * Returns a list of all elements yielded from results of ```transform``` function being invoked\n   * on each element and its index in the original collection.\n   *\n   * @param {IndexedTransformer<DataType, ResultDataType>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutArray<ResultDataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const sumsOfIndexesAndNumbers = await koconutArray\n   *                   .mapIndexed((eachIndex, eachNumber) => eachIndex + eachNumber)\n   *                   .yield()\n   * console.log(sumsOfIndexesAndNumbers)\n   * // ↑ [ 1, 3, 5, 7, 9 ]\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const productsOfIndexesAndNumbers = await koconutSet\n   *                   .mapIndexed((eachIndex, eachNumber) => eachIndex * eachNumber)\n   *                   .yield()\n   * console.log(productsOfIndexesAndNumbers)\n   * // ↑ [ 0, 2, 6, 12, 20 ]\n   *\n   * // Case 3 -- You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const averagesOfIndexesAndNumbers = await koconutArray2\n   *                   .mapIndexed(async (eachIndex, eachNumber) => (eachIndex + eachNumber)/2)\n   *                   .yield()\n   * console.log(averagesOfIndexesAndNumbers)\n   * // ↑ [ 0.5, 1.5, 2.5, 3.5, 4.5 ]\n   *\n   * const indexesMinusNumbers = await koconutArray2\n   *               .mapIndexed((eachIndex, eachNumber) => new Promise(resolve => {\n   *                   resolve(eachIndex - eachNumber)\n   *               }))\n   *               .yield()\n   * console.log(indexesMinusNumbers)\n   * // ↑ [ -1, -1, -1, -1, -1 ]\n   * ```\n   */\n  mapIndexed<ResultDataType>(\n    transform: IndexedTransformer<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        if (this.data != null) {\n          for (const [eachIndex, eachDatum] of Array.from(this.data).entries())\n            processedArray.push(\n              await transform(eachIndex as number, eachDatum),\n            );\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment -- KoconutArray/KoconutSet\n  mapIndexedTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: IndexedTransformer<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const mappedCollection = this.mapIndexed(transform, thisArg);\n        if (destination instanceof Array) {\n          await mappedCollection\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await mappedCollection\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  /**\n   * Returns a {@link KoconutArray} containing only the results that are not ```null``` nor ```undefined``` of applying\n   * the given ```transform``` function to each element and its index in the original collection.\n   *\n   * @param {IndexedTransformer< DataType,ResultDataType | void | null | undefined>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\n   *\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\n   *\n   * @return {KoconutArray<ResultDataType>}\n   *\n   * @since 1.0.10\n   *\n   * @category Transformer\n   *\n   * @example\n   * ```typescript\n   * // Case 1 -- KoconutArray\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\n   *\n   * const sumsOfIndexesAndNumbersWhereNumberIsEven = await koconutArray\n   *                   .mapIndexedNotNull((eachIndex, eachNumber) => {\n   *                       if(eachNumber % 2 == 0)\n   *                           return eachIndex + eachNumber\n   *                       // return\n   *                       // return null\n   *                       // return undefined\n   *                       // ↑ You can use any one of\n   *                       //   them or just omit it.\n   *                   })\n   *                   .yield()\n   * console.log(sumsOfIndexesAndNumbersWhereNumberIsEven)\n   * // ↑ [ 3, 7 ]\n   *\n   * // Case 2 -- KoconutSet\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\n   *\n   * const productsOfIndexesAndNumbersWhereIndexLessThan2 = await koconutSet\n   *                   .mapIndexedNotNull((eachIndex, eachNumber) => {\n   *                       if(eachIndex <= 2)\n   *                           return eachIndex * eachNumber\n   *                   })\n   *                   .yield()\n   * console.log(productsOfIndexesAndNumbersWhereIndexLessThan2)\n   * // ↑ [ 0, 2, 6 ]\n   *\n   * // Case 3 - You can also do it asynchronously\n   * const koconutArray2 = KoconutArray.of(1,2,3,4,5)\n   *\n   * const sumsOfIndexesAndNumbersWhereNumberIsOdd = await koconutArray2\n   *                   .mapIndexedNotNull(async (eachIndex, eachNumber) => {\n   *                       if(eachNumber % 2 == 1)\n   *                           return eachIndex + eachNumber\n   *                   })\n   *                   .yield()\n   * console.log(sumsOfIndexesAndNumbersWhereNumberIsOdd)\n   * // ↑ [ 1, 5, 9 ]\n   *\n   * const squaredNumbersWhereIndexIsEven = await koconutArray2\n   *           .mapIndexedNotNull((eachIndex, eachNumber) => new Promise<number | null>(resolve => {\n   *               if(eachIndex % 2 == 0)\n   *                   resolve(eachNumber * eachNumber)\n   *               else resolve(null)\n   *           }))\n   *           .yield()\n   * console.log(squaredNumbersWhereIndexIsEven)\n   * // ↑ [ 1, 9, 25 ]\n   * ```\n   */\n  mapIndexedNotNull<ResultDataType>(\n    transform: IndexedTransformer<\n      DataType,\n      ResultDataType | void | null | undefined\n    >,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        if (this.data != null) {\n          for (const [eachIndex, eachDatum] of Array.from(\n            this.data,\n          ).entries()) {\n            const eachResultData = await transform(\n              eachIndex as number,\n              eachDatum,\n            );\n            if (eachResultData != null && eachResultData != undefined)\n              processedArray.push(eachResultData);\n          }\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  // No Comment -- KoconutArray/KoconutSet\n  mapIndexedNotNullTo<ResultDataType>(\n    destination: Array<ResultDataType> | Set<ResultDataType>,\n    transform: IndexedTransformer<\n      DataType,\n      ResultDataType | void | null | undefined\n    >,\n    thisArg: any = null,\n  ): KoconutCollection<DataType, WrapperType> {\n    transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const mappedCollection = this.mapIndexedNotNull(transform, thisArg);\n        if (destination instanceof Array) {\n          await mappedCollection\n            .forEach((eachElement) => {\n              destination.push(eachElement);\n            })\n            .process();\n        } else {\n          await mappedCollection\n            .asSet()\n            .forEach((eachElement) => {\n              destination.add(eachElement);\n            })\n            .process();\n        }\n        return this.data!;\n      });\n    return koconutToReturn;\n  }\n\n  /* Functions */\n  intersect(other: Iterable<DataType>): KoconutSet<DataType> {\n    const koconutToReturn = new KoconutSet<DataType>();\n    (koconutToReturn as any as KoconutOpener<Set<DataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedSet = new Set<DataType>();\n        if (this.data) {\n          const otherArray = KoconutArray.from(other);\n          for (const eachDatum of this.data) {\n            if (await otherArray.contains(eachDatum).yield())\n              processedSet.add(eachDatum);\n          }\n        }\n        return processedSet;\n      });\n    return koconutToReturn;\n  }\n\n  // joinTo\n  // joinToString\n  join(\n    separator: string = ', ',\n    prefix: string = '',\n    postfix: string = '',\n    limit: number = -1,\n    truncated: string = '...',\n    transform: Transformer<DataType, any> | null = null,\n    thisArg: any = null,\n  ): KoconutPrimitive<string> {\n    if (transform) transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<string>();\n    (koconutToReturn as any as KoconutOpener<string>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let resultString = prefix;\n        if (this.data != null) {\n          let currentCount = 0;\n          const length = this.mSize;\n          for (const eachDatum of this.data) {\n            if (currentCount == limit) {\n              resultString += truncated;\n              break;\n            }\n            resultString += transform ? await transform(eachDatum) : eachDatum;\n            currentCount++;\n            if (currentCount != length && currentCount != limit)\n              resultString += separator;\n          }\n        }\n        resultString += postfix;\n        return resultString;\n      });\n    return koconutToReturn;\n  }\n\n  last(\n    predicate: Predicator<DataType> | null = null,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType> {\n    if (predicate) predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType>();\n    (koconutToReturn as any as KoconutOpener<DataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0)\n          throw new KoconutNoSuchElementException(\n            `Source data is null or empty`,\n          );\n        const dataArray = Array.from(this.data);\n        if (predicate) {\n          for (let eachIndex = dataArray.length; eachIndex >= 0; eachIndex--)\n            if (await predicate(dataArray[eachIndex]))\n              return dataArray[eachIndex];\n          throw new KoconutNoSuchElementException(`No such element is found`);\n        }\n        return dataArray[dataArray.length - 1];\n      });\n    return koconutToReturn;\n  }\n\n  lastIndexOf(element: DataType): KoconutPrimitive<number> {\n    const koconutToReturn = new KoconutPrimitive<number>();\n    (koconutToReturn as any as KoconutOpener<number>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          for (\n            let eachIndex = dataArray.length - 1;\n            eachIndex >= 0;\n            eachIndex--\n          ) {\n            const eachElement = dataArray[eachIndex];\n            if (KoconutTypeChecker.checkIsEquatable(eachElement)) {\n              const equalityResult = eachElement.equalsTo(element);\n              if (\n                (equalityResult instanceof KoconutPrimitive &&\n                  (await equalityResult.yield())) ||\n                (!(equalityResult instanceof KoconutPrimitive) &&\n                  equalityResult)\n              )\n                return eachIndex;\n            } else if (eachElement == element) return eachIndex;\n          }\n        }\n        return -1;\n      });\n    return koconutToReturn;\n  }\n\n  lastOrNull(\n    predicate: Predicator<DataType> | null = null,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType | null> {\n    if (predicate) predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          const length = dataArray.length;\n          if (length == 0) return null;\n          if (predicate) {\n            for (let eachIndex = length - 1; eachIndex >= 0; eachIndex--)\n              if (await predicate(dataArray[eachIndex]))\n                return dataArray[eachIndex] != undefined\n                  ? dataArray[eachIndex]\n                  : null;\n          } else\n            return dataArray[length - 1] != undefined\n              ? dataArray[length - 1]\n              : null;\n        }\n        return null;\n      });\n    return koconutToReturn;\n  }\n\n  minus(\n    elements: DataType | Iterable<DataType>,\n  ): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<DataType>();\n        if (this.data != null) {\n          let dataToExcept = new Array<DataType>();\n          if (typeof (elements as any)[Symbol.iterator] === 'function')\n            dataToExcept = Array.from(elements as Iterable<DataType>);\n          else dataToExcept.push(elements as DataType);\n          const koconutDataToExceptArray = KoconutArray.from(dataToExcept);\n          for (const eachDatum of this.data) {\n            if (!(await koconutDataToExceptArray.contains(eachDatum).yield()))\n              processedArray.push(eachDatum);\n          }\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  minusElement(element: DataType): KoconutCollection<DataType, WrapperType> {\n    return this.minus(element);\n  }\n\n  // orEmpty\n  partition(\n    predicate: Predicator<DataType>,\n    thisArg: any = null,\n  ): KoconutPair<WrapperType, WrapperType> {\n    predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPair<WrapperType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<Pair<WrapperType, WrapperType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedFirstArray = new Array<DataType>();\n        const processedSecondArray = new Array<DataType>();\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            if (await predicate(eachDatum)) processedFirstArray.push(eachDatum);\n            else processedSecondArray.push(eachDatum);\n          }\n        }\n        if (this.data instanceof Array)\n          return new Pair(\n            processedFirstArray as WrapperType,\n            processedSecondArray as WrapperType,\n          );\n        else\n          return new Pair(\n            new Set(processedFirstArray) as WrapperType,\n            new Set(processedSecondArray) as WrapperType,\n          );\n      });\n    return koconutToReturn;\n  }\n\n  plus(\n    elements: DataType | Iterable<DataType>,\n  ): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = this.data\n          ? Array.from(this.data)\n          : new Array<DataType>();\n        if (typeof (elements as any)[Symbol.iterator] === 'function') {\n          const elementsArray = Array.from(elements as Iterable<DataType>);\n          for (const eachDatum of elementsArray) processedArray.push(eachDatum);\n        } else processedArray.push(elements as DataType);\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  plusElement(element: DataType): KoconutCollection<DataType, WrapperType> {\n    return this.plus(element);\n  }\n\n  random(): KoconutPrimitive<DataType> {\n    const koconutToReturn = new KoconutPrimitive<DataType>();\n    (koconutToReturn as any as KoconutOpener<DataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0)\n          throw new KoconutNoSuchElementException(\n            `Source data is null or empty`,\n          );\n        const dataArray = Array.from(this.data);\n        return dataArray[Math.floor(Math.random() * dataArray.length)];\n      });\n    return koconutToReturn;\n  }\n\n  randomOrNull(): KoconutPrimitive<DataType | null> {\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0) return null;\n        const dataArray = Array.from(this.data);\n        return dataArray[Math.floor(Math.random() * dataArray.length)];\n      });\n    return koconutToReturn;\n  }\n\n  reduce(\n    operation: Operator<DataType, DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType>();\n    (koconutToReturn as any as KoconutOpener<DataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0)\n          throw new KoconutNoSuchElementException(\n            `Source data is null or empty`,\n          );\n        const dataArray = Array.from(this.data);\n        let acc = dataArray[0];\n        for (let eachIndex = 1; eachIndex < dataArray.length; eachIndex++)\n          acc = await operation(acc, dataArray[eachIndex]);\n        return acc;\n      });\n    return koconutToReturn;\n  }\n\n  reduceIndexed(\n    operation: IndexedOperator<DataType, DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType>();\n    (koconutToReturn as any as KoconutOpener<DataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0)\n          throw new KoconutNoSuchElementException(\n            `Source data is null or empty`,\n          );\n        const dataArray = Array.from(this.data);\n        let acc = dataArray[0];\n        for (let eachIndex = 1; eachIndex < dataArray.length; eachIndex++)\n          acc = await operation(eachIndex, acc, dataArray[eachIndex]);\n        return acc;\n      });\n    return koconutToReturn;\n  }\n\n  reduceIndexedOrNull(\n    operation: IndexedOperator<DataType, DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType | null> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0) return null;\n        const dataArray = Array.from(this.data);\n        let acc = dataArray[0];\n        for (let eachIndex = 1; eachIndex < dataArray.length; eachIndex++)\n          acc = await operation(eachIndex, acc, dataArray[eachIndex]);\n        return acc;\n      });\n    return koconutToReturn;\n  }\n\n  reduceOrNull(\n    operation: Operator<DataType, DataType>,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType | null> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0) return null;\n        const dataArray = Array.from(this.data);\n        let acc = dataArray[0];\n        for (let eachIndex = 1; eachIndex < dataArray.length; eachIndex++)\n          acc = await operation(acc, dataArray[eachIndex]);\n        return acc;\n      });\n    return koconutToReturn;\n  }\n\n  // requireNoNulls\n  reversed(): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = this.data\n          ? Array.from(this.data).reverse()\n          : new Array<DataType>();\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  runningFold<ResultDataType>(\n    initial: ResultDataType,\n    operation: Operator<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        processedArray.push(initial);\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            initial = await operation(initial, eachDatum);\n            processedArray.push(initial);\n          }\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  runningFoldIndexed<ResultDataType>(\n    initial: ResultDataType,\n    operation: IndexedOperator<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        processedArray.push(initial);\n        if (this.data != null) {\n          for (const [eachIndex, eachDatum] of Array.from(\n            this.data,\n          ).entries()) {\n            initial = await operation(eachIndex as number, initial, eachDatum);\n            processedArray.push(initial);\n          }\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  runningReduce(\n    operation: Operator<DataType, DataType>,\n    thisArg: any = null,\n  ): KoconutArray<DataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutArray<DataType>();\n    (koconutToReturn as any as KoconutOpener<Array<DataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0)\n          throw new KoconutNoSuchElementException(\n            `Source data is null or empty`,\n          );\n        const processedArray = new Array<DataType>();\n        const dataArray = Array.from(this.data);\n        let acc = dataArray[0];\n        processedArray.push(acc);\n        for (let eachIndex = 1; eachIndex < dataArray.length; eachIndex++) {\n          acc = await operation(acc, dataArray[eachIndex]);\n          processedArray.push(acc);\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  runningReduceIndexed(\n    operation: IndexedOperator<DataType, DataType>,\n    thisArg: any = null,\n  ): KoconutArray<DataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutArray<DataType>();\n    (koconutToReturn as any as KoconutOpener<Array<DataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0)\n          throw new KoconutNoSuchElementException(\n            `Source data is null or empty`,\n          );\n        const processedArray = new Array<DataType>();\n        const dataArray = Array.from(this.data);\n        let acc = dataArray[0];\n        processedArray.push(acc);\n        for (let eachIndex = 1; eachIndex < dataArray.length; eachIndex++) {\n          acc = await operation(eachIndex, acc, dataArray[eachIndex]);\n          processedArray.push(acc);\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  scan<ResultDataType>(\n    initial: ResultDataType,\n    operation: Operator<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        processedArray.push(initial);\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            initial = await operation(initial, eachDatum);\n            processedArray.push(initial);\n          }\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  scanIndexed<ResultDataType>(\n    initial: ResultDataType,\n    operation: IndexedOperator<DataType, ResultDataType>,\n    thisArg: any = null,\n  ): KoconutArray<ResultDataType> {\n    operation = operation.bind(thisArg);\n    const koconutToReturn = new KoconutArray<ResultDataType>();\n    (koconutToReturn as any as KoconutOpener<Array<ResultDataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<ResultDataType>();\n        processedArray.push(initial);\n        if (this.data != null) {\n          for (const [eachIndex, eachDatum] of Array.from(\n            this.data,\n          ).entries()) {\n            initial = await operation(eachIndex as number, initial, eachDatum);\n            processedArray.push(initial);\n          }\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  shuffled(): KoconutCollection<DataType, WrapperType> {\n    const koconutToReturn = new KoconutCollection<DataType, WrapperType>();\n    (koconutToReturn as any as KoconutOpener<WrapperType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<DataType>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          const indexes = Object.keys(dataArray).map((eachIndex) =>\n            parseInt(eachIndex),\n          );\n          while (indexes.length > 0)\n            processedArray.push(\n              dataArray[\n                indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0]\n              ],\n            );\n        }\n        if (this.data instanceof Array) return processedArray as WrapperType;\n        else return new Set(processedArray) as WrapperType;\n      });\n    return koconutToReturn;\n  }\n\n  single(\n    predicate: Predicator<DataType> | null = null,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType> {\n    if (predicate) predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType>();\n    (koconutToReturn as any as KoconutOpener<DataType>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || this.mSize == 0)\n          throw new KoconutNoSuchElementException(\n            `Source data is null or empty`,\n          );\n        if (predicate) {\n          let dataToReturn: DataType | null = null;\n          for (const eachDatum of this.data) {\n            if (await predicate(eachDatum)) {\n              if (dataToReturn == null) dataToReturn = eachDatum;\n              else\n                throw new KoconutConflictException(\n                  'There are more than 2 elements maching the given predicate',\n                );\n            }\n          }\n          if (dataToReturn == null)\n            throw new KoconutNoSuchElementException(\n              'No element exists matching the given predicate',\n            );\n          else return dataToReturn;\n        } else return Array.from(this.data)[0];\n      });\n    return koconutToReturn;\n  }\n\n  singleOrNull(\n    predicate: Predicator<DataType> | null = null,\n    thisArg: any = null,\n  ): KoconutPrimitive<DataType | null> {\n    if (predicate) predicate = predicate.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<DataType | null>();\n    (koconutToReturn as any as KoconutOpener<DataType | null>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        if (this.data == null || Array.from(this.data).length == 0) return null;\n        if (predicate) {\n          let dataToReturn: DataType | null = null;\n          for (const eachDatum of this.data) {\n            if (await predicate(eachDatum))\n              if (dataToReturn == null) dataToReturn = eachDatum;\n              else return null;\n          }\n          return dataToReturn;\n        } else return Array.from(this.data)[0];\n      });\n    return koconutToReturn;\n  }\n\n  subtract(other: Iterable<DataType>): KoconutSet<DataType> {\n    const koconutToReturn = new KoconutSet<DataType>();\n    (koconutToReturn as any as KoconutOpener<Set<DataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedSet = new Set<DataType>();\n        if (this.data != null) {\n          const koconutDataToExceptArray = KoconutArray.from(other);\n          for (const eachDatum of this.data) {\n            if (!(await koconutDataToExceptArray.contains(eachDatum).yield()))\n              processedSet.add(eachDatum);\n          }\n        }\n        return processedSet;\n      });\n    return koconutToReturn;\n  }\n\n  sumBy(\n    selector: Selector<DataType, number>,\n    thisArg: any = null,\n  ): KoconutPrimitive<number> {\n    selector = selector.bind(thisArg);\n    const koconutToReturn = new KoconutPrimitive<number>();\n    (koconutToReturn as any as KoconutOpener<number>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        let sum = 0;\n        if (this.data != null) {\n          for (const eachDatum of this.data) {\n            sum += await selector(eachDatum);\n          }\n        }\n        return sum;\n      });\n    return koconutToReturn;\n  }\n\n  // sumByDouble\n  // sumOf\n\n  union(other: Iterable<DataType>): KoconutSet<DataType> {\n    const koconutToReturn = new KoconutSet<DataType>();\n    (koconutToReturn as any as KoconutOpener<Set<DataType>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedSet =\n          this.data == null ? new Set<DataType>() : new Set(this.data);\n        for (const eachDatum of other) processedSet.add(eachDatum);\n        return (await KoconutSet.from(processedSet)\n          .distinct()\n          .yield()) as Set<DataType>;\n      });\n    return koconutToReturn;\n  }\n\n  // unzip\n  windowed<ResultDataType>(\n    size: number,\n    step: number,\n    partialWindows: boolean,\n    transform: Transformer<Array<DataType>, ResultDataType> | null,\n    thisArg: any,\n  ): KoconutArray<Array<DataType> | ResultDataType>;\n  /** @ignore */\n  windowed(size: number): KoconutArray<Array<DataType>>;\n  /** @ignore */\n  windowed(size: number, step: number): KoconutArray<Array<DataType>>;\n  /** @ignore */\n  windowed(\n    size: number,\n    step: number,\n    partialWindows: boolean,\n  ): KoconutArray<Array<DataType>>;\n  /** @ignore */\n  windowed<ResultDataType>(\n    size: number,\n    step: number,\n    partialWindows: boolean,\n    transform: Transformer<Array<DataType>, ResultDataType>,\n  ): KoconutArray<ResultDataType>;\n  /** @ignore */\n  windowed<ResultDataType>(\n    size: number,\n    step: number,\n    partialWindows: boolean,\n    transform: Transformer<Array<DataType>, ResultDataType>,\n    thisArg: any,\n  ): KoconutArray<ResultDataType>;\n  windowed<ResultDataType>(\n    size: number,\n    step: number = 1,\n    partialWindows: boolean = false,\n    transform: Transformer<Array<DataType>, ResultDataType> | null = null,\n    thisArg: any = null,\n  ): KoconutArray<Array<DataType> | ResultDataType> {\n    if (size < 0) size = -size;\n    if (step < 0) step = -step;\n    if (transform) transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<\n      Array<DataType> | ResultDataType\n    >();\n    (\n      koconutToReturn as any as KoconutOpener<\n        Array<Array<DataType>> | Array<ResultDataType>\n      >\n    )\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<Array<DataType>>();\n        if (this.data != null) {\n          let currentIndex = 0;\n          const dataArray = Array.from(this.data);\n          while (currentIndex < dataArray.length) {\n            const eachChunkedData = dataArray.slice(\n              currentIndex,\n              currentIndex + size,\n            );\n            currentIndex += step;\n            if (partialWindows || eachChunkedData.length == size)\n              processedArray.push(eachChunkedData);\n          }\n        }\n        if (transform) {\n          const transformedArray = new Array<ResultDataType>();\n          for (const eachProcessedDatum of processedArray)\n            transformedArray.push(await transform(eachProcessedDatum));\n          return transformedArray;\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  withIndex(): KoconutArray<Entry<number, DataType>> {\n    const koconutToReturn = new KoconutArray<Entry<number, DataType>>();\n    (koconutToReturn as any as KoconutOpener<Array<Entry<number, DataType>>>)\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<Entry<number, DataType>>();\n        if (this.data != null) {\n          for (const [index, element] of Array.from(this.data).entries()) {\n            processedArray.push(new Entry(index as number, element));\n          }\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  zip<OtherDataType, ResultDataType>(\n    other: Iterable<OtherDataType>,\n    transform: Zipper<DataType, OtherDataType, ResultDataType> | null,\n    thisArg: any,\n  ): KoconutArray<Pair<DataType, OtherDataType> | ResultDataType>;\n  zip<OtherDataType>(\n    other: Iterable<OtherDataType>,\n  ): KoconutArray<Pair<DataType, OtherDataType>>;\n  zip<OtherDataType, ResultDataType>(\n    other: Iterable<OtherDataType>,\n    transform: Zipper<DataType, OtherDataType, ResultDataType>,\n  ): KoconutArray<ResultDataType>;\n  zip<OtherDataType, ResultDataType>(\n    other: Iterable<OtherDataType>,\n    transform: Zipper<DataType, OtherDataType, ResultDataType>,\n    thisArg: any,\n  ): KoconutArray<ResultDataType>;\n  zip<OtherDataType, ResultDataType>(\n    other: Iterable<OtherDataType>,\n    transform: Zipper<DataType, OtherDataType, ResultDataType> | null = null,\n    thisArg: any = null,\n  ): KoconutArray<Pair<DataType, OtherDataType> | ResultDataType> {\n    if (transform) transform = transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<\n      Pair<DataType, OtherDataType> | ResultDataType\n    >();\n    (\n      koconutToReturn as any as KoconutOpener<\n        Array<Pair<DataType, OtherDataType>> | Array<ResultDataType>\n      >\n    )\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<Pair<DataType, OtherDataType>>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          const otherArray = Array.from(other);\n          const minLength =\n            dataArray.length < otherArray.length\n              ? dataArray.length\n              : otherArray.length;\n          for (let eachIndex = 0; eachIndex < minLength; eachIndex++)\n            processedArray.push(\n              new Pair(dataArray[eachIndex], otherArray[eachIndex]),\n            );\n        }\n        if (transform) {\n          const transformedArray = new Array<ResultDataType>();\n          for (const eachProcessedData of processedArray)\n            transformedArray.push(\n              await transform(\n                eachProcessedData.first,\n                eachProcessedData.second,\n              ),\n            );\n          return transformedArray;\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n\n  zipWithNext<ResultDataType>(\n    transform: Zipper<DataType, DataType, ResultDataType> | null,\n    thisArg: any,\n  ): KoconutArray<Pair<DataType, DataType> | ResultDataType>;\n  zipWithNext(): KoconutArray<Pair<DataType, DataType>>;\n  zipWithNext<ResultDataType>(\n    transform: Zipper<DataType, DataType, ResultDataType>,\n  ): KoconutArray<ResultDataType>;\n  zipWithNext<ResultDataType>(\n    transform: Zipper<DataType, DataType, ResultDataType>,\n    thisArg: any,\n  ): KoconutArray<ResultDataType>;\n  zipWithNext<ResultDataType>(\n    transform: Zipper<DataType, DataType, ResultDataType> | null = null,\n    thisArg: any = null,\n  ): KoconutArray<Pair<DataType, DataType> | ResultDataType> {\n    if (transform) transform.bind(thisArg);\n    const koconutToReturn = new KoconutArray<\n      Pair<DataType, DataType> | ResultDataType\n    >();\n    (\n      koconutToReturn as any as KoconutOpener<\n        Array<Pair<DataType, DataType>> | Array<ResultDataType>\n      >\n    )\n      .setPrevYieldable(this)\n      .setProcessor(async () => {\n        const processedArray = new Array<Pair<DataType, DataType>>();\n        if (this.data != null) {\n          const dataArray = Array.from(this.data);\n          if (dataArray.length >= 2) {\n            for (\n              let eachIndex = 0;\n              eachIndex < dataArray.length - 1;\n              eachIndex++\n            )\n              processedArray.push(\n                new Pair(dataArray[eachIndex], dataArray[eachIndex + 1]),\n              );\n          }\n        }\n        if (transform) {\n          const transformedArray = new Array<ResultDataType>();\n          for (const eachProcessedDatum of processedArray)\n            transformedArray.push(\n              await transform(\n                eachProcessedDatum.first,\n                eachProcessedDatum.second,\n              ),\n            );\n          return transformedArray;\n        }\n        return processedArray;\n      });\n    return koconutToReturn;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b134c188c67f36b51a8a1deb718249e6da17721a","contentHash":"cada345e088300ca58bf4ac657b9f64f94df02f27de519c2f55295d595241933"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\collection\\array\\KoconutArray.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\collection\\array\\KoconutArray.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":13}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":46}},"4":{"start":{"line":9,"column":32},"end":{"line":9,"column":68}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":60}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":68}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":31}},"8":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"9":{"start":{"line":33,"column":8},"end":{"line":33,"column":68}},"10":{"start":{"line":60,"column":8},"end":{"line":60,"column":31}},"11":{"start":{"line":61,"column":8},"end":{"line":61,"column":20}},"12":{"start":{"line":86,"column":8},"end":{"line":86,"column":76}},"13":{"start":{"line":109,"column":8},"end":{"line":109,"column":38}},"14":{"start":{"line":139,"column":8},"end":{"line":140,"column":118}},"15":{"start":{"line":140,"column":12},"end":{"line":140,"column":118}},"16":{"start":{"line":141,"column":8},"end":{"line":141,"column":44}},"17":{"start":{"line":142,"column":32},"end":{"line":142,"column":50}},"18":{"start":{"line":143,"column":8},"end":{"line":148,"column":11}},"19":{"start":{"line":144,"column":35},"end":{"line":144,"column":46}},"20":{"start":{"line":145,"column":12},"end":{"line":146,"column":64}},"21":{"start":{"line":145,"column":33},"end":{"line":145,"column":34}},"22":{"start":{"line":146,"column":16},"end":{"line":146,"column":64}},"23":{"start":{"line":147,"column":12},"end":{"line":147,"column":34}},"24":{"start":{"line":149,"column":8},"end":{"line":149,"column":31}},"25":{"start":{"line":197,"column":8},"end":{"line":197,"column":74}},"26":{"start":{"line":245,"column":8},"end":{"line":245,"column":81}},"27":{"start":{"line":311,"column":8},"end":{"line":311,"column":149}},"28":{"start":{"line":372,"column":8},"end":{"line":372,"column":95}},"29":{"start":{"line":427,"column":8},"end":{"line":427,"column":103}},"30":{"start":{"line":463,"column":8},"end":{"line":463,"column":93}},"31":{"start":{"line":502,"column":8},"end":{"line":502,"column":100}},"32":{"start":{"line":549,"column":8},"end":{"line":549,"column":145}},"33":{"start":{"line":585,"column":8},"end":{"line":585,"column":89}},"34":{"start":{"line":629,"column":8},"end":{"line":629,"column":96}},"35":{"start":{"line":665,"column":8},"end":{"line":665,"column":96}},"36":{"start":{"line":730,"column":8},"end":{"line":730,"column":103}},"37":{"start":{"line":810,"column":8},"end":{"line":810,"column":61}},"38":{"start":{"line":943,"column":8},"end":{"line":943,"column":80}},"39":{"start":{"line":968,"column":8},"end":{"line":968,"column":58}},"40":{"start":{"line":993,"column":8},"end":{"line":993,"column":62}},"41":{"start":{"line":1022,"column":8},"end":{"line":1022,"column":84}},"42":{"start":{"line":1051,"column":8},"end":{"line":1051,"column":80}},"43":{"start":{"line":1078,"column":8},"end":{"line":1078,"column":77}},"44":{"start":{"line":1105,"column":8},"end":{"line":1105,"column":80}},"45":{"start":{"line":1140,"column":8},"end":{"line":1140,"column":92}},"46":{"start":{"line":1175,"column":8},"end":{"line":1175,"column":95}},"47":{"start":{"line":1202,"column":8},"end":{"line":1202,"column":84}},"48":{"start":{"line":1237,"column":8},"end":{"line":1237,"column":99}},"49":{"start":{"line":1260,"column":8},"end":{"line":1260,"column":66}},"50":{"start":{"line":1288,"column":8},"end":{"line":1288,"column":79}},"51":{"start":{"line":1372,"column":8},"end":{"line":1372,"column":78}},"52":{"start":{"line":1456,"column":8},"end":{"line":1456,"column":88}},"53":{"start":{"line":1497,"column":8},"end":{"line":1497,"column":82}},"54":{"start":{"line":1524,"column":8},"end":{"line":1524,"column":58}},"55":{"start":{"line":1550,"column":8},"end":{"line":1550,"column":62}},"56":{"start":{"line":1579,"column":8},"end":{"line":1579,"column":84}},"57":{"start":{"line":1608,"column":8},"end":{"line":1608,"column":80}},"58":{"start":{"line":1611,"column":8},"end":{"line":1614,"column":70}},"59":{"start":{"line":1612,"column":12},"end":{"line":1612,"column":70}},"60":{"start":{"line":1614,"column":12},"end":{"line":1614,"column":70}},"61":{"start":{"line":1617,"column":8},"end":{"line":1617,"column":72}},"62":{"start":{"line":1620,"column":8},"end":{"line":1623,"column":69}},"63":{"start":{"line":1621,"column":12},"end":{"line":1621,"column":69}},"64":{"start":{"line":1623,"column":12},"end":{"line":1623,"column":69}},"65":{"start":{"line":1626,"column":8},"end":{"line":1626,"column":71}},"66":{"start":{"line":1629,"column":8},"end":{"line":1629,"column":61}},"67":{"start":{"line":1632,"column":8},"end":{"line":1632,"column":61}},"68":{"start":{"line":1635,"column":0},"end":{"line":1635,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":38},"end":{"line":13,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":30},"end":{"line":34,"column":5}},"line":31},"2":{"name":"(anonymous_2)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":21},"end":{"line":62,"column":5}},"line":59},"3":{"name":"(anonymous_3)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":31},"end":{"line":87,"column":5}},"line":85},"4":{"name":"(anonymous_4)","decl":{"start":{"line":108,"column":4},"end":{"line":108,"column":5}},"loc":{"start":{"line":108,"column":23},"end":{"line":110,"column":5}},"line":108},"5":{"name":"(anonymous_5)","decl":{"start":{"line":138,"column":4},"end":{"line":138,"column":5}},"loc":{"start":{"line":138,"column":54},"end":{"line":150,"column":5}},"line":138},"6":{"name":"(anonymous_6)","decl":{"start":{"line":143,"column":37},"end":{"line":143,"column":38}},"loc":{"start":{"line":143,"column":49},"end":{"line":148,"column":9}},"line":143},"7":{"name":"(anonymous_7)","decl":{"start":{"line":196,"column":4},"end":{"line":196,"column":5}},"loc":{"start":{"line":196,"column":35},"end":{"line":198,"column":5}},"line":196},"8":{"name":"(anonymous_8)","decl":{"start":{"line":244,"column":4},"end":{"line":244,"column":5}},"loc":{"start":{"line":244,"column":42},"end":{"line":246,"column":5}},"line":244},"9":{"name":"(anonymous_9)","decl":{"start":{"line":310,"column":4},"end":{"line":310,"column":5}},"loc":{"start":{"line":310,"column":124},"end":{"line":312,"column":5}},"line":310},"10":{"name":"(anonymous_10)","decl":{"start":{"line":371,"column":4},"end":{"line":371,"column":5}},"loc":{"start":{"line":371,"column":56},"end":{"line":373,"column":5}},"line":371},"11":{"name":"(anonymous_11)","decl":{"start":{"line":426,"column":4},"end":{"line":426,"column":5}},"loc":{"start":{"line":426,"column":64},"end":{"line":428,"column":5}},"line":426},"12":{"name":"(anonymous_12)","decl":{"start":{"line":462,"column":4},"end":{"line":462,"column":5}},"loc":{"start":{"line":462,"column":54},"end":{"line":464,"column":5}},"line":462},"13":{"name":"(anonymous_13)","decl":{"start":{"line":501,"column":4},"end":{"line":501,"column":5}},"loc":{"start":{"line":501,"column":61},"end":{"line":503,"column":5}},"line":501},"14":{"name":"(anonymous_14)","decl":{"start":{"line":548,"column":4},"end":{"line":548,"column":5}},"loc":{"start":{"line":548,"column":120},"end":{"line":550,"column":5}},"line":548},"15":{"name":"(anonymous_15)","decl":{"start":{"line":584,"column":4},"end":{"line":584,"column":5}},"loc":{"start":{"line":584,"column":50},"end":{"line":586,"column":5}},"line":584},"16":{"name":"(anonymous_16)","decl":{"start":{"line":628,"column":4},"end":{"line":628,"column":5}},"loc":{"start":{"line":628,"column":57},"end":{"line":630,"column":5}},"line":628},"17":{"name":"(anonymous_17)","decl":{"start":{"line":664,"column":4},"end":{"line":664,"column":5}},"loc":{"start":{"line":664,"column":57},"end":{"line":666,"column":5}},"line":664},"18":{"name":"(anonymous_18)","decl":{"start":{"line":729,"column":4},"end":{"line":729,"column":5}},"loc":{"start":{"line":729,"column":64},"end":{"line":731,"column":5}},"line":729},"19":{"name":"(anonymous_19)","decl":{"start":{"line":809,"column":4},"end":{"line":809,"column":5}},"loc":{"start":{"line":809,"column":15},"end":{"line":811,"column":5}},"line":809},"20":{"name":"(anonymous_20)","decl":{"start":{"line":942,"column":4},"end":{"line":942,"column":5}},"loc":{"start":{"line":942,"column":41},"end":{"line":944,"column":5}},"line":942},"21":{"name":"(anonymous_21)","decl":{"start":{"line":967,"column":4},"end":{"line":967,"column":5}},"loc":{"start":{"line":967,"column":12},"end":{"line":969,"column":5}},"line":967},"22":{"name":"(anonymous_22)","decl":{"start":{"line":992,"column":4},"end":{"line":992,"column":5}},"loc":{"start":{"line":992,"column":16},"end":{"line":994,"column":5}},"line":992},"23":{"name":"(anonymous_23)","decl":{"start":{"line":1021,"column":4},"end":{"line":1021,"column":5}},"loc":{"start":{"line":1021,"column":45},"end":{"line":1023,"column":5}},"line":1021},"24":{"name":"(anonymous_24)","decl":{"start":{"line":1050,"column":4},"end":{"line":1050,"column":5}},"loc":{"start":{"line":1050,"column":41},"end":{"line":1052,"column":5}},"line":1050},"25":{"name":"(anonymous_25)","decl":{"start":{"line":1077,"column":4},"end":{"line":1077,"column":5}},"loc":{"start":{"line":1077,"column":38},"end":{"line":1079,"column":5}},"line":1077},"26":{"name":"(anonymous_26)","decl":{"start":{"line":1104,"column":4},"end":{"line":1104,"column":5}},"loc":{"start":{"line":1104,"column":41},"end":{"line":1106,"column":5}},"line":1104},"27":{"name":"(anonymous_27)","decl":{"start":{"line":1139,"column":4},"end":{"line":1139,"column":5}},"loc":{"start":{"line":1139,"column":53},"end":{"line":1141,"column":5}},"line":1139},"28":{"name":"(anonymous_28)","decl":{"start":{"line":1174,"column":4},"end":{"line":1174,"column":5}},"loc":{"start":{"line":1174,"column":56},"end":{"line":1176,"column":5}},"line":1174},"29":{"name":"(anonymous_29)","decl":{"start":{"line":1201,"column":4},"end":{"line":1201,"column":5}},"loc":{"start":{"line":1201,"column":45},"end":{"line":1203,"column":5}},"line":1201},"30":{"name":"(anonymous_30)","decl":{"start":{"line":1236,"column":4},"end":{"line":1236,"column":5}},"loc":{"start":{"line":1236,"column":60},"end":{"line":1238,"column":5}},"line":1236},"31":{"name":"(anonymous_31)","decl":{"start":{"line":1259,"column":4},"end":{"line":1259,"column":5}},"loc":{"start":{"line":1259,"column":20},"end":{"line":1261,"column":5}},"line":1259},"32":{"name":"(anonymous_32)","decl":{"start":{"line":1287,"column":4},"end":{"line":1287,"column":5}},"loc":{"start":{"line":1287,"column":33},"end":{"line":1289,"column":5}},"line":1287},"33":{"name":"(anonymous_33)","decl":{"start":{"line":1371,"column":4},"end":{"line":1371,"column":5}},"loc":{"start":{"line":1371,"column":39},"end":{"line":1373,"column":5}},"line":1371},"34":{"name":"(anonymous_34)","decl":{"start":{"line":1455,"column":4},"end":{"line":1455,"column":5}},"loc":{"start":{"line":1455,"column":49},"end":{"line":1457,"column":5}},"line":1455},"35":{"name":"(anonymous_35)","decl":{"start":{"line":1496,"column":4},"end":{"line":1496,"column":5}},"loc":{"start":{"line":1496,"column":43},"end":{"line":1498,"column":5}},"line":1496},"36":{"name":"(anonymous_36)","decl":{"start":{"line":1523,"column":4},"end":{"line":1523,"column":5}},"loc":{"start":{"line":1523,"column":12},"end":{"line":1525,"column":5}},"line":1523},"37":{"name":"(anonymous_37)","decl":{"start":{"line":1549,"column":4},"end":{"line":1549,"column":5}},"loc":{"start":{"line":1549,"column":16},"end":{"line":1551,"column":5}},"line":1549},"38":{"name":"(anonymous_38)","decl":{"start":{"line":1578,"column":4},"end":{"line":1578,"column":5}},"loc":{"start":{"line":1578,"column":45},"end":{"line":1580,"column":5}},"line":1578},"39":{"name":"(anonymous_39)","decl":{"start":{"line":1607,"column":4},"end":{"line":1607,"column":5}},"loc":{"start":{"line":1607,"column":41},"end":{"line":1609,"column":5}},"line":1607},"40":{"name":"(anonymous_40)","decl":{"start":{"line":1610,"column":4},"end":{"line":1610,"column":5}},"loc":{"start":{"line":1610,"column":20},"end":{"line":1615,"column":5}},"line":1610},"41":{"name":"(anonymous_41)","decl":{"start":{"line":1616,"column":4},"end":{"line":1616,"column":5}},"loc":{"start":{"line":1616,"column":26},"end":{"line":1618,"column":5}},"line":1616},"42":{"name":"(anonymous_42)","decl":{"start":{"line":1619,"column":4},"end":{"line":1619,"column":5}},"loc":{"start":{"line":1619,"column":19},"end":{"line":1624,"column":5}},"line":1619},"43":{"name":"(anonymous_43)","decl":{"start":{"line":1625,"column":4},"end":{"line":1625,"column":5}},"loc":{"start":{"line":1625,"column":25},"end":{"line":1627,"column":5}},"line":1625},"44":{"name":"(anonymous_44)","decl":{"start":{"line":1628,"column":4},"end":{"line":1628,"column":5}},"loc":{"start":{"line":1628,"column":15},"end":{"line":1630,"column":5}},"line":1628},"45":{"name":"(anonymous_45)","decl":{"start":{"line":1631,"column":4},"end":{"line":1631,"column":5}},"loc":{"start":{"line":1631,"column":15},"end":{"line":1633,"column":5}},"line":1631}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":16},"end":{"line":31,"column":28}},"type":"default-arg","locations":[{"start":{"line":31,"column":24},"end":{"line":31,"column":28}}],"line":31},"1":{"loc":{"start":{"line":33,"column":20},"end":{"line":33,"column":67}},"type":"cond-expr","locations":[{"start":{"line":33,"column":36},"end":{"line":33,"column":47}},{"start":{"line":33,"column":50},"end":{"line":33,"column":67}}],"line":33},"2":{"loc":{"start":{"line":85,"column":16},"end":{"line":85,"column":29}},"type":"default-arg","locations":[{"start":{"line":85,"column":25},"end":{"line":85,"column":29}}],"line":85},"3":{"loc":{"start":{"line":86,"column":32},"end":{"line":86,"column":74}},"type":"cond-expr","locations":[{"start":{"line":86,"column":49},"end":{"line":86,"column":53}},{"start":{"line":86,"column":56},"end":{"line":86,"column":74}}],"line":86},"4":{"loc":{"start":{"line":138,"column":38},"end":{"line":138,"column":52}},"type":"default-arg","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":52}}],"line":138},"5":{"loc":{"start":{"line":139,"column":8},"end":{"line":140,"column":118}},"type":"if","locations":[{"start":{"line":139,"column":8},"end":{"line":140,"column":118}},{"start":{"line":139,"column":8},"end":{"line":140,"column":118}}],"line":139},"6":{"loc":{"start":{"line":196,"column":19},"end":{"line":196,"column":33}},"type":"default-arg","locations":[{"start":{"line":196,"column":29},"end":{"line":196,"column":33}}],"line":196},"7":{"loc":{"start":{"line":244,"column":26},"end":{"line":244,"column":40}},"type":"default-arg","locations":[{"start":{"line":244,"column":36},"end":{"line":244,"column":40}}],"line":244},"8":{"loc":{"start":{"line":310,"column":44},"end":{"line":310,"column":65}},"type":"default-arg","locations":[{"start":{"line":310,"column":61},"end":{"line":310,"column":65}}],"line":310},"9":{"loc":{"start":{"line":310,"column":67},"end":{"line":310,"column":92}},"type":"default-arg","locations":[{"start":{"line":310,"column":88},"end":{"line":310,"column":92}}],"line":310},"10":{"loc":{"start":{"line":310,"column":94},"end":{"line":310,"column":122}},"type":"default-arg","locations":[{"start":{"line":310,"column":118},"end":{"line":310,"column":122}}],"line":310},"11":{"loc":{"start":{"line":371,"column":40},"end":{"line":371,"column":54}},"type":"default-arg","locations":[{"start":{"line":371,"column":50},"end":{"line":371,"column":54}}],"line":371},"12":{"loc":{"start":{"line":426,"column":48},"end":{"line":426,"column":62}},"type":"default-arg","locations":[{"start":{"line":426,"column":58},"end":{"line":426,"column":62}}],"line":426},"13":{"loc":{"start":{"line":462,"column":38},"end":{"line":462,"column":52}},"type":"default-arg","locations":[{"start":{"line":462,"column":48},"end":{"line":462,"column":52}}],"line":462},"14":{"loc":{"start":{"line":501,"column":45},"end":{"line":501,"column":59}},"type":"default-arg","locations":[{"start":{"line":501,"column":55},"end":{"line":501,"column":59}}],"line":501},"15":{"loc":{"start":{"line":548,"column":40},"end":{"line":548,"column":61}},"type":"default-arg","locations":[{"start":{"line":548,"column":57},"end":{"line":548,"column":61}}],"line":548},"16":{"loc":{"start":{"line":548,"column":63},"end":{"line":548,"column":88}},"type":"default-arg","locations":[{"start":{"line":548,"column":84},"end":{"line":548,"column":88}}],"line":548},"17":{"loc":{"start":{"line":548,"column":90},"end":{"line":548,"column":118}},"type":"default-arg","locations":[{"start":{"line":548,"column":114},"end":{"line":548,"column":118}}],"line":548},"18":{"loc":{"start":{"line":584,"column":34},"end":{"line":584,"column":48}},"type":"default-arg","locations":[{"start":{"line":584,"column":44},"end":{"line":584,"column":48}}],"line":584},"19":{"loc":{"start":{"line":628,"column":41},"end":{"line":628,"column":55}},"type":"default-arg","locations":[{"start":{"line":628,"column":51},"end":{"line":628,"column":55}}],"line":628},"20":{"loc":{"start":{"line":664,"column":41},"end":{"line":664,"column":55}},"type":"default-arg","locations":[{"start":{"line":664,"column":51},"end":{"line":664,"column":55}}],"line":664},"21":{"loc":{"start":{"line":729,"column":48},"end":{"line":729,"column":62}},"type":"default-arg","locations":[{"start":{"line":729,"column":58},"end":{"line":729,"column":62}}],"line":729},"22":{"loc":{"start":{"line":942,"column":25},"end":{"line":942,"column":39}},"type":"default-arg","locations":[{"start":{"line":942,"column":35},"end":{"line":942,"column":39}}],"line":942},"23":{"loc":{"start":{"line":1021,"column":29},"end":{"line":1021,"column":43}},"type":"default-arg","locations":[{"start":{"line":1021,"column":39},"end":{"line":1021,"column":43}}],"line":1021},"24":{"loc":{"start":{"line":1050,"column":25},"end":{"line":1050,"column":39}},"type":"default-arg","locations":[{"start":{"line":1050,"column":35},"end":{"line":1050,"column":39}}],"line":1050},"25":{"loc":{"start":{"line":1077,"column":22},"end":{"line":1077,"column":36}},"type":"default-arg","locations":[{"start":{"line":1077,"column":32},"end":{"line":1077,"column":36}}],"line":1077},"26":{"loc":{"start":{"line":1104,"column":25},"end":{"line":1104,"column":39}},"type":"default-arg","locations":[{"start":{"line":1104,"column":35},"end":{"line":1104,"column":39}}],"line":1104},"27":{"loc":{"start":{"line":1139,"column":37},"end":{"line":1139,"column":51}},"type":"default-arg","locations":[{"start":{"line":1139,"column":47},"end":{"line":1139,"column":51}}],"line":1139},"28":{"loc":{"start":{"line":1174,"column":40},"end":{"line":1174,"column":54}},"type":"default-arg","locations":[{"start":{"line":1174,"column":50},"end":{"line":1174,"column":54}}],"line":1174},"29":{"loc":{"start":{"line":1201,"column":29},"end":{"line":1201,"column":43}},"type":"default-arg","locations":[{"start":{"line":1201,"column":39},"end":{"line":1201,"column":43}}],"line":1201},"30":{"loc":{"start":{"line":1236,"column":44},"end":{"line":1236,"column":58}},"type":"default-arg","locations":[{"start":{"line":1236,"column":54},"end":{"line":1236,"column":58}}],"line":1236},"31":{"loc":{"start":{"line":1371,"column":23},"end":{"line":1371,"column":37}},"type":"default-arg","locations":[{"start":{"line":1371,"column":33},"end":{"line":1371,"column":37}}],"line":1371},"32":{"loc":{"start":{"line":1455,"column":33},"end":{"line":1455,"column":47}},"type":"default-arg","locations":[{"start":{"line":1455,"column":43},"end":{"line":1455,"column":47}}],"line":1455},"33":{"loc":{"start":{"line":1496,"column":27},"end":{"line":1496,"column":41}},"type":"default-arg","locations":[{"start":{"line":1496,"column":37},"end":{"line":1496,"column":41}}],"line":1496},"34":{"loc":{"start":{"line":1578,"column":29},"end":{"line":1578,"column":43}},"type":"default-arg","locations":[{"start":{"line":1578,"column":39},"end":{"line":1578,"column":43}}],"line":1578},"35":{"loc":{"start":{"line":1607,"column":25},"end":{"line":1607,"column":39}},"type":"default-arg","locations":[{"start":{"line":1607,"column":35},"end":{"line":1607,"column":39}}],"line":1607},"36":{"loc":{"start":{"line":1611,"column":8},"end":{"line":1614,"column":70}},"type":"if","locations":[{"start":{"line":1611,"column":8},"end":{"line":1614,"column":70}},{"start":{"line":1611,"column":8},"end":{"line":1614,"column":70}}],"line":1611},"37":{"loc":{"start":{"line":1620,"column":8},"end":{"line":1623,"column":69}},"type":"if","locations":[{"start":{"line":1620,"column":8},"end":{"line":1623,"column":69}},{"start":{"line":1620,"column":8},"end":{"line":1623,"column":69}}],"line":1620}},"s":{"0":1,"1":1,"2":1,"3":1,"4":89,"5":89,"6":89,"7":89,"8":391,"9":391,"10":0,"11":0,"12":189,"13":41,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":1,"27":2,"28":3,"29":1,"30":1,"31":1,"32":2,"33":1,"34":1,"35":1,"36":1,"37":3,"38":2,"39":1,"40":1,"41":1,"42":1,"43":27,"44":2,"45":1,"46":1,"47":2,"48":1,"49":2,"50":1,"51":4,"52":3,"53":2,"54":1,"55":1,"56":1,"57":1,"58":6,"59":2,"60":4,"61":2,"62":3,"63":1,"64":2,"65":1,"66":1,"67":1,"68":1},"f":{"0":89,"1":391,"2":0,"3":189,"4":41,"5":0,"6":0,"7":1,"8":1,"9":2,"10":3,"11":1,"12":1,"13":1,"14":2,"15":1,"16":1,"17":1,"18":1,"19":3,"20":2,"21":1,"22":1,"23":1,"24":1,"25":27,"26":2,"27":1,"28":1,"29":2,"30":1,"31":2,"32":1,"33":4,"34":3,"35":2,"36":1,"37":1,"38":1,"39":1,"40":6,"41":2,"42":3,"43":1,"44":1,"45":1},"b":{"0":[72],"1":[158,233],"2":[0],"3":[0,189],"4":[0],"5":[0,0],"6":[1],"7":[1],"8":[1],"9":[2],"10":[2],"11":[3],"12":[1],"13":[1],"14":[1],"15":[1],"16":[2],"17":[2],"18":[1],"19":[1],"20":[1],"21":[1],"22":[2],"23":[1],"24":[1],"25":[26],"26":[1],"27":[1],"28":[1],"29":[1],"30":[1],"31":[4],"32":[3],"33":[2],"34":[1],"35":[1],"36":[2,4],"37":[1,2]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/collection/array/KoconutArray.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/collection/array/KoconutArray.ts"],"names":[],"mappings":"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","sourcesContent":["`use strict`;\r\n\r\nimport {\r\n  /* Base */\r\n  Pair,\r\n  KoconutPair,\r\n  Entry,\r\n  KoconutEntry,\r\n  KoconutOpener,\r\n\r\n  /* Container */\r\n  KoconutCollection,\r\n\r\n  /* Exception */\r\n  KoconutInvalidArgumentException,\r\n\r\n  /* Protocol */\r\n  KoconutEquatable,\r\n  KoconutComparable,\r\n\r\n  /* Callbacks */\r\n  Predicator,\r\n  IndexedPredicator,\r\n  Action,\r\n  IndexedAction,\r\n  Generator,\r\n  Selector,\r\n  Transformer,\r\n  IndexedTransformer,\r\n  Comparator,\r\n} from '../../../../module';\r\n\r\nexport class KoconutArray<DataType> extends KoconutCollection<\r\n  DataType,\r\n  Array<DataType>\r\n> {\r\n  // Private\r\n  private static fromCollection<DataType>(\r\n    collection: KoconutCollection<DataType, Array<DataType>>,\r\n  ): KoconutArray<DataType> {\r\n    const koconutToReturn = new KoconutArray<DataType>(collection['data']);\r\n    koconutToReturn.processor = collection['processor'];\r\n    koconutToReturn.prevYieldable = collection['prevYieldable'];\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Koconut Primitive\r\n  /**\r\n   * Creates a new instance from ```iterable``` object.\r\n   * @param {Iterable<DataType> | null} array An array-like ```iterable``` object to convert to a {@link KoconutArray}.\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const numbers = Array.of(1,2,3,4,5)\r\n   * const koconutNumbers = new KoconutArray(numbers)\r\n   * // ↑ This is a Koconut number array consists of 1 to 5.\r\n   *\r\n   * const emptyNumberArray = new KoconutArray<number>()\r\n   * // ↑ This is an empty Koconut number array.\r\n   * ```\r\n   */\r\n  constructor(array: Iterable<DataType> | null = null) {\r\n    super();\r\n    this.data = array == null ? new Array() : Array.from(array);\r\n  }\r\n\r\n  /**\r\n   * Processes all the chained object and returns original {@link KoconutArray} instance.\r\n   *\r\n   * @return {Promise<KoconutArray<DataType>>}\r\n   *\r\n   * @category Processor\r\n   *\r\n   * @since 1.0.15\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = await KoconutArray\r\n   *                     .of(1,2,3,4,5)\r\n   *                     .retrieve()\r\n   * console.log(koconutArray)\r\n   * // ↑ KoconutArray {\r\n   * //   isValidated: true,\r\n   * //   data: [ 1, 2, 3, 4, 5 ],\r\n   * //   combinedDataWrapper: [ 1, 2, 3, 4, 5 ],\r\n   * //   mSize: 5,\r\n   * //   mIndices: [ 0, 1, 2, 3, 4 ]\r\n   * // }\r\n   * ```\r\n   */\r\n  async retrieve(): Promise<KoconutArray<DataType>> {\r\n    await super.retrieve();\r\n    return this;\r\n  }\r\n\r\n  // Creator\r\n  /**\r\n   * Creates a new instance from ```iterable``` object.\r\n   *\r\n   * @param {Iterable<DataType> | null} source An array-like ```iterable``` object to convert to a {@link KoconutArray}.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @since 1.0.11\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const numbers = Array.of(1,2,3,4,5)\r\n   * const koconutNumbers = KoconutArray.from(numbers)\r\n   * // ↑ This is a Koconut number array consists of 1 to 5.\r\n   *\r\n   * const emptyNumberArray = KoconutArray.from<number>()\r\n   * // ↑ This is an empty Koconut number array.\r\n   * ```\r\n   */\r\n  static from<DataType>(\r\n    source: Iterable<DataType> | null = null,\r\n  ): KoconutArray<DataType> {\r\n    return new KoconutArray(source == null ? null : Array.from(source));\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance from variable number of arguments.\r\n   *\r\n   * @param {DataType[]} data A set of elements to include in the new {@link KoconutArray} object.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @since 1.0.11\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutNumbers = KoconutArray.of(1,2,3,4,5)\r\n   * // ↑ This is a Koconut number array consists of 1 to 5.\r\n   *\r\n   * const emptyNumberArray = KoconutArray.of<number>()\r\n   * // ↑ This is an empty Koconut number array.\r\n   * ```\r\n   */\r\n  static of<DataType>(...data: DataType[]): KoconutArray<DataType> {\r\n    return new KoconutArray(data);\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance with given ```count``` as number of values. ```count``` cannot be negative number.\r\n   * Each value is provided from ```generator``` with given ordered index.\r\n   *\r\n   * @param {number} count Number of values.\r\n   *\r\n   * @param {Generator<DataType>} generator A callback function that accepts an argument. The method calls the ```action``` one time for each ordered index.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```generator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @throws {@link KoconutInvalidArgumentException}\r\n   * -- When ```count``` is less than 0.\r\n   *\r\n   * @since 1.0.14\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const evenNumberArray = await KoconutArray.generate(5, i => i*2)\r\n   *                                                        .yield()\r\n   * console.log(evenNumberArray)\r\n   * // ↑ [ 0, 2, 4, 6, 8 ]\r\n   * ```\r\n   */\r\n  static generate<DataType>(\r\n    count: number,\r\n    generator: Generator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    if (count < 0)\r\n      throw new KoconutInvalidArgumentException(\r\n        `Count must be larger than 0. Given value : ${count}`,\r\n      );\r\n    generator = generator.bind(thisArg);\r\n    const koconutToReturn = new KoconutArray<DataType>();\r\n    (koconutToReturn as any as KoconutOpener<Array<DataType>>).setProcessor(\r\n      async () => {\r\n        const processedArray = new Array<DataType>();\r\n        for (let eachIndex = 0; eachIndex < count; eachIndex++)\r\n          processedArray.push(await generator(eachIndex));\r\n        return processedArray;\r\n      },\r\n    );\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Iterator\r\n  /**\r\n   * Perfroms the given ```action``` on each element and returns the original collection itself afterwards.\r\n   * When you want to stop iteration in the meantime ```return``` ```false``` or {@link KoconutLoopSignal.BREAK}.\r\n   *\r\n   * @param {Action<DataType>} action A callback function that accepts an argument. The method calls the ```action``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```action```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Iterator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const array = await koconutArray\r\n   *                   .onEach(console.log)\r\n   *                   // ↑ 1\r\n   *                   //   2\r\n   *                   //   3\r\n   *                   //   4\r\n   *                   //   5\r\n   *                   .onEach(async eachNumber => {\r\n   *                       if(eachNumber >= 3) return KoconutLoopSignal.BREAK\r\n   *                       console.log(eachNumber)\r\n   *                   })\r\n   *                   // ↑ 1\r\n   *                   //   2\r\n   *                   .onEach(eachNumber => new Promise(resolve => {\r\n   *                       if(eachNumber == 2) resolve(false)\r\n   *                       else {\r\n   *                           console.log(eachNumber)\r\n   *                           resolve()\r\n   *                       }\r\n   *                   }))\r\n   *                   // ↑ 1\r\n   *                   .yield()\r\n   * console.log(array)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  onEach(\r\n    action: Action<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.onEach(action, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Performs the given ```action``` on each element, providing sequential index with the element, and returns the collection itself afterwards.\r\n   * When you want to stop iteration in the meantime ```return``` ```false``` or {@link KoconutLoopSignal.BREAK}.\r\n   *\r\n   * @param {IndexedAction<DataType>} action A callback function that accepts two arguments. The method calls the ```action``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```action```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Iterator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const array = await koconutArray\r\n   *                 .onEachIndexed(console.log)\r\n   *                 // ↑ 0 1\r\n   *                 //   1 2\r\n   *                 //   2 3\r\n   *                 //   3 4\r\n   *                 //   4 5\r\n   *                 .onEachIndexed(async (eachIndex, eachNumber) => {\r\n   *                     if(eachIndex >= 2) return KoconutLoopSignal.BREAK\r\n   *                     console.log(eachNumber)\r\n   *                 })\r\n   *                 // ↑ 1\r\n   *                 //   2\r\n   *                 .onEachIndexed((eachIndex, eachNumber) => new Promise(resolve => {\r\n   *                     if(eachIndex == 2) resolve(false)\r\n   *                     else {\r\n   *                         console.log(eachNumber)\r\n   *                         resolve()\r\n   *                     }\r\n   *                 }))\r\n   *                 // ↑ 1\r\n   *                 //   2\r\n   *                 .yield()\r\n   * console.log(array)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  onEachIndexed(\r\n    action: IndexedAction<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.onEachIndexed(action, thisArg));\r\n  }\r\n\r\n  // Transformer\r\n  /**\r\n   * Populates the given ```destination``` map with entries, where ```key``` is provided by\r\n   * ```keySelector``` function applied to each element.\r\n   * ```valueTransform``` callback function is optional. If it's omitted, each value of entry\r\n   * is same as the original data. Otherwise, the value is provided by the ```valueTransform``` function\r\n   * applied to elements of the given collcetion.\r\n   *\r\n   * @param {Map<KeyType, ValueType>} destination Iterable destinaion. ```Map``` to be exact.\r\n   *\r\n   * @param {Selector<DataType, KeyType>} keySelector A callback function that accepts an argument. The method calls the ```keySelector``` one time for each element in object.\r\n   *\r\n   * @param {Transformer<DataType, ValueType> | null} valueTransform A callback function that accepts an argument. The method calls the ```valueTransform``` one time for each element in object it it's not omitted.\r\n   *\r\n   * @param {any} keySelectorThisArg An object to which the ```this``` keyword can refer in the ```keySelector```. If ```keySelectorThisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @param {any} valueTransformThisArg An object to which the ```this``` keyword can refer in the ```valueTransform```. If ```valueTransformThisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @note This method has different functionality with Kotlin. It'll return the original collection instance.\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const doubledKeyMap = new Map<number, number>()\r\n   * const stringKeyDoubledValueMap = new Map<string ,number>()\r\n   * const doubledKeySquaredValueMap = new Map<number, number>()\r\n   * const originalData = await koconutArray\r\n   *           .associateByTo(\r\n   *               doubledKeyMap,\r\n   *               eachNumber => eachNumber * 2\r\n   *           )\r\n   *           .associateByTo(\r\n   *               stringKeyDoubledValueMap,\r\n   *               async eachNumber => eachNumber.toString(),\r\n   *               async eachNumber => eachNumber * 2\r\n   *           )\r\n   *           .associateByTo(\r\n   *               doubledKeySquaredValueMap,\r\n   *               eachNumber => new Promise(resolve => {\r\n   *                   resolve(eachNumber * 2)\r\n   *               }),\r\n   *               eachNumber => new Promise(resolve => {\r\n   *                   resolve(eachNumber * eachNumber)\r\n   *               })\r\n   *           )\r\n   *           .yield()\r\n   * console.log(doubledKeyMap)\r\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\r\n   * console.log(stringKeyDoubledValueMap)\r\n   * // ↑ Map { '1' => 2, '2' => 4, '3' => 6, '4' => 8, '5' => 10 }\r\n   * console.log(doubledKeySquaredValueMap)\r\n   * // ↑ Map { 2 => 1, 4 => 4, 6 => 9, 8 => 16, 10 => 25 }\r\n   * console.log(originalData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  associateByTo<KeyType, ValueType = DataType>(\r\n    destination: Map<KeyType, ValueType>,\r\n    keySelector: Selector<DataType, KeyType>,\r\n    valueTransform: Transformer<DataType, ValueType> | null = null,\r\n    keySelectorThisArg: any = null,\r\n    valueTransformThisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.associateByTo(\r\n        destination,\r\n        keySelector,\r\n        valueTransform,\r\n        keySelectorThisArg,\r\n        valueTransformThisArg,\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Populates the given ```destination``` map with entries, provided by ```transform``` function\r\n   * applied to elements of the given collection\r\n   *\r\n   * @param {Map<KeyType, ValueType>} destination Iterable destinaion. ```Map``` to be exact.\r\n   *\r\n   * @param {Transformer<DataType,[KeyType, ValueType]| Pair<KeyType, ValueType>| KoconutPair<KeyType, ValueType>| Entry<KeyType, ValueType>| KoconutEntry<KeyType, ValueType>>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @note This method has different functionality with Kotlin. It'll return the original collection instance.\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const doubledValueMap = new Map<number, number>()\r\n   * const doubledKeyMap = new Map<number, number>()\r\n   * const squaredValueMap = new Map<number, number>()\r\n   * const originalData = await koconutArray\r\n   *               .associateTo(\r\n   *                   doubledValueMap,\r\n   *                   eachNumber => [eachNumber, eachNumber * 2]\r\n   *                   // ↑ Also can be\r\n   *                   //   new Pair(eachNumber, eachNumber * 2)\r\n   *                   //   Pair.from([eachNumber, eachNumber * 2])\r\n   *                   //   new KoconutPair(eachNumber, eachNumber * 2)\r\n   *                   //   new Entry(eachNumber, eachNumber * 2)\r\n   *                   //   Entry.from([eachNumber, eachNumber * 2])\r\n   *                   //   new KoconutEntry(eachNumber, eachNumber * 2)\r\n   *               )\r\n   *               .associateTo(\r\n   *                   doubledKeyMap,\r\n   *                   async eachNumber => [eachNumber * 2, eachNumber]\r\n   *               )\r\n   *               .associateTo(\r\n   *                   squaredValueMap,\r\n   *                   eachNumber => new Promise(resolve => {\r\n   *                       resolve([eachNumber, eachNumber * eachNumber])\r\n   *                   })\r\n   *               )\r\n   *               .yield()\r\n   * console.log(doubledValueMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * console.log(doubledKeyMap)\r\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\r\n   * console.log(squaredValueMap)\r\n   * // ↑ Map { 1 => 1, 2 => 4, 3 => 9, 4 => 16, 5 => 25 }\r\n   * console.log(originalData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  associateTo<KeyType, ValueType>(\r\n    destination: Map<KeyType, ValueType>,\r\n    transform: Transformer<\r\n      DataType,\r\n      | [KeyType, ValueType]\r\n      | Pair<KeyType, ValueType>\r\n      | KoconutPair<KeyType, ValueType>\r\n      | Entry<KeyType, ValueType>\r\n      | KoconutEntry<KeyType, ValueType>\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.associateTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Populates the given ```destination``` map with entries for each element of the\r\n   * given collection, where key is the element itslef and value is provided by ```valueSelector``` function\r\n   * applied to that key.\r\n   *\r\n   * @param {Map<DataType, ValueType>} destination Iterable destinaion. ```Map``` to be exact.\r\n   *\r\n   * @param {Selector<DataType, ValueType>} valueSelector A callback function that accepts an argument. The method calls the ```valueSelector``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```valueSelector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @note This method has different functionality with Kotlin. It'll return the original collection instance.\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const doubledValueMap = new Map<number, number>()\r\n   * const stringifiedValueMap = new Map<number, string>()\r\n   * const squaredValueMap = new Map<number, number>()\r\n   * const originalData = await koconutArray\r\n   *                   .associateWithTo(\r\n   *                       doubledValueMap,\r\n   *                       eachNumber => eachNumber * 2\r\n   *                   )\r\n   *                   .associateWithTo(\r\n   *                       stringifiedValueMap,\r\n   *                       async eachNumber => eachNumber.toString()\r\n   *                   )\r\n   *                   .associateWithTo(\r\n   *                       squaredValueMap,\r\n   *                       eachNumber => new Promise(resolve => {\r\n   *                           resolve(eachNumber * eachNumber)\r\n   *                       })\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(doubledValueMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * console.log(stringifiedValueMap)\r\n   * // ↑ Map { 1 => '1', 2 => '2', 3 => '3', 4 => '4', 5 => '5' }\r\n   * console.log(squaredValueMap)\r\n   * // ↑ Map { 1 => 1, 2 => 4, 3 => 9, 4 => 16, 5 => 25 }\r\n   * console.log(originalData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  associateWithTo<ValueType>(\r\n    destination: Map<DataType, ValueType>,\r\n    valueSelector: Selector<DataType, ValueType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.associateWithTo(destination, valueSelector, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Appends all elements yielded from results of ```transform``` function being invoked\r\n   * on each element of original collection, to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<DataType, Iterable<ResultDataType>>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(\"123\", \"456\")\r\n   *\r\n   * const allNumbersInArray = new Array<number>()\r\n   * await koconutArray\r\n   *       .flatMapTo(\r\n   *           allNumbersInArray,\r\n   *           (eachString) => eachString\r\n   *                   .split('')\r\n   *                   .map(eachCharacter => parseInt(eachCharacter))\r\n   *       )\r\n   *       .process()\r\n   * console.log(allNumbersInArray)\r\n   * // ↑ [ 1, 2, 3, 4, 5, 6 ]\r\n   * ```\r\n   */\r\n  flatMapTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<DataType, Iterable<ResultDataType>>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.flatMapTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Appends all elements yielded from results of ```transform``` function being invoked\r\n   * on each element and its index in the original collection, to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {IndexedTransformer<DataType, Iterable<ResultDataType>>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(\"123\", \"456\")\r\n   *\r\n   * const allIndexAndNumbersInArray = new Array<number>()\r\n   * await koconutArray\r\n   *       .flatMapIndexedTo(\r\n   *           allIndexAndNumbersInArray,\r\n   *           (eachIndex, eachElement) => [\r\n   *               eachIndex,\r\n   *               ...eachElement\r\n   *                   .split('')\r\n   *                   .map(eachCharacter => parseInt(eachCharacter))\r\n   *           ]\r\n   *       )\r\n   *       .process()\r\n   * console.log(allIndexAndNumbersInArray)\r\n   * // ↑ [ 0, 1, 2, 3, 1, 4, 5, 6 ]\r\n   * ```\r\n   */\r\n  flatMapIndexedTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: IndexedTransformer<DataType, Iterable<ResultDataType>>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.flatMapIndexedTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Groups values returned by the ```valueTransform``` function applied to each element of the original collection by the key\r\n   * returned by the given ```keySelector``` function applied to the element and puts to the destination map each group key\r\n   * associated with a list of corresponding values. If ```valueTransform``` is omitted, each value would be original element.\r\n   *\r\n   * @param {Map<KeyType, Array<ValueType>>} destination Iterable destinaion. ```Map``` to be exact.\r\n   *\r\n   * @param {Selector<DataType, KeyType>} keySelector A callback function that accepts an argument. The method calls the ```keySelector``` one time for each element in object.\r\n   *\r\n   * @param {Transformer<DataType, ValueType> | null} valueTransform A callback function that accepts an argument. The method calls the ```valueTransform``` one time for each element in object it it's not omitted.\r\n   *\r\n   * @param {any} keySelectorThisArg An object to which the ```this``` keyword can refer in the ```keySelector```. If ```keySelectorThisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @param {any} valueTransformThisArg An object to which the ```this``` keyword can refer in the ```valueTransform```. If ```valueTransformThisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const groupedByOddParity = new Map<boolean, number[]>()\r\n   * const groupedByEvenParityToString = new Map<boolean, string[]>()\r\n   * await koconutArray\r\n   *         .groupByTo(\r\n   *             groupedByOddParity,\r\n   *             eachNumber => eachNumber % 2 == 1\r\n   *         )\r\n   *         .groupByTo(\r\n   *             groupedByEvenParityToString,\r\n   *             eachNumber => eachNumber % 2 == 0,\r\n   *             eachNumber => eachNumber.toString()\r\n   *         )\r\n   *         .process()\r\n   * console.log(groupedByOddParity)\r\n   * // ↑ Map { true => [ 1, 3, 5 ], false => [ 2, 4 ] }\r\n   * console.log(groupedByEvenParityToString)\r\n   * // ↑ Map { false => [ '1', '3', '5' ], true => [ '2', '4' ] }\r\n   * ```\r\n   */\r\n  groupByTo<KeyType, ValueType = DataType>(\r\n    destination: Map<KeyType, Array<ValueType>>,\r\n    keySelector: Selector<DataType, KeyType>,\r\n    valueTransform: Transformer<DataType, ValueType> | null = null,\r\n    keySelectorThisArg: any = null,\r\n    valueTransformThisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.groupByTo(\r\n        destination,\r\n        keySelector,\r\n        valueTransform,\r\n        keySelectorThisArg,\r\n        valueTransformThisArg,\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each element of the original collection\r\n   * and appends the results to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<DataType, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const doubledNumbers = new Array<number>()\r\n   * const originalData = await koconutArray\r\n   *                   .mapTo(\r\n   *                       doubledNumbers,\r\n   *                       eachNumber => eachNumber * 2\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(doubledNumbers)\r\n   * // ↑ [ 2, 4, 6, 8, 10 ]\r\n   * console.log(originalData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  mapTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<DataType, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.mapTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each element of the original collection\r\n   * and appends only the results that are not ```null``` nor ```undefined```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<DataType, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const squaredOddNumbers = new Array<number>()\r\n   * const origianlData = await koconutArray\r\n   *                   .mapNotNullTo(\r\n   *                       squaredOddNumbers,\r\n   *                       eachNumber => {\r\n   *                           if(eachNumber % 2 == 1)\r\n   *                               return eachNumber * eachNumber\r\n   *                           // return\r\n   *                           // return null\r\n   *                           // return undefined\r\n   *                           // ↑ You can use any one of\r\n   *                           //   them or just omit it.\r\n   *                       }\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(squaredOddNumbers)\r\n   * // ↑ [ 1, 9, 25 ]\r\n   * console.log(origianlData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  mapNotNullTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<DataType, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.mapNotNullTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each element and its index in the original\r\n   * collection and appends the results to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {IndexedTransformer<DataType, ResultDataType>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const sumsOfIndexesAndNumbers = new Array<number>()\r\n   * const originalData = await koconutArray\r\n   *                   .mapIndexedTo(\r\n   *                       sumsOfIndexesAndNumbers,\r\n   *                       (eachIndex, eachNumber) => eachIndex + eachNumber\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(sumsOfIndexesAndNumbers)\r\n   * // ↑ [ 1, 3, 5, 7, 9 ]\r\n   * console.log(originalData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  mapIndexedTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: IndexedTransformer<DataType, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.mapIndexedTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each element and its index in the original\r\n   * collection and appends the results that are not ```null``` nor ```undefined``` to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {IndexedTransformer< DataType,ResultDataType | void | null | undefined>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const sumsOfIndexesAndNumbersWhereNumberIsEvent = new Array<number>()\r\n   * const prodcutsOfIndexesAndNumbersWhereIndexIsOdd = new Set<number>()\r\n   * const squaredNumbersWhereIndexLessThan3 = new Array<number>()\r\n   * const origianlData = await koconutArray\r\n   *       .mapIndexedNotNullTo(\r\n   *           sumsOfIndexesAndNumbersWhereNumberIsEvent,\r\n   *           (eachIndex, eachNumber) => {\r\n   *               if(eachNumber % 2 == 0)\r\n   *                   return eachIndex + eachNumber\r\n   *               // return\r\n   *               // return null\r\n   *               // return undefined\r\n   *               // ↑ You can use any one of\r\n   *               //   them or just omit it.\r\n   *           }\r\n   *       )\r\n   *       .mapIndexedNotNullTo(\r\n   *           prodcutsOfIndexesAndNumbersWhereIndexIsOdd,\r\n   *           async (eachIndex, eachNumber) => {\r\n   *               if(eachIndex % 2 == 1)\r\n   *                   return eachIndex * eachNumber\r\n   *           }\r\n   *       )\r\n   *       .mapIndexedNotNullTo(\r\n   *           squaredNumbersWhereIndexLessThan3,\r\n   *           (eachIndex, eachNumber) => new Promise<number | null>(resolve => {\r\n   *               if(eachIndex <= 3)\r\n   *                   resolve(eachNumber * eachNumber)\r\n   *               else resolve(null)\r\n   *           })\r\n   *       )\r\n   *           .yield()\r\n   * console.log(sumsOfIndexesAndNumbersWhereNumberIsEvent)\r\n   * // ↑ [ 3, 7 ]\r\n   * console.log(prodcutsOfIndexesAndNumbersWhereIndexIsOdd)\r\n   * // ↑ Set { 2, 12 }\r\n   * console.log(squaredNumbersWhereIndexLessThan3)\r\n   * // ↑ [ 1, 4, 9, 16 ]\r\n   * console.log(origianlData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  mapIndexedNotNullTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: IndexedTransformer<\r\n      DataType,\r\n      ResultDataType | void | null | undefined\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.mapIndexedNotNullTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  // Manipulator\r\n  /**\r\n   * Returns a {@link KoconutArray} containing only distinct elements from this collection.\r\n   * If the type of data is a simple number or string, the method will check equality by using '==' operator, but if it's not,\r\n   * you'd better make your custom class inherits {@link KoconutEquatable}.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const numberKoconutArray = KoconutArray.of(1,1,2,2,3,3)\r\n   *\r\n   * const distinctNumbers = await numberKoconutArray\r\n   *                               .distinct()\r\n   *                               .yield()\r\n   * console.log(distinctNumbers)\r\n   * // ↑ [ 1, 2, 3 ]\r\n   *\r\n   * class SomeInfo {\r\n   *   info : string\r\n   *   constructor(info : string) {\r\n   *       this.info = info\r\n   *   }\r\n   * }\r\n   * const someInfoKoconutArray = KoconutArray.of(\r\n   *   new SomeInfo(\"A\"),\r\n   *   new SomeInfo(\"A\"),\r\n   *   new SomeInfo(\"B\"),\r\n   *   new SomeInfo(\"B\"),\r\n   *   new SomeInfo(\"C\"),\r\n   *   new SomeInfo(\"C\"),\r\n   * )\r\n   * const distinctSomeInfos = await someInfoKoconutArray\r\n   *                           .distinct()\r\n   *                           .yield()\r\n   * console.log(distinctSomeInfos)\r\n   * // ↑ [\r\n   * //        SomeInfo { info: 'A' },\r\n   * //        SomeInfo { info: 'A' },\r\n   * //        SomeInfo { info: 'B' },\r\n   * //        SomeInfo { info: 'B' },\r\n   * //        SomeInfo { info: 'C' },\r\n   * //        SomeInfo { info: 'C' }\r\n   * //   ]\r\n   *\r\n   * class SomeEquatableInfo implements KoconutEquatable {\r\n   *   info : string\r\n   *   constructor(info : string) {\r\n   *       this.info = info\r\n   *   }\r\n   *   equalsTo(other : SomeEquatableInfo) : boolean {\r\n   *       return this.info == other.info\r\n   *   }\r\n   * }\r\n   * const someEquatableInfoKoconutArray = KoconutArray.of(\r\n   *   new SomeEquatableInfo(\"A\"),\r\n   *   new SomeEquatableInfo(\"A\"),\r\n   *   new SomeEquatableInfo(\"B\"),\r\n   *   new SomeEquatableInfo(\"B\"),\r\n   *   new SomeEquatableInfo(\"C\"),\r\n   *   new SomeEquatableInfo(\"C\")\r\n   * )\r\n   * const distinctSomeEquatableInfos = await someEquatableInfoKoconutArray\r\n   *                                   .distinct()\r\n   *                                   .yield()\r\n   * console.log(distinctSomeEquatableInfos)\r\n   * // ↑ [\r\n   * //        SomeEquatableInfo { info: 'A' },\r\n   * //        SomeEquatableInfo { info: 'B' },\r\n   * //        SomeEquatableInfo { info: 'C' }\r\n   * //   ]\r\n   * ```\r\n   */\r\n  distinct(): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.distinct());\r\n  }\r\n\r\n  /**\r\n     * Returns a {@link KoconutArray} containing only elements from the given collection having\r\n     * distinct keys returned by the given ```selector``` function.\r\n     * \r\n     * @param {Selector<DataType, KeyType | EquatableKeyType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\r\n     * \r\n     * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value \r\n     * \r\n     * @return {KoconutArray<DataType>}\r\n     * \r\n     * @since 1.0.10\r\n     * \r\n     * @category Manipulator\r\n     * \r\n     * @example\r\n     * ```typescript\r\n     * const numberKoconutArray = KoconutArray.of(1,1,2,2,3,3)\r\n     *\r\n     * const distinctNumbers = await numberKoconutArray\r\n     *                         .distinctBy(eachNumber => eachNumber)\r\n     *                         .yield()\r\n     * console.log(distinctNumbers)\r\n     * // ↑ [ 1, 2, 3 ]\r\n\r\n     * class SomeInfo {\r\n     *     info : string\r\n     *     constructor(info : string) {\r\n     *         this.info = info\r\n     *     }\r\n     * }\r\n     * const someInfoKoconutArray = KoconutArray.of(\r\n     *     new SomeInfo(\"A\"),\r\n     *     new SomeInfo(\"A\"),\r\n     *     new SomeInfo(\"B\"),\r\n     *     new SomeInfo(\"B\"),\r\n     *     new SomeInfo(\"C\"),\r\n     *     new SomeInfo(\"C\")\r\n     * )\r\n     * const distinctSomeInfos = await someInfoKoconutArray\r\n     *                     .distinctBy(eachSomeInfo => eachSomeInfo.info)\r\n     *                     .yield()\r\n     * console.log(distinctSomeInfos)\r\n     * // ↑ [\r\n     * //   SomeInfo { info: 'A' },\r\n     * //   SomeInfo { info: 'B' },\r\n     * //   SomeInfo { info: 'C' }\r\n     * //  ]\r\n     *\r\n     * class SomeEquatableInfo implements KoconutEquatable {\r\n     *     info : string\r\n     *     constructor(info : string) {\r\n     *         this.info = info\r\n     *     }\r\n     *     equalsTo(other : SomeEquatableInfo) : boolean {\r\n     *         return this.info == other.info\r\n     *     }\r\n     * }\r\n     * class SomeEquatableInfoContainer {\r\n     *     someEquatableInfo : SomeEquatableInfo\r\n     *     additionalInfo : string\r\n     *     constructor(someEquatableInfo : SomeEquatableInfo, additionalInfo : string) {\r\n     *         this.someEquatableInfo = someEquatableInfo\r\n     *         this.additionalInfo = additionalInfo\r\n     *     }\r\n     * }\r\n     * const someEquatableInfoContainerKoconutArray = KoconutArray.of(\r\n     *     new SomeEquatableInfoContainer(\r\n     *         new SomeEquatableInfo(\"A\"),\r\n     *         \"First\"\r\n     *     ),\r\n     *     new SomeEquatableInfoContainer(\r\n     *         new SomeEquatableInfo(\"A\"),\r\n     *         \"Second\"\r\n     *     ),\r\n     *     new SomeEquatableInfoContainer(\r\n     *         new SomeEquatableInfo(\"B\"),\r\n     *         \"First\"\r\n     *     ),\r\n     *     new SomeEquatableInfoContainer(\r\n     *         new SomeEquatableInfo(\"B\"),\r\n     *         \"Second\"\r\n     *     ),\r\n     *     new SomeEquatableInfoContainer(\r\n     *         new SomeEquatableInfo(\"C\"),\r\n     *         \"First\"\r\n     *     ),\r\n     *     new SomeEquatableInfoContainer(\r\n     *         new SomeEquatableInfo(\"C\"),\r\n     *         \"Second\"\r\n     *     )\r\n     * )\r\n     * const distinctSomeEquatableInfoContainersByEquatableInfo =\r\n     *                 await someEquatableInfoContainerKoconutArray\r\n     *                 .distinctBy(async eachContainer => eachContainer.someEquatableInfo)\r\n     *                 .yield()\r\n     * console.log(distinctSomeEquatableInfoContainersByEquatableInfo)\r\n     * // ↑ [\r\n     * //   SomeEquatableInfoContainer {\r\n     * //     someEquatableInfo: SomeEquatableInfo { info: 'A' },\r\n     * //     additionalInfo: 'First'\r\n     * //   },\r\n     * //   SomeEquatableInfoContainer {\r\n     * //     someEquatableInfo: SomeEquatableInfo { info: 'B' },\r\n     * //     additionalInfo: 'First'\r\n     * //   },\r\n     * //   SomeEquatableInfoContainer {\r\n     * //     someEquatableInfo: SomeEquatableInfo { info: 'C' },\r\n     * //     additionalInfo: 'First'\r\n     * //   }\r\n     * // ]\r\n     *\r\n     * const distinctSomeEquatableInfoContainersByAdditionalInfo =\r\n     *                 await someEquatableInfoContainerKoconutArray\r\n     *                 .distinctBy(eachContainer => new Promise(resolve => {\r\n     *                     resolve(eachContainer.additionalInfo)\r\n     *                 }))\r\n     *                 .yield()\r\n     * console.log(distinctSomeEquatableInfoContainersByAdditionalInfo)\r\n     * // ↑ [\r\n     * //   SomeEquatableInfoContainer {\r\n     * //     someEquatableInfo: SomeEquatableInfo { info: 'A' },\r\n     * //     additionalInfo: 'First'\r\n     * //   },\r\n     * //   SomeEquatableInfoContainer {\r\n     * //     someEquatableInfo: SomeEquatableInfo { info: 'A' },\r\n     * //     additionalInfo: 'Second'\r\n     * //   }\r\n     * // ]\r\n     * ```\r\n     */\r\n  distinctBy<KeyType, EquatableKeyType extends KoconutEquatable>(\r\n    selector: Selector<DataType, KeyType | EquatableKeyType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.distinctBy(selector, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing all elements except first ```n``` elements.\r\n   *\r\n   * @param {number} n Elements number to except.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const fisrt3ElementsDroppedArray = await koconutArray\r\n   *                                         .drop(3)\r\n   *                                         .yield()\r\n   * console.log(fisrt3ElementsDroppedArray)\r\n   * // ↑ [ 4, 5 ]\r\n   * ```\r\n   */\r\n  drop(n: number): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.drop(n));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containg all elements except last ```n``` elements.\r\n   *\r\n   * @param {number} n Elements number to except.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const last3ElementsDroppedArray = await koconutArray\r\n   *                                         .dropLast(3)\r\n   *                                         .yield()\r\n   * console.log(last3ElementsDroppedArray)\r\n   * // ↑ [ 1, 2 ]\r\n   * ```\r\n   */\r\n  dropLast(n: number): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.dropLast(n));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing all elements except last elements that satisfy the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const greaterThan5DroppedArray = await koconutArray\r\n   *                 .dropLastWhile(eachNumber => eachNumber > 5)\r\n   *                 .yield()\r\n   * console.log(greaterThan5DroppedArray)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  dropLastWhile(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.dropLastWhile(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing all elements except first elements that satisfy the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const lessThan5DroppedArray = await koconutArray\r\n   *                 .dropWhile(eachNumber => eachNumber < 5)\r\n   *                 .yield()\r\n   * console.log(lessThan5DroppedArray)\r\n   * // ↑ [ 5, 6, 7, 8, 9, 10 ]\r\n   * ```\r\n   */\r\n  dropWhile(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.dropWhile(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing only elements matching the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const evenNumbers = await koconutArray\r\n   *                       .filter(eachNumber => eachNumber % 2 == 0)\r\n   *                       .yield()\r\n   * console.log(evenNumbers)\r\n   * // ↑ [ 2, 4 ]\r\n   * ```\r\n   */\r\n  filter(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.filter(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing only elements not matching the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const oddNumbers = await koconutArray\r\n   *                       .filterNot(eachNumber => eachNumber % 2 == 0)\r\n   *                       .yield()\r\n   * console.log(oddNumbers)\r\n   * // ↑ [ 1, 3, 5 ]\r\n   * ```\r\n   */\r\n  filterNot(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.filterNot(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Appends all elements matching the given ```predicate``` to the given destination.\r\n   *\r\n   * @param {Array<DataType> | Set<DataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const evenNumbers = new Array<number>()\r\n   * const originalData = await koconutArray\r\n   *                       .filterTo(\r\n   *                           evenNumbers,\r\n   *                           eachNumber => eachNumber % 2 == 0\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(evenNumbers)\r\n   * // ↑ [ 2, 4 ]\r\n   * console.log(originalData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  filterTo(\r\n    destination: Array<DataType> | Set<DataType>,\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.filterTo(destination, predicate, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Appends all elements not matching the given ```predicate``` to the given destination.\r\n   *\r\n   * @param {Array<DataType> | Set<DataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const oddNumbers = new Array<number>()\r\n   * const originalData = await koconutArray\r\n   *                       .filterNotTo(\r\n   *                           oddNumbers,\r\n   *                           eachNumber => eachNumber % 2 == 0\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(oddNumbers)\r\n   * // ↑ [ 1, 3, 5 ]\r\n   * console.log(originalData)\r\n   * // ↑ [ 1, 2, 3, 4, 5 ]\r\n   * ```\r\n   */\r\n  filterNotTo(\r\n    destination: Array<DataType> | Set<DataType>,\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.filterNotTo(destination, predicate, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing only elements matching the given ```predicate``` with indexes.\r\n   *\r\n   * @param {IndexedPredicator<DataType>} predicate A callback function that accepts two arguments. The method calls the ```predicate``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(0,1,2,5,6,7)\r\n   *\r\n   * const numbersEqualToIndex = await koconutArray\r\n   *       .filterIndexed((eachIndex, eachNumber) => eachIndex == eachNumber)\r\n   *       .yield()\r\n   * console.log(numbersEqualToIndex)\r\n   * // ↑ [ 0, 1, 2 ]\r\n   * ```\r\n   */\r\n  filterIndexed(\r\n    predicate: IndexedPredicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.filterIndexed(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Appends all elements matching the given ```predicate``` with indexes to the given destination.\r\n   *\r\n   * @param {Array<DataType> | Set<DataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {IndexedPredicator<DataType>} predicate A callback function that accepts two arguments. The method calls the ```predicate``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(0,1,2,5,6,7)\r\n   *\r\n   * const numbersEqualToIndex = new Array<number>()\r\n   * const origianlData =await koconutArray\r\n   *       .filterIndexedTo(\r\n   *           numbersEqualToIndex,\r\n   *           (eachIndex, eachNumber) => eachIndex == eachNumber\r\n   *       )\r\n   *       .yield()\r\n   * console.log(numbersEqualToIndex)\r\n   * // ↑ [ 0, 1, 2 ]\r\n   * console.log(origianlData)\r\n   * // ↑ [ 0, 1, 2, 5, 6, 7 ]\r\n   * ```\r\n   */\r\n  filterIndexedTo(\r\n    destination: Array<DataType> | Set<DataType>,\r\n    predicate: IndexedPredicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.filterIndexedTo(destination, predicate, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing all elements that are not ```null```.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,null,null)\r\n   *\r\n   * const numbers = await koconutArray\r\n   *               .filterNotNull()\r\n   *               .yield()\r\n   * console.log(numbers)\r\n   * // ↑ [ 1, 2 ]\r\n   * ```\r\n   */\r\n  filterNotNull(): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.filterNotNull());\r\n  }\r\n\r\n  /**\r\n   * Appends all elements that are not ```null``` to the given destination.\r\n   *\r\n   * @param {Array<DataType> | Set<DataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(1,2,null,null)\r\n   *\r\n   * const numbers = Array<number>()\r\n   * const originalData = await koconutArray\r\n   *                   .filterNotNullTo(numbers)\r\n   *                   .yield()\r\n   * console.log(numbers)\r\n   * // ↑ [ 1, 2 ]\r\n   * console.log(originalData)\r\n   * // ↑ [ 1, 2, null, null ]\r\n   * ```\r\n   */\r\n  filterNotNullTo(\r\n    destination: Array<DataType> | Set<DataType>,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.filterNotNullTo(destination));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} of all elements sorted according to natural sort order\r\n   * of the value returned by specified ```selector``` function. It could be either a ```number```, ```string```, or custom class\r\n   * that inherits {@link KoconutComparable}.\r\n   *\r\n   * @param {Selector<DataType, number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object\r\n   * .\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const stringKoconutArray = KoconutArray.of(\"abcd\", \"ab\", \"a\", \"abc\")\r\n   *\r\n   * const sortedStringByItsLength = await stringKoconutArray\r\n   *                                   .sortedBy(eachString => eachString.length)\r\n   *                                   .yield()\r\n   * console.log(sortedStringByItsLength)\r\n   * // ↑ [ 'a', 'ab', 'abc', 'abcd' ]\r\n   *\r\n   * class Person implements KoconutComparable {\r\n   *   name : string\r\n   *   age : number\r\n   *   constructor(name : string, age : number) {\r\n   *       this.name = name\r\n   *       this.age = age\r\n   *   }\r\n   *   compareTo(other : Person) : number {\r\n   *       return this.name.length - other.name.length\r\n   *   }\r\n   * }\r\n   * const personKoconutArray = KoconutArray.of(\r\n   *   new Person(\"Keanu Reeves\", 56),\r\n   *   new Person(\"Robert Downey Jr.\", 55),\r\n   *   new Person(\"Christian Bale\", 46)\r\n   * )\r\n   *\r\n   * // You can do it by async function.\r\n   * const sortedPeopleByWhoseAge = await personKoconutArray\r\n   *                                   .sortedBy(async eachPerson => eachPerson.age)\r\n   *                                   .yield()\r\n   * console.log(sortedPeopleByWhoseAge)\r\n   * // ↑ [\r\n   * //        Person { name: 'Christian Bale', age: 46 },\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 },\r\n   * //        Person { name: 'Keanu Reeves', age: 56 }\r\n   * //   ]\r\n   *\r\n   * // And of course, by returning Promise.\r\n   * const sortedPeopleByWhoseName = await personKoconutArray\r\n   *                                   .sortedBy(eachPerson => new Promise(resolve => {\r\n   *                                       resolve(eachPerson.name)\r\n   *                                   }))\r\n   *                                   .yield()\r\n   * console.log(sortedPeopleByWhoseName)\r\n   * // ↑ [\r\n   * //        Person { name: 'Christian Bale', age: 46 },\r\n   * //        Person { name: 'Keanu Reeves', age: 56 },\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 }\r\n   * //   ]\r\n   *\r\n   * // The class Person itself implements KoconutComparable.\r\n   * // So, it is a Comparable Type.\r\n   * // If you're using JavaScript you can do something similar as following\r\n   * // by extending KoconutComparable or simply adding method 'compareTo' to your custom class.\r\n   * const sortedPeople = await personKoconutArray\r\n   *                           .sortedBy(eachPerson => eachPerson)\r\n   *                           .yield()\r\n   * console.log(sortedPeople)\r\n   * // ↑ [\r\n   * //        Person { name: 'Keanu Reeves', age: 56 },\r\n   * //        Person { name: 'Christian Bale', age: 46 },\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 }\r\n   * //   ]\r\n   * ```\r\n   */\r\n  sortedBy(\r\n    selector: Selector<DataType, number | string | KoconutComparable>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.sortedBy(selector, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} of all elements sorted descending according to natural sort order\r\n   * of the value returned by specified ```selector``` function. It could be either a ```number```, ```string```, or custom class\r\n   * that inherits {@link KoconutComparable}.\r\n   *\r\n   * @param {Selector<DataType, number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const stringKoconutArray = KoconutArray.of(\"abcd\", \"ab\", \"a\", \"abc\")\r\n   *\r\n   * const descSortedStringByItsLength = await stringKoconutArray\r\n   *                                   .sortedByDescending(eachString => eachString.length)\r\n   *                                   .yield()\r\n   * console.log(descSortedStringByItsLength)\r\n   * // ↑ [ 'abcd', 'abc', 'ab', 'a' ]\r\n   *\r\n   * class Person implements KoconutComparable {\r\n   *   name : string\r\n   *   age : number\r\n   *   constructor(name : string, age : number) {\r\n   *       this.name = name\r\n   *       this.age = age\r\n   *   }\r\n   *   compareTo(other : Person) : number {\r\n   *       return this.name.length - other.name.length\r\n   *   }\r\n   * }\r\n   * const personKoconutArray = KoconutArray.of(\r\n   *   new Person(\"Keanu Reeves\", 56),\r\n   *   new Person(\"Robert Downey Jr.\", 55),\r\n   *   new Person(\"Christian Bale\", 46)\r\n   * )\r\n   *\r\n   * // You can do it by async function.\r\n   * const descSortedPeopleByWhoseAge = await personKoconutArray\r\n   *                                   .sortedByDescending(async eachPerson => eachPerson.age)\r\n   *                                   .yield()\r\n   * console.log(descSortedPeopleByWhoseAge)\r\n   * // ↑ [\r\n   * //        Person { name: 'Keanu Reeves', age: 56 },\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 },\r\n   * //        Person { name: 'Christian Bale', age: 46 }\r\n   * //   ]\r\n   *\r\n   * // And of course, by returning Promise.\r\n   * const descSortedPeopleByWhoseName = await personKoconutArray\r\n   *                                   .sortedByDescending(eachPerson => new Promise(resolve => {\r\n   *                                       resolve(eachPerson.name)\r\n   *                                   }))\r\n   *                                   .yield()\r\n   * console.log(descSortedPeopleByWhoseName)\r\n   * // ↑ [\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 },\r\n   * //        Person { name: 'Keanu Reeves', age: 56 },\r\n   * //        Person { name: 'Christian Bale', age: 46 }\r\n   * //   ]\r\n   *\r\n   * // The class Person itself implements KoconutComparable.\r\n   * // So, it is a Comparable Type.\r\n   * // If you're using JavaScript you can do something similar as following\r\n   * // by extending KoconutComparable or simply adding method 'compareTo' to your custom class.\r\n   * const descSortedPeople = await personKoconutArray\r\n   *                           .sortedByDescending(eachPerson => eachPerson)\r\n   *                           .yield()\r\n   * console.log(descSortedPeople)\r\n   * // ↑ [\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 },\r\n   * //        Person { name: 'Christian Bale', age: 46 },\r\n   * //        Person { name: 'Keanu Reeves', age: 56 }\r\n   * //   ]\r\n   * ```\r\n   */\r\n  sortedByDescending(\r\n    selector: Selector<DataType, number | string | KoconutComparable>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(\r\n      super.sortedByDescending(selector, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} of all elements sorted according to the\r\n   * specified ```comparator```.\r\n   *\r\n   * @param {Comparator<DataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\r\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(15, 4, 33)\r\n   *\r\n   * const sortedNumbers = await koconutArray\r\n   *                       .sortedWith((front, rear) => front - rear)\r\n   *                       .yield()\r\n   * console.log(sortedNumbers)\r\n   * // ↑ [ 4, 15, 33 ]\r\n   *\r\n   * const descSortedNumbers = await koconutArray\r\n   *                           .sortedWith((front, rear) => rear - front)\r\n   *                           .yield()\r\n   * console.log(descSortedNumbers)\r\n   * // ↑ [ 33, 15, 4 ]\r\n   *\r\n   * const sortedNumbersBy1sDigit = await koconutArray\r\n   *                       .sortedWith((front, rear) => front % 10 - rear % 10)\r\n   *                       .yield()\r\n   * console.log(sortedNumbersBy1sDigit)\r\n   * // ↑ [ 33, 4, 15 ]\r\n   * ```\r\n   */\r\n  sortedWith(\r\n    comparator: Comparator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.sortedWith(comparator, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing first ```n``` elements.\r\n   *\r\n   * @param {number} n Elements number to take.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const first3ElementsOfArray = await koconutArray\r\n   *                                 .take(3)\r\n   *                                 .yield()\r\n   * console.log(first3ElementsOfArray)\r\n   * // ↑ [ 1, 2, 3 ]\r\n   * ```\r\n   */\r\n  take(n: number): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.take(n));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containg last ```n``` elements.\r\n   * @param {number} n Elements number to take.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const last3ElementsOfArray = await koconutArray\r\n   *                                 .takeLast(3)\r\n   *                                 .yield()\r\n   * console.log(last3ElementsOfArray)\r\n   * // ↑ [ 8, 9, 10 ]\r\n   * ```\r\n   */\r\n  takeLast(n: number): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.takeLast(n));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing last elements satisfying the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const lastNumbersWhileGreaterThan7 = await koconutArray\r\n   *                     .takeLastWhile(eachNumber => eachNumber >7)\r\n   *                     .yield()\r\n   * console.log(lastNumbersWhileGreaterThan7)\r\n   * // ↑ [ 8, 9, 10 ]\r\n   * ```\r\n   */\r\n  takeLastWhile(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.takeLastWhile(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} containing first elements satisfying the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutArray<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutArray = KoconutArray.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const numbersWhileLessThan5 = await koconutArray\r\n   *                     .takeWhile(eachNumber => eachNumber < 5)\r\n   *                     .yield()\r\n   * console.log(numbersWhileLessThan5)\r\n   * // ↑ [ 1, 2, 3, 4 ]\r\n   * ```\r\n   */\r\n  takeWhile(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.takeWhile(predicate, thisArg));\r\n  }\r\n\r\n  minus(element: DataType): KoconutArray<DataType>;\r\n  minus(elements: Iterable<DataType>): KoconutArray<DataType>;\r\n  minus(elements: DataType | Iterable<DataType>): KoconutArray<DataType> {\r\n    if (typeof (elements as any)[Symbol.iterator] === 'function')\r\n      return KoconutArray.fromCollection(\r\n        super.minus(elements as Iterable<DataType>),\r\n      );\r\n    else return KoconutArray.fromCollection(super.minus(elements as DataType));\r\n  }\r\n\r\n  minusElement(element: DataType): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.minusElement(element));\r\n  }\r\n\r\n  plus(element: DataType): KoconutArray<DataType>;\r\n  plus(elements: Iterable<DataType>): KoconutArray<DataType>;\r\n  plus(elements: DataType | Iterable<DataType>): KoconutArray<DataType> {\r\n    if (typeof (elements as any)[Symbol.iterator] === 'function')\r\n      return KoconutArray.fromCollection(\r\n        super.plus(elements as Iterable<DataType>),\r\n      );\r\n    else return KoconutArray.fromCollection(super.plus(elements as DataType));\r\n  }\r\n\r\n  plusElement(element: DataType): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.plusElement(element));\r\n  }\r\n\r\n  reversed(): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.reversed());\r\n  }\r\n\r\n  shuffled(): KoconutArray<DataType> {\r\n    return KoconutArray.fromCollection(super.shuffled());\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d9364221180452da0908aaa6213779bb55fc7e6b","contentHash":"7913a320be69e14a866bc911a70e32be77abffc12d6f09acdf9906d55332f211"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\collection\\sequence\\KoconutSequence.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\collection\\sequence\\KoconutSequence.ts","statementMap":{"0":{"start":{"line":2,"column":29},"end":{"line":6,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":97}},"2":{"start":{"line":3,"column":28},"end":{"line":3,"column":97}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":183}},"4":{"start":{"line":4,"column":87},"end":{"line":4,"column":183}},"5":{"start":{"line":5,"column":4},"end":{"line":5,"column":98}},"6":{"start":{"line":7,"column":29},"end":{"line":12,"column":1}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":76}},"8":{"start":{"line":8,"column":22},"end":{"line":8,"column":76}},"9":{"start":{"line":9,"column":4},"end":{"line":9,"column":97}},"10":{"start":{"line":9,"column":28},"end":{"line":9,"column":97}},"11":{"start":{"line":10,"column":4},"end":{"line":10,"column":182}},"12":{"start":{"line":10,"column":87},"end":{"line":10,"column":182}},"13":{"start":{"line":11,"column":4},"end":{"line":11,"column":110}},"14":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"15":{"start":{"line":15,"column":0},"end":{"line":15,"column":52}},"16":{"start":{"line":16,"column":0},"end":{"line":16,"column":13}},"17":{"start":{"line":17,"column":17},"end":{"line":17,"column":46}},"18":{"start":{"line":20,"column":8},"end":{"line":20,"column":47}},"19":{"start":{"line":21,"column":8},"end":{"line":21,"column":46}},"20":{"start":{"line":22,"column":8},"end":{"line":22,"column":50}},"21":{"start":{"line":23,"column":8},"end":{"line":23,"column":47}},"22":{"start":{"line":24,"column":8},"end":{"line":24,"column":57}},"23":{"start":{"line":25,"column":8},"end":{"line":29,"column":9}},"24":{"start":{"line":26,"column":12},"end":{"line":28,"column":13}},"25":{"start":{"line":27,"column":16},"end":{"line":27,"column":93}},"26":{"start":{"line":32,"column":8},"end":{"line":32,"column":95}},"27":{"start":{"line":35,"column":8},"end":{"line":35,"column":41}},"28":{"start":{"line":38,"column":8},"end":{"line":38,"column":41}},"29":{"start":{"line":41,"column":20},"end":{"line":41,"column":21}},"30":{"start":{"line":42,"column":8},"end":{"line":43,"column":132}},"31":{"start":{"line":43,"column":12},"end":{"line":43,"column":132}},"32":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"33":{"start":{"line":45,"column":12},"end":{"line":45,"column":41}},"34":{"start":{"line":47,"column":8},"end":{"line":47,"column":75}},"35":{"start":{"line":48,"column":8},"end":{"line":48,"column":72}},"36":{"start":{"line":49,"column":8},"end":{"line":49,"column":71}},"37":{"start":{"line":50,"column":8},"end":{"line":50,"column":20}},"38":{"start":{"line":54,"column":8},"end":{"line":69,"column":9}},"39":{"start":{"line":55,"column":12},"end":{"line":56,"column":79}},"40":{"start":{"line":56,"column":16},"end":{"line":56,"column":79}},"41":{"start":{"line":57,"column":12},"end":{"line":57,"column":87}},"42":{"start":{"line":60,"column":34},"end":{"line":60,"column":116}},"43":{"start":{"line":61,"column":12},"end":{"line":68,"column":13}},"44":{"start":{"line":62,"column":31},"end":{"line":62,"column":259}},"45":{"start":{"line":63,"column":16},"end":{"line":64,"column":83}},"46":{"start":{"line":64,"column":20},"end":{"line":64,"column":83}},"47":{"start":{"line":65,"column":16},"end":{"line":66,"column":94}},"48":{"start":{"line":66,"column":20},"end":{"line":66,"column":94}},"49":{"start":{"line":67,"column":16},"end":{"line":67,"column":30}},"50":{"start":{"line":72,"column":8},"end":{"line":72,"column":80}},"51":{"start":{"line":73,"column":8},"end":{"line":73,"column":83}},"52":{"start":{"line":74,"column":8},"end":{"line":74,"column":79}},"53":{"start":{"line":75,"column":8},"end":{"line":75,"column":20}},"54":{"start":{"line":78,"column":0},"end":{"line":78,"column":28}},"55":{"start":{"line":81,"column":8},"end":{"line":81,"column":16}},"56":{"start":{"line":82,"column":8},"end":{"line":82,"column":46}},"57":{"start":{"line":85,"column":8},"end":{"line":85,"column":48}},"58":{"start":{"line":88,"column":8},"end":{"line":88,"column":48}},"59":{"start":{"line":92,"column":8},"end":{"line":92,"column":29}},"60":{"start":{"line":93,"column":32},"end":{"line":93,"column":53}},"61":{"start":{"line":94,"column":8},"end":{"line":106,"column":11}},"62":{"start":{"line":97,"column":34},"end":{"line":97,"column":38}},"63":{"start":{"line":98,"column":12},"end":{"line":105,"column":15}},"64":{"start":{"line":99,"column":16},"end":{"line":103,"column":17}},"65":{"start":{"line":100,"column":35},"end":{"line":100,"column":57}},"66":{"start":{"line":101,"column":20},"end":{"line":102,"column":48}},"67":{"start":{"line":102,"column":24},"end":{"line":102,"column":48}},"68":{"start":{"line":104,"column":16},"end":{"line":104,"column":32}},"69":{"start":{"line":107,"column":8},"end":{"line":107,"column":31}},"70":{"start":{"line":110,"column":8},"end":{"line":110,"column":29}},"71":{"start":{"line":111,"column":32},"end":{"line":111,"column":53}},"72":{"start":{"line":112,"column":8},"end":{"line":124,"column":11}},"73":{"start":{"line":115,"column":34},"end":{"line":115,"column":38}},"74":{"start":{"line":116,"column":12},"end":{"line":123,"column":15}},"75":{"start":{"line":117,"column":16},"end":{"line":121,"column":17}},"76":{"start":{"line":118,"column":35},"end":{"line":118,"column":64}},"77":{"start":{"line":119,"column":20},"end":{"line":120,"column":48}},"78":{"start":{"line":120,"column":24},"end":{"line":120,"column":48}},"79":{"start":{"line":122,"column":16},"end":{"line":122,"column":32}},"80":{"start":{"line":125,"column":8},"end":{"line":125,"column":31}},"81":{"start":{"line":128,"column":8},"end":{"line":128,"column":44}},"82":{"start":{"line":129,"column":32},"end":{"line":129,"column":53}},"83":{"start":{"line":130,"column":8},"end":{"line":137,"column":11}},"84":{"start":{"line":133,"column":12},"end":{"line":136,"column":15}},"85":{"start":{"line":134,"column":16},"end":{"line":135,"column":36}},"86":{"start":{"line":135,"column":20},"end":{"line":135,"column":36}},"87":{"start":{"line":138,"column":8},"end":{"line":138,"column":31}},"88":{"start":{"line":141,"column":8},"end":{"line":141,"column":44}},"89":{"start":{"line":142,"column":32},"end":{"line":142,"column":53}},"90":{"start":{"line":143,"column":8},"end":{"line":150,"column":11}},"91":{"start":{"line":146,"column":12},"end":{"line":149,"column":15}},"92":{"start":{"line":147,"column":16},"end":{"line":148,"column":36}},"93":{"start":{"line":148,"column":20},"end":{"line":148,"column":36}},"94":{"start":{"line":151,"column":8},"end":{"line":151,"column":31}},"95":{"start":{"line":154,"column":0},"end":{"line":154,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":70},"end":{"line":2,"column":71}},"loc":{"start":{"line":2,"column":106},"end":{"line":6,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":70},"end":{"line":7,"column":71}},"loc":{"start":{"line":7,"column":113},"end":{"line":12,"column":1}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":36},"end":{"line":30,"column":5}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":233},"end":{"line":33,"column":5}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":30},"end":{"line":36,"column":5}},"line":34},"5":{"name":"(anonymous_5)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":36},"end":{"line":39,"column":5}},"line":37},"6":{"name":"(anonymous_6)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":17},"end":{"line":51,"column":5}},"line":40},"7":{"name":"(anonymous_7)","decl":{"start":{"line":52,"column":4},"end":{"line":52,"column":5}},"loc":{"start":{"line":52,"column":26},"end":{"line":70,"column":5}},"line":52},"8":{"name":"(anonymous_8)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":45},"end":{"line":76,"column":5}},"line":71},"9":{"name":"(anonymous_9)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":36},"end":{"line":83,"column":5}},"line":80},"10":{"name":"(anonymous_10)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":30},"end":{"line":86,"column":5}},"line":84},"11":{"name":"(anonymous_11)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":36},"end":{"line":89,"column":5}},"line":87},"12":{"name":"(anonymous_12)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":35},"end":{"line":108,"column":5}},"line":91},"13":{"name":"(anonymous_13)","decl":{"start":{"line":96,"column":26},"end":{"line":96,"column":27}},"loc":{"start":{"line":96,"column":38},"end":{"line":106,"column":9}},"line":96},"14":{"name":"(anonymous_14)","decl":{"start":{"line":98,"column":62},"end":{"line":98,"column":63}},"loc":{"start":{"line":98,"column":85},"end":{"line":105,"column":13}},"line":98},"15":{"name":"(anonymous_15)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":42},"end":{"line":126,"column":5}},"line":109},"16":{"name":"(anonymous_16)","decl":{"start":{"line":114,"column":26},"end":{"line":114,"column":27}},"loc":{"start":{"line":114,"column":38},"end":{"line":124,"column":9}},"line":114},"17":{"name":"(anonymous_17)","decl":{"start":{"line":116,"column":62},"end":{"line":116,"column":63}},"loc":{"start":{"line":116,"column":89},"end":{"line":123,"column":13}},"line":116},"18":{"name":"(anonymous_18)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":38},"end":{"line":139,"column":5}},"line":127},"19":{"name":"(anonymous_19)","decl":{"start":{"line":132,"column":26},"end":{"line":132,"column":27}},"loc":{"start":{"line":132,"column":38},"end":{"line":137,"column":9}},"line":132},"20":{"name":"(anonymous_20)","decl":{"start":{"line":133,"column":62},"end":{"line":133,"column":63}},"loc":{"start":{"line":133,"column":85},"end":{"line":136,"column":13}},"line":133},"21":{"name":"(anonymous_21)","decl":{"start":{"line":140,"column":4},"end":{"line":140,"column":5}},"loc":{"start":{"line":140,"column":45},"end":{"line":152,"column":5}},"line":140},"22":{"name":"(anonymous_22)","decl":{"start":{"line":145,"column":26},"end":{"line":145,"column":27}},"loc":{"start":{"line":145,"column":38},"end":{"line":150,"column":9}},"line":145},"23":{"name":"(anonymous_23)","decl":{"start":{"line":146,"column":62},"end":{"line":146,"column":63}},"loc":{"start":{"line":146,"column":89},"end":{"line":149,"column":13}},"line":146}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":29},"end":{"line":6,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":30},"end":{"line":2,"column":34}},{"start":{"line":2,"column":38},"end":{"line":2,"column":65}},{"start":{"line":2,"column":70},"end":{"line":6,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":97}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":97}},{"start":{"line":3,"column":4},"end":{"line":3,"column":97}}],"line":3},"2":{"loc":{"start":{"line":3,"column":8},"end":{"line":3,"column":26}},"type":"binary-expr","locations":[{"start":{"line":3,"column":8},"end":{"line":3,"column":20}},{"start":{"line":3,"column":24},"end":{"line":3,"column":26}}],"line":3},"3":{"loc":{"start":{"line":4,"column":4},"end":{"line":4,"column":183}},"type":"if","locations":[{"start":{"line":4,"column":4},"end":{"line":4,"column":183}},{"start":{"line":4,"column":4},"end":{"line":4,"column":183}}],"line":4},"4":{"loc":{"start":{"line":4,"column":8},"end":{"line":4,"column":85}},"type":"cond-expr","locations":[{"start":{"line":4,"column":38},"end":{"line":4,"column":62}},{"start":{"line":4,"column":65},"end":{"line":4,"column":85}}],"line":4},"5":{"loc":{"start":{"line":4,"column":38},"end":{"line":4,"column":62}},"type":"binary-expr","locations":[{"start":{"line":4,"column":38},"end":{"line":4,"column":56}},{"start":{"line":4,"column":60},"end":{"line":4,"column":62}}],"line":4},"6":{"loc":{"start":{"line":5,"column":11},"end":{"line":5,"column":97}},"type":"cond-expr","locations":[{"start":{"line":5,"column":26},"end":{"line":5,"column":27}},{"start":{"line":5,"column":30},"end":{"line":5,"column":97}}],"line":5},"7":{"loc":{"start":{"line":5,"column":30},"end":{"line":5,"column":97}},"type":"cond-expr","locations":[{"start":{"line":5,"column":45},"end":{"line":5,"column":61}},{"start":{"line":5,"column":64},"end":{"line":5,"column":97}}],"line":5},"8":{"loc":{"start":{"line":5,"column":64},"end":{"line":5,"column":97}},"type":"cond-expr","locations":[{"start":{"line":5,"column":68},"end":{"line":5,"column":75}},{"start":{"line":5,"column":78},"end":{"line":5,"column":97}}],"line":5},"9":{"loc":{"start":{"line":7,"column":29},"end":{"line":12,"column":1}},"type":"binary-expr","locations":[{"start":{"line":7,"column":30},"end":{"line":7,"column":34}},{"start":{"line":7,"column":38},"end":{"line":7,"column":65}},{"start":{"line":7,"column":70},"end":{"line":12,"column":1}}],"line":7},"10":{"loc":{"start":{"line":8,"column":4},"end":{"line":8,"column":76}},"type":"if","locations":[{"start":{"line":8,"column":4},"end":{"line":8,"column":76}},{"start":{"line":8,"column":4},"end":{"line":8,"column":76}}],"line":8},"11":{"loc":{"start":{"line":9,"column":4},"end":{"line":9,"column":97}},"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":9,"column":97}},{"start":{"line":9,"column":4},"end":{"line":9,"column":97}}],"line":9},"12":{"loc":{"start":{"line":9,"column":8},"end":{"line":9,"column":26}},"type":"binary-expr","locations":[{"start":{"line":9,"column":8},"end":{"line":9,"column":20}},{"start":{"line":9,"column":24},"end":{"line":9,"column":26}}],"line":9},"13":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":182}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":182}},{"start":{"line":10,"column":4},"end":{"line":10,"column":182}}],"line":10},"14":{"loc":{"start":{"line":10,"column":8},"end":{"line":10,"column":85}},"type":"cond-expr","locations":[{"start":{"line":10,"column":38},"end":{"line":10,"column":62}},{"start":{"line":10,"column":65},"end":{"line":10,"column":85}}],"line":10},"15":{"loc":{"start":{"line":10,"column":38},"end":{"line":10,"column":62}},"type":"binary-expr","locations":[{"start":{"line":10,"column":38},"end":{"line":10,"column":56}},{"start":{"line":10,"column":60},"end":{"line":10,"column":62}}],"line":10},"16":{"loc":{"start":{"line":11,"column":12},"end":{"line":11,"column":101}},"type":"cond-expr","locations":[{"start":{"line":11,"column":27},"end":{"line":11,"column":50}},{"start":{"line":11,"column":53},"end":{"line":11,"column":101}}],"line":11},"17":{"loc":{"start":{"line":11,"column":53},"end":{"line":11,"column":101}},"type":"cond-expr","locations":[{"start":{"line":11,"column":57},"end":{"line":11,"column":72}},{"start":{"line":11,"column":75},"end":{"line":11,"column":101}}],"line":11},"18":{"loc":{"start":{"line":19,"column":16},"end":{"line":19,"column":34}},"type":"default-arg","locations":[{"start":{"line":19,"column":30},"end":{"line":19,"column":34}}],"line":19},"19":{"loc":{"start":{"line":25,"column":8},"end":{"line":29,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":29,"column":9}},{"start":{"line":25,"column":8},"end":{"line":29,"column":9}}],"line":25},"20":{"loc":{"start":{"line":37,"column":16},"end":{"line":37,"column":34}},"type":"default-arg","locations":[{"start":{"line":37,"column":30},"end":{"line":37,"column":34}}],"line":37},"21":{"loc":{"start":{"line":42,"column":8},"end":{"line":43,"column":132}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":43,"column":132}},{"start":{"line":42,"column":8},"end":{"line":43,"column":132}}],"line":42},"22":{"loc":{"start":{"line":54,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":69,"column":9}},{"start":{"line":54,"column":8},"end":{"line":69,"column":9}}],"line":54},"23":{"loc":{"start":{"line":55,"column":12},"end":{"line":56,"column":79}},"type":"if","locations":[{"start":{"line":55,"column":12},"end":{"line":56,"column":79}},{"start":{"line":55,"column":12},"end":{"line":56,"column":79}}],"line":55},"24":{"loc":{"start":{"line":61,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":68,"column":13}},{"start":{"line":61,"column":12},"end":{"line":68,"column":13}}],"line":61},"25":{"loc":{"start":{"line":63,"column":16},"end":{"line":64,"column":83}},"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":64,"column":83}},{"start":{"line":63,"column":16},"end":{"line":64,"column":83}}],"line":63},"26":{"loc":{"start":{"line":65,"column":16},"end":{"line":66,"column":94}},"type":"if","locations":[{"start":{"line":65,"column":16},"end":{"line":66,"column":94}},{"start":{"line":65,"column":16},"end":{"line":66,"column":94}}],"line":65},"27":{"loc":{"start":{"line":80,"column":16},"end":{"line":80,"column":34}},"type":"default-arg","locations":[{"start":{"line":80,"column":30},"end":{"line":80,"column":34}}],"line":80},"28":{"loc":{"start":{"line":87,"column":16},"end":{"line":87,"column":34}},"type":"default-arg","locations":[{"start":{"line":87,"column":30},"end":{"line":87,"column":34}}],"line":87},"29":{"loc":{"start":{"line":91,"column":19},"end":{"line":91,"column":33}},"type":"default-arg","locations":[{"start":{"line":91,"column":29},"end":{"line":91,"column":33}}],"line":91},"30":{"loc":{"start":{"line":99,"column":16},"end":{"line":103,"column":17}},"type":"if","locations":[{"start":{"line":99,"column":16},"end":{"line":103,"column":17}},{"start":{"line":99,"column":16},"end":{"line":103,"column":17}}],"line":99},"31":{"loc":{"start":{"line":101,"column":20},"end":{"line":102,"column":48}},"type":"if","locations":[{"start":{"line":101,"column":20},"end":{"line":102,"column":48}},{"start":{"line":101,"column":20},"end":{"line":102,"column":48}}],"line":101},"32":{"loc":{"start":{"line":101,"column":24},"end":{"line":101,"column":85}},"type":"binary-expr","locations":[{"start":{"line":101,"column":24},"end":{"line":101,"column":39}},{"start":{"line":101,"column":43},"end":{"line":101,"column":85}}],"line":101},"33":{"loc":{"start":{"line":109,"column":26},"end":{"line":109,"column":40}},"type":"default-arg","locations":[{"start":{"line":109,"column":36},"end":{"line":109,"column":40}}],"line":109},"34":{"loc":{"start":{"line":117,"column":16},"end":{"line":121,"column":17}},"type":"if","locations":[{"start":{"line":117,"column":16},"end":{"line":121,"column":17}},{"start":{"line":117,"column":16},"end":{"line":121,"column":17}}],"line":117},"35":{"loc":{"start":{"line":119,"column":20},"end":{"line":120,"column":48}},"type":"if","locations":[{"start":{"line":119,"column":20},"end":{"line":120,"column":48}},{"start":{"line":119,"column":20},"end":{"line":120,"column":48}}],"line":119},"36":{"loc":{"start":{"line":119,"column":24},"end":{"line":119,"column":85}},"type":"binary-expr","locations":[{"start":{"line":119,"column":24},"end":{"line":119,"column":39}},{"start":{"line":119,"column":43},"end":{"line":119,"column":85}}],"line":119},"37":{"loc":{"start":{"line":127,"column":22},"end":{"line":127,"column":36}},"type":"default-arg","locations":[{"start":{"line":127,"column":32},"end":{"line":127,"column":36}}],"line":127},"38":{"loc":{"start":{"line":134,"column":16},"end":{"line":135,"column":36}},"type":"if","locations":[{"start":{"line":134,"column":16},"end":{"line":135,"column":36}},{"start":{"line":134,"column":16},"end":{"line":135,"column":36}}],"line":134},"39":{"loc":{"start":{"line":140,"column":29},"end":{"line":140,"column":43}},"type":"default-arg","locations":[{"start":{"line":140,"column":39},"end":{"line":140,"column":43}}],"line":140},"40":{"loc":{"start":{"line":147,"column":16},"end":{"line":148,"column":36}},"type":"if","locations":[{"start":{"line":147,"column":16},"end":{"line":148,"column":36}},{"start":{"line":147,"column":16},"end":{"line":148,"column":36}}],"line":147}},"s":{"0":1,"1":831,"2":0,"3":831,"4":0,"5":831,"6":1,"7":231,"8":0,"9":231,"10":0,"11":231,"12":0,"13":231,"14":1,"15":1,"16":1,"17":1,"18":41,"19":41,"20":41,"21":41,"22":41,"23":41,"24":21,"25":74,"26":71,"27":0,"28":0,"29":40,"30":40,"31":10,"32":40,"33":104,"34":40,"35":40,"36":40,"37":40,"38":134,"39":104,"40":31,"41":104,"42":30,"43":30,"44":30,"45":30,"46":10,"47":30,"48":0,"49":30,"50":10,"51":10,"52":10,"53":10,"54":1,"55":31,"56":31,"57":5,"58":16,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":10,"82":10,"83":10,"84":10,"85":30,"86":0,"87":10,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":1},"f":{"0":831,"1":231,"2":41,"3":71,"4":0,"5":0,"6":40,"7":134,"8":10,"9":31,"10":5,"11":16,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":10,"19":10,"20":30,"21":0,"22":0,"23":0},"b":{"0":[1,1,1],"1":[0,831],"2":[831,0],"3":[0,831],"4":[0,831],"5":[0,0],"6":[0,831],"7":[0,831],"8":[0,831],"9":[1,1,1],"10":[0,231],"11":[0,231],"12":[231,0],"13":[0,231],"14":[0,231],"15":[0,0],"16":[0,231],"17":[0,231],"18":[10],"19":[21,20],"20":[0],"21":[10,30],"22":[104,30],"23":[31,73],"24":[30,0],"25":[10,20],"26":[0,30],"27":[10],"28":[0],"29":[0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[10],"38":[0,30],"39":[0],"40":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/collection/sequence/KoconutSequence.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/collection/sequence/KoconutSequence.ts"],"names":[],"mappings":"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","sourcesContent":["`use strict`;\r\n\r\nimport {\r\n  /* Container */\r\n  KoconutCollection,\r\n\r\n  /* Enum */\r\n  KoconutLoopSignal,\r\n\r\n  /* Tool */\r\n  KoconutOpener,\r\n} from '../../../../module';\r\n\r\nexport class Sequence<DataType> implements Iterable<DataType> {\r\n  #mIsFinished = false;\r\n  #mLastPrevIndex = 0;\r\n  #mParentSequence: Sequence<any> | null = null;\r\n  #mTransformer:\r\n    | ((\r\n        index: number,\r\n        srcDatum: any,\r\n      ) => void | DataType | Promise<void | DataType>)\r\n    | null = null;\r\n  #mInnerDataArray = new Array<DataType>();\r\n  [Symbol.iterator](): Iterator<DataType> {\r\n    return this.#mInnerDataArray[Symbol.iterator]();\r\n  }\r\n\r\n  constructor(srcSequence: Iterable<DataType> | null = null) {\r\n    if (srcSequence != null) {\r\n      for (const eachDatum of srcSequence) {\r\n        this.#mInnerDataArray.push(eachDatum);\r\n      }\r\n    }\r\n  }\r\n\r\n  static of<DataType>(...srcSequence: DataType[]): Sequence<DataType> {\r\n    return new Sequence(srcSequence);\r\n  }\r\n\r\n  static from<DataType>(\r\n    srcSequence: Iterable<DataType> | null = null,\r\n  ): Sequence<DataType> {\r\n    return new Sequence(srcSequence);\r\n  }\r\n\r\n  async done(): Promise<Sequence<DataType>> {\r\n    let index = 0;\r\n    if (this.#mParentSequence) this.#mParentSequence.#mIsFinished = false;\r\n    while (!this.#mIsFinished) {\r\n      await this.getDatum(index++);\r\n    }\r\n\r\n    this.#mParentSequence = null;\r\n    this.#mTransformer = null;\r\n    this.#mLastPrevIndex = 0;\r\n    return this;\r\n  }\r\n\r\n  private async getDatum(index: number): Promise<void | DataType> {\r\n    if (this.#mParentSequence == null) {\r\n      if (index == this.#mInnerDataArray.length - 1) this.#mIsFinished = true;\r\n      return this.#mInnerDataArray[index];\r\n    } else {\r\n      const fetchedResult = await this.#mParentSequence.getDatum(index);\r\n      if (fetchedResult) {\r\n        const result = await this.#mTransformer!(\r\n          this.#mLastPrevIndex++,\r\n          fetchedResult,\r\n        );\r\n        if (this.#mParentSequence.#mIsFinished) this.#mIsFinished = true;\r\n        if (result) this.#mInnerDataArray.push(result);\r\n        return result;\r\n      }\r\n    }\r\n  }\r\n\r\n  private chainSequence<ParentType>(\r\n    prevSequence: Sequence<ParentType>,\r\n    transformer: (\r\n      index: number,\r\n      srcDatum: ParentType,\r\n    ) => void | DataType | Promise<void | DataType>,\r\n  ): Sequence<DataType> {\r\n    prevSequence.#mIsFinished = false;\r\n    this.#mParentSequence = prevSequence;\r\n    this.#mTransformer = transformer;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport class KoconutSequence<DataType> extends KoconutCollection<\r\n  DataType,\r\n  Sequence<DataType>\r\n> {\r\n  constructor(srcSequence: Iterable<DataType> | null = null) {\r\n    super();\r\n    this.data = new Sequence(srcSequence);\r\n  }\r\n\r\n  static of<DataType>(...srcSequence: DataType[]): KoconutSequence<DataType> {\r\n    return new KoconutSequence(srcSequence);\r\n  }\r\n\r\n  static from<DataType>(\r\n    srcSequence: Iterable<DataType> | null = null,\r\n  ): KoconutSequence<DataType> {\r\n    return new KoconutSequence(srcSequence);\r\n  }\r\n\r\n  // Iterator\r\n  onEach(\r\n    action: (\r\n      element: DataType,\r\n    ) =>\r\n      | boolean\r\n      | KoconutLoopSignal\r\n      | void\r\n      | Promise<boolean | KoconutLoopSignal | void>,\r\n    thisArg: any = null,\r\n  ): KoconutSequence<DataType> {\r\n    action.bind(thisArg);\r\n    const koconutToReturn = new KoconutSequence<DataType>();\r\n    (koconutToReturn as any as KoconutOpener<Sequence<DataType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        let continueProcess = true;\r\n        return new Sequence<DataType>()['chainSequence'](\r\n          this.data!,\r\n          async (_, srcDatum) => {\r\n            if (continueProcess) {\r\n              const signal = await action(srcDatum);\r\n              if (signal == false || signal == KoconutLoopSignal.BREAK)\r\n                continueProcess = false;\r\n            }\r\n            return srcDatum;\r\n          },\r\n        );\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  onEachIndexed(\r\n    action: (\r\n      index: number,\r\n      element: DataType,\r\n    ) =>\r\n      | boolean\r\n      | KoconutLoopSignal\r\n      | void\r\n      | Promise<boolean | KoconutLoopSignal | void>,\r\n    thisArg: any = null,\r\n  ): KoconutSequence<DataType> {\r\n    action.bind(thisArg);\r\n    const koconutToReturn = new KoconutSequence<DataType>();\r\n    (koconutToReturn as any as KoconutOpener<Sequence<DataType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        let continueProcess = true;\r\n        return new Sequence<DataType>()['chainSequence'](\r\n          this.data!,\r\n          async (index, srcDatum) => {\r\n            if (continueProcess) {\r\n              const signal = await action(index, srcDatum);\r\n              if (signal == false || signal == KoconutLoopSignal.BREAK)\r\n                continueProcess = false;\r\n            }\r\n            return srcDatum;\r\n          },\r\n        );\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  filter(\r\n    predicate: (element: DataType) => boolean | Promise<boolean>,\r\n    thisArg: any = null,\r\n  ): KoconutSequence<DataType> {\r\n    predicate = predicate.bind(thisArg);\r\n    const koconutToReturn = new KoconutSequence<DataType>();\r\n    (koconutToReturn as any as KoconutOpener<Sequence<DataType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        return new Sequence<DataType>()['chainSequence'](\r\n          this.data!,\r\n          async (_, srcDatum) => {\r\n            if (await predicate(srcDatum)) return srcDatum;\r\n          },\r\n        );\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  filterIndexed(\r\n    predicate: (index: number, element: DataType) => boolean | Promise<boolean>,\r\n    thisArg: any = null,\r\n  ): KoconutSequence<DataType> {\r\n    predicate = predicate.bind(thisArg);\r\n    const koconutToReturn = new KoconutSequence<DataType>();\r\n    (koconutToReturn as any as KoconutOpener<Sequence<DataType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        return new Sequence<DataType>()['chainSequence'](\r\n          this.data!,\r\n          async (index, srcDatum) => {\r\n            if (await predicate(index, srcDatum)) return srcDatum;\r\n          },\r\n        );\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2bcdd211261bea68f18f94ec5d88deeffa92f11b","contentHash":"85697ffb00140dd52f3b7cb9f805711fc47e2f1fa1a43e46eaae8efe56353c08"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\collection\\set\\KoconutSet.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\collection\\set\\KoconutSet.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":13}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":46}},"4":{"start":{"line":9,"column":32},"end":{"line":9,"column":66}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":60}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":68}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":31}},"8":{"start":{"line":32,"column":8},"end":{"line":32,"column":16}},"9":{"start":{"line":33,"column":8},"end":{"line":33,"column":59}},"10":{"start":{"line":58,"column":8},"end":{"line":58,"column":31}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":20}},"12":{"start":{"line":63,"column":8},"end":{"line":92,"column":9}},"13":{"start":{"line":64,"column":24},"end":{"line":64,"column":25}},"14":{"start":{"line":65,"column":25},"end":{"line":65,"column":36}},"15":{"start":{"line":66,"column":12},"end":{"line":90,"column":13}},"16":{"start":{"line":67,"column":16},"end":{"line":89,"column":17}},"17":{"start":{"line":68,"column":37},"end":{"line":68,"column":42}},"18":{"start":{"line":69,"column":20},"end":{"line":77,"column":21}},"19":{"start":{"line":70,"column":47},"end":{"line":70,"column":89}},"20":{"start":{"line":71,"column":24},"end":{"line":76,"column":25}},"21":{"start":{"line":74,"column":28},"end":{"line":74,"column":46}},"22":{"start":{"line":75,"column":28},"end":{"line":75,"column":34}},"23":{"start":{"line":78,"column":20},"end":{"line":84,"column":53}},"24":{"start":{"line":79,"column":24},"end":{"line":79,"column":37}},"25":{"start":{"line":80,"column":24},"end":{"line":80,"column":52}},"26":{"start":{"line":81,"column":24},"end":{"line":81,"column":45}},"27":{"start":{"line":84,"column":24},"end":{"line":84,"column":53}},"28":{"start":{"line":87,"column":20},"end":{"line":87,"column":33}},"29":{"start":{"line":88,"column":20},"end":{"line":88,"column":48}},"30":{"start":{"line":91,"column":12},"end":{"line":91,"column":44}},"31":{"start":{"line":117,"column":8},"end":{"line":117,"column":47}},"32":{"start":{"line":140,"column":8},"end":{"line":140,"column":45}},"33":{"start":{"line":170,"column":8},"end":{"line":171,"column":119}},"34":{"start":{"line":171,"column":12},"end":{"line":171,"column":119}},"35":{"start":{"line":172,"column":8},"end":{"line":172,"column":44}},"36":{"start":{"line":173,"column":32},"end":{"line":173,"column":48}},"37":{"start":{"line":174,"column":8},"end":{"line":179,"column":11}},"38":{"start":{"line":175,"column":33},"end":{"line":175,"column":42}},"39":{"start":{"line":176,"column":12},"end":{"line":177,"column":61}},"40":{"start":{"line":176,"column":33},"end":{"line":176,"column":34}},"41":{"start":{"line":177,"column":16},"end":{"line":177,"column":61}},"42":{"start":{"line":178,"column":12},"end":{"line":178,"column":32}},"43":{"start":{"line":180,"column":8},"end":{"line":180,"column":31}},"44":{"start":{"line":228,"column":8},"end":{"line":228,"column":72}},"45":{"start":{"line":276,"column":8},"end":{"line":276,"column":79}},"46":{"start":{"line":342,"column":8},"end":{"line":342,"column":147}},"47":{"start":{"line":403,"column":8},"end":{"line":403,"column":93}},"48":{"start":{"line":458,"column":8},"end":{"line":458,"column":101}},"49":{"start":{"line":494,"column":8},"end":{"line":494,"column":91}},"50":{"start":{"line":533,"column":8},"end":{"line":533,"column":98}},"51":{"start":{"line":580,"column":8},"end":{"line":580,"column":143}},"52":{"start":{"line":616,"column":8},"end":{"line":616,"column":87}},"53":{"start":{"line":660,"column":8},"end":{"line":660,"column":94}},"54":{"start":{"line":696,"column":8},"end":{"line":696,"column":94}},"55":{"start":{"line":761,"column":8},"end":{"line":761,"column":101}},"56":{"start":{"line":841,"column":8},"end":{"line":841,"column":59}},"57":{"start":{"line":974,"column":8},"end":{"line":974,"column":78}},"58":{"start":{"line":999,"column":8},"end":{"line":999,"column":56}},"59":{"start":{"line":1023,"column":8},"end":{"line":1023,"column":60}},"60":{"start":{"line":1052,"column":8},"end":{"line":1052,"column":82}},"61":{"start":{"line":1081,"column":8},"end":{"line":1081,"column":78}},"62":{"start":{"line":1108,"column":8},"end":{"line":1108,"column":75}},"63":{"start":{"line":1135,"column":8},"end":{"line":1135,"column":78}},"64":{"start":{"line":1170,"column":8},"end":{"line":1170,"column":90}},"65":{"start":{"line":1205,"column":8},"end":{"line":1205,"column":93}},"66":{"start":{"line":1232,"column":8},"end":{"line":1232,"column":82}},"67":{"start":{"line":1267,"column":8},"end":{"line":1267,"column":97}},"68":{"start":{"line":1290,"column":8},"end":{"line":1290,"column":64}},"69":{"start":{"line":1318,"column":8},"end":{"line":1318,"column":77}},"70":{"start":{"line":1402,"column":8},"end":{"line":1402,"column":76}},"71":{"start":{"line":1486,"column":8},"end":{"line":1486,"column":86}},"72":{"start":{"line":1527,"column":8},"end":{"line":1527,"column":80}},"73":{"start":{"line":1554,"column":8},"end":{"line":1554,"column":56}},"74":{"start":{"line":1581,"column":8},"end":{"line":1581,"column":60}},"75":{"start":{"line":1610,"column":8},"end":{"line":1610,"column":82}},"76":{"start":{"line":1639,"column":8},"end":{"line":1639,"column":78}},"77":{"start":{"line":1642,"column":8},"end":{"line":1645,"column":68}},"78":{"start":{"line":1643,"column":12},"end":{"line":1643,"column":68}},"79":{"start":{"line":1645,"column":12},"end":{"line":1645,"column":68}},"80":{"start":{"line":1648,"column":8},"end":{"line":1648,"column":70}},"81":{"start":{"line":1651,"column":8},"end":{"line":1654,"column":67}},"82":{"start":{"line":1652,"column":12},"end":{"line":1652,"column":67}},"83":{"start":{"line":1654,"column":12},"end":{"line":1654,"column":67}},"84":{"start":{"line":1657,"column":8},"end":{"line":1657,"column":69}},"85":{"start":{"line":1660,"column":8},"end":{"line":1660,"column":59}},"86":{"start":{"line":1663,"column":8},"end":{"line":1663,"column":59}},"87":{"start":{"line":1666,"column":0},"end":{"line":1666,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":38},"end":{"line":13,"column":5}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":28},"end":{"line":34,"column":5}},"line":31},"2":{"name":"(anonymous_2)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":21},"end":{"line":60,"column":5}},"line":57},"3":{"name":"(anonymous_3)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":25},"end":{"line":93,"column":5}},"line":62},"4":{"name":"(anonymous_4)","decl":{"start":{"line":116,"column":4},"end":{"line":116,"column":5}},"loc":{"start":{"line":116,"column":31},"end":{"line":118,"column":5}},"line":116},"5":{"name":"(anonymous_5)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":23},"end":{"line":141,"column":5}},"line":139},"6":{"name":"(anonymous_6)","decl":{"start":{"line":169,"column":4},"end":{"line":169,"column":5}},"loc":{"start":{"line":169,"column":54},"end":{"line":181,"column":5}},"line":169},"7":{"name":"(anonymous_7)","decl":{"start":{"line":174,"column":37},"end":{"line":174,"column":38}},"loc":{"start":{"line":174,"column":49},"end":{"line":179,"column":9}},"line":174},"8":{"name":"(anonymous_8)","decl":{"start":{"line":227,"column":4},"end":{"line":227,"column":5}},"loc":{"start":{"line":227,"column":35},"end":{"line":229,"column":5}},"line":227},"9":{"name":"(anonymous_9)","decl":{"start":{"line":275,"column":4},"end":{"line":275,"column":5}},"loc":{"start":{"line":275,"column":42},"end":{"line":277,"column":5}},"line":275},"10":{"name":"(anonymous_10)","decl":{"start":{"line":341,"column":4},"end":{"line":341,"column":5}},"loc":{"start":{"line":341,"column":124},"end":{"line":343,"column":5}},"line":341},"11":{"name":"(anonymous_11)","decl":{"start":{"line":402,"column":4},"end":{"line":402,"column":5}},"loc":{"start":{"line":402,"column":56},"end":{"line":404,"column":5}},"line":402},"12":{"name":"(anonymous_12)","decl":{"start":{"line":457,"column":4},"end":{"line":457,"column":5}},"loc":{"start":{"line":457,"column":64},"end":{"line":459,"column":5}},"line":457},"13":{"name":"(anonymous_13)","decl":{"start":{"line":493,"column":4},"end":{"line":493,"column":5}},"loc":{"start":{"line":493,"column":54},"end":{"line":495,"column":5}},"line":493},"14":{"name":"(anonymous_14)","decl":{"start":{"line":532,"column":4},"end":{"line":532,"column":5}},"loc":{"start":{"line":532,"column":61},"end":{"line":534,"column":5}},"line":532},"15":{"name":"(anonymous_15)","decl":{"start":{"line":579,"column":4},"end":{"line":579,"column":5}},"loc":{"start":{"line":579,"column":120},"end":{"line":581,"column":5}},"line":579},"16":{"name":"(anonymous_16)","decl":{"start":{"line":615,"column":4},"end":{"line":615,"column":5}},"loc":{"start":{"line":615,"column":50},"end":{"line":617,"column":5}},"line":615},"17":{"name":"(anonymous_17)","decl":{"start":{"line":659,"column":4},"end":{"line":659,"column":5}},"loc":{"start":{"line":659,"column":57},"end":{"line":661,"column":5}},"line":659},"18":{"name":"(anonymous_18)","decl":{"start":{"line":695,"column":4},"end":{"line":695,"column":5}},"loc":{"start":{"line":695,"column":57},"end":{"line":697,"column":5}},"line":695},"19":{"name":"(anonymous_19)","decl":{"start":{"line":760,"column":4},"end":{"line":760,"column":5}},"loc":{"start":{"line":760,"column":64},"end":{"line":762,"column":5}},"line":760},"20":{"name":"(anonymous_20)","decl":{"start":{"line":840,"column":4},"end":{"line":840,"column":5}},"loc":{"start":{"line":840,"column":15},"end":{"line":842,"column":5}},"line":840},"21":{"name":"(anonymous_21)","decl":{"start":{"line":973,"column":4},"end":{"line":973,"column":5}},"loc":{"start":{"line":973,"column":41},"end":{"line":975,"column":5}},"line":973},"22":{"name":"(anonymous_22)","decl":{"start":{"line":998,"column":4},"end":{"line":998,"column":5}},"loc":{"start":{"line":998,"column":12},"end":{"line":1000,"column":5}},"line":998},"23":{"name":"(anonymous_23)","decl":{"start":{"line":1022,"column":4},"end":{"line":1022,"column":5}},"loc":{"start":{"line":1022,"column":16},"end":{"line":1024,"column":5}},"line":1022},"24":{"name":"(anonymous_24)","decl":{"start":{"line":1051,"column":4},"end":{"line":1051,"column":5}},"loc":{"start":{"line":1051,"column":45},"end":{"line":1053,"column":5}},"line":1051},"25":{"name":"(anonymous_25)","decl":{"start":{"line":1080,"column":4},"end":{"line":1080,"column":5}},"loc":{"start":{"line":1080,"column":41},"end":{"line":1082,"column":5}},"line":1080},"26":{"name":"(anonymous_26)","decl":{"start":{"line":1107,"column":4},"end":{"line":1107,"column":5}},"loc":{"start":{"line":1107,"column":38},"end":{"line":1109,"column":5}},"line":1107},"27":{"name":"(anonymous_27)","decl":{"start":{"line":1134,"column":4},"end":{"line":1134,"column":5}},"loc":{"start":{"line":1134,"column":41},"end":{"line":1136,"column":5}},"line":1134},"28":{"name":"(anonymous_28)","decl":{"start":{"line":1169,"column":4},"end":{"line":1169,"column":5}},"loc":{"start":{"line":1169,"column":53},"end":{"line":1171,"column":5}},"line":1169},"29":{"name":"(anonymous_29)","decl":{"start":{"line":1204,"column":4},"end":{"line":1204,"column":5}},"loc":{"start":{"line":1204,"column":56},"end":{"line":1206,"column":5}},"line":1204},"30":{"name":"(anonymous_30)","decl":{"start":{"line":1231,"column":4},"end":{"line":1231,"column":5}},"loc":{"start":{"line":1231,"column":45},"end":{"line":1233,"column":5}},"line":1231},"31":{"name":"(anonymous_31)","decl":{"start":{"line":1266,"column":4},"end":{"line":1266,"column":5}},"loc":{"start":{"line":1266,"column":60},"end":{"line":1268,"column":5}},"line":1266},"32":{"name":"(anonymous_32)","decl":{"start":{"line":1289,"column":4},"end":{"line":1289,"column":5}},"loc":{"start":{"line":1289,"column":20},"end":{"line":1291,"column":5}},"line":1289},"33":{"name":"(anonymous_33)","decl":{"start":{"line":1317,"column":4},"end":{"line":1317,"column":5}},"loc":{"start":{"line":1317,"column":33},"end":{"line":1319,"column":5}},"line":1317},"34":{"name":"(anonymous_34)","decl":{"start":{"line":1401,"column":4},"end":{"line":1401,"column":5}},"loc":{"start":{"line":1401,"column":39},"end":{"line":1403,"column":5}},"line":1401},"35":{"name":"(anonymous_35)","decl":{"start":{"line":1485,"column":4},"end":{"line":1485,"column":5}},"loc":{"start":{"line":1485,"column":49},"end":{"line":1487,"column":5}},"line":1485},"36":{"name":"(anonymous_36)","decl":{"start":{"line":1526,"column":4},"end":{"line":1526,"column":5}},"loc":{"start":{"line":1526,"column":43},"end":{"line":1528,"column":5}},"line":1526},"37":{"name":"(anonymous_37)","decl":{"start":{"line":1553,"column":4},"end":{"line":1553,"column":5}},"loc":{"start":{"line":1553,"column":12},"end":{"line":1555,"column":5}},"line":1553},"38":{"name":"(anonymous_38)","decl":{"start":{"line":1580,"column":4},"end":{"line":1580,"column":5}},"loc":{"start":{"line":1580,"column":16},"end":{"line":1582,"column":5}},"line":1580},"39":{"name":"(anonymous_39)","decl":{"start":{"line":1609,"column":4},"end":{"line":1609,"column":5}},"loc":{"start":{"line":1609,"column":45},"end":{"line":1611,"column":5}},"line":1609},"40":{"name":"(anonymous_40)","decl":{"start":{"line":1638,"column":4},"end":{"line":1638,"column":5}},"loc":{"start":{"line":1638,"column":41},"end":{"line":1640,"column":5}},"line":1638},"41":{"name":"(anonymous_41)","decl":{"start":{"line":1641,"column":4},"end":{"line":1641,"column":5}},"loc":{"start":{"line":1641,"column":20},"end":{"line":1646,"column":5}},"line":1641},"42":{"name":"(anonymous_42)","decl":{"start":{"line":1647,"column":4},"end":{"line":1647,"column":5}},"loc":{"start":{"line":1647,"column":26},"end":{"line":1649,"column":5}},"line":1647},"43":{"name":"(anonymous_43)","decl":{"start":{"line":1650,"column":4},"end":{"line":1650,"column":5}},"loc":{"start":{"line":1650,"column":19},"end":{"line":1655,"column":5}},"line":1650},"44":{"name":"(anonymous_44)","decl":{"start":{"line":1656,"column":4},"end":{"line":1656,"column":5}},"loc":{"start":{"line":1656,"column":25},"end":{"line":1658,"column":5}},"line":1656},"45":{"name":"(anonymous_45)","decl":{"start":{"line":1659,"column":4},"end":{"line":1659,"column":5}},"loc":{"start":{"line":1659,"column":15},"end":{"line":1661,"column":5}},"line":1659},"46":{"name":"(anonymous_46)","decl":{"start":{"line":1662,"column":4},"end":{"line":1662,"column":5}},"loc":{"start":{"line":1662,"column":15},"end":{"line":1664,"column":5}},"line":1662}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":16},"end":{"line":31,"column":26}},"type":"default-arg","locations":[{"start":{"line":31,"column":22},"end":{"line":31,"column":26}}],"line":31},"1":{"loc":{"start":{"line":33,"column":20},"end":{"line":33,"column":58}},"type":"cond-expr","locations":[{"start":{"line":33,"column":34},"end":{"line":33,"column":43}},{"start":{"line":33,"column":46},"end":{"line":33,"column":58}}],"line":33},"2":{"loc":{"start":{"line":63,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":92,"column":9}},{"start":{"line":63,"column":8},"end":{"line":92,"column":9}}],"line":63},"3":{"loc":{"start":{"line":67,"column":16},"end":{"line":89,"column":17}},"type":"if","locations":[{"start":{"line":67,"column":16},"end":{"line":89,"column":17}},{"start":{"line":67,"column":16},"end":{"line":89,"column":17}}],"line":67},"4":{"loc":{"start":{"line":71,"column":24},"end":{"line":76,"column":25}},"type":"if","locations":[{"start":{"line":71,"column":24},"end":{"line":76,"column":25}},{"start":{"line":71,"column":24},"end":{"line":76,"column":25}}],"line":71},"5":{"loc":{"start":{"line":71,"column":28},"end":{"line":73,"column":102}},"type":"binary-expr","locations":[{"start":{"line":71,"column":29},"end":{"line":71,"column":80}},{"start":{"line":72,"column":29},"end":{"line":72,"column":57}},{"start":{"line":73,"column":29},"end":{"line":73,"column":83}},{"start":{"line":73,"column":87},"end":{"line":73,"column":101}}],"line":71},"6":{"loc":{"start":{"line":78,"column":20},"end":{"line":84,"column":53}},"type":"if","locations":[{"start":{"line":78,"column":20},"end":{"line":84,"column":53}},{"start":{"line":78,"column":20},"end":{"line":84,"column":53}}],"line":78},"7":{"loc":{"start":{"line":116,"column":16},"end":{"line":116,"column":29}},"type":"default-arg","locations":[{"start":{"line":116,"column":25},"end":{"line":116,"column":29}}],"line":116},"8":{"loc":{"start":{"line":169,"column":38},"end":{"line":169,"column":52}},"type":"default-arg","locations":[{"start":{"line":169,"column":48},"end":{"line":169,"column":52}}],"line":169},"9":{"loc":{"start":{"line":170,"column":8},"end":{"line":171,"column":119}},"type":"if","locations":[{"start":{"line":170,"column":8},"end":{"line":171,"column":119}},{"start":{"line":170,"column":8},"end":{"line":171,"column":119}}],"line":170},"10":{"loc":{"start":{"line":227,"column":19},"end":{"line":227,"column":33}},"type":"default-arg","locations":[{"start":{"line":227,"column":29},"end":{"line":227,"column":33}}],"line":227},"11":{"loc":{"start":{"line":275,"column":26},"end":{"line":275,"column":40}},"type":"default-arg","locations":[{"start":{"line":275,"column":36},"end":{"line":275,"column":40}}],"line":275},"12":{"loc":{"start":{"line":341,"column":44},"end":{"line":341,"column":65}},"type":"default-arg","locations":[{"start":{"line":341,"column":61},"end":{"line":341,"column":65}}],"line":341},"13":{"loc":{"start":{"line":341,"column":67},"end":{"line":341,"column":92}},"type":"default-arg","locations":[{"start":{"line":341,"column":88},"end":{"line":341,"column":92}}],"line":341},"14":{"loc":{"start":{"line":341,"column":94},"end":{"line":341,"column":122}},"type":"default-arg","locations":[{"start":{"line":341,"column":118},"end":{"line":341,"column":122}}],"line":341},"15":{"loc":{"start":{"line":402,"column":40},"end":{"line":402,"column":54}},"type":"default-arg","locations":[{"start":{"line":402,"column":50},"end":{"line":402,"column":54}}],"line":402},"16":{"loc":{"start":{"line":457,"column":48},"end":{"line":457,"column":62}},"type":"default-arg","locations":[{"start":{"line":457,"column":58},"end":{"line":457,"column":62}}],"line":457},"17":{"loc":{"start":{"line":493,"column":38},"end":{"line":493,"column":52}},"type":"default-arg","locations":[{"start":{"line":493,"column":48},"end":{"line":493,"column":52}}],"line":493},"18":{"loc":{"start":{"line":532,"column":45},"end":{"line":532,"column":59}},"type":"default-arg","locations":[{"start":{"line":532,"column":55},"end":{"line":532,"column":59}}],"line":532},"19":{"loc":{"start":{"line":579,"column":40},"end":{"line":579,"column":61}},"type":"default-arg","locations":[{"start":{"line":579,"column":57},"end":{"line":579,"column":61}}],"line":579},"20":{"loc":{"start":{"line":579,"column":63},"end":{"line":579,"column":88}},"type":"default-arg","locations":[{"start":{"line":579,"column":84},"end":{"line":579,"column":88}}],"line":579},"21":{"loc":{"start":{"line":579,"column":90},"end":{"line":579,"column":118}},"type":"default-arg","locations":[{"start":{"line":579,"column":114},"end":{"line":579,"column":118}}],"line":579},"22":{"loc":{"start":{"line":615,"column":34},"end":{"line":615,"column":48}},"type":"default-arg","locations":[{"start":{"line":615,"column":44},"end":{"line":615,"column":48}}],"line":615},"23":{"loc":{"start":{"line":659,"column":41},"end":{"line":659,"column":55}},"type":"default-arg","locations":[{"start":{"line":659,"column":51},"end":{"line":659,"column":55}}],"line":659},"24":{"loc":{"start":{"line":695,"column":41},"end":{"line":695,"column":55}},"type":"default-arg","locations":[{"start":{"line":695,"column":51},"end":{"line":695,"column":55}}],"line":695},"25":{"loc":{"start":{"line":760,"column":48},"end":{"line":760,"column":62}},"type":"default-arg","locations":[{"start":{"line":760,"column":58},"end":{"line":760,"column":62}}],"line":760},"26":{"loc":{"start":{"line":973,"column":25},"end":{"line":973,"column":39}},"type":"default-arg","locations":[{"start":{"line":973,"column":35},"end":{"line":973,"column":39}}],"line":973},"27":{"loc":{"start":{"line":1051,"column":29},"end":{"line":1051,"column":43}},"type":"default-arg","locations":[{"start":{"line":1051,"column":39},"end":{"line":1051,"column":43}}],"line":1051},"28":{"loc":{"start":{"line":1080,"column":25},"end":{"line":1080,"column":39}},"type":"default-arg","locations":[{"start":{"line":1080,"column":35},"end":{"line":1080,"column":39}}],"line":1080},"29":{"loc":{"start":{"line":1107,"column":22},"end":{"line":1107,"column":36}},"type":"default-arg","locations":[{"start":{"line":1107,"column":32},"end":{"line":1107,"column":36}}],"line":1107},"30":{"loc":{"start":{"line":1134,"column":25},"end":{"line":1134,"column":39}},"type":"default-arg","locations":[{"start":{"line":1134,"column":35},"end":{"line":1134,"column":39}}],"line":1134},"31":{"loc":{"start":{"line":1169,"column":37},"end":{"line":1169,"column":51}},"type":"default-arg","locations":[{"start":{"line":1169,"column":47},"end":{"line":1169,"column":51}}],"line":1169},"32":{"loc":{"start":{"line":1204,"column":40},"end":{"line":1204,"column":54}},"type":"default-arg","locations":[{"start":{"line":1204,"column":50},"end":{"line":1204,"column":54}}],"line":1204},"33":{"loc":{"start":{"line":1231,"column":29},"end":{"line":1231,"column":43}},"type":"default-arg","locations":[{"start":{"line":1231,"column":39},"end":{"line":1231,"column":43}}],"line":1231},"34":{"loc":{"start":{"line":1266,"column":44},"end":{"line":1266,"column":58}},"type":"default-arg","locations":[{"start":{"line":1266,"column":54},"end":{"line":1266,"column":58}}],"line":1266},"35":{"loc":{"start":{"line":1401,"column":23},"end":{"line":1401,"column":37}},"type":"default-arg","locations":[{"start":{"line":1401,"column":33},"end":{"line":1401,"column":37}}],"line":1401},"36":{"loc":{"start":{"line":1485,"column":33},"end":{"line":1485,"column":47}},"type":"default-arg","locations":[{"start":{"line":1485,"column":43},"end":{"line":1485,"column":47}}],"line":1485},"37":{"loc":{"start":{"line":1526,"column":27},"end":{"line":1526,"column":41}},"type":"default-arg","locations":[{"start":{"line":1526,"column":37},"end":{"line":1526,"column":41}}],"line":1526},"38":{"loc":{"start":{"line":1609,"column":29},"end":{"line":1609,"column":43}},"type":"default-arg","locations":[{"start":{"line":1609,"column":39},"end":{"line":1609,"column":43}}],"line":1609},"39":{"loc":{"start":{"line":1638,"column":25},"end":{"line":1638,"column":39}},"type":"default-arg","locations":[{"start":{"line":1638,"column":35},"end":{"line":1638,"column":39}}],"line":1638},"40":{"loc":{"start":{"line":1642,"column":8},"end":{"line":1645,"column":68}},"type":"if","locations":[{"start":{"line":1642,"column":8},"end":{"line":1645,"column":68}},{"start":{"line":1642,"column":8},"end":{"line":1645,"column":68}}],"line":1642},"41":{"loc":{"start":{"line":1651,"column":8},"end":{"line":1654,"column":67}},"type":"if","locations":[{"start":{"line":1651,"column":8},"end":{"line":1654,"column":67}},{"start":{"line":1651,"column":8},"end":{"line":1654,"column":67}}],"line":1651}},"s":{"0":1,"1":1,"2":1,"3":1,"4":91,"5":91,"6":91,"7":91,"8":276,"9":276,"10":0,"11":0,"12":273,"13":273,"14":273,"15":273,"16":1075,"17":192,"18":192,"19":217,"20":217,"21":18,"22":18,"23":192,"24":174,"25":174,"26":174,"27":18,"28":883,"29":883,"30":273,"31":153,"32":5,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":1,"45":1,"46":2,"47":3,"48":1,"49":1,"50":1,"51":2,"52":1,"53":1,"54":1,"55":1,"56":6,"57":2,"58":1,"59":1,"60":1,"61":1,"62":27,"63":2,"64":1,"65":1,"66":2,"67":1,"68":2,"69":1,"70":3,"71":3,"72":2,"73":1,"74":1,"75":1,"76":1,"77":6,"78":2,"79":4,"80":2,"81":3,"82":1,"83":2,"84":1,"85":1,"86":1,"87":1},"f":{"0":91,"1":276,"2":0,"3":273,"4":153,"5":5,"6":0,"7":0,"8":1,"9":1,"10":2,"11":3,"12":1,"13":1,"14":1,"15":2,"16":1,"17":1,"18":1,"19":1,"20":6,"21":2,"22":1,"23":1,"24":1,"25":1,"26":27,"27":2,"28":1,"29":1,"30":2,"31":1,"32":2,"33":1,"34":3,"35":3,"36":2,"37":1,"38":1,"39":1,"40":1,"41":6,"42":2,"43":3,"44":1,"45":1,"46":1},"b":{"0":[27],"1":[115,161],"2":[273,0],"3":[192,883],"4":[18,199],"5":[217,0,217,217],"6":[174,18],"7":[0],"8":[0],"9":[0,0],"10":[1],"11":[1],"12":[1],"13":[2],"14":[2],"15":[3],"16":[1],"17":[1],"18":[1],"19":[1],"20":[2],"21":[2],"22":[1],"23":[1],"24":[1],"25":[1],"26":[2],"27":[1],"28":[1],"29":[26],"30":[1],"31":[1],"32":[1],"33":[1],"34":[1],"35":[3],"36":[3],"37":[2],"38":[1],"39":[1],"40":[2,4],"41":[1,2]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/collection/set/KoconutSet.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/collection/set/KoconutSet.ts"],"names":[],"mappings":";;;AAAA,YAAY,CAAC;AAEb,+CA8B4B;AAE5B,MAAa,UAAqB,SAAQ,0BAGzC;IACC,UAAU;IACF,MAAM,CAAC,cAAc,CAC3B,UAAsD;QAEtD,MAAM,eAAe,GAAG,IAAI,UAAU,CAAW,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QACrE,eAAe,CAAC,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;QACpD,eAAe,CAAC,aAAa,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC;QAC5D,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,oBAAoB;IACpB;;;;;;;;;;;;;;;OAeG;IACH,YAAY,MAAiC,IAAI;QAC/C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,KAAK,CAAC,QAAQ;QACZ,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,mBAAmB;IACnB,KAAK,CAAC,QAAQ,CAAC,IAA0B;QACvC,IAAI,IAAI,IAAI,IAAI,EAAE;YAChB,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,MAAM,IAAI,GAAG,IAAI,KAAK,EAAY,CAAC;YACnC,KAAK,MAAM,SAAS,IAAI,IAAI,EAAE;gBAC5B,IAAI,2BAAkB,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE;oBAClD,IAAI,UAAU,GAAG,KAAK,CAAC;oBACvB,KAAK,MAAM,sBAAsB,IAAI,IAAI,EAAE;wBACzC,MAAM,cAAc,GAAG,SAAS,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;wBAClE,IACE,CAAC,cAAc,YAAY,yBAAgB;4BACzC,CAAC,MAAM,cAAc,CAAC,KAAK,EAAE,CAAC,CAAC;4BACjC,CAAC,CAAC,CAAC,cAAc,YAAY,yBAAgB,CAAC,IAAI,cAAc,CAAC,EACjE;4BACA,UAAU,GAAG,IAAI,CAAC;4BAClB,MAAM;yBACP;qBACF;oBACD,IAAI,CAAC,UAAU,EAAE;wBACf,IAAI,CAAC,KAAK,EAAE,CAAC;wBACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;wBAC5B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBACtB;;wBAAM,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,SAAS,CAAC,CAAC;iBACrC;qBAAM;oBACL,IAAI,CAAC,KAAK,EAAE,CAAC;oBACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAC7B;aACF;YACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;IACH,CAAC;IAED,UAAU;IACV;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,MAAM,CAAC,IAAI,CACT,SAAoC,IAAI;QAExC,OAAO,IAAI,UAAU,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;IACzC,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,MAAM,CAAC,EAAE,CAAW,GAAG,IAAgB;QACrC,OAAO,IAAI,UAAU,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACH,MAAM,CAAC,QAAQ,CACb,KAAa,EACb,SAA8B,EAC9B,UAAe,IAAI;QAEnB,IAAI,KAAK,GAAG,CAAC;YACX,MAAM,IAAI,wCAA+B,CACvC,8CAA8C,KAAK,GAAG,CACvD,CAAC;QACJ,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,eAAe,GAAG,IAAI,UAAU,EAAY,CAAC;QAClD,eAAuD,CAAC,YAAY,CACnE,KAAK,IAAI,EAAE;YACT,MAAM,YAAY,GAAG,IAAI,GAAG,EAAY,CAAC;YACzC,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,KAAK,EAAE,SAAS,EAAE;gBACpD,YAAY,CAAC,GAAG,CAAC,MAAM,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YAC/C,OAAO,YAAY,CAAC;QACtB,CAAC,CACF,CAAC;QACF,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,WAAW;IACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2CG;IACH,MAAM,CAAC,MAAwB,EAAE,UAAe,IAAI;QAClD,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IAClE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA4CG;IACH,aAAa,CACX,MAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,cAAc;IACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6DG;IACH,aAAa,CACX,WAAoC,EACpC,WAAwC,EACxC,iBAA0D,IAAI,EAC9D,qBAA0B,IAAI,EAC9B,wBAA6B,IAAI;QAEjC,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,aAAa,CACjB,WAAW,EACX,WAAW,EACX,cAAc,EACd,kBAAkB,EAClB,qBAAqB,CACtB,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyDG;IACH,WAAW,CACT,WAAoC,EACpC,SAOC,EACD,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CACnD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAmDG;IACH,eAAe,CACb,WAAqC,EACrC,aAA4C,EAC5C,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,eAAe,CAAC,WAAW,EAAE,aAAa,EAAE,OAAO,CAAC,CAC3D,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgCG;IACH,SAAS,CACP,WAAwD,EACxD,SAA0D,EAC1D,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CACjD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAmCG;IACH,gBAAgB,CACd,WAAwD,EACxD,SAAiE,EACjE,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,gBAAgB,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CACxD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2CG;IACH,SAAS,CACP,WAA2C,EAC3C,WAAwC,EACxC,iBAA0D,IAAI,EAC9D,qBAA0B,IAAI,EAC9B,wBAA6B,IAAI;QAEjC,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,SAAS,CACb,WAAW,EACX,WAAW,EACX,cAAc,EACd,kBAAkB,EAClB,qBAAqB,CACtB,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgCG;IACH,KAAK,CACH,WAAwD,EACxD,SAAgD,EAChD,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAC7C,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAwCG;IACH,YAAY,CACV,WAAwD,EACxD,SAAgD,EAChD,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CACpD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgCG;IACH,YAAY,CACV,WAAwD,EACxD,SAAuD,EACvD,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CACpD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA6DG;IACH,mBAAmB,CACjB,WAAwD,EACxD,SAGC,EACD,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,mBAAmB,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAC3D,CAAC;IACJ,CAAC;IAED,cAAc;IACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2EG;IACH,QAAQ;QACN,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAiIG;IACH,UAAU,CACR,QAAwD,EACxD,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IACxE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,IAAI,CAAC,CAAS;QACZ,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,QAAQ,CAAC,CAAS;QAChB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IACH,aAAa,CACX,SAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IACH,SAAS,CACP,SAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IACxE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,MAAM,CACJ,SAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IACrE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,SAAS,CACP,SAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IACxE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+BG;IACH,QAAQ,CACN,WAA4C,EAC5C,SAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CAChD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+BG;IACH,WAAW,CACT,WAA4C,EAC5C,SAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CACnD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,aAAa,CACX,SAAsC,EACtC,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OA+BG;IACH,eAAe,CACb,WAA4C,EAC5C,SAAsC,EACtC,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,eAAe,CAAC,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC,CACvD,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,aAAa;QACX,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;OAwBG;IACH,eAAe,CACb,WAA4C;QAE5C,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,CAAC;IACvE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgFG;IACH,QAAQ,CACN,QAAiE,EACjE,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IACtE,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAgFG;IACH,kBAAkB,CAChB,QAAiE,EACjE,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAC5C,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqCG;IACH,UAAU,CACR,UAAgC,EAChC,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,IAAI,CAAC,CAAS;QACZ,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,QAAQ,CAAC,CAAS;QAChB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IACH,aAAa,CACX,SAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IAC5E,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IACH,SAAS,CACP,SAA+B,EAC/B,UAAe,IAAI;QAEnB,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IACxE,CAAC;IAID,KAAK,CAAC,QAAuC;QAC3C,IAAI,OAAQ,QAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,UAAU;YAC1D,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,KAAK,CAAC,QAA8B,CAAC,CAC5C,CAAC;;YACC,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,QAAoB,CAAC,CAAC,CAAC;IAC3E,CAAC;IAED,YAAY,CAAC,OAAiB;QAC5B,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;IAChE,CAAC;IAID,IAAI,CAAC,QAAuC;QAC1C,IAAI,OAAQ,QAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,UAAU;YAC1D,OAAO,UAAU,CAAC,cAAc,CAC9B,KAAK,CAAC,IAAI,CAAC,QAA8B,CAAC,CAC3C,CAAC;;YACC,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,QAAoB,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED,WAAW,CAAC,OAAiB;QAC3B,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,QAAQ;QACN,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrD,CAAC;IAED,QAAQ;QACN,OAAO,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;IACrD,CAAC;CACF;AA50DD,gCA40DC","sourcesContent":["`use strict`;\r\n\r\nimport {\r\n  /* Base */\r\n  Pair,\r\n  KoconutPair,\r\n  KoconutTypeChecker,\r\n  Entry,\r\n  KoconutEntry,\r\n  KoconutPrimitive,\r\n  KoconutOpener,\r\n\r\n  /* Container */\r\n  KoconutCollection,\r\n\r\n  /* Exception */\r\n  KoconutInvalidArgumentException,\r\n\r\n  /* Protocol */\r\n  KoconutEquatable,\r\n  KoconutComparable,\r\n\r\n  /* Callbacks */\r\n  Generator,\r\n  Action,\r\n  IndexedAction,\r\n  Transformer,\r\n  IndexedTransformer,\r\n  Selector,\r\n  Predicator,\r\n  IndexedPredicator,\r\n  Comparator,\r\n} from '../../../../module';\r\n\r\nexport class KoconutSet<DataType> extends KoconutCollection<\r\n  DataType,\r\n  Set<DataType>\r\n> {\r\n  // Private\r\n  private static fromCollection<DataType>(\r\n    collection: KoconutCollection<DataType, Set<DataType>>,\r\n  ): KoconutSet<DataType> {\r\n    const koconutToReturn = new KoconutSet<DataType>(collection['data']);\r\n    koconutToReturn.processor = collection['processor'];\r\n    koconutToReturn.prevYieldable = collection['prevYieldable'];\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Koconut Primitive\r\n  /**\r\n   * Creates a new instance from ```iterable``` object.\r\n   * @param {Iterable<DataType> | null} set An array-like ```iterable``` object to convert to a {@link KoconutSet}.\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const numbers = Array.of(1,2,3,4,5)\r\n   * const koconutNumbers = new KoconutSet(numbers)\r\n   * // ↑ This is a Koconut number set consists of 1 to 5.\r\n   *\r\n   * const emptyNumberSet = new KoconutSet<number>()\r\n   * // ↑ This is an empty Koconut number set.\r\n   * ```\r\n   */\r\n  constructor(set: Iterable<DataType> | null = null) {\r\n    super();\r\n    this.data = set == null ? new Set() : new Set(set);\r\n  }\r\n\r\n  /**\r\n   * Processes all the chained object and returns original {@link KoconutSet} instance.\r\n   *\r\n   * @category Processor\r\n   *\r\n   * @since 1.0.15\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = await KoconutSet\r\n   *                     .of(1,2,3,4,5)\r\n   *                     .retrieve()\r\n   * console.log(koconutSet)\r\n   * // ↑ KoconutSet {\r\n   * //   isValidated: true,\r\n   * //   data: Set { 1, 2, 3, 4, 5 },\r\n   * //   combinedDataWrapper: Set { 1, 2, 3, 4, 5 },\r\n   * //   mSize: 5,\r\n   * //   mIndices: [ 0, 1, 2, 3, 4 ]\r\n   * // }\r\n   * ```\r\n   */\r\n  async retrieve(): Promise<KoconutSet<DataType>> {\r\n    await super.retrieve();\r\n    return this;\r\n  }\r\n\r\n  // Koconut Iterable\r\n  async validate(data: Set<DataType> | null) {\r\n    if (data != null) {\r\n      let index = 0;\r\n      const keys = new Array<DataType>();\r\n      for (const eachDatum of data) {\r\n        if (KoconutTypeChecker.checkIsEquatable(eachDatum)) {\r\n          let isConflict = false;\r\n          for (const eachPrevEquatableDatum of keys) {\r\n            const equalityResult = eachDatum.equalsTo(eachPrevEquatableDatum);\r\n            if (\r\n              (equalityResult instanceof KoconutPrimitive &&\r\n                (await equalityResult.yield())) ||\r\n              (!(equalityResult instanceof KoconutPrimitive) && equalityResult)\r\n            ) {\r\n              isConflict = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!isConflict) {\r\n            this.mSize++;\r\n            this.mIndices.push(index++);\r\n            keys.push(eachDatum);\r\n          } else this.data?.delete(eachDatum);\r\n        } else {\r\n          this.mSize++;\r\n          this.mIndices.push(index++);\r\n        }\r\n      }\r\n      this.combinedDataWrapper = data;\r\n    }\r\n  }\r\n\r\n  // Creator\r\n  /**\r\n   * Creates a new instance from ```iterable``` object.\r\n   *\r\n   * @param {Iterable<DataType> | null} source An array-like ```iterable``` object to convert to a {@link KoconutSet}.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @since 1.0.11\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const numbers = Array.of(1,2,3,4,5)\r\n   * const koconutNumbers = KoconutSet.from(numbers)\r\n   * // ↑ This is a Koconut number set consists of 1 to 5.\r\n   *\r\n   * const emptyNumberSet = KoconutSet.from<number>()\r\n   * // ↑ This is an empty Koconut number set.\r\n   * ```\r\n   */\r\n  static from<DataType>(\r\n    source: Iterable<DataType> | null = null,\r\n  ): KoconutSet<DataType> {\r\n    return new KoconutSet(new Set(source));\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance from variable number of arguments.\r\n   *\r\n   * @param {DataType[]} data A set of elements to include in the new {@link KoconutSet} object.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @since 1.0.11\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutNumbers = KoconutSet.of(1,2,3,4,5)\r\n   * // ↑ This is a Koconut number set consists of 1 to 5.\r\n   *\r\n   * const emptyNumberSet = KoconutSet.of<number>()\r\n   * // ↑ This is an empty Koconut number set.\r\n   * ```\r\n   */\r\n  static of<DataType>(...data: DataType[]): KoconutSet<DataType> {\r\n    return new KoconutSet(new Set(data));\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance with given ```count``` as number of values. ```count``` cannot be negative number.\r\n   * Each value is provided from ```generator``` with given ordered index.\r\n   *\r\n   * @param {number} count Number of values.\r\n   *\r\n   * @param {Generator<DataType>} generator A callback function that accepts an argument. The method calls the ```action``` one time for each ordered index.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```generator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @throws {@link KoconutInvalidArgumentException}\r\n   * -- When ```count``` is less than 0.\r\n   *\r\n   * @since 1.0.14\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const evenNumberSet = await KoconutSet.generate(5, i => i*2)\r\n   *                                                     .yield()\r\n   * console.log(evenNumberSet)\r\n   * // ↑ Set { 0, 2, 4, 6, 8 }\r\n   * ```\r\n   */\r\n  static generate<DataType>(\r\n    count: number,\r\n    generator: Generator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    if (count < 0)\r\n      throw new KoconutInvalidArgumentException(\r\n        `Count must be larger than 0. Given value : ${count}.`,\r\n      );\r\n    generator = generator.bind(thisArg);\r\n    const koconutToReturn = new KoconutSet<DataType>();\r\n    (koconutToReturn as any as KoconutOpener<Set<DataType>>).setProcessor(\r\n      async () => {\r\n        const processedSet = new Set<DataType>();\r\n        for (let eachIndex = 0; eachIndex < count; eachIndex++)\r\n          processedSet.add(await generator(eachIndex));\r\n        return processedSet;\r\n      },\r\n    );\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Iterator\r\n  /**\r\n   * Perfroms the given ```action``` on each element and returns the original collection itself afterwards.\r\n   * When you want to stop iteration in the meantime ```return``` ```false``` or {@link KoconutLoopSignal.BREAK}.\r\n   *\r\n   * @param {Action<DataType>} action A callback function that accepts an argument. The method calls the ```action``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```action```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Iterator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const set = await koconutSet\r\n   *                   .onEach(console.log)\r\n   *                   // ↑ 1\r\n   *                   //   2\r\n   *                   //   3\r\n   *                   //   4\r\n   *                   //   5\r\n   *                   .onEach(async eachNumber => {\r\n   *                       if(eachNumber >= 3) return KoconutLoopSignal.BREAK\r\n   *                       console.log(eachNumber)\r\n   *                   })\r\n   *                   // ↑ 1\r\n   *                   //   2\r\n   *                   .onEach(eachNumber => new Promise(resolve => {\r\n   *                       if(eachNumber == 2) resolve(false)\r\n   *                       else {\r\n   *                           console.log(eachNumber)\r\n   *                           resolve()\r\n   *                       }\r\n   *                   }))\r\n   *                   // ↑ 1\r\n   *                   .yield()\r\n   * console.log(set)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  onEach(action: Action<DataType>, thisArg: any = null): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.onEach(action, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Performs the given ```action``` on each element, providing sequential index with the element, and returns the collection itself afterwards.\r\n   * When you want to stop iteration in the meantime ```return``` ```false``` or {@link KoconutLoopSignal.BREAK}.\r\n   *\r\n   * @param {IndexedAction<DataType>} action A callback function that accepts two arguments. The method calls the ```action``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```action```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Iterator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const set = await koconutSet\r\n   *                 .onEachIndexed(console.log)\r\n   *                 // ↑ 0 1\r\n   *                 //   1 2\r\n   *                 //   2 3\r\n   *                 //   3 4\r\n   *                 //   4 5\r\n   *                 .onEachIndexed(async (eachIndex, eachNumber) => {\r\n   *                     if(eachIndex >= 2) return KoconutLoopSignal.BREAK\r\n   *                     console.log(eachNumber)\r\n   *                 })\r\n   *                 // ↑ 1\r\n   *                 //   2\r\n   *                 .onEachIndexed((eachIndex, eachNumber) => new Promise(resolve => {\r\n   *                     if(eachIndex == 2) resolve(false)\r\n   *                     else {\r\n   *                         console.log(eachNumber)\r\n   *                         resolve()\r\n   *                     }\r\n   *                 }))\r\n   *                 // ↑ 1\r\n   *                 //   2\r\n   *                 .yield()\r\n   * console.log(set)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  onEachIndexed(\r\n    action: IndexedAction<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.onEachIndexed(action, thisArg));\r\n  }\r\n\r\n  // Transformer\r\n  /**\r\n   * Populates the given ```destination``` map with entries, where ```key``` is provided by\r\n   * ```keySelector``` function applied to each element.\r\n   * ```valueTransform``` callback function is optional. If it's omitted, each value of entry\r\n   * is same as the original data. Otherwise, the value is provided by the ```valueTransform``` function\r\n   * applied to elements of the given collcetion.\r\n   *\r\n   * @param {Map<KeyType, ValueType>} destination Iterable destinaion. ```Map``` to be exact.\r\n   *\r\n   * @param {Selector<DataType, KeyType>} keySelector A callback function that accepts an argument. The method calls the ```keySelector``` one time for each element in object.\r\n   *\r\n   * @param {Transformer<DataType, ValueType> | null} valueTransform A callback function that accepts an argument. The method calls the ```valueTransform``` one time for each element in object it it's not omitted.\r\n   *\r\n   * @param {any} keySelectorThisArg An object to which the ```this``` keyword can refer in the ```keySelector```. If ```keySelectorThisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @param {any} valueTransformThisArg An object to which the ```this``` keyword can refer in the ```valueTransform```. If ```valueTransformThisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @note This method has different functionality with Kotlin. It'll return the original collection instance.\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const doubledKeyMap = new Map<number, number>()\r\n   * const stringKeyDoubledValueMap = new Map<string ,number>()\r\n   * const doubledKeySquaredValueMap = new Map<number, number>()\r\n   * const originalData = await koconutSet\r\n   *           .associateByTo(\r\n   *               doubledKeyMap,\r\n   *               eachNumber => eachNumber * 2\r\n   *           )\r\n   *           .associateByTo(\r\n   *               stringKeyDoubledValueMap,\r\n   *               async eachNumber => eachNumber.toString(),\r\n   *               async eachNumber => eachNumber * 2\r\n   *           )\r\n   *           .associateByTo(\r\n   *               doubledKeySquaredValueMap,\r\n   *               eachNumber => new Promise(resolve => {\r\n   *                   resolve(eachNumber * 2)\r\n   *               }),\r\n   *               eachNumber => new Promise(resolve => {\r\n   *                   resolve(eachNumber * eachNumber)\r\n   *               })\r\n   *           )\r\n   *           .yield()\r\n   * console.log(doubledKeyMap)\r\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\r\n   * console.log(stringKeyDoubledValueMap)\r\n   * // ↑ Map { '1' => 2, '2' => 4, '3' => 6, '4' => 8, '5' => 10 }\r\n   * console.log(doubledKeySquaredValueMap)\r\n   * // ↑ Map { 2 => 1, 4 => 4, 6 => 9, 8 => 16, 10 => 25 }\r\n   * console.log(originalData)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  associateByTo<KeyType, ValueType = DataType>(\r\n    destination: Map<KeyType, ValueType>,\r\n    keySelector: Selector<DataType, KeyType>,\r\n    valueTransform: Transformer<DataType, ValueType> | null = null,\r\n    keySelectorThisArg: any = null,\r\n    valueTransformThisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.associateByTo(\r\n        destination,\r\n        keySelector,\r\n        valueTransform,\r\n        keySelectorThisArg,\r\n        valueTransformThisArg,\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Populates the given ```destination``` map with entries, provided by ```transform``` function\r\n   * applied to elements of the given collection\r\n   *\r\n   * @param {Map<KeyType, ValueType>} destination Iterable destinaion. ```Map``` to be exact.\r\n   *\r\n   * @param {Transformer<DataType,[KeyType, ValueType]| Pair<KeyType, ValueType>| KoconutPair<KeyType, ValueType>| Entry<KeyType, ValueType>| KoconutEntry<KeyType, ValueType>>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @note This method has different functionality with Kotlin. It'll return the original collection instance.\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const doubledValueMap = new Map<number, number>()\r\n   * const doubledKeyMap = new Map<number, number>()\r\n   * const squaredValueMap = new Map<number, number>()\r\n   * const originalData = await koconutSet\r\n   *               .associateTo(\r\n   *                   doubledValueMap,\r\n   *                   eachNumber => [eachNumber, eachNumber * 2]\r\n   *                   // ↑ Also can be\r\n   *                   //   new Pair(eachNumber, eachNumber * 2)\r\n   *                   //   Pair.from([eachNumber, eachNumber * 2])\r\n   *                   //   new KoconutPair(eachNumber, eachNumber * 2)\r\n   *                   //   new Entry(eachNumber, eachNumber * 2)\r\n   *                   //   Entry.from([eachNumber, eachNumber * 2])\r\n   *                   //   new KoconutEntry(eachNumber, eachNumber * 2)\r\n   *               )\r\n   *               .associateTo(\r\n   *                   doubledKeyMap,\r\n   *                   async eachNumber => [eachNumber * 2, eachNumber]\r\n   *               )\r\n   *               .associateTo(\r\n   *                   squaredValueMap,\r\n   *                   eachNumber => new Promise(resolve => {\r\n   *                       resolve([eachNumber, eachNumber * eachNumber])\r\n   *                   })\r\n   *               )\r\n   *               .yield()\r\n   * console.log(doubledValueMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * console.log(doubledKeyMap)\r\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\r\n   * console.log(squaredValueMap)\r\n   * // ↑ Map { 1 => 1, 2 => 4, 3 => 9, 4 => 16, 5 => 25 }\r\n   * console.log(originalData)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  associateTo<KeyType, ValueType>(\r\n    destination: Map<KeyType, ValueType>,\r\n    transform: Transformer<\r\n      DataType,\r\n      | [KeyType, ValueType]\r\n      | Pair<KeyType, ValueType>\r\n      | KoconutPair<KeyType, ValueType>\r\n      | Entry<KeyType, ValueType>\r\n      | KoconutEntry<KeyType, ValueType>\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.associateTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Populates the given ```destination``` map with entries for each element of the\r\n   * given collection, where key is the element itslef and value is provided by ```valueSelector``` function\r\n   * applied to that key.\r\n   *\r\n   * @param {Map<DataType, ValueType>} destination Iterable destinaion. ```Map``` to be exact.\r\n   *\r\n   * @param {Selector<DataType, ValueType>} valueSelector A callback function that accepts an argument. The method calls the ```valueSelector``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```valueSelector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @note This method has different functionality with Kotlin. It'll return the original collection instance.\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const doubledValueMap = new Map<number, number>()\r\n   * const stringifiedValueMap = new Map<number, string>()\r\n   * const squaredValueMap = new Map<number, number>()\r\n   * const originalData = await koconutSet\r\n   *                   .associateWithTo(\r\n   *                       doubledValueMap,\r\n   *                       eachNumber => eachNumber * 2\r\n   *                   )\r\n   *                   .associateWithTo(\r\n   *                       stringifiedValueMap,\r\n   *                       async eachNumber => eachNumber.toString()\r\n   *                   )\r\n   *                   .associateWithTo(\r\n   *                       squaredValueMap,\r\n   *                       eachNumber => new Promise(resolve => {\r\n   *                           resolve(eachNumber * eachNumber)\r\n   *                       })\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(doubledValueMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * console.log(stringifiedValueMap)\r\n   * // ↑ Map { 1 => '1', 2 => '2', 3 => '3', 4 => '4', 5 => '5' }\r\n   * console.log(squaredValueMap)\r\n   * // ↑ Map { 1 => 1, 2 => 4, 3 => 9, 4 => 16, 5 => 25 }\r\n   * console.log(originalData)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  associateWithTo<ValueType>(\r\n    destination: Map<DataType, ValueType>,\r\n    valueSelector: Selector<DataType, ValueType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.associateWithTo(destination, valueSelector, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Appends all elements yielded from results of ```transform``` function being invoked\r\n   * on each element of original collection, to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<DataType, Iterable<ResultDataType>>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\"123\", \"456\")\r\n   *\r\n   * const allNumbersInSet = new Array<number>()\r\n   * await koconutSet\r\n   *       .flatMapTo(\r\n   *           allNumbersInSet,\r\n   *           (eachString) => eachString\r\n   *                   .split('')\r\n   *                   .map(eachCharacter => parseInt(eachCharacter))\r\n   *       )\r\n   *       .process()\r\n   * console.log(allNumbersInSet)\r\n   * // ↑ [ 1, 2, 3, 4, 5, 6 ]\r\n   * ```\r\n   */\r\n  flatMapTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<DataType, Iterable<ResultDataType>>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.flatMapTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Appends all elements yielded from results of ```transform``` function being invoked\r\n   * on each element and its index in the original collection, to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {IndexedTransformer<DataType, Iterable<ResultDataType>>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\"123\", \"456\")\r\n   *\r\n   * const allIndexAndNumbersInSet= new Array<number>()\r\n   * await koconutSet\r\n   *       .flatMapIndexedTo(\r\n   *           allIndexAndNumbersInSet,\r\n   *           (eachIndex, eachElement) => [\r\n   *               eachIndex,\r\n   *               ...eachElement\r\n   *                   .split('')\r\n   *                   .map(eachCharacter => parseInt(eachCharacter))\r\n   *           ]\r\n   *       )\r\n   *       .process()\r\n   * console.log(allIndexAndNumbersInSet)\r\n   * // ↑ [ 0, 1, 2, 3, 1, 4, 5, 6 ]\r\n   * ```\r\n   */\r\n  flatMapIndexedTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: IndexedTransformer<DataType, Iterable<ResultDataType>>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.flatMapIndexedTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Groups values returned by the ```valueTransform``` function applied to each element of the original collection by the key\r\n   * returned by the given ```keySelector``` function applied to the element and puts to the destination map each group key\r\n   * associated with a list of corresponding values. If ```valueTransform``` is omitted, each value would be original element.\r\n   *\r\n   * @param {Map<KeyType, Array<ValueType>>} destination Iterable destinaion. ```Map``` to be exact.\r\n   *\r\n   * @param {Selector<DataType, KeyType>} keySelector A callback function that accepts an argument. The method calls the ```keySelector``` one time for each element in object.\r\n   *\r\n   * @param {Transformer<DataType, ValueType> | null} valueTransform A callback function that accepts an argument. The method calls the ```valueTransform``` one time for each element in object it it's not omitted.\r\n   *\r\n   * @param {any} keySelectorThisArg An object to which the ```this``` keyword can refer in the ```keySelector```. If ```keySelectorThisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @param {any} valueTransformThisArg An object to which the ```this``` keyword can refer in the ```valueTransform```. If ```valueTransformThisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const groupedByOddParity = new Map<boolean, number[]>()\r\n   * const groupedByEvenParityToString = new Map<boolean, string[]>()\r\n   * await koconutSet\r\n   *         .groupByTo(\r\n   *             groupedByOddParity,\r\n   *             eachNumber => eachNumber % 2 == 1\r\n   *         )\r\n   *         .groupByTo(\r\n   *             groupedByEvenParityToString,\r\n   *             eachNumber => eachNumber % 2 == 0,\r\n   *             eachNumber => eachNumber.toString()\r\n   *         )\r\n   *         .process()\r\n   * console.log(groupedByOddParity)\r\n   * // ↑ Map { true => [ 1, 3, 5 ], false => [ 2, 4 ] }\r\n   * console.log(groupedByEvenParityToString)\r\n   * // ↑ Map { false => [ '1', '3', '5' ], true => [ '2', '4' ] }\r\n   * ```\r\n   */\r\n  groupByTo<KeyType, ValueType = DataType>(\r\n    destination: Map<KeyType, Array<ValueType>>,\r\n    keySelector: Selector<DataType, KeyType>,\r\n    valueTransform: Transformer<DataType, ValueType> | null = null,\r\n    keySelectorThisArg: any = null,\r\n    valueTransformThisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.groupByTo(\r\n        destination,\r\n        keySelector,\r\n        valueTransform,\r\n        keySelectorThisArg,\r\n        valueTransformThisArg,\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each element of the original collection\r\n   * and appends the results to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<DataType, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const doubledNumbers = new Array<number>()\r\n   * const originalData = await koconutSet\r\n   *                   .mapTo(\r\n   *                       doubledNumbers,\r\n   *                       eachNumber => eachNumber * 2\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(doubledNumbers)\r\n   * // ↑ [ 2, 4, 6, 8, 10 ]\r\n   * console.log(originalData)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  mapTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<DataType, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.mapTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each element of the original collection\r\n   * and appends only the results that are not ```null``` nor ```undefined```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<DataType, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\"1\", \"12\", \"34\", \"5\")\r\n   *\r\n   * const twoDigitsNumbers = Array<number>()\r\n   * const originalData = await koconutSet\r\n   *                       .mapNotNullTo(\r\n   *                           twoDigitsNumbers,\r\n   *                           eachString => {\r\n   *                               if(eachString.length == 2)\r\n   *                                   return parseInt(eachString)\r\n   *                               // return\r\n   *                               // return null\r\n   *                               // return undefined\r\n   *                               // ↑ You can use any one of\r\n   *                               //   them or just omit it.\r\n   *                           }\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(twoDigitsNumbers)\r\n   * // ↑ [ 12, 34 ]\r\n   * console.log(originalData)\r\n   * // ↑ Set { '1', '12', '34', '5' }\r\n   * ```\r\n   */\r\n  mapNotNullTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<DataType, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.mapNotNullTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each element and its index in the original\r\n   * collection and appends the results to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {IndexedTransformer<DataType, ResultDataType>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const sumsOfIndexesAndNumbers = new Array<number>()\r\n   * const originalData = await koconutSet\r\n   *                   .mapIndexedTo(\r\n   *                       sumsOfIndexesAndNumbers,\r\n   *                       (eachIndex, eachNumber) => eachIndex + eachNumber\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(sumsOfIndexesAndNumbers)\r\n   * // ↑ [ 1, 3, 5, 7, 9 ]\r\n   * console.log(originalData)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  mapIndexedTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: IndexedTransformer<DataType, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.mapIndexedTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each element and its index in the original\r\n   * collection and appends the results that are not ```null``` nor ```undefined``` to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {IndexedTransformer<DataType,ResultDataType | void | null | undefined>} transform A callback function that accepts two arguments. The method calls the ```transform``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const sumsOfIndexesAndNumbersWhereNumberIsEvent = new Array<number>()\r\n   * const prodcutsOfIndexesAndNumbersWhereIndexIsOdd = new Set<number>()\r\n   * const squaredNumbersWhereIndexLessThan3 = new Array<number>()\r\n   * const origianlData = await koconutSet\r\n   *       .mapIndexedNotNullTo(\r\n   *           sumsOfIndexesAndNumbersWhereNumberIsEvent,\r\n   *           (eachIndex, eachNumber) => {\r\n   *               if(eachNumber % 2 == 0)\r\n   *                   return eachIndex + eachNumber\r\n   *               // return\r\n   *               // return null\r\n   *               // return undefined\r\n   *               // ↑ You can use any one of\r\n   *               //   them or just omit it.\r\n   *           }\r\n   *       )\r\n   *       .mapIndexedNotNullTo(\r\n   *           prodcutsOfIndexesAndNumbersWhereIndexIsOdd,\r\n   *           async (eachIndex, eachNumber) => {\r\n   *               if(eachIndex % 2 == 1)\r\n   *                   return eachIndex * eachNumber\r\n   *           }\r\n   *       )\r\n   *       .mapIndexedNotNullTo(\r\n   *           squaredNumbersWhereIndexLessThan3,\r\n   *           (eachIndex, eachNumber) => new Promise<number | null>(resolve => {\r\n   *               if(eachIndex <= 3)\r\n   *                   resolve(eachNumber * eachNumber)\r\n   *               else resolve(null)\r\n   *           })\r\n   *       )\r\n   *           .yield()\r\n   * console.log(sumsOfIndexesAndNumbersWhereNumberIsEvent)\r\n   * // ↑ [ 3, 7 ]\r\n   * console.log(prodcutsOfIndexesAndNumbersWhereIndexIsOdd)\r\n   * // ↑ Set { 2, 12 }\r\n   * console.log(squaredNumbersWhereIndexLessThan3)\r\n   * // ↑ [ 1, 4, 9, 16 ]\r\n   * console.log(origianlData)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  mapIndexedNotNullTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: IndexedTransformer<\r\n      DataType,\r\n      ResultDataType | void | null | undefined\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.mapIndexedNotNullTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  // Manipulator\r\n  /**\r\n   * Returns a {@link KoconutSet} containing only distinct elements from this collection.\r\n   * If the type of data is a simple number or string, the method will check equality by using '==' operator, but if it's not,\r\n   * you'd better make your custom class inherits {@link KoconutEquatable}.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const numberKoconutSet = KoconutSet.of(1,1,2,2,3,3)\r\n   *\r\n   * const distinctNumbers = await numberKoconutSet\r\n   *                               .distinct()\r\n   *                               .yield()\r\n   * console.log(distinctNumbers)\r\n   * // ↑ Set { 1, 2, 3 }\r\n   *\r\n   * class SomeInfo {\r\n   *   info : string\r\n   *   constructor(info : string) {\r\n   *       this.info = info\r\n   *   }\r\n   * }\r\n   * const someInfoKoconutSet = KoconutSet.of(\r\n   *   new SomeInfo(\"A\"),\r\n   *   new SomeInfo(\"A\"),\r\n   *   new SomeInfo(\"B\"),\r\n   *   new SomeInfo(\"B\"),\r\n   *   new SomeInfo(\"C\"),\r\n   *   new SomeInfo(\"C\"),\r\n   * )\r\n   * const distinctSomeInfos = await someInfoKoconutSet\r\n   *                           .distinct()\r\n   *                           .yield()\r\n   * console.log(distinctSomeInfos)\r\n   * // ↑ Set {\r\n   * //        SomeInfo { info: 'A' },\r\n   * //        SomeInfo { info: 'A' },\r\n   * //        SomeInfo { info: 'B' },\r\n   * //        SomeInfo { info: 'B' },\r\n   * //        SomeInfo { info: 'C' },\r\n   * //        SomeInfo { info: 'C' }\r\n   * //       }\r\n   *\r\n   * class SomeEquatableInfo implements KoconutEquatable {\r\n   *   info : string\r\n   *   constructor(info : string) {\r\n   *       this.info = info\r\n   *   }\r\n   *   equalsTo(other : SomeEquatableInfo) : boolean {\r\n   *       return this.info == other.info\r\n   *   }\r\n   * }\r\n   * const someEquatableInfoKoconutSet = KoconutSet.of(\r\n   *   new SomeEquatableInfo(\"A\"),\r\n   *   new SomeEquatableInfo(\"A\"),\r\n   *   new SomeEquatableInfo(\"B\"),\r\n   *   new SomeEquatableInfo(\"B\"),\r\n   *   new SomeEquatableInfo(\"C\"),\r\n   *   new SomeEquatableInfo(\"C\")\r\n   * )\r\n   * const distinctSomeEquatableInfos = await someEquatableInfoKoconutSet\r\n   *                                   .distinct()\r\n   *                                   .yield()\r\n   * console.log(distinctSomeEquatableInfos)\r\n   * // ↑ Set {\r\n   * //        SomeEquatableInfo { info: 'A' },\r\n   * //        SomeEquatableInfo { info: 'B' },\r\n   * //        SomeEquatableInfo { info: 'C' }\r\n   * //       }\r\n   * ```\r\n   */\r\n  distinct(): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.distinct());\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing only elements from the given collection having\r\n   * distinct keys returned by the given ```selector``` function.\r\n   *\r\n   * @param {Selector<DataType, KeyType | EquatableKeyType>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const numberKoconutSet = KoconutSet.of(1,1,2,2,3,3)\r\n   *\r\n   * const distinctNumbers = await numberKoconutSet\r\n   *                         .distinctBy(eachNumber => eachNumber)\r\n   *                         .yield()\r\n   * console.log(distinctNumbers)\r\n   * // ↑ Set { 1, 2, 3 }\r\n   *\r\n   * class SomeInfo {\r\n   *     info : string\r\n   *     constructor(info : string) {\r\n   *         this.info = info\r\n   *     }\r\n   * }\r\n   * const someInfoKoconutSet = KoconutSet.of(\r\n   *     new SomeInfo(\"A\"),\r\n   *     new SomeInfo(\"A\"),\r\n   *     new SomeInfo(\"B\"),\r\n   *     new SomeInfo(\"B\"),\r\n   *     new SomeInfo(\"C\"),\r\n   *     new SomeInfo(\"C\")\r\n   * )\r\n   * const distinctSomeInfos = await someInfoKoconutSet\r\n   *                     .distinctBy(eachSomeInfo => eachSomeInfo.info)\r\n   *                     .yield()\r\n   * console.log(distinctSomeInfos)\r\n   * // ↑ Set {\r\n   * //        SomeInfo { info: 'A' },\r\n   * //        SomeInfo { info: 'B' },\r\n   * //        SomeInfo { info: 'C' }\r\n   * //       }\r\n   *\r\n   * class SomeEquatableInfo implements KoconutEquatable {\r\n   *     info : string\r\n   *     constructor(info : string) {\r\n   *         this.info = info\r\n   *     }\r\n   *     equalsTo(other : SomeEquatableInfo) : boolean {\r\n   *         return this.info == other.info\r\n   *     }\r\n   * }\r\n   * class SomeEquatableInfoContainer {\r\n   *     someEquatableInfo : SomeEquatableInfo\r\n   *     additionalInfo : string\r\n   *     constructor(someEquatableInfo : SomeEquatableInfo, additionalInfo : string) {\r\n   *         this.someEquatableInfo = someEquatableInfo\r\n   *         this.additionalInfo = additionalInfo\r\n   *     }\r\n   * }\r\n   * const someEquatableInfoContainerKoconutSet = KoconutSet.of(\r\n   *     new SomeEquatableInfoContainer(\r\n   *         new SomeEquatableInfo(\"A\"),\r\n   *         \"First\"\r\n   *     ),\r\n   *     new SomeEquatableInfoContainer(\r\n   *         new SomeEquatableInfo(\"A\"),\r\n   *         \"Second\"\r\n   *     ),\r\n   *     new SomeEquatableInfoContainer(\r\n   *         new SomeEquatableInfo(\"B\"),\r\n   *         \"First\"\r\n   *     ),\r\n   *     new SomeEquatableInfoContainer(\r\n   *         new SomeEquatableInfo(\"B\"),\r\n   *         \"Second\"\r\n   *     ),\r\n   *     new SomeEquatableInfoContainer(\r\n   *         new SomeEquatableInfo(\"C\"),\r\n   *         \"First\"\r\n   *     ),\r\n   *     new SomeEquatableInfoContainer(\r\n   *         new SomeEquatableInfo(\"C\"),\r\n   *         \"Second\"\r\n   *     )\r\n   * )\r\n   * const distinctSomeEquatableInfoContainersByEquatableInfo =\r\n   *                 await someEquatableInfoContainerKoconutSet\r\n   *                 .distinctBy(async eachContainer => eachContainer.someEquatableInfo)\r\n   *                 .yield()\r\n   * console.log(distinctSomeEquatableInfoContainersByEquatableInfo)\r\n   * // ↑ Set {\r\n   * //            SomeEquatableInfoContainer {\r\n   * //                someEquatableInfo: SomeEquatableInfo { info: 'A' },\r\n   * //                additionalInfo: 'First'\r\n   * //            },\r\n   * //            SomeEquatableInfoContainer {\r\n   * //                someEquatableInfo: SomeEquatableInfo { info: 'B' },\r\n   * //                additionalInfo: 'First'\r\n   * //            },\r\n   * //            SomeEquatableInfoContainer {\r\n   * //                someEquatableInfo: SomeEquatableInfo { info: 'C' },\r\n   * //                additionalInfo: 'First'\r\n   * //            }\r\n   * //       }\r\n   *\r\n   * const distinctSomeEquatableInfoContainersByAdditionalInfo =\r\n   *                 await someEquatableInfoContainerKoconutSet\r\n   *                 .distinctBy(eachContainer => new Promise(resolve => {\r\n   *                     resolve(eachContainer.additionalInfo)\r\n   *                 }))\r\n   *                 .yield()\r\n   * console.log(distinctSomeEquatableInfoContainersByAdditionalInfo)\r\n   * // ↑ Set {\r\n   * //            SomeEquatableInfoContainer {\r\n   * //                someEquatableInfo: SomeEquatableInfo { info: 'A' },\r\n   * //                additionalInfo: 'First'\r\n   * //            },\r\n   * //            SomeEquatableInfoContainer {\r\n   * //                someEquatableInfo: SomeEquatableInfo { info: 'A' },\r\n   * //                additionalInfo: 'Second'\r\n   * //            }\r\n   * //       }\r\n   * ```\r\n   */\r\n  distinctBy<KeyType, EquatableKeyType extends KoconutEquatable>(\r\n    selector: Selector<DataType, KeyType | EquatableKeyType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.distinctBy(selector, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing all elements except first ```n``` elements.\r\n   *\r\n   * @param {number} n Elements number to except.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const fisrt3ElementsDroppedSet = await koconutSet\r\n   *                                         .drop(3)\r\n   *                                         .yield()\r\n   * console.log(fisrt3ElementsDroppedSet)\r\n   * // ↑ Set { 4, 5 }\r\n   * ```\r\n   */\r\n  drop(n: number): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.drop(n));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containg all elements except last ```n``` elements.\r\n   * @param {number} n Elements number to except.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const last3ElementsDroppedSet = await koconutSet\r\n   *                                         .dropLast(3)\r\n   *                                         .yield()\r\n   * console.log(last3ElementsDroppedSet)\r\n   * // ↑ Set  { 1, 2 }\r\n   * ```\r\n   */\r\n  dropLast(n: number): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.dropLast(n));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing all elements except last elements that satisfy the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const greaterThan5DroppedSet = await koconutSet\r\n   *                 .dropLastWhile(eachNumber => eachNumber > 5)\r\n   *                 .yield()\r\n   * console.log(greaterThan5DroppedSet)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  dropLastWhile(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.dropLastWhile(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing all elements except first elements that satisfy the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const lessThan5DroppedSet = await koconutSet\r\n   *                 .dropWhile(eachNumber => eachNumber < 5)\r\n   *                 .yield()\r\n   * console.log(lessThan5DroppedSet)\r\n   * // ↑ Set { 5, 6, 7, 8, 9, 10 }\r\n   * ```\r\n   */\r\n  dropWhile(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.dropWhile(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing only elements matching the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const evenNumbers = await koconutSet\r\n   *                       .filter(eachNumber => eachNumber % 2 == 0)\r\n   *                       .yield()\r\n   * console.log(evenNumbers)\r\n   * // ↑ Set { 2, 4 }\r\n   * ```\r\n   */\r\n  filter(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.filter(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing only elements not matching the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const oddNumbers = await koconutSet\r\n   *                       .filterNot(eachNumber => eachNumber % 2 == 0)\r\n   *                       .yield()\r\n   * console.log(oddNumbers)\r\n   * // ↑ Set { 1, 3, 5 }\r\n   * ```\r\n   */\r\n  filterNot(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.filterNot(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Appends all elements matching the given ```predicate``` to the given destination.\r\n   *\r\n   * @param {Array<DataType> | Set<DataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const evenNumbers = new Array<number>()\r\n   * const originalData = await koconutSet\r\n   *                       .filterTo(\r\n   *                           evenNumbers,\r\n   *                           eachNumber => eachNumber % 2 == 0\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(evenNumbers)\r\n   * // ↑ [ 2, 4 ]\r\n   * console.log(originalData)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  filterTo(\r\n    destination: Array<DataType> | Set<DataType>,\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.filterTo(destination, predicate, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Appends all elements not matching the given ```predicate``` to the given destination.\r\n   *\r\n   * @param {Array<DataType> | Set<DataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,3,4,5)\r\n   *\r\n   * const oddNumbers = new Array<number>()\r\n   * const originalData = await koconutSet\r\n   *                       .filterTo(\r\n   *                           oddNumbers,\r\n   *                           eachNumber => eachNumber % 2 == 0\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(oddNumbers)\r\n   * // ↑ [ 1, 3, 5 ]\r\n   * console.log(originalData)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  filterNotTo(\r\n    destination: Array<DataType> | Set<DataType>,\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.filterNotTo(destination, predicate, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing only elements matching the given ```predicate``` with indexes.\r\n   *\r\n   * @param {IndexedPredicator<DataType>} predicate A callback function that accepts two arguments. The method calls the ```predicate``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(0,1,2,5,6,7)\r\n   *\r\n   * const numbersEqualToIndex = await koconutSet\r\n   *       .filterIndexed((eachIndex, eachNumber) => eachIndex == eachNumber)\r\n   *       .yield()\r\n   * console.log(numbersEqualToIndex)\r\n   * // ↑ Set { 0, 1, 2 }\r\n   * ```\r\n   */\r\n  filterIndexed(\r\n    predicate: IndexedPredicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.filterIndexed(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Appends all elements matching the given ```predicate``` with indexes to the given destination.\r\n   *\r\n   * @param {Array<DataType> | Set<DataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {IndexedPredicator<DataType>} predicate A callback function that accepts two arguments. The method calls the ```predicate``` one time for each index and element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(0,1,2,5,6,7)\r\n   *\r\n   * const numbersEqualToIndex = new Array<number>()\r\n   * const origianlData =await koconutSet\r\n   *       .filterIndexedTo(\r\n   *           numbersEqualToIndex,\r\n   *           (eachIndex, eachNumber) => eachIndex == eachNumber\r\n   *       )\r\n   *       .yield()\r\n   * console.log(numbersEqualToIndex)\r\n   * // ↑ [ 0, 1, 2 ]\r\n   * console.log(origianlData)\r\n   * // ↑ Set { 0, 1, 2, 5, 6, 7 }\r\n   * ```\r\n   */\r\n  filterIndexedTo(\r\n    destination: Array<DataType> | Set<DataType>,\r\n    predicate: IndexedPredicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.filterIndexedTo(destination, predicate, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing all elements that are not ```null```.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,null,null)\r\n   *\r\n   * const numbers = await koconutSet\r\n   *               .filterNotNull()\r\n   *               .yield()\r\n   * console.log(numbers)\r\n   * // ↑ Set { 1, 2 }\r\n   * ```\r\n   */\r\n  filterNotNull(): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.filterNotNull());\r\n  }\r\n\r\n  /**\r\n   * Appends all elements that are not ```null``` to the given destination.\r\n   *\r\n   * @param {Array<DataType> | Set<DataType>} destination Iterable destinaion. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(1,2,null,null)\r\n   *\r\n   * const numbers = Array<number>()\r\n   * const originalData = await koconutSet\r\n   *                   .filterNotNullTo(numbers)\r\n   *                   .yield()\r\n   * console.log(numbers)\r\n   * // ↑ [ 1, 2 ]\r\n   * console.log(originalData)\r\n   * // ↑ Set { 1, 2, null }\r\n   * ```\r\n   */\r\n  filterNotNullTo(\r\n    destination: Array<DataType> | Set<DataType>,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.filterNotNullTo(destination));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} of all elements sorted according to natural sort order\r\n   * of the value returned by specified ```selector``` function. It could be either a ```number```, ```string```, or custom class\r\n   * that inherits {@link KoconutComparable}.\r\n   *\r\n   * @param {Selector<DataType, number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const stringKoconutSet = KoconutSet.of(\"abcd\", \"ab\", \"a\", \"abc\")\r\n   *\r\n   * const sortedStringByItsLength = await stringKoconutSet\r\n   *                                   .sortedBy(eachString => eachString.length)\r\n   *                                   .yield()\r\n   * console.log(sortedStringByItsLength)\r\n   * // ↑ Set { 'a', 'ab', 'abc', 'abcd' }\r\n   *\r\n   * class Person implements KoconutComparable {\r\n   *   name : string\r\n   *   age : number\r\n   *   constructor(name : string, age : number) {\r\n   *       this.name = name\r\n   *       this.age = age\r\n   *   }\r\n   *   compareTo(other : Person) : number {\r\n   *       return this.name.length - other.name.length\r\n   *   }\r\n   * }\r\n   * const personKoconutSet = KoconutSet.of(\r\n   *   new Person(\"Keanu Reeves\", 56),\r\n   *   new Person(\"Robert Downey Jr.\", 55),\r\n   *   new Person(\"Christian Bale\", 46)\r\n   * )\r\n   *\r\n   * // You can do it by async function.\r\n   * const sortedPeopleByWhoseAge = await personKoconutSet\r\n   *                                   .sortedBy(async eachPerson => eachPerson.age)\r\n   *                                   .yield()\r\n   * console.log(sortedPeopleByWhoseAge)\r\n   * // ↑ Set {\r\n   * //        Person { name: 'Christian Bale', age: 46 },\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 },\r\n   * //        Person { name: 'Keanu Reeves', age: 56 }\r\n   * //       }\r\n   *\r\n   * // And of course, by returning Promise.\r\n   * const sortedPeopleByWhoseName = await personKoconutSet\r\n   *                                   .sortedBy(eachPerson => new Promise(resolve => {\r\n   *                                       resolve(eachPerson.name)\r\n   *                                   }))\r\n   *                                   .yield()\r\n   * console.log(sortedPeopleByWhoseName)\r\n   * // ↑ Set {\r\n   * //        Person { name: 'Christian Bale', age: 46 },\r\n   * //        Person { name: 'Keanu Reeves', age: 56 },\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 }\r\n   * //       }\r\n   *\r\n   * // The class Person itself implements KoconutComparable.\r\n   * // So, it is a Comparable Type.\r\n   * // If you're using JavaScript you can do something similar as following\r\n   * // by extending KoconutComparable or simply adding method 'compareTo' to your custom class.\r\n   * const sortedPeople = await personKoconutSet\r\n   *                           .sortedBy(eachPerson => eachPerson)\r\n   *                           .yield()\r\n   * console.log(sortedPeople)\r\n   * // ↑ Set {\r\n   * //        Person { name: 'Keanu Reeves', age: 56 },\r\n   * //        Person { name: 'Christian Bale', age: 46 },\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 }\r\n   * //       }\r\n   * ```\r\n   */\r\n  sortedBy(\r\n    selector: Selector<DataType, number | string | KoconutComparable>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.sortedBy(selector, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} of all elements sorted descending according to natural sort order\r\n   * of the value returned by specified ```selector``` function. It could be either a ```number```, ```string```, or custom class\r\n   * that inherits {@link KoconutComparable}.\r\n   *\r\n   * @param {Selector<DataType, number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const stringKoconutSet = KoconutSet.of(\"abcd\", \"ab\", \"a\", \"abc\")\r\n   *\r\n   * const descSortedStringByItsLength = await stringKoconutSet\r\n   *                                   .sortedByDescending(eachString => eachString.length)\r\n   *                                   .yield()\r\n   * console.log(descSortedStringByItsLength)\r\n   * // ↑ Set { 'abcd', 'abc', 'ab', 'a' }\r\n   *\r\n   * class Person implements KoconutComparable {\r\n   *   name : string\r\n   *   age : number\r\n   *   constructor(name : string, age : number) {\r\n   *       this.name = name\r\n   *       this.age = age\r\n   *   }\r\n   *   compareTo(other : Person) : number {\r\n   *       return this.name.length - other.name.length\r\n   *   }\r\n   * }\r\n   * const personKoconutSet = KoconutSet.of(\r\n   *   new Person(\"Keanu Reeves\", 56),\r\n   *   new Person(\"Robert Downey Jr.\", 55),\r\n   *   new Person(\"Christian Bale\", 46)\r\n   * )\r\n   *\r\n   * // You can do it by async function.\r\n   * const descSortedPeopleByWhoseAge = await personKoconutSet\r\n   *                                   .sortedByDescending(async eachPerson => eachPerson.age)\r\n   *                                   .yield()\r\n   * console.log(descSortedPeopleByWhoseAge)\r\n   * // ↑ Set {\r\n   * //        Person { name: 'Keanu Reeves', age: 56 },\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 },\r\n   * //        Person { name: 'Christian Bale', age: 46 }\r\n   * //       }\r\n   *\r\n   * // And of course, by returning Promise.\r\n   * const descSortedPeopleByWhoseName = await personKoconutSet\r\n   *                                   .sortedByDescending(eachPerson => new Promise(resolve => {\r\n   *                                       resolve(eachPerson.name)\r\n   *                                   }))\r\n   *                                   .yield()\r\n   * console.log(descSortedPeopleByWhoseName)\r\n   * // ↑ Set {\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 },\r\n   * //        Person { name: 'Keanu Reeves', age: 56 },\r\n   * //        Person { name: 'Christian Bale', age: 46 }\r\n   * //       }\r\n   *\r\n   * // The class Person itself implements KoconutComparable.\r\n   * // So, it is a Comparable Type.\r\n   * // If you're using JavaScript you can do something similar as following\r\n   * // by extending KoconutComparable or simply adding method 'compareTo' to your custom class.\r\n   * const descSortedPeople = await personKoconutSet\r\n   *                           .sortedByDescending(eachPerson => eachPerson)\r\n   *                           .yield()\r\n   * console.log(descSortedPeople)\r\n   * // ↑ Set {\r\n   * //        Person { name: 'Robert Downey Jr.', age: 55 },\r\n   * //        Person { name: 'Christian Bale', age: 46 },\r\n   * //        Person { name: 'Keanu Reeves', age: 56 }\r\n   * //       }\r\n   * ```\r\n   */\r\n  sortedByDescending(\r\n    selector: Selector<DataType, number | string | KoconutComparable>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(\r\n      super.sortedByDescending(selector, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} of all elements sorted according to the\r\n   * specified ```comparator```.\r\n   *\r\n   * @param {Comparator<DataType>} comparator A callback function that accepts two arguements. The method calls the ```comparator``` to compare two selected values.\r\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(15, 4, 33)\r\n   *\r\n   * const sortedNumbers = await koconutSet\r\n   *                       .sortedWith((front, rear) => front - rear)\r\n   *                       .yield()\r\n   * console.log(sortedNumbers)\r\n   * // ↑ Set { 4, 15, 33 }\r\n   *\r\n   * const descSortedNumbers = await koconutSet\r\n   *                           .sortedWith((front, rear) => rear - front)\r\n   *                           .yield()\r\n   * console.log(descSortedNumbers)\r\n   * // ↑ Set { 4, 15, 33 }\r\n   *\r\n   * const sortedNumbersBy1sDigit = await koconutSet\r\n   *                       .sortedWith((front, rear) => front % 10 - rear % 10)\r\n   *                       .yield()\r\n   * console.log(sortedNumbersBy1sDigit)\r\n   * // ↑ Set { 4, 15, 33 }\r\n   * ```\r\n   */\r\n  sortedWith(\r\n    comparator: Comparator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.sortedWith(comparator, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing first ```n``` elements.\r\n   *\r\n   * @param {number} n Elements number to take.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const first3ElementsOfSet = await koconutSet\r\n   *                                 .take(3)\r\n   *                                 .yield()\r\n   * console.log(first3ElementsOfSet)\r\n   * // ↑ Set { 1, 2, 3 }\r\n   * ```\r\n   */\r\n  take(n: number): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.take(n));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containg last ```n``` elements.\r\n   *\r\n   * @param {number} n Elements number to take.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const last3ElementsOfSet = await koconutSet\r\n   *                                 .takeLast(3)\r\n   *                                 .yield()\r\n   * console.log(last3ElementsOfSet)\r\n   * // ↑ Set { 8, 9, 10 }\r\n   * ```\r\n   */\r\n  takeLast(n: number): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.takeLast(n));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing last elements satisfying the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const lastNumbersWhileGreaterThan7 = await koconutSet\r\n   *                     .takeLastWhile(eachNumber => eachNumber >7)\r\n   *                     .yield()\r\n   * console.log(lastNumbersWhileGreaterThan7)\r\n   * // ↑ Set { 8, 9, 10 }\r\n   * ```\r\n   */\r\n  takeLastWhile(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.takeLastWhile(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} containing first elements satisfying the given ```predicate```.\r\n   *\r\n   * @param {Predicator<DataType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutSet<DataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\r\n   *     1,2,3,4,5,6,7,8,9,10\r\n   * )\r\n   *\r\n   * const numbersWhileLessThan5 = await koconutSet\r\n   *                     .takeWhile(eachNumber => eachNumber < 5)\r\n   *                     .yield()\r\n   * console.log(numbersWhileLessThan5)\r\n   * // ↑ Set { 1, 2, 3, 4 }\r\n   * ```\r\n   */\r\n  takeWhile(\r\n    predicate: Predicator<DataType>,\r\n    thisArg: any = null,\r\n  ): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.takeWhile(predicate, thisArg));\r\n  }\r\n\r\n  minus(element: DataType): KoconutSet<DataType>;\r\n  minus(elements: Iterable<DataType>): KoconutSet<DataType>;\r\n  minus(elements: DataType | Iterable<DataType>): KoconutSet<DataType> {\r\n    if (typeof (elements as any)[Symbol.iterator] === 'function')\r\n      return KoconutSet.fromCollection(\r\n        super.minus(elements as Iterable<DataType>),\r\n      );\r\n    else return KoconutSet.fromCollection(super.minus(elements as DataType));\r\n  }\r\n\r\n  minusElement(element: DataType): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.minusElement(element));\r\n  }\r\n\r\n  plus(element: DataType): KoconutSet<DataType>;\r\n  plus(elements: Iterable<DataType>): KoconutSet<DataType>;\r\n  plus(elements: DataType | Iterable<DataType>): KoconutSet<DataType> {\r\n    if (typeof (elements as any)[Symbol.iterator] === 'function')\r\n      return KoconutSet.fromCollection(\r\n        super.plus(elements as Iterable<DataType>),\r\n      );\r\n    else return KoconutSet.fromCollection(super.plus(elements as DataType));\r\n  }\r\n\r\n  plusElement(element: DataType): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.plusElement(element));\r\n  }\r\n\r\n  reversed(): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.reversed());\r\n  }\r\n\r\n  shuffled(): KoconutSet<DataType> {\r\n    return KoconutSet.fromCollection(super.shuffled());\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"aaac045191af896bc9d759eaca02dbfae8ff869f","contentHash":"d9909d0eb3f7154c0c890aa4792a3f01650310a34599695e5c8d3d575383ddc4"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\flow\\KoconutFlow.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\flow\\KoconutFlow.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":44}},"2":{"start":{"line":4,"column":17},"end":{"line":4,"column":43}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":34}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":16}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":31}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":33}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":39}},"8":{"start":{"line":12,"column":8},"end":{"line":22,"column":9}},"9":{"start":{"line":13,"column":12},"end":{"line":21,"column":13}},"10":{"start":{"line":14,"column":16},"end":{"line":14,"column":37}},"11":{"start":{"line":15,"column":16},"end":{"line":20,"column":71}},"12":{"start":{"line":16,"column":20},"end":{"line":16,"column":75}},"13":{"start":{"line":17,"column":21},"end":{"line":20,"column":71}},"14":{"start":{"line":18,"column":20},"end":{"line":18,"column":78}},"15":{"start":{"line":20,"column":20},"end":{"line":20,"column":71}},"16":{"start":{"line":25,"column":8},"end":{"line":25,"column":51}},"17":{"start":{"line":28,"column":8},"end":{"line":28,"column":37}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":37}},"19":{"start":{"line":34,"column":8},"end":{"line":34,"column":109}},"20":{"start":{"line":34,"column":66},"end":{"line":34,"column":106}},"21":{"start":{"line":37,"column":8},"end":{"line":40,"column":30}},"22":{"start":{"line":38,"column":12},"end":{"line":38,"column":125}},"23":{"start":{"line":38,"column":82},"end":{"line":38,"column":122}},"24":{"start":{"line":40,"column":12},"end":{"line":40,"column":30}},"25":{"start":{"line":43,"column":8},"end":{"line":43,"column":79}},"26":{"start":{"line":44,"column":8},"end":{"line":44,"column":20}},"27":{"start":{"line":47,"column":8},"end":{"line":47,"column":110}},"28":{"start":{"line":47,"column":88},"end":{"line":47,"column":108}},"29":{"start":{"line":50,"column":8},"end":{"line":50,"column":152}},"30":{"start":{"line":50,"column":88},"end":{"line":50,"column":150}},"31":{"start":{"line":53,"column":8},"end":{"line":53,"column":42}},"32":{"start":{"line":54,"column":8},"end":{"line":54,"column":57}},"33":{"start":{"line":57,"column":20},"end":{"line":57,"column":21}},"34":{"start":{"line":58,"column":8},"end":{"line":58,"column":39}},"35":{"start":{"line":59,"column":33},"end":{"line":69,"column":9}},"36":{"start":{"line":60,"column":12},"end":{"line":60,"column":56}},"37":{"start":{"line":61,"column":12},"end":{"line":68,"column":13}},"38":{"start":{"line":62,"column":16},"end":{"line":62,"column":59}},"39":{"start":{"line":63,"column":16},"end":{"line":67,"column":17}},"40":{"start":{"line":64,"column":20},"end":{"line":64,"column":77}},"41":{"start":{"line":65,"column":20},"end":{"line":66,"column":73}},"42":{"start":{"line":66,"column":24},"end":{"line":66,"column":73}},"43":{"start":{"line":70,"column":8},"end":{"line":70,"column":62}},"44":{"start":{"line":71,"column":8},"end":{"line":71,"column":124}},"45":{"start":{"line":71,"column":57},"end":{"line":71,"column":122}},"46":{"start":{"line":72,"column":8},"end":{"line":73,"column":104}},"47":{"start":{"line":73,"column":12},"end":{"line":73,"column":104}},"48":{"start":{"line":73,"column":54},"end":{"line":73,"column":102}},"49":{"start":{"line":76,"column":0},"end":{"line":76,"column":20}},"50":{"start":{"line":77,"column":0},"end":{"line":77,"column":48}},"51":{"start":{"line":78,"column":0},"end":{"line":78,"column":58}},"52":{"start":{"line":81,"column":8},"end":{"line":81,"column":16}},"53":{"start":{"line":82,"column":8},"end":{"line":82,"column":32}},"54":{"start":{"line":83,"column":8},"end":{"line":83,"column":42}},"55":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"56":{"start":{"line":87,"column":12},"end":{"line":87,"column":44}},"57":{"start":{"line":91,"column":8},"end":{"line":91,"column":44}},"58":{"start":{"line":94,"column":8},"end":{"line":94,"column":44}},"59":{"start":{"line":97,"column":8},"end":{"line":97,"column":61}},"60":{"start":{"line":100,"column":8},"end":{"line":100,"column":62}},"61":{"start":{"line":103,"column":8},"end":{"line":103,"column":31}},"62":{"start":{"line":104,"column":8},"end":{"line":104,"column":44}},"63":{"start":{"line":105,"column":32},"end":{"line":105,"column":49}},"64":{"start":{"line":106,"column":8},"end":{"line":116,"column":11}},"65":{"start":{"line":109,"column":34},"end":{"line":109,"column":44}},"66":{"start":{"line":110,"column":12},"end":{"line":114,"column":71}},"67":{"start":{"line":111,"column":16},"end":{"line":111,"column":139}},"68":{"start":{"line":111,"column":69},"end":{"line":111,"column":122}},"69":{"start":{"line":114,"column":16},"end":{"line":114,"column":71}},"70":{"start":{"line":115,"column":12},"end":{"line":115,"column":33}},"71":{"start":{"line":117,"column":8},"end":{"line":117,"column":31}},"72":{"start":{"line":120,"column":8},"end":{"line":132,"column":11}},"73":{"start":{"line":121,"column":12},"end":{"line":121,"column":33}},"74":{"start":{"line":122,"column":12},"end":{"line":131,"column":13}},"75":{"start":{"line":123,"column":16},"end":{"line":123,"column":35}},"76":{"start":{"line":125,"column":16},"end":{"line":130,"column":23}},"77":{"start":{"line":126,"column":20},"end":{"line":126,"column":49}},"78":{"start":{"line":128,"column":20},"end":{"line":130,"column":23}},"79":{"start":{"line":129,"column":24},"end":{"line":129,"column":53}},"80":{"start":{"line":135,"column":0},"end":{"line":135,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":36},"end":{"line":23,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":24},"end":{"line":26,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":30},"end":{"line":29,"column":5}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":36},"end":{"line":32,"column":5}},"line":30},"4":{"name":"(anonymous_4)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":36},"end":{"line":35,"column":5}},"line":33},"5":{"name":"(anonymous_5)","decl":{"start":{"line":34,"column":40},"end":{"line":34,"column":41}},"loc":{"start":{"line":34,"column":66},"end":{"line":34,"column":106}},"line":34},"6":{"name":"(anonymous_6)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":42},"end":{"line":41,"column":5}},"line":36},"7":{"name":"(anonymous_7)","decl":{"start":{"line":38,"column":56},"end":{"line":38,"column":57}},"loc":{"start":{"line":38,"column":82},"end":{"line":38,"column":122}},"line":38},"8":{"name":"(anonymous_8)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":11},"end":{"line":45,"column":5}},"line":42},"9":{"name":"(anonymous_9)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":20},"end":{"line":48,"column":5}},"line":46},"10":{"name":"(anonymous_10)","decl":{"start":{"line":47,"column":67},"end":{"line":47,"column":68}},"loc":{"start":{"line":47,"column":88},"end":{"line":47,"column":108}},"line":47},"11":{"name":"(anonymous_11)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":22},"end":{"line":51,"column":5}},"line":49},"12":{"name":"(anonymous_12)","decl":{"start":{"line":50,"column":67},"end":{"line":50,"column":68}},"loc":{"start":{"line":50,"column":88},"end":{"line":50,"column":150}},"line":50},"13":{"name":"(anonymous_13)","decl":{"start":{"line":52,"column":4},"end":{"line":52,"column":5}},"loc":{"start":{"line":52,"column":24},"end":{"line":55,"column":5}},"line":52},"14":{"name":"(anonymous_14)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":70},"end":{"line":74,"column":5}},"line":56},"15":{"name":"(anonymous_15)","decl":{"start":{"line":59,"column":33},"end":{"line":59,"column":34}},"loc":{"start":{"line":59,"column":54},"end":{"line":69,"column":9}},"line":59},"16":{"name":"(anonymous_16)","decl":{"start":{"line":71,"column":51},"end":{"line":71,"column":52}},"loc":{"start":{"line":71,"column":57},"end":{"line":71,"column":122}},"line":71},"17":{"name":"(anonymous_17)","decl":{"start":{"line":73,"column":39},"end":{"line":73,"column":40}},"loc":{"start":{"line":73,"column":54},"end":{"line":73,"column":102}},"line":73},"18":{"name":"(anonymous_18)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":36},"end":{"line":84,"column":5}},"line":80},"19":{"name":"(anonymous_19)","decl":{"start":{"line":85,"column":4},"end":{"line":85,"column":5}},"loc":{"start":{"line":85,"column":25},"end":{"line":89,"column":5}},"line":85},"20":{"name":"(anonymous_20)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":36},"end":{"line":92,"column":5}},"line":90},"21":{"name":"(anonymous_21)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":30},"end":{"line":95,"column":5}},"line":93},"22":{"name":"(anonymous_22)","decl":{"start":{"line":96,"column":4},"end":{"line":96,"column":5}},"loc":{"start":{"line":96,"column":42},"end":{"line":98,"column":5}},"line":96},"23":{"name":"(anonymous_23)","decl":{"start":{"line":99,"column":4},"end":{"line":99,"column":5}},"loc":{"start":{"line":99,"column":36},"end":{"line":101,"column":5}},"line":99},"24":{"name":"(anonymous_24)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":39},"end":{"line":118,"column":5}},"line":102},"25":{"name":"(anonymous_25)","decl":{"start":{"line":108,"column":26},"end":{"line":108,"column":27}},"loc":{"start":{"line":108,"column":38},"end":{"line":116,"column":9}},"line":108},"26":{"name":"(anonymous_26)","decl":{"start":{"line":111,"column":48},"end":{"line":111,"column":49}},"loc":{"start":{"line":111,"column":69},"end":{"line":111,"column":122}},"line":111},"27":{"name":"(anonymous_27)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":18},"end":{"line":133,"column":5}},"line":119},"28":{"name":"(anonymous_28)","decl":{"start":{"line":120,"column":27},"end":{"line":120,"column":28}},"loc":{"start":{"line":120,"column":46},"end":{"line":132,"column":9}},"line":120},"29":{"name":"(anonymous_29)","decl":{"start":{"line":128,"column":71},"end":{"line":128,"column":72}},"loc":{"start":{"line":128,"column":77},"end":{"line":130,"column":21}},"line":128}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":16},"end":{"line":7,"column":34}},"type":"default-arg","locations":[{"start":{"line":7,"column":30},"end":{"line":7,"column":34}}],"line":7},"1":{"loc":{"start":{"line":12,"column":8},"end":{"line":22,"column":9}},"type":"if","locations":[{"start":{"line":12,"column":8},"end":{"line":22,"column":9}},{"start":{"line":12,"column":8},"end":{"line":22,"column":9}}],"line":12},"2":{"loc":{"start":{"line":15,"column":16},"end":{"line":20,"column":71}},"type":"if","locations":[{"start":{"line":15,"column":16},"end":{"line":20,"column":71}},{"start":{"line":15,"column":16},"end":{"line":20,"column":71}}],"line":15},"3":{"loc":{"start":{"line":17,"column":21},"end":{"line":20,"column":71}},"type":"if","locations":[{"start":{"line":17,"column":21},"end":{"line":20,"column":71}},{"start":{"line":17,"column":21},"end":{"line":20,"column":71}}],"line":17},"4":{"loc":{"start":{"line":30,"column":16},"end":{"line":30,"column":34}},"type":"default-arg","locations":[{"start":{"line":30,"column":30},"end":{"line":30,"column":34}}],"line":30},"5":{"loc":{"start":{"line":36,"column":22},"end":{"line":36,"column":40}},"type":"default-arg","locations":[{"start":{"line":36,"column":36},"end":{"line":36,"column":40}}],"line":36},"6":{"loc":{"start":{"line":37,"column":8},"end":{"line":40,"column":30}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":40,"column":30}},{"start":{"line":37,"column":8},"end":{"line":40,"column":30}}],"line":37},"7":{"loc":{"start":{"line":56,"column":51},"end":{"line":56,"column":68}},"type":"default-arg","locations":[{"start":{"line":56,"column":64},"end":{"line":56,"column":68}}],"line":56},"8":{"loc":{"start":{"line":61,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":68,"column":13}},{"start":{"line":61,"column":12},"end":{"line":68,"column":13}}],"line":61},"9":{"loc":{"start":{"line":63,"column":16},"end":{"line":67,"column":17}},"type":"if","locations":[{"start":{"line":63,"column":16},"end":{"line":67,"column":17}},{"start":{"line":63,"column":16},"end":{"line":67,"column":17}}],"line":63},"10":{"loc":{"start":{"line":65,"column":20},"end":{"line":66,"column":73}},"type":"if","locations":[{"start":{"line":65,"column":20},"end":{"line":66,"column":73}},{"start":{"line":65,"column":20},"end":{"line":66,"column":73}}],"line":65},"11":{"loc":{"start":{"line":72,"column":8},"end":{"line":73,"column":104}},"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":73,"column":104}},{"start":{"line":72,"column":8},"end":{"line":73,"column":104}}],"line":72},"12":{"loc":{"start":{"line":80,"column":16},"end":{"line":80,"column":34}},"type":"default-arg","locations":[{"start":{"line":80,"column":30},"end":{"line":80,"column":34}}],"line":80},"13":{"loc":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},{"start":{"line":86,"column":8},"end":{"line":88,"column":9}}],"line":86},"14":{"loc":{"start":{"line":90,"column":16},"end":{"line":90,"column":34}},"type":"default-arg","locations":[{"start":{"line":90,"column":30},"end":{"line":90,"column":34}}],"line":90},"15":{"loc":{"start":{"line":96,"column":22},"end":{"line":96,"column":40}},"type":"default-arg","locations":[{"start":{"line":96,"column":36},"end":{"line":96,"column":40}}],"line":96},"16":{"loc":{"start":{"line":102,"column":23},"end":{"line":102,"column":37}},"type":"default-arg","locations":[{"start":{"line":102,"column":33},"end":{"line":102,"column":37}}],"line":102},"17":{"loc":{"start":{"line":110,"column":12},"end":{"line":114,"column":71}},"type":"if","locations":[{"start":{"line":110,"column":12},"end":{"line":114,"column":71}},{"start":{"line":110,"column":12},"end":{"line":114,"column":71}}],"line":110},"18":{"loc":{"start":{"line":122,"column":12},"end":{"line":131,"column":13}},"type":"if","locations":[{"start":{"line":122,"column":12},"end":{"line":131,"column":13}},{"start":{"line":122,"column":12},"end":{"line":131,"column":13}}],"line":122},"19":{"loc":{"start":{"line":125,"column":16},"end":{"line":130,"column":23}},"type":"if","locations":[{"start":{"line":125,"column":16},"end":{"line":130,"column":23}},{"start":{"line":125,"column":16},"end":{"line":130,"column":23}}],"line":125}},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":1,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},"b":{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0],"5":[0],"6":[0,0],"7":[0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0],"13":[0,0],"14":[0],"15":[0],"16":[0],"17":[0,0],"18":[0,0],"19":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/flow/KoconutFlow.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/flow/KoconutFlow.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Entry, Pair, KoconutOpener,\r\n\r\n    KoconutIterable\r\n} from \"../../../module\"\r\nimport { EventEmitter } from \"events\";\r\n\r\nexport class Flow<DataType> extends EventEmitter implements Iterable<Entry<number, DataType>>{\r\n\r\n    private static newDatumInsertedEvent = \"newDatumInserted\"\r\n    private static dataScanningCompletedEvent = \"dataScanningCompleted\"\r\n\r\n    private mPentDataSize = 0\r\n    private mChainedFlow : Flow<any> | null = null\r\n    private mInnerDataMap = new Map<number, DataType>();\r\n    [Symbol.iterator]() : Iterator<Entry<number, DataType>> {\r\n        return this.dataEntries[Symbol.iterator]()\r\n    }\r\n    \r\n    constructor(\r\n        srcSequence : Iterable<[number, DataType] | Entry<number, DataType> | Pair<number, DataType>> | null = null\r\n    ) {\r\n        super()\r\n        if(srcSequence != null) {\r\n            for(const eachDatum of srcSequence) {\r\n                this.mPentDataSize++\r\n                if(eachDatum instanceof Entry) this.mInnerDataMap.set(eachDatum.key, eachDatum.value)\r\n                else if(eachDatum instanceof Pair) this.mInnerDataMap.set(eachDatum.first, eachDatum.second)\r\n                else this.mInnerDataMap.set(eachDatum[0], eachDatum[1])\r\n            }\r\n        }\r\n    }\r\n\r\n    static of<DataType>(\r\n        ...srcSequence : ([number, DataType] | Entry<number, DataType> | Pair<number, DataType>)[]\r\n    ) : Flow<DataType> {\r\n\r\n        return new Flow(srcSequence)\r\n\r\n    }\r\n\r\n    static from<DataType>(\r\n        srcSequence : Iterable<[number, DataType] | Entry<number, DataType> | Pair<number, DataType>> | null = null\r\n    ) : Flow<DataType> {\r\n\r\n        return new Flow(srcSequence)\r\n\r\n    }\r\n\r\n    static ofSimple<DataType>(\r\n        ...srcSequence : DataType[]\r\n    ) : Flow<DataType> {\r\n\r\n        return new Flow(srcSequence.map((eachDatum, eachIndex) => new Entry(eachIndex, eachDatum)))\r\n\r\n    }\r\n\r\n    static fromSimple<DataType>(\r\n        srcSequence : Iterable<DataType> | null = null\r\n    ) : Flow<DataType> {\r\n\r\n        if(srcSequence != null)\r\n            return new Flow(Array.from(srcSequence).map((eachDatum, eachIndex) => new Entry(eachIndex, eachDatum)))\r\n        else return new Flow()\r\n\r\n    }\r\n\r\n    private sort() : Flow<DataType> {\r\n        this.mInnerDataMap = new Map([...this.mInnerDataMap.entries()].sort())\r\n        return this\r\n    }\r\n\r\n    get dataArray() : Array<DataType> {\r\n        return Array.from(this.sort().mInnerDataMap.entries()).map(eachIterableEntry => eachIterableEntry[1])\r\n    }\r\n\r\n    get dataEntries() : Array<Entry<number, DataType>> {\r\n        return Array.from(this.sort().mInnerDataMap.entries()).map(eachIterableEntry => new Entry(eachIterableEntry[0], eachIterableEntry[1]))\r\n    }\r\n\r\n    private setDatum(\r\n        id : number, \r\n        datum : DataType\r\n    ) {\r\n        this.mInnerDataMap.set(id, datum)\r\n        this.emit(Flow.newDatumInsertedEvent, id, datum)\r\n    }\r\n\r\n    private onNewDatumInserted(\r\n        onNewDatumInsertedListener : (id : number, datum : DataType) => void | Promise<void>,\r\n        targetFlow : Flow<any> | null = null\r\n    ) {\r\n\r\n        let count = 0;\r\n        this.mChainedFlow = targetFlow\r\n        const mediatedListener = async (id : number, datum : DataType) => {\r\n            await onNewDatumInsertedListener(id, datum)\r\n            if(this.mPentDataSize - 1 == count++) {\r\n                this.emit(Flow.dataScanningCompletedEvent)\r\n                if(targetFlow != null) {\r\n                    targetFlow.mPentDataSize = targetFlow.mInnerDataMap.size\r\n                    if(targetFlow.mChainedFlow == null) targetFlow.emit(Flow.dataScanningCompletedEvent)\r\n                }\r\n            }\r\n        }\r\n        this.on(Flow.newDatumInsertedEvent, mediatedListener)\r\n        this.once(Flow.dataScanningCompletedEvent, () => this.removeListener(Flow.newDatumInsertedEvent, mediatedListener))\r\n        if(this.mInnerDataMap.size != 0) this.mInnerDataMap.forEach((datum, id) => this.emit(Flow.newDatumInsertedEvent, id, datum))\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport class KoconutFlow<DataType> extends KoconutIterable<Entry<number, DataType>, Entry<number, DataType>, Flow<DataType>, Flow<DataType>> {\r\n\r\n    private mIsChained = false\r\n\r\n    async validate(data : Flow<DataType> | null) {\r\n        if(data != null) {\r\n            this.combinedDataWrapper = data\r\n        }\r\n    }\r\n\r\n    constructor(srcSequence : Iterable<[number, DataType] | Entry<number, DataType> | Pair<number, DataType>> | null = null) {\r\n        super()\r\n        this.data = new Flow(srcSequence)\r\n    }\r\n\r\n    static from<DataType>(\r\n        srcSequence : Iterable<[number, DataType] | Entry<number, DataType> | Pair<number, DataType>> | null = null\r\n    ) : KoconutFlow<DataType> {\r\n\r\n        return new KoconutFlow(srcSequence)\r\n\r\n    }\r\n\r\n    static of<DataType>(\r\n        ...srcSequence : ([number, DataType] | Entry<number, DataType> | Pair<number, DataType>)[]\r\n    ) : KoconutFlow<DataType> {\r\n\r\n        return new KoconutFlow(srcSequence)\r\n\r\n    }\r\n\r\n    static fromSimple<DataType>(\r\n        srcSequence : Iterable<DataType> | null = null\r\n    ) : KoconutFlow<DataType> {\r\n\r\n        return new KoconutFlow(Flow.fromSimple(srcSequence))\r\n\r\n    }\r\n\r\n    static ofSimple<DataType>(\r\n        ...srcSequence : DataType[]\r\n    ) : KoconutFlow<DataType> {\r\n\r\n        return new KoconutFlow(Flow.ofSimple(...srcSequence))\r\n\r\n    }\r\n\r\n    mapFlow<ResultDataType>(\r\n        transform : (element : DataType) => ResultDataType | Promise<ResultDataType>,\r\n        thisArg : any = null\r\n    ) : KoconutFlow<ResultDataType> {\r\n\r\n        this.mIsChained = true\r\n        transform = transform.bind(thisArg)\r\n        const koconutToReturn = new KoconutFlow<ResultDataType>();\r\n        (koconutToReturn as any as KoconutOpener<Flow<ResultDataType>>)\r\n            .setPrevYieldable(this)\r\n            .setProcessor(async () => {\r\n                const processedFlow = new Flow<ResultDataType>()\r\n                if(this.data != null) {\r\n                    this.data['onNewDatumInserted'](\r\n                        async (id, datum) => processedFlow['setDatum'](id, await transform(datum)),\r\n                        processedFlow\r\n                    )\r\n                } else processedFlow.emit(Flow['dataScanningCompletedEvent'])\r\n                return processedFlow\r\n            })\r\n        return koconutToReturn\r\n\r\n    }\r\n\r\n    async yield() : Promise<Flow<DataType>> {\r\n        return new Promise(async resolve => {\r\n            await this.process()\r\n            if(this.mIsChained) resolve(this.data!)\r\n            else {\r\n                if(this.processor == null) resolve(this.data!['sort']())\r\n                else this.data!.once(Flow['dataScanningCompletedEvent'], () => {\r\n                    resolve(this.data!['sort']())\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a8b51f312481371980b5c49657541f9bd3f29175","contentHash":"f9586e1dbb124a558adcc3a7c89d589b75160f27160a5a483c86f7e3252dc861"},"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\map\\KoconutMap.ts":{"path":"C:\\Users\\ayten\\Desktop\\WorkSpace\\GitHub\\ApexCaptain\\Koconut\\src\\components\\container\\map\\KoconutMap.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":13}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":43}},"4":{"start":{"line":34,"column":8},"end":{"line":34,"column":16}},"5":{"start":{"line":36,"column":8},"end":{"line":36,"column":31}},"6":{"start":{"line":37,"column":8},"end":{"line":37,"column":35}},"7":{"start":{"line":38,"column":26},"end":{"line":38,"column":35}},"8":{"start":{"line":39,"column":8},"end":{"line":48,"column":9}},"9":{"start":{"line":40,"column":12},"end":{"line":47,"column":13}},"10":{"start":{"line":41,"column":16},"end":{"line":46,"column":62}},"11":{"start":{"line":42,"column":20},"end":{"line":42,"column":66}},"12":{"start":{"line":43,"column":21},"end":{"line":46,"column":62}},"13":{"start":{"line":44,"column":20},"end":{"line":44,"column":69}},"14":{"start":{"line":46,"column":20},"end":{"line":46,"column":62}},"15":{"start":{"line":49,"column":8},"end":{"line":49,"column":30}},"16":{"start":{"line":52,"column":8},"end":{"line":81,"column":9}},"17":{"start":{"line":53,"column":12},"end":{"line":53,"column":49}},"18":{"start":{"line":54,"column":12},"end":{"line":79,"column":13}},"19":{"start":{"line":55,"column":16},"end":{"line":78,"column":17}},"20":{"start":{"line":56,"column":37},"end":{"line":56,"column":42}},"21":{"start":{"line":57,"column":20},"end":{"line":65,"column":21}},"22":{"start":{"line":58,"column":47},"end":{"line":58,"column":81}},"23":{"start":{"line":59,"column":24},"end":{"line":64,"column":25}},"24":{"start":{"line":62,"column":28},"end":{"line":62,"column":46}},"25":{"start":{"line":63,"column":28},"end":{"line":63,"column":34}},"26":{"start":{"line":66,"column":20},"end":{"line":72,"column":47}},"27":{"start":{"line":67,"column":24},"end":{"line":67,"column":44}},"28":{"start":{"line":68,"column":24},"end":{"line":68,"column":85}},"29":{"start":{"line":69,"column":24},"end":{"line":69,"column":49}},"30":{"start":{"line":72,"column":24},"end":{"line":72,"column":47}},"31":{"start":{"line":75,"column":20},"end":{"line":75,"column":40}},"32":{"start":{"line":76,"column":20},"end":{"line":76,"column":81}},"33":{"start":{"line":77,"column":20},"end":{"line":77,"column":45}},"34":{"start":{"line":80,"column":12},"end":{"line":80,"column":35}},"35":{"start":{"line":84,"column":32},"end":{"line":84,"column":64}},"36":{"start":{"line":85,"column":8},"end":{"line":85,"column":58}},"37":{"start":{"line":86,"column":8},"end":{"line":86,"column":66}},"38":{"start":{"line":87,"column":8},"end":{"line":87,"column":31}},"39":{"start":{"line":122,"column":8},"end":{"line":122,"column":31}},"40":{"start":{"line":123,"column":8},"end":{"line":123,"column":20}},"41":{"start":{"line":152,"column":32},"end":{"line":152,"column":57}},"42":{"start":{"line":153,"column":8},"end":{"line":155,"column":64}},"43":{"start":{"line":155,"column":38},"end":{"line":155,"column":62}},"44":{"start":{"line":156,"column":8},"end":{"line":156,"column":31}},"45":{"start":{"line":178,"column":32},"end":{"line":178,"column":57}},"46":{"start":{"line":179,"column":8},"end":{"line":181,"column":50}},"47":{"start":{"line":181,"column":38},"end":{"line":181,"column":48}},"48":{"start":{"line":182,"column":8},"end":{"line":182,"column":31}},"49":{"start":{"line":204,"column":32},"end":{"line":204,"column":63}},"50":{"start":{"line":205,"column":8},"end":{"line":207,"column":50}},"51":{"start":{"line":207,"column":38},"end":{"line":207,"column":48}},"52":{"start":{"line":208,"column":8},"end":{"line":208,"column":31}},"53":{"start":{"line":230,"column":32},"end":{"line":230,"column":59}},"54":{"start":{"line":231,"column":8},"end":{"line":233,"column":52}},"55":{"start":{"line":233,"column":38},"end":{"line":233,"column":50}},"56":{"start":{"line":234,"column":8},"end":{"line":234,"column":31}},"57":{"start":{"line":267,"column":8},"end":{"line":267,"column":38}},"58":{"start":{"line":293,"column":8},"end":{"line":293,"column":36}},"59":{"start":{"line":332,"column":8},"end":{"line":333,"column":118}},"60":{"start":{"line":333,"column":12},"end":{"line":333,"column":118}},"61":{"start":{"line":334,"column":8},"end":{"line":334,"column":44}},"62":{"start":{"line":335,"column":32},"end":{"line":335,"column":48}},"63":{"start":{"line":336,"column":8},"end":{"line":356,"column":11}},"64":{"start":{"line":337,"column":33},"end":{"line":337,"column":42}},"65":{"start":{"line":338,"column":12},"end":{"line":354,"column":13}},"66":{"start":{"line":338,"column":33},"end":{"line":338,"column":34}},"67":{"start":{"line":339,"column":39},"end":{"line":339,"column":65}},"68":{"start":{"line":340,"column":16},"end":{"line":353,"column":75}},"69":{"start":{"line":341,"column":20},"end":{"line":341,"column":82}},"70":{"start":{"line":342,"column":21},"end":{"line":353,"column":75}},"71":{"start":{"line":343,"column":37},"end":{"line":343,"column":65}},"72":{"start":{"line":344,"column":20},"end":{"line":344,"column":70}},"73":{"start":{"line":346,"column":21},"end":{"line":353,"column":75}},"74":{"start":{"line":347,"column":20},"end":{"line":347,"column":79}},"75":{"start":{"line":348,"column":21},"end":{"line":353,"column":75}},"76":{"start":{"line":349,"column":38},"end":{"line":349,"column":66}},"77":{"start":{"line":350,"column":20},"end":{"line":350,"column":69}},"78":{"start":{"line":353,"column":20},"end":{"line":353,"column":75}},"79":{"start":{"line":355,"column":12},"end":{"line":355,"column":32}},"80":{"start":{"line":357,"column":8},"end":{"line":357,"column":31}},"81":{"start":{"line":438,"column":26},"end":{"line":438,"column":56}},"82":{"start":{"line":439,"column":32},"end":{"line":439,"column":59}},"83":{"start":{"line":440,"column":8},"end":{"line":442,"column":50}},"84":{"start":{"line":443,"column":8},"end":{"line":443,"column":31}},"85":{"start":{"line":515,"column":26},"end":{"line":515,"column":62}},"86":{"start":{"line":516,"column":32},"end":{"line":516,"column":59}},"87":{"start":{"line":517,"column":8},"end":{"line":519,"column":50}},"88":{"start":{"line":520,"column":8},"end":{"line":520,"column":31}},"89":{"start":{"line":600,"column":26},"end":{"line":600,"column":60}},"90":{"start":{"line":601,"column":32},"end":{"line":601,"column":59}},"91":{"start":{"line":602,"column":8},"end":{"line":604,"column":50}},"92":{"start":{"line":605,"column":8},"end":{"line":605,"column":31}},"93":{"start":{"line":678,"column":26},"end":{"line":678,"column":66}},"94":{"start":{"line":679,"column":32},"end":{"line":679,"column":59}},"95":{"start":{"line":680,"column":8},"end":{"line":682,"column":50}},"96":{"start":{"line":683,"column":8},"end":{"line":683,"column":31}},"97":{"start":{"line":764,"column":26},"end":{"line":764,"column":56}},"98":{"start":{"line":765,"column":32},"end":{"line":765,"column":59}},"99":{"start":{"line":766,"column":8},"end":{"line":768,"column":50}},"100":{"start":{"line":769,"column":8},"end":{"line":769,"column":31}},"101":{"start":{"line":840,"column":26},"end":{"line":840,"column":62}},"102":{"start":{"line":841,"column":32},"end":{"line":841,"column":59}},"103":{"start":{"line":842,"column":8},"end":{"line":844,"column":50}},"104":{"start":{"line":845,"column":8},"end":{"line":845,"column":31}},"105":{"start":{"line":925,"column":26},"end":{"line":925,"column":60}},"106":{"start":{"line":926,"column":32},"end":{"line":926,"column":59}},"107":{"start":{"line":927,"column":8},"end":{"line":929,"column":50}},"108":{"start":{"line":930,"column":8},"end":{"line":930,"column":31}},"109":{"start":{"line":1003,"column":26},"end":{"line":1003,"column":66}},"110":{"start":{"line":1004,"column":32},"end":{"line":1004,"column":59}},"111":{"start":{"line":1005,"column":8},"end":{"line":1007,"column":50}},"112":{"start":{"line":1008,"column":8},"end":{"line":1008,"column":31}},"113":{"start":{"line":1041,"column":32},"end":{"line":1041,"column":61}},"114":{"start":{"line":1042,"column":8},"end":{"line":1057,"column":11}},"115":{"start":{"line":1045,"column":12},"end":{"line":1055,"column":13}},"116":{"start":{"line":1046,"column":16},"end":{"line":1054,"column":32}},"117":{"start":{"line":1047,"column":43},"end":{"line":1047,"column":64}},"118":{"start":{"line":1048,"column":20},"end":{"line":1051,"column":36}},"119":{"start":{"line":1051,"column":24},"end":{"line":1051,"column":36}},"120":{"start":{"line":1053,"column":21},"end":{"line":1054,"column":32}},"121":{"start":{"line":1054,"column":20},"end":{"line":1054,"column":32}},"122":{"start":{"line":1056,"column":12},"end":{"line":1056,"column":25}},"123":{"start":{"line":1058,"column":8},"end":{"line":1058,"column":31}},"124":{"start":{"line":1089,"column":8},"end":{"line":1089,"column":34}},"125":{"start":{"line":1120,"column":32},"end":{"line":1120,"column":61}},"126":{"start":{"line":1121,"column":8},"end":{"line":1136,"column":11}},"127":{"start":{"line":1124,"column":12},"end":{"line":1134,"column":13}},"128":{"start":{"line":1125,"column":16},"end":{"line":1133,"column":32}},"129":{"start":{"line":1126,"column":43},"end":{"line":1126,"column":68}},"130":{"start":{"line":1127,"column":20},"end":{"line":1130,"column":36}},"131":{"start":{"line":1130,"column":24},"end":{"line":1130,"column":36}},"132":{"start":{"line":1132,"column":21},"end":{"line":1133,"column":32}},"133":{"start":{"line":1133,"column":20},"end":{"line":1133,"column":32}},"134":{"start":{"line":1135,"column":12},"end":{"line":1135,"column":25}},"135":{"start":{"line":1137,"column":8},"end":{"line":1137,"column":31}},"136":{"start":{"line":1188,"column":8},"end":{"line":1188,"column":70}},"137":{"start":{"line":1217,"column":8},"end":{"line":1217,"column":73}},"138":{"start":{"line":1245,"column":8},"end":{"line":1245,"column":76}},"139":{"start":{"line":1283,"column":8},"end":{"line":1283,"column":44}},"140":{"start":{"line":1284,"column":32},"end":{"line":1284,"column":48}},"141":{"start":{"line":1285,"column":8},"end":{"line":1294,"column":11}},"142":{"start":{"line":1288,"column":12},"end":{"line":1292,"column":13}},"143":{"start":{"line":1289,"column":16},"end":{"line":1291,"column":72}},"144":{"start":{"line":1290,"column":20},"end":{"line":1291,"column":72}},"145":{"start":{"line":1291,"column":24},"end":{"line":1291,"column":72}},"146":{"start":{"line":1293,"column":12},"end":{"line":1293,"column":29}},"147":{"start":{"line":1295,"column":8},"end":{"line":1295,"column":31}},"148":{"start":{"line":1331,"column":8},"end":{"line":1331,"column":44}},"149":{"start":{"line":1332,"column":32},"end":{"line":1332,"column":48}},"150":{"start":{"line":1333,"column":8},"end":{"line":1342,"column":11}},"151":{"start":{"line":1336,"column":12},"end":{"line":1340,"column":13}},"152":{"start":{"line":1337,"column":16},"end":{"line":1339,"column":72}},"153":{"start":{"line":1338,"column":20},"end":{"line":1339,"column":72}},"154":{"start":{"line":1339,"column":24},"end":{"line":1339,"column":72}},"155":{"start":{"line":1341,"column":12},"end":{"line":1341,"column":29}},"156":{"start":{"line":1343,"column":8},"end":{"line":1343,"column":31}},"157":{"start":{"line":1371,"column":8},"end":{"line":1371,"column":44}},"158":{"start":{"line":1372,"column":32},"end":{"line":1372,"column":48}},"159":{"start":{"line":1373,"column":8},"end":{"line":1383,"column":11}},"160":{"start":{"line":1376,"column":33},"end":{"line":1376,"column":42}},"161":{"start":{"line":1377,"column":12},"end":{"line":1381,"column":13}},"162":{"start":{"line":1378,"column":16},"end":{"line":1380,"column":73}},"163":{"start":{"line":1379,"column":20},"end":{"line":1380,"column":73}},"164":{"start":{"line":1380,"column":24},"end":{"line":1380,"column":73}},"165":{"start":{"line":1382,"column":12},"end":{"line":1382,"column":32}},"166":{"start":{"line":1384,"column":8},"end":{"line":1384,"column":31}},"167":{"start":{"line":1412,"column":8},"end":{"line":1412,"column":44}},"168":{"start":{"line":1413,"column":32},"end":{"line":1413,"column":48}},"169":{"start":{"line":1414,"column":8},"end":{"line":1424,"column":11}},"170":{"start":{"line":1417,"column":33},"end":{"line":1417,"column":42}},"171":{"start":{"line":1418,"column":12},"end":{"line":1422,"column":13}},"172":{"start":{"line":1419,"column":16},"end":{"line":1421,"column":73}},"173":{"start":{"line":1420,"column":20},"end":{"line":1421,"column":73}},"174":{"start":{"line":1421,"column":24},"end":{"line":1421,"column":73}},"175":{"start":{"line":1423,"column":12},"end":{"line":1423,"column":32}},"176":{"start":{"line":1425,"column":8},"end":{"line":1425,"column":31}},"177":{"start":{"line":1458,"column":32},"end":{"line":1458,"column":48}},"178":{"start":{"line":1459,"column":8},"end":{"line":1470,"column":11}},"179":{"start":{"line":1462,"column":33},"end":{"line":1462,"column":42}},"180":{"start":{"line":1463,"column":12},"end":{"line":1468,"column":13}},"181":{"start":{"line":1464,"column":49},"end":{"line":1464,"column":81}},"182":{"start":{"line":1465,"column":16},"end":{"line":1467,"column":73}},"183":{"start":{"line":1466,"column":20},"end":{"line":1467,"column":73}},"184":{"start":{"line":1467,"column":24},"end":{"line":1467,"column":73}},"185":{"start":{"line":1469,"column":12},"end":{"line":1469,"column":32}},"186":{"start":{"line":1471,"column":8},"end":{"line":1471,"column":31}},"187":{"start":{"line":1515,"column":32},"end":{"line":1515,"column":48}},"188":{"start":{"line":1516,"column":8},"end":{"line":1541,"column":11}},"189":{"start":{"line":1519,"column":33},"end":{"line":1521,"column":36}},"190":{"start":{"line":1522,"column":12},"end":{"line":1539,"column":13}},"191":{"start":{"line":1523,"column":16},"end":{"line":1538,"column":69}},"192":{"start":{"line":1524,"column":20},"end":{"line":1524,"column":76}},"193":{"start":{"line":1525,"column":21},"end":{"line":1538,"column":69}},"194":{"start":{"line":1526,"column":37},"end":{"line":1526,"column":62}},"195":{"start":{"line":1527,"column":20},"end":{"line":1528,"column":74}},"196":{"start":{"line":1528,"column":24},"end":{"line":1528,"column":74}},"197":{"start":{"line":1530,"column":21},"end":{"line":1538,"column":69}},"198":{"start":{"line":1531,"column":20},"end":{"line":1531,"column":73}},"199":{"start":{"line":1532,"column":21},"end":{"line":1538,"column":69}},"200":{"start":{"line":1533,"column":38},"end":{"line":1533,"column":63}},"201":{"start":{"line":1534,"column":20},"end":{"line":1535,"column":73}},"202":{"start":{"line":1535,"column":24},"end":{"line":1535,"column":73}},"203":{"start":{"line":1538,"column":20},"end":{"line":1538,"column":69}},"204":{"start":{"line":1540,"column":12},"end":{"line":1540,"column":32}},"205":{"start":{"line":1542,"column":8},"end":{"line":1542,"column":31}},"206":{"start":{"line":1576,"column":32},"end":{"line":1576,"column":63}},"207":{"start":{"line":1577,"column":8},"end":{"line":1595,"column":11}},"208":{"start":{"line":1580,"column":12},"end":{"line":1593,"column":13}},"209":{"start":{"line":1581,"column":16},"end":{"line":1592,"column":17}},"210":{"start":{"line":1582,"column":20},"end":{"line":1591,"column":47}},"211":{"start":{"line":1583,"column":47},"end":{"line":1583,"column":74}},"212":{"start":{"line":1584,"column":24},"end":{"line":1588,"column":51}},"213":{"start":{"line":1588,"column":28},"end":{"line":1588,"column":51}},"214":{"start":{"line":1590,"column":25},"end":{"line":1591,"column":47}},"215":{"start":{"line":1591,"column":24},"end":{"line":1591,"column":47}},"216":{"start":{"line":1594,"column":12},"end":{"line":1594,"column":24}},"217":{"start":{"line":1596,"column":8},"end":{"line":1596,"column":31}},"218":{"start":{"line":1631,"column":32},"end":{"line":1631,"column":63}},"219":{"start":{"line":1632,"column":8},"end":{"line":1650,"column":11}},"220":{"start":{"line":1635,"column":12},"end":{"line":1648,"column":13}},"221":{"start":{"line":1636,"column":16},"end":{"line":1647,"column":17}},"222":{"start":{"line":1637,"column":20},"end":{"line":1646,"column":47}},"223":{"start":{"line":1638,"column":47},"end":{"line":1638,"column":74}},"224":{"start":{"line":1639,"column":24},"end":{"line":1643,"column":51}},"225":{"start":{"line":1643,"column":28},"end":{"line":1643,"column":51}},"226":{"start":{"line":1645,"column":25},"end":{"line":1646,"column":47}},"227":{"start":{"line":1646,"column":24},"end":{"line":1646,"column":47}},"228":{"start":{"line":1649,"column":12},"end":{"line":1649,"column":32}},"229":{"start":{"line":1651,"column":8},"end":{"line":1651,"column":31}},"230":{"start":{"line":1696,"column":8},"end":{"line":1696,"column":50}},"231":{"start":{"line":1697,"column":32},"end":{"line":1697,"column":63}},"232":{"start":{"line":1698,"column":8},"end":{"line":1716,"column":11}},"233":{"start":{"line":1701,"column":12},"end":{"line":1714,"column":13}},"234":{"start":{"line":1702,"column":16},"end":{"line":1713,"column":17}},"235":{"start":{"line":1703,"column":20},"end":{"line":1712,"column":47}},"236":{"start":{"line":1704,"column":47},"end":{"line":1704,"column":74}},"237":{"start":{"line":1705,"column":24},"end":{"line":1709,"column":51}},"238":{"start":{"line":1709,"column":28},"end":{"line":1709,"column":51}},"239":{"start":{"line":1711,"column":25},"end":{"line":1712,"column":47}},"240":{"start":{"line":1712,"column":24},"end":{"line":1712,"column":47}},"241":{"start":{"line":1715,"column":12},"end":{"line":1715,"column":40}},"242":{"start":{"line":1717,"column":8},"end":{"line":1717,"column":31}},"243":{"start":{"line":1754,"column":32},"end":{"line":1754,"column":63}},"244":{"start":{"line":1755,"column":8},"end":{"line":1773,"column":11}},"245":{"start":{"line":1758,"column":12},"end":{"line":1771,"column":13}},"246":{"start":{"line":1759,"column":16},"end":{"line":1770,"column":17}},"247":{"start":{"line":1760,"column":20},"end":{"line":1769,"column":47}},"248":{"start":{"line":1761,"column":47},"end":{"line":1761,"column":74}},"249":{"start":{"line":1762,"column":24},"end":{"line":1766,"column":51}},"250":{"start":{"line":1766,"column":28},"end":{"line":1766,"column":51}},"251":{"start":{"line":1768,"column":25},"end":{"line":1769,"column":47}},"252":{"start":{"line":1769,"column":24},"end":{"line":1769,"column":47}},"253":{"start":{"line":1772,"column":12},"end":{"line":1772,"column":114}},"254":{"start":{"line":1774,"column":8},"end":{"line":1774,"column":31}},"255":{"start":{"line":1811,"column":8},"end":{"line":1811,"column":89}},"256":{"start":{"line":1848,"column":8},"end":{"line":1848,"column":85}},"257":{"start":{"line":1893,"column":8},"end":{"line":1893,"column":92}},"258":{"start":{"line":1937,"column":8},"end":{"line":1937,"column":44}},"259":{"start":{"line":1938,"column":32},"end":{"line":1938,"column":48}},"260":{"start":{"line":1939,"column":8},"end":{"line":1948,"column":11}},"261":{"start":{"line":1942,"column":33},"end":{"line":1942,"column":42}},"262":{"start":{"line":1943,"column":12},"end":{"line":1946,"column":13}},"263":{"start":{"line":1944,"column":16},"end":{"line":1945,"column":82}},"264":{"start":{"line":1945,"column":20},"end":{"line":1945,"column":82}},"265":{"start":{"line":1947,"column":12},"end":{"line":1947,"column":32}},"266":{"start":{"line":1949,"column":8},"end":{"line":1949,"column":31}},"267":{"start":{"line":2003,"column":8},"end":{"line":2003,"column":44}},"268":{"start":{"line":2004,"column":32},"end":{"line":2004,"column":48}},"269":{"start":{"line":2005,"column":8},"end":{"line":2013,"column":11}},"270":{"start":{"line":2008,"column":12},"end":{"line":2011,"column":13}},"271":{"start":{"line":2009,"column":16},"end":{"line":2010,"column":81}},"272":{"start":{"line":2010,"column":20},"end":{"line":2010,"column":81}},"273":{"start":{"line":2012,"column":12},"end":{"line":2012,"column":29}},"274":{"start":{"line":2014,"column":8},"end":{"line":2014,"column":31}},"275":{"start":{"line":2057,"column":8},"end":{"line":2057,"column":44}},"276":{"start":{"line":2058,"column":32},"end":{"line":2058,"column":48}},"277":{"start":{"line":2059,"column":8},"end":{"line":2069,"column":11}},"278":{"start":{"line":2062,"column":33},"end":{"line":2062,"column":42}},"279":{"start":{"line":2063,"column":12},"end":{"line":2067,"column":13}},"280":{"start":{"line":2064,"column":16},"end":{"line":2066,"column":17}},"281":{"start":{"line":2065,"column":20},"end":{"line":2065,"column":80}},"282":{"start":{"line":2068,"column":12},"end":{"line":2068,"column":32}},"283":{"start":{"line":2070,"column":8},"end":{"line":2070,"column":31}},"284":{"start":{"line":2123,"column":8},"end":{"line":2123,"column":44}},"285":{"start":{"line":2124,"column":32},"end":{"line":2124,"column":48}},"286":{"start":{"line":2125,"column":8},"end":{"line":2134,"column":11}},"287":{"start":{"line":2128,"column":12},"end":{"line":2132,"column":13}},"288":{"start":{"line":2129,"column":16},"end":{"line":2131,"column":17}},"289":{"start":{"line":2130,"column":20},"end":{"line":2130,"column":79}},"290":{"start":{"line":2133,"column":12},"end":{"line":2133,"column":29}},"291":{"start":{"line":2135,"column":8},"end":{"line":2135,"column":31}},"292":{"start":{"line":2138,"column":0},"end":{"line":2138,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":28},"end":{"line":50,"column":5}},"line":33},"1":{"name":"(anonymous_1)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":25},"end":{"line":82,"column":5}},"line":51},"2":{"name":"(anonymous_2)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":34},"end":{"line":88,"column":5}},"line":83},"3":{"name":"(anonymous_3)","decl":{"start":{"line":121,"column":4},"end":{"line":121,"column":5}},"loc":{"start":{"line":121,"column":21},"end":{"line":124,"column":5}},"line":121},"4":{"name":"(anonymous_4)","decl":{"start":{"line":151,"column":4},"end":{"line":151,"column":5}},"loc":{"start":{"line":151,"column":18},"end":{"line":157,"column":5}},"line":151},"5":{"name":"(anonymous_5)","decl":{"start":{"line":155,"column":26},"end":{"line":155,"column":27}},"loc":{"start":{"line":155,"column":38},"end":{"line":155,"column":62}},"line":155},"6":{"name":"(anonymous_6)","decl":{"start":{"line":177,"column":4},"end":{"line":177,"column":5}},"loc":{"start":{"line":177,"column":15},"end":{"line":183,"column":5}},"line":177},"7":{"name":"(anonymous_7)","decl":{"start":{"line":181,"column":26},"end":{"line":181,"column":27}},"loc":{"start":{"line":181,"column":38},"end":{"line":181,"column":48}},"line":181},"8":{"name":"(anonymous_8)","decl":{"start":{"line":203,"column":4},"end":{"line":203,"column":5}},"loc":{"start":{"line":203,"column":15},"end":{"line":209,"column":5}},"line":203},"9":{"name":"(anonymous_9)","decl":{"start":{"line":207,"column":26},"end":{"line":207,"column":27}},"loc":{"start":{"line":207,"column":38},"end":{"line":207,"column":48}},"line":207},"10":{"name":"(anonymous_10)","decl":{"start":{"line":229,"column":4},"end":{"line":229,"column":5}},"loc":{"start":{"line":229,"column":17},"end":{"line":235,"column":5}},"line":229},"11":{"name":"(anonymous_11)","decl":{"start":{"line":233,"column":26},"end":{"line":233,"column":27}},"loc":{"start":{"line":233,"column":38},"end":{"line":233,"column":50}},"line":233},"12":{"name":"(anonymous_12)","decl":{"start":{"line":266,"column":4},"end":{"line":266,"column":5}},"loc":{"start":{"line":266,"column":31},"end":{"line":268,"column":5}},"line":266},"13":{"name":"(anonymous_13)","decl":{"start":{"line":292,"column":4},"end":{"line":292,"column":5}},"loc":{"start":{"line":292,"column":23},"end":{"line":294,"column":5}},"line":292},"14":{"name":"(anonymous_14)","decl":{"start":{"line":331,"column":4},"end":{"line":331,"column":5}},"loc":{"start":{"line":331,"column":54},"end":{"line":358,"column":5}},"line":331},"15":{"name":"(anonymous_15)","decl":{"start":{"line":336,"column":37},"end":{"line":336,"column":38}},"loc":{"start":{"line":336,"column":49},"end":{"line":356,"column":9}},"line":336},"16":{"name":"(anonymous_16)","decl":{"start":{"line":437,"column":4},"end":{"line":437,"column":5}},"loc":{"start":{"line":437,"column":36},"end":{"line":444,"column":5}},"line":437},"17":{"name":"(anonymous_17)","decl":{"start":{"line":514,"column":4},"end":{"line":514,"column":5}},"loc":{"start":{"line":514,"column":42},"end":{"line":521,"column":5}},"line":514},"18":{"name":"(anonymous_18)","decl":{"start":{"line":599,"column":4},"end":{"line":599,"column":5}},"loc":{"start":{"line":599,"column":40},"end":{"line":606,"column":5}},"line":599},"19":{"name":"(anonymous_19)","decl":{"start":{"line":677,"column":4},"end":{"line":677,"column":5}},"loc":{"start":{"line":677,"column":46},"end":{"line":684,"column":5}},"line":677},"20":{"name":"(anonymous_20)","decl":{"start":{"line":763,"column":4},"end":{"line":763,"column":5}},"loc":{"start":{"line":763,"column":36},"end":{"line":770,"column":5}},"line":763},"21":{"name":"(anonymous_21)","decl":{"start":{"line":839,"column":4},"end":{"line":839,"column":5}},"loc":{"start":{"line":839,"column":42},"end":{"line":846,"column":5}},"line":839},"22":{"name":"(anonymous_22)","decl":{"start":{"line":924,"column":4},"end":{"line":924,"column":5}},"loc":{"start":{"line":924,"column":40},"end":{"line":931,"column":5}},"line":924},"23":{"name":"(anonymous_23)","decl":{"start":{"line":1002,"column":4},"end":{"line":1002,"column":5}},"loc":{"start":{"line":1002,"column":46},"end":{"line":1009,"column":5}},"line":1002},"24":{"name":"(anonymous_24)","decl":{"start":{"line":1040,"column":4},"end":{"line":1040,"column":5}},"loc":{"start":{"line":1040,"column":18},"end":{"line":1059,"column":5}},"line":1040},"25":{"name":"(anonymous_25)","decl":{"start":{"line":1044,"column":26},"end":{"line":1044,"column":27}},"loc":{"start":{"line":1044,"column":38},"end":{"line":1057,"column":9}},"line":1044},"26":{"name":"(anonymous_26)","decl":{"start":{"line":1088,"column":4},"end":{"line":1088,"column":5}},"loc":{"start":{"line":1088,"column":21},"end":{"line":1090,"column":5}},"line":1088},"27":{"name":"(anonymous_27)","decl":{"start":{"line":1119,"column":4},"end":{"line":1119,"column":5}},"loc":{"start":{"line":1119,"column":25},"end":{"line":1138,"column":5}},"line":1119},"28":{"name":"(anonymous_28)","decl":{"start":{"line":1123,"column":26},"end":{"line":1123,"column":27}},"loc":{"start":{"line":1123,"column":38},"end":{"line":1136,"column":9}},"line":1123},"29":{"name":"(anonymous_29)","decl":{"start":{"line":1187,"column":4},"end":{"line":1187,"column":5}},"loc":{"start":{"line":1187,"column":35},"end":{"line":1189,"column":5}},"line":1187},"30":{"name":"(anonymous_30)","decl":{"start":{"line":1216,"column":4},"end":{"line":1216,"column":5}},"loc":{"start":{"line":1216,"column":38},"end":{"line":1218,"column":5}},"line":1216},"31":{"name":"(anonymous_31)","decl":{"start":{"line":1244,"column":4},"end":{"line":1244,"column":5}},"loc":{"start":{"line":1244,"column":41},"end":{"line":1246,"column":5}},"line":1244},"32":{"name":"(anonymous_32)","decl":{"start":{"line":1280,"column":4},"end":{"line":1280,"column":5}},"loc":{"start":{"line":1282,"column":20},"end":{"line":1296,"column":5}},"line":1282},"33":{"name":"(anonymous_33)","decl":{"start":{"line":1287,"column":26},"end":{"line":1287,"column":27}},"loc":{"start":{"line":1287,"column":38},"end":{"line":1294,"column":9}},"line":1287},"34":{"name":"(anonymous_34)","decl":{"start":{"line":1330,"column":4},"end":{"line":1330,"column":5}},"loc":{"start":{"line":1330,"column":56},"end":{"line":1344,"column":5}},"line":1330},"35":{"name":"(anonymous_35)","decl":{"start":{"line":1335,"column":26},"end":{"line":1335,"column":27}},"loc":{"start":{"line":1335,"column":38},"end":{"line":1342,"column":9}},"line":1335},"36":{"name":"(anonymous_36)","decl":{"start":{"line":1370,"column":4},"end":{"line":1370,"column":5}},"loc":{"start":{"line":1370,"column":42},"end":{"line":1385,"column":5}},"line":1370},"37":{"name":"(anonymous_37)","decl":{"start":{"line":1375,"column":26},"end":{"line":1375,"column":27}},"loc":{"start":{"line":1375,"column":38},"end":{"line":1383,"column":9}},"line":1375},"38":{"name":"(anonymous_38)","decl":{"start":{"line":1411,"column":4},"end":{"line":1411,"column":5}},"loc":{"start":{"line":1411,"column":44},"end":{"line":1426,"column":5}},"line":1411},"39":{"name":"(anonymous_39)","decl":{"start":{"line":1416,"column":26},"end":{"line":1416,"column":27}},"loc":{"start":{"line":1416,"column":38},"end":{"line":1424,"column":9}},"line":1416},"40":{"name":"(anonymous_40)","decl":{"start":{"line":1457,"column":4},"end":{"line":1457,"column":5}},"loc":{"start":{"line":1457,"column":19},"end":{"line":1472,"column":5}},"line":1457},"41":{"name":"(anonymous_41)","decl":{"start":{"line":1461,"column":26},"end":{"line":1461,"column":27}},"loc":{"start":{"line":1461,"column":38},"end":{"line":1470,"column":9}},"line":1461},"42":{"name":"(anonymous_42)","decl":{"start":{"line":1514,"column":4},"end":{"line":1514,"column":5}},"loc":{"start":{"line":1514,"column":21},"end":{"line":1543,"column":5}},"line":1514},"43":{"name":"(anonymous_43)","decl":{"start":{"line":1518,"column":26},"end":{"line":1518,"column":27}},"loc":{"start":{"line":1518,"column":38},"end":{"line":1541,"column":9}},"line":1518},"44":{"name":"(anonymous_44)","decl":{"start":{"line":1575,"column":4},"end":{"line":1575,"column":5}},"loc":{"start":{"line":1575,"column":13},"end":{"line":1597,"column":5}},"line":1575},"45":{"name":"(anonymous_45)","decl":{"start":{"line":1579,"column":26},"end":{"line":1579,"column":27}},"loc":{"start":{"line":1579,"column":38},"end":{"line":1595,"column":9}},"line":1579},"46":{"name":"(anonymous_46)","decl":{"start":{"line":1630,"column":4},"end":{"line":1630,"column":5}},"loc":{"start":{"line":1630,"column":36},"end":{"line":1652,"column":5}},"line":1630},"47":{"name":"(anonymous_47)","decl":{"start":{"line":1634,"column":26},"end":{"line":1634,"column":27}},"loc":{"start":{"line":1634,"column":38},"end":{"line":1650,"column":9}},"line":1634},"48":{"name":"(anonymous_48)","decl":{"start":{"line":1695,"column":4},"end":{"line":1695,"column":5}},"loc":{"start":{"line":1695,"column":49},"end":{"line":1718,"column":5}},"line":1695},"49":{"name":"(anonymous_49)","decl":{"start":{"line":1700,"column":26},"end":{"line":1700,"column":27}},"loc":{"start":{"line":1700,"column":38},"end":{"line":1716,"column":9}},"line":1700},"50":{"name":"(anonymous_50)","decl":{"start":{"line":1753,"column":4},"end":{"line":1753,"column":5}},"loc":{"start":{"line":1753,"column":18},"end":{"line":1775,"column":5}},"line":1753},"51":{"name":"(anonymous_51)","decl":{"start":{"line":1757,"column":26},"end":{"line":1757,"column":27}},"loc":{"start":{"line":1757,"column":38},"end":{"line":1773,"column":9}},"line":1757},"52":{"name":"(anonymous_52)","decl":{"start":{"line":1810,"column":4},"end":{"line":1810,"column":5}},"loc":{"start":{"line":1810,"column":54},"end":{"line":1812,"column":5}},"line":1810},"53":{"name":"(anonymous_53)","decl":{"start":{"line":1847,"column":4},"end":{"line":1847,"column":5}},"loc":{"start":{"line":1847,"column":50},"end":{"line":1849,"column":5}},"line":1847},"54":{"name":"(anonymous_54)","decl":{"start":{"line":1892,"column":4},"end":{"line":1892,"column":5}},"loc":{"start":{"line":1892,"column":57},"end":{"line":1894,"column":5}},"line":1892},"55":{"name":"(anonymous_55)","decl":{"start":{"line":1936,"column":4},"end":{"line":1936,"column":5}},"loc":{"start":{"line":1936,"column":39},"end":{"line":1950,"column":5}},"line":1936},"56":{"name":"(anonymous_56)","decl":{"start":{"line":1941,"column":26},"end":{"line":1941,"column":27}},"loc":{"start":{"line":1941,"column":38},"end":{"line":1948,"column":9}},"line":1941},"57":{"name":"(anonymous_57)","decl":{"start":{"line":2002,"column":4},"end":{"line":2002,"column":5}},"loc":{"start":{"line":2002,"column":54},"end":{"line":2015,"column":5}},"line":2002},"58":{"name":"(anonymous_58)","decl":{"start":{"line":2007,"column":26},"end":{"line":2007,"column":27}},"loc":{"start":{"line":2007,"column":38},"end":{"line":2013,"column":9}},"line":2007},"59":{"name":"(anonymous_59)","decl":{"start":{"line":2056,"column":4},"end":{"line":2056,"column":5}},"loc":{"start":{"line":2056,"column":41},"end":{"line":2071,"column":5}},"line":2056},"60":{"name":"(anonymous_60)","decl":{"start":{"line":2061,"column":26},"end":{"line":2061,"column":27}},"loc":{"start":{"line":2061,"column":38},"end":{"line":2069,"column":9}},"line":2061},"61":{"name":"(anonymous_61)","decl":{"start":{"line":2122,"column":4},"end":{"line":2122,"column":5}},"loc":{"start":{"line":2122,"column":56},"end":{"line":2136,"column":5}},"line":2122},"62":{"name":"(anonymous_62)","decl":{"start":{"line":2127,"column":26},"end":{"line":2127,"column":27}},"loc":{"start":{"line":2127,"column":38},"end":{"line":2134,"column":9}},"line":2127}},"branchMap":{"0":{"loc":{"start":{"line":33,"column":16},"end":{"line":33,"column":26}},"type":"default-arg","locations":[{"start":{"line":33,"column":22},"end":{"line":33,"column":26}}],"line":33},"1":{"loc":{"start":{"line":39,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":48,"column":9}},{"start":{"line":39,"column":8},"end":{"line":48,"column":9}}],"line":39},"2":{"loc":{"start":{"line":41,"column":16},"end":{"line":46,"column":62}},"type":"if","locations":[{"start":{"line":41,"column":16},"end":{"line":46,"column":62}},{"start":{"line":41,"column":16},"end":{"line":46,"column":62}}],"line":41},"3":{"loc":{"start":{"line":43,"column":21},"end":{"line":46,"column":62}},"type":"if","locations":[{"start":{"line":43,"column":21},"end":{"line":46,"column":62}},{"start":{"line":43,"column":21},"end":{"line":46,"column":62}}],"line":43},"4":{"loc":{"start":{"line":52,"column":8},"end":{"line":81,"column":9}},"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":81,"column":9}},{"start":{"line":52,"column":8},"end":{"line":81,"column":9}}],"line":52},"5":{"loc":{"start":{"line":55,"column":16},"end":{"line":78,"column":17}},"type":"if","locations":[{"start":{"line":55,"column":16},"end":{"line":78,"column":17}},{"start":{"line":55,"column":16},"end":{"line":78,"column":17}}],"line":55},"6":{"loc":{"start":{"line":59,"column":24},"end":{"line":64,"column":25}},"type":"if","locations":[{"start":{"line":59,"column":24},"end":{"line":64,"column":25}},{"start":{"line":59,"column":24},"end":{"line":64,"column":25}}],"line":59},"7":{"loc":{"start":{"line":59,"column":28},"end":{"line":61,"column":102}},"type":"binary-expr","locations":[{"start":{"line":59,"column":29},"end":{"line":59,"column":80}},{"start":{"line":60,"column":29},"end":{"line":60,"column":57}},{"start":{"line":61,"column":29},"end":{"line":61,"column":83}},{"start":{"line":61,"column":87},"end":{"line":61,"column":101}}],"line":59},"8":{"loc":{"start":{"line":66,"column":20},"end":{"line":72,"column":47}},"type":"if","locations":[{"start":{"line":66,"column":20},"end":{"line":72,"column":47}},{"start":{"line":66,"column":20},"end":{"line":72,"column":47}}],"line":66},"9":{"loc":{"start":{"line":266,"column":16},"end":{"line":266,"column":29}},"type":"default-arg","locations":[{"start":{"line":266,"column":25},"end":{"line":266,"column":29}}],"line":266},"10":{"loc":{"start":{"line":331,"column":38},"end":{"line":331,"column":52}},"type":"default-arg","locations":[{"start":{"line":331,"column":48},"end":{"line":331,"column":52}}],"line":331},"11":{"loc":{"start":{"line":332,"column":8},"end":{"line":333,"column":118}},"type":"if","locations":[{"start":{"line":332,"column":8},"end":{"line":333,"column":118}},{"start":{"line":332,"column":8},"end":{"line":333,"column":118}}],"line":332},"12":{"loc":{"start":{"line":340,"column":16},"end":{"line":353,"column":75}},"type":"if","locations":[{"start":{"line":340,"column":16},"end":{"line":353,"column":75}},{"start":{"line":340,"column":16},"end":{"line":353,"column":75}}],"line":340},"13":{"loc":{"start":{"line":342,"column":21},"end":{"line":353,"column":75}},"type":"if","locations":[{"start":{"line":342,"column":21},"end":{"line":353,"column":75}},{"start":{"line":342,"column":21},"end":{"line":353,"column":75}}],"line":342},"14":{"loc":{"start":{"line":346,"column":21},"end":{"line":353,"column":75}},"type":"if","locations":[{"start":{"line":346,"column":21},"end":{"line":353,"column":75}},{"start":{"line":346,"column":21},"end":{"line":353,"column":75}}],"line":346},"15":{"loc":{"start":{"line":348,"column":21},"end":{"line":353,"column":75}},"type":"if","locations":[{"start":{"line":348,"column":21},"end":{"line":353,"column":75}},{"start":{"line":348,"column":21},"end":{"line":353,"column":75}}],"line":348},"16":{"loc":{"start":{"line":437,"column":20},"end":{"line":437,"column":34}},"type":"default-arg","locations":[{"start":{"line":437,"column":30},"end":{"line":437,"column":34}}],"line":437},"17":{"loc":{"start":{"line":514,"column":26},"end":{"line":514,"column":40}},"type":"default-arg","locations":[{"start":{"line":514,"column":36},"end":{"line":514,"column":40}}],"line":514},"18":{"loc":{"start":{"line":599,"column":24},"end":{"line":599,"column":38}},"type":"default-arg","locations":[{"start":{"line":599,"column":34},"end":{"line":599,"column":38}}],"line":599},"19":{"loc":{"start":{"line":677,"column":30},"end":{"line":677,"column":44}},"type":"default-arg","locations":[{"start":{"line":677,"column":40},"end":{"line":677,"column":44}}],"line":677},"20":{"loc":{"start":{"line":763,"column":20},"end":{"line":763,"column":34}},"type":"default-arg","locations":[{"start":{"line":763,"column":30},"end":{"line":763,"column":34}}],"line":763},"21":{"loc":{"start":{"line":839,"column":26},"end":{"line":839,"column":40}},"type":"default-arg","locations":[{"start":{"line":839,"column":36},"end":{"line":839,"column":40}}],"line":839},"22":{"loc":{"start":{"line":924,"column":24},"end":{"line":924,"column":38}},"type":"default-arg","locations":[{"start":{"line":924,"column":34},"end":{"line":924,"column":38}}],"line":924},"23":{"loc":{"start":{"line":1002,"column":30},"end":{"line":1002,"column":44}},"type":"default-arg","locations":[{"start":{"line":1002,"column":40},"end":{"line":1002,"column":44}}],"line":1002},"24":{"loc":{"start":{"line":1046,"column":16},"end":{"line":1054,"column":32}},"type":"if","locations":[{"start":{"line":1046,"column":16},"end":{"line":1054,"column":32}},{"start":{"line":1046,"column":16},"end":{"line":1054,"column":32}}],"line":1046},"25":{"loc":{"start":{"line":1048,"column":20},"end":{"line":1051,"column":36}},"type":"if","locations":[{"start":{"line":1048,"column":20},"end":{"line":1051,"column":36}},{"start":{"line":1048,"column":20},"end":{"line":1051,"column":36}}],"line":1048},"26":{"loc":{"start":{"line":1048,"column":24},"end":{"line":1050,"column":98}},"type":"binary-expr","locations":[{"start":{"line":1048,"column":25},"end":{"line":1048,"column":76}},{"start":{"line":1049,"column":25},"end":{"line":1049,"column":53}},{"start":{"line":1050,"column":25},"end":{"line":1050,"column":79}},{"start":{"line":1050,"column":83},"end":{"line":1050,"column":97}}],"line":1048},"27":{"loc":{"start":{"line":1053,"column":21},"end":{"line":1054,"column":32}},"type":"if","locations":[{"start":{"line":1053,"column":21},"end":{"line":1054,"column":32}},{"start":{"line":1053,"column":21},"end":{"line":1054,"column":32}}],"line":1053},"28":{"loc":{"start":{"line":1125,"column":16},"end":{"line":1133,"column":32}},"type":"if","locations":[{"start":{"line":1125,"column":16},"end":{"line":1133,"column":32}},{"start":{"line":1125,"column":16},"end":{"line":1133,"column":32}}],"line":1125},"29":{"loc":{"start":{"line":1127,"column":20},"end":{"line":1130,"column":36}},"type":"if","locations":[{"start":{"line":1127,"column":20},"end":{"line":1130,"column":36}},{"start":{"line":1127,"column":20},"end":{"line":1130,"column":36}}],"line":1127},"30":{"loc":{"start":{"line":1127,"column":24},"end":{"line":1129,"column":98}},"type":"binary-expr","locations":[{"start":{"line":1127,"column":25},"end":{"line":1127,"column":76}},{"start":{"line":1128,"column":25},"end":{"line":1128,"column":53}},{"start":{"line":1129,"column":25},"end":{"line":1129,"column":79}},{"start":{"line":1129,"column":83},"end":{"line":1129,"column":97}}],"line":1127},"31":{"loc":{"start":{"line":1132,"column":21},"end":{"line":1133,"column":32}},"type":"if","locations":[{"start":{"line":1132,"column":21},"end":{"line":1133,"column":32}},{"start":{"line":1132,"column":21},"end":{"line":1133,"column":32}}],"line":1132},"32":{"loc":{"start":{"line":1187,"column":19},"end":{"line":1187,"column":33}},"type":"default-arg","locations":[{"start":{"line":1187,"column":29},"end":{"line":1187,"column":33}}],"line":1187},"33":{"loc":{"start":{"line":1216,"column":22},"end":{"line":1216,"column":36}},"type":"default-arg","locations":[{"start":{"line":1216,"column":32},"end":{"line":1216,"column":36}}],"line":1216},"34":{"loc":{"start":{"line":1244,"column":25},"end":{"line":1244,"column":39}},"type":"default-arg","locations":[{"start":{"line":1244,"column":35},"end":{"line":1244,"column":39}}],"line":1244},"35":{"loc":{"start":{"line":1282,"column":4},"end":{"line":1282,"column":18}},"type":"default-arg","locations":[{"start":{"line":1282,"column":14},"end":{"line":1282,"column":18}}],"line":1282},"36":{"loc":{"start":{"line":1288,"column":12},"end":{"line":1292,"column":13}},"type":"if","locations":[{"start":{"line":1288,"column":12},"end":{"line":1292,"column":13}},{"start":{"line":1288,"column":12},"end":{"line":1292,"column":13}}],"line":1288},"37":{"loc":{"start":{"line":1290,"column":20},"end":{"line":1291,"column":72}},"type":"if","locations":[{"start":{"line":1290,"column":20},"end":{"line":1291,"column":72}},{"start":{"line":1290,"column":20},"end":{"line":1291,"column":72}}],"line":1290},"38":{"loc":{"start":{"line":1330,"column":40},"end":{"line":1330,"column":54}},"type":"default-arg","locations":[{"start":{"line":1330,"column":50},"end":{"line":1330,"column":54}}],"line":1330},"39":{"loc":{"start":{"line":1336,"column":12},"end":{"line":1340,"column":13}},"type":"if","locations":[{"start":{"line":1336,"column":12},"end":{"line":1340,"column":13}},{"start":{"line":1336,"column":12},"end":{"line":1340,"column":13}}],"line":1336},"40":{"loc":{"start":{"line":1338,"column":20},"end":{"line":1339,"column":72}},"type":"if","locations":[{"start":{"line":1338,"column":20},"end":{"line":1339,"column":72}},{"start":{"line":1338,"column":20},"end":{"line":1339,"column":72}}],"line":1338},"41":{"loc":{"start":{"line":1370,"column":26},"end":{"line":1370,"column":40}},"type":"default-arg","locations":[{"start":{"line":1370,"column":36},"end":{"line":1370,"column":40}}],"line":1370},"42":{"loc":{"start":{"line":1377,"column":12},"end":{"line":1381,"column":13}},"type":"if","locations":[{"start":{"line":1377,"column":12},"end":{"line":1381,"column":13}},{"start":{"line":1377,"column":12},"end":{"line":1381,"column":13}}],"line":1377},"43":{"loc":{"start":{"line":1379,"column":20},"end":{"line":1380,"column":73}},"type":"if","locations":[{"start":{"line":1379,"column":20},"end":{"line":1380,"column":73}},{"start":{"line":1379,"column":20},"end":{"line":1380,"column":73}}],"line":1379},"44":{"loc":{"start":{"line":1411,"column":28},"end":{"line":1411,"column":42}},"type":"default-arg","locations":[{"start":{"line":1411,"column":38},"end":{"line":1411,"column":42}}],"line":1411},"45":{"loc":{"start":{"line":1418,"column":12},"end":{"line":1422,"column":13}},"type":"if","locations":[{"start":{"line":1418,"column":12},"end":{"line":1422,"column":13}},{"start":{"line":1418,"column":12},"end":{"line":1422,"column":13}}],"line":1418},"46":{"loc":{"start":{"line":1420,"column":20},"end":{"line":1421,"column":73}},"type":"if","locations":[{"start":{"line":1420,"column":20},"end":{"line":1421,"column":73}},{"start":{"line":1420,"column":20},"end":{"line":1421,"column":73}}],"line":1420},"47":{"loc":{"start":{"line":1463,"column":12},"end":{"line":1468,"column":13}},"type":"if","locations":[{"start":{"line":1463,"column":12},"end":{"line":1468,"column":13}},{"start":{"line":1463,"column":12},"end":{"line":1468,"column":13}}],"line":1463},"48":{"loc":{"start":{"line":1466,"column":20},"end":{"line":1467,"column":73}},"type":"if","locations":[{"start":{"line":1466,"column":20},"end":{"line":1467,"column":73}},{"start":{"line":1466,"column":20},"end":{"line":1467,"column":73}}],"line":1466},"49":{"loc":{"start":{"line":1519,"column":33},"end":{"line":1521,"column":36}},"type":"cond-expr","locations":[{"start":{"line":1520,"column":18},"end":{"line":1520,"column":27}},{"start":{"line":1521,"column":18},"end":{"line":1521,"column":36}}],"line":1519},"50":{"loc":{"start":{"line":1523,"column":16},"end":{"line":1538,"column":69}},"type":"if","locations":[{"start":{"line":1523,"column":16},"end":{"line":1538,"column":69}},{"start":{"line":1523,"column":16},"end":{"line":1538,"column":69}}],"line":1523},"51":{"loc":{"start":{"line":1525,"column":21},"end":{"line":1538,"column":69}},"type":"if","locations":[{"start":{"line":1525,"column":21},"end":{"line":1538,"column":69}},{"start":{"line":1525,"column":21},"end":{"line":1538,"column":69}}],"line":1525},"52":{"loc":{"start":{"line":1527,"column":20},"end":{"line":1528,"column":74}},"type":"if","locations":[{"start":{"line":1527,"column":20},"end":{"line":1528,"column":74}},{"start":{"line":1527,"column":20},"end":{"line":1528,"column":74}}],"line":1527},"53":{"loc":{"start":{"line":1530,"column":21},"end":{"line":1538,"column":69}},"type":"if","locations":[{"start":{"line":1530,"column":21},"end":{"line":1538,"column":69}},{"start":{"line":1530,"column":21},"end":{"line":1538,"column":69}}],"line":1530},"54":{"loc":{"start":{"line":1532,"column":21},"end":{"line":1538,"column":69}},"type":"if","locations":[{"start":{"line":1532,"column":21},"end":{"line":1538,"column":69}},{"start":{"line":1532,"column":21},"end":{"line":1538,"column":69}}],"line":1532},"55":{"loc":{"start":{"line":1534,"column":20},"end":{"line":1535,"column":73}},"type":"if","locations":[{"start":{"line":1534,"column":20},"end":{"line":1535,"column":73}},{"start":{"line":1534,"column":20},"end":{"line":1535,"column":73}}],"line":1534},"56":{"loc":{"start":{"line":1580,"column":12},"end":{"line":1593,"column":13}},"type":"if","locations":[{"start":{"line":1580,"column":12},"end":{"line":1593,"column":13}},{"start":{"line":1580,"column":12},"end":{"line":1593,"column":13}}],"line":1580},"57":{"loc":{"start":{"line":1582,"column":20},"end":{"line":1591,"column":47}},"type":"if","locations":[{"start":{"line":1582,"column":20},"end":{"line":1591,"column":47}},{"start":{"line":1582,"column":20},"end":{"line":1591,"column":47}}],"line":1582},"58":{"loc":{"start":{"line":1584,"column":24},"end":{"line":1588,"column":51}},"type":"if","locations":[{"start":{"line":1584,"column":24},"end":{"line":1588,"column":51}},{"start":{"line":1584,"column":24},"end":{"line":1588,"column":51}}],"line":1584},"59":{"loc":{"start":{"line":1584,"column":28},"end":{"line":1587,"column":47}},"type":"binary-expr","locations":[{"start":{"line":1584,"column":29},"end":{"line":1584,"column":80}},{"start":{"line":1585,"column":29},"end":{"line":1585,"column":57}},{"start":{"line":1586,"column":29},"end":{"line":1586,"column":83}},{"start":{"line":1587,"column":32},"end":{"line":1587,"column":46}}],"line":1584},"60":{"loc":{"start":{"line":1590,"column":25},"end":{"line":1591,"column":47}},"type":"if","locations":[{"start":{"line":1590,"column":25},"end":{"line":1591,"column":47}},{"start":{"line":1590,"column":25},"end":{"line":1591,"column":47}}],"line":1590},"61":{"loc":{"start":{"line":1635,"column":12},"end":{"line":1648,"column":13}},"type":"if","locations":[{"start":{"line":1635,"column":12},"end":{"line":1648,"column":13}},{"start":{"line":1635,"column":12},"end":{"line":1648,"column":13}}],"line":1635},"62":{"loc":{"start":{"line":1637,"column":20},"end":{"line":1646,"column":47}},"type":"if","locations":[{"start":{"line":1637,"column":20},"end":{"line":1646,"column":47}},{"start":{"line":1637,"column":20},"end":{"line":1646,"column":47}}],"line":1637},"63":{"loc":{"start":{"line":1639,"column":24},"end":{"line":1643,"column":51}},"type":"if","locations":[{"start":{"line":1639,"column":24},"end":{"line":1643,"column":51}},{"start":{"line":1639,"column":24},"end":{"line":1643,"column":51}}],"line":1639},"64":{"loc":{"start":{"line":1639,"column":28},"end":{"line":1642,"column":47}},"type":"binary-expr","locations":[{"start":{"line":1639,"column":29},"end":{"line":1639,"column":80}},{"start":{"line":1640,"column":29},"end":{"line":1640,"column":57}},{"start":{"line":1641,"column":29},"end":{"line":1641,"column":83}},{"start":{"line":1642,"column":32},"end":{"line":1642,"column":46}}],"line":1639},"65":{"loc":{"start":{"line":1645,"column":25},"end":{"line":1646,"column":47}},"type":"if","locations":[{"start":{"line":1645,"column":25},"end":{"line":1646,"column":47}},{"start":{"line":1645,"column":25},"end":{"line":1646,"column":47}}],"line":1645},"66":{"loc":{"start":{"line":1695,"column":33},"end":{"line":1695,"column":47}},"type":"default-arg","locations":[{"start":{"line":1695,"column":43},"end":{"line":1695,"column":47}}],"line":1695},"67":{"loc":{"start":{"line":1701,"column":12},"end":{"line":1714,"column":13}},"type":"if","locations":[{"start":{"line":1701,"column":12},"end":{"line":1714,"column":13}},{"start":{"line":1701,"column":12},"end":{"line":1714,"column":13}}],"line":1701},"68":{"loc":{"start":{"line":1703,"column":20},"end":{"line":1712,"column":47}},"type":"if","locations":[{"start":{"line":1703,"column":20},"end":{"line":1712,"column":47}},{"start":{"line":1703,"column":20},"end":{"line":1712,"column":47}}],"line":1703},"69":{"loc":{"start":{"line":1705,"column":24},"end":{"line":1709,"column":51}},"type":"if","locations":[{"start":{"line":1705,"column":24},"end":{"line":1709,"column":51}},{"start":{"line":1705,"column":24},"end":{"line":1709,"column":51}}],"line":1705},"70":{"loc":{"start":{"line":1705,"column":28},"end":{"line":1708,"column":47}},"type":"binary-expr","locations":[{"start":{"line":1705,"column":29},"end":{"line":1705,"column":80}},{"start":{"line":1706,"column":29},"end":{"line":1706,"column":57}},{"start":{"line":1707,"column":29},"end":{"line":1707,"column":83}},{"start":{"line":1708,"column":32},"end":{"line":1708,"column":46}}],"line":1705},"71":{"loc":{"start":{"line":1711,"column":25},"end":{"line":1712,"column":47}},"type":"if","locations":[{"start":{"line":1711,"column":25},"end":{"line":1712,"column":47}},{"start":{"line":1711,"column":25},"end":{"line":1712,"column":47}}],"line":1711},"72":{"loc":{"start":{"line":1758,"column":12},"end":{"line":1771,"column":13}},"type":"if","locations":[{"start":{"line":1758,"column":12},"end":{"line":1771,"column":13}},{"start":{"line":1758,"column":12},"end":{"line":1771,"column":13}}],"line":1758},"73":{"loc":{"start":{"line":1760,"column":20},"end":{"line":1769,"column":47}},"type":"if","locations":[{"start":{"line":1760,"column":20},"end":{"line":1769,"column":47}},{"start":{"line":1760,"column":20},"end":{"line":1769,"column":47}}],"line":1760},"74":{"loc":{"start":{"line":1762,"column":24},"end":{"line":1766,"column":51}},"type":"if","locations":[{"start":{"line":1762,"column":24},"end":{"line":1766,"column":51}},{"start":{"line":1762,"column":24},"end":{"line":1766,"column":51}}],"line":1762},"75":{"loc":{"start":{"line":1762,"column":28},"end":{"line":1765,"column":47}},"type":"binary-expr","locations":[{"start":{"line":1762,"column":29},"end":{"line":1762,"column":80}},{"start":{"line":1763,"column":29},"end":{"line":1763,"column":57}},{"start":{"line":1764,"column":29},"end":{"line":1764,"column":83}},{"start":{"line":1765,"column":32},"end":{"line":1765,"column":46}}],"line":1762},"76":{"loc":{"start":{"line":1768,"column":25},"end":{"line":1769,"column":47}},"type":"if","locations":[{"start":{"line":1768,"column":25},"end":{"line":1769,"column":47}},{"start":{"line":1768,"column":25},"end":{"line":1769,"column":47}}],"line":1768},"77":{"loc":{"start":{"line":1810,"column":38},"end":{"line":1810,"column":52}},"type":"default-arg","locations":[{"start":{"line":1810,"column":48},"end":{"line":1810,"column":52}}],"line":1810},"78":{"loc":{"start":{"line":1847,"column":34},"end":{"line":1847,"column":48}},"type":"default-arg","locations":[{"start":{"line":1847,"column":44},"end":{"line":1847,"column":48}}],"line":1847},"79":{"loc":{"start":{"line":1892,"column":41},"end":{"line":1892,"column":55}},"type":"default-arg","locations":[{"start":{"line":1892,"column":51},"end":{"line":1892,"column":55}}],"line":1892},"80":{"loc":{"start":{"line":1936,"column":23},"end":{"line":1936,"column":37}},"type":"default-arg","locations":[{"start":{"line":1936,"column":33},"end":{"line":1936,"column":37}}],"line":1936},"81":{"loc":{"start":{"line":1943,"column":12},"end":{"line":1946,"column":13}},"type":"if","locations":[{"start":{"line":1943,"column":12},"end":{"line":1946,"column":13}},{"start":{"line":1943,"column":12},"end":{"line":1946,"column":13}}],"line":1943},"82":{"loc":{"start":{"line":2002,"column":38},"end":{"line":2002,"column":52}},"type":"default-arg","locations":[{"start":{"line":2002,"column":48},"end":{"line":2002,"column":52}}],"line":2002},"83":{"loc":{"start":{"line":2008,"column":12},"end":{"line":2011,"column":13}},"type":"if","locations":[{"start":{"line":2008,"column":12},"end":{"line":2011,"column":13}},{"start":{"line":2008,"column":12},"end":{"line":2011,"column":13}}],"line":2008},"84":{"loc":{"start":{"line":2056,"column":25},"end":{"line":2056,"column":39}},"type":"default-arg","locations":[{"start":{"line":2056,"column":35},"end":{"line":2056,"column":39}}],"line":2056},"85":{"loc":{"start":{"line":2063,"column":12},"end":{"line":2067,"column":13}},"type":"if","locations":[{"start":{"line":2063,"column":12},"end":{"line":2067,"column":13}},{"start":{"line":2063,"column":12},"end":{"line":2067,"column":13}}],"line":2063},"86":{"loc":{"start":{"line":2122,"column":40},"end":{"line":2122,"column":54}},"type":"default-arg","locations":[{"start":{"line":2122,"column":50},"end":{"line":2122,"column":54}}],"line":2122},"87":{"loc":{"start":{"line":2128,"column":12},"end":{"line":2132,"column":13}},"type":"if","locations":[{"start":{"line":2128,"column":12},"end":{"line":2132,"column":13}},{"start":{"line":2128,"column":12},"end":{"line":2132,"column":13}}],"line":2128}},"s":{"0":1,"1":1,"2":1,"3":1,"4":160,"5":160,"6":160,"7":160,"8":160,"9":32,"10":92,"11":0,"12":92,"13":0,"14":92,"15":160,"16":160,"17":160,"18":160,"19":498,"20":30,"21":30,"22":36,"23":36,"24":7,"25":7,"26":30,"27":23,"28":23,"29":23,"30":7,"31":468,"32":468,"33":468,"34":160,"35":26,"36":26,"37":26,"38":26,"39":0,"40":0,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":32,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":3,"82":3,"83":3,"84":3,"85":3,"86":3,"87":3,"88":3,"89":2,"90":2,"91":2,"92":2,"93":2,"94":2,"95":2,"96":2,"97":3,"98":3,"99":3,"100":3,"101":3,"102":3,"103":3,"104":3,"105":2,"106":2,"107":2,"108":2,"109":2,"110":2,"111":2,"112":2,"113":4,"114":4,"115":4,"116":6,"117":2,"118":2,"119":2,"120":4,"121":2,"122":0,"123":4,"124":2,"125":2,"126":2,"127":2,"128":3,"129":1,"130":1,"131":1,"132":2,"133":1,"134":0,"135":2,"136":1,"137":21,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":5,"145":2,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":5,"154":3,"155":1,"156":1,"157":5,"158":5,"159":5,"160":5,"161":5,"162":5,"163":25,"164":9,"165":5,"166":5,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":5,"174":2,"175":1,"176":1,"177":2,"178":2,"179":2,"180":2,"181":2,"182":2,"183":6,"184":4,"185":2,"186":2,"187":8,"188":8,"189":8,"190":8,"191":12,"192":3,"193":9,"194":3,"195":3,"196":3,"197":6,"198":3,"199":3,"200":3,"201":3,"202":3,"203":0,"204":8,"205":8,"206":3,"207":3,"208":3,"209":3,"210":5,"211":1,"212":1,"213":1,"214":4,"215":1,"216":1,"217":3,"218":3,"219":3,"220":3,"221":3,"222":5,"223":1,"224":1,"225":1,"226":4,"227":1,"228":1,"229":3,"230":3,"231":3,"232":3,"233":3,"234":3,"235":5,"236":1,"237":1,"238":1,"239":4,"240":1,"241":1,"242":3,"243":3,"244":3,"245":3,"246":3,"247":5,"248":1,"249":1,"250":1,"251":4,"252":1,"253":1,"254":3,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":2,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":2,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":2,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":2,"290":1,"291":1,"292":1},"f":{"0":160,"1":160,"2":26,"3":0,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":0,"13":32,"14":0,"15":0,"16":3,"17":3,"18":2,"19":2,"20":3,"21":3,"22":2,"23":2,"24":4,"25":4,"26":2,"27":2,"28":2,"29":1,"30":21,"31":1,"32":1,"33":1,"34":1,"35":1,"36":5,"37":5,"38":1,"39":1,"40":2,"41":2,"42":8,"43":8,"44":3,"45":3,"46":3,"47":3,"48":3,"49":3,"50":3,"51":3,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1},"b":{"0":[102],"1":[32,128],"2":[0,92],"3":[0,92],"4":[160,0],"5":[30,468],"6":[7,29],"7":[36,0,36,36],"8":[23,7],"9":[0],"10":[0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[3],"17":[3],"18":[2],"19":[2],"20":[3],"21":[3],"22":[2],"23":[2],"24":[2,4],"25":[2,0],"26":[2,0,2,2],"27":[2,2],"28":[1,2],"29":[1,0],"30":[1,0,1,1],"31":[1,1],"32":[1],"33":[21],"34":[1],"35":[1],"36":[1,0],"37":[2,3],"38":[1],"39":[1,0],"40":[3,2],"41":[5],"42":[5,0],"43":[9,16],"44":[1],"45":[1,0],"46":[2,3],"47":[2,0],"48":[4,2],"49":[0,8],"50":[3,9],"51":[3,6],"52":[3,0],"53":[3,3],"54":[3,0],"55":[3,0],"56":[3,0],"57":[1,4],"58":[1,0],"59":[1,0,1,1],"60":[1,3],"61":[3,0],"62":[1,4],"63":[1,0],"64":[1,0,1,1],"65":[1,3],"66":[3],"67":[3,0],"68":[1,4],"69":[1,0],"70":[1,0,1,1],"71":[1,3],"72":[3,0],"73":[1,4],"74":[1,0],"75":[1,0,1,1],"76":[1,3],"77":[1],"78":[1],"79":[1],"80":[1],"81":[1,0],"82":[1],"83":[1,0],"84":[1],"85":[1,0],"86":[1],"87":[1,0]},"inputSourceMap":{"version":3,"file":"C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/map/KoconutMap.ts","sources":["C:/Users/ayten/Desktop/WorkSpace/GitHub/ApexCaptain/Koconut/src/components/container/map/KoconutMap.ts"],"names":[],"mappings":"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","sourcesContent":["`use strict`;\r\n\r\nimport {\r\n  /* Tool */\r\n  KoconutPrimitive,\r\n  KoconutOpener,\r\n  KoconutTypeChecker,\r\n\r\n  /* Base */\r\n  Entry,\r\n  Pair,\r\n  KoconutPair,\r\n  KoconutEntry,\r\n\r\n  /* Container */\r\n  KoconutIterable,\r\n  KoconutArray,\r\n  KoconutSet,\r\n  KoconutBoolean,\r\n\r\n  /* Exception */\r\n  KoconutNoSuchElementException,\r\n  KoconutInvalidArgumentException,\r\n\r\n  /* Protocol */\r\n  KoconutComparable,\r\n\r\n  /* Callbacks */\r\n  Generator,\r\n  Selector,\r\n  Comparator,\r\n  Action,\r\n  Predicator,\r\n  Transformer,\r\n} from '../../../module';\r\n\r\nexport class KoconutMap<KeyType, ValueType> extends KoconutIterable<\r\n  [KeyType, ValueType],\r\n  Entry<KeyType, ValueType>,\r\n  Map<KeyType, ValueType>,\r\n  Set<Entry<KeyType, ValueType>>\r\n> {\r\n  protected async validate(data: Map<KeyType, ValueType> | null) {\r\n    if (data != null) {\r\n      this.combinedDataWrapper = new Set();\r\n      for (const [key, value] of data.entries()) {\r\n        if (KoconutTypeChecker.checkIsEquatable(key)) {\r\n          let isConflict = false;\r\n          for (const eachPrevEquatableKey of this.mKeys) {\r\n            const equalityResult = key.equalsTo(eachPrevEquatableKey);\r\n            if (\r\n              (equalityResult instanceof KoconutPrimitive &&\r\n                (await equalityResult.yield())) ||\r\n              (!(equalityResult instanceof KoconutPrimitive) && equalityResult)\r\n            ) {\r\n              isConflict = true;\r\n              break;\r\n            }\r\n          }\r\n          if (!isConflict) {\r\n            this.mKeys.add(key);\r\n            this.combinedDataWrapper.add(new Entry(key, value));\r\n            this.mValues.push(value);\r\n          } else this.data?.delete(key);\r\n        } else {\r\n          this.mKeys.add(key);\r\n          this.combinedDataWrapper.add(new Entry(key, value));\r\n          this.mValues.push(value);\r\n        }\r\n      }\r\n      this.mSize = data.size;\r\n    }\r\n  }\r\n\r\n  private static fromIterable<KeyType, ValueType>(\r\n    iterable: KoconutIterable<\r\n      [KeyType, ValueType],\r\n      Entry<KeyType, ValueType>,\r\n      Map<KeyType, ValueType>,\r\n      Set<Entry<KeyType, ValueType>>\r\n    >,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>(\r\n      iterable['data'],\r\n    );\r\n    koconutToReturn.processor = iterable['processor'];\r\n    koconutToReturn.prevYieldable = iterable['prevYieldable'];\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Koconut Primitive\r\n  /**\r\n   * Creates a new instance from ```iterable``` object.\r\n   * Inner data type could be an ```Array``` of two values([```Key```, ```Value```]), a Pair or an Entry.\r\n   *\r\n   * @param {Iterable<[KeyType, ValueType]| Entry<KeyType, ValueType>| Pair<KeyType, ValueType>> | null} map An map-like ```iterable``` object to convert to a {@link KoconutMap}.\r\n   *\r\n   * @since 1.0.11\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const stringAndNumberMap = new Map([\r\n   *  [\"a\", 1], [\"b\", 2], [\"c\", 3]\r\n   * ])\r\n   * const stringAndNumber1 = new KoconutMap(stringAndNumberMap)\r\n   * // ↑ This is a Koconut string - number paired map.\r\n   *\r\n   * const stringAndNumber2 = new KoconutMap([\r\n   *  [\"a\", 1], new Pair(\"b\", 2), new Entry(\"c\", 3)\r\n   * ])\r\n   * // ↑ This is a Koconut string - number paired map, too.\r\n   *\r\n   * const emptyStringAndNumberMap = new KoconutMap<string, number>()\r\n   * // ↑ This is an empty Koconut string - number paired map.\r\n   * ```\r\n   */\r\n  constructor(\r\n    map: Iterable<\r\n      | [KeyType, ValueType]\r\n      | Entry<KeyType, ValueType>\r\n      | Pair<KeyType, ValueType>\r\n    > | null = null,\r\n  ) {\r\n    super();\r\n    const mapObject = new Map<KeyType, ValueType>();\r\n    if (map != null) {\r\n      for (const eachEntry of map) {\r\n        if (eachEntry instanceof Entry)\r\n          mapObject.set(eachEntry.key, eachEntry.value);\r\n        else if (eachEntry instanceof Pair)\r\n          mapObject.set(eachEntry.first, eachEntry.second);\r\n        else mapObject.set(eachEntry[0], eachEntry[1]);\r\n      }\r\n    }\r\n    this.data = mapObject;\r\n  }\r\n\r\n  /**\r\n   * Processes all the chained object and returns original {@link KoconutMap} instance.\r\n   *\r\n   * @return {Promise<KoconutMap<KeyType, ValueType>>}\r\n   *\r\n   * @category Processor\r\n   *\r\n   * @since 1.0.15\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = await KoconutArray\r\n   *         .of(1,2,3,4,5)\r\n   *         .associateWith(eachNumber => eachNumber * 2)\r\n   *         .retrieve()\r\n   * console.log(koconutMap)\r\n   * // ↑ KoconutMap {\r\n   * //   isValidated: true,\r\n   * //   data: Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 },\r\n   * //   combinedDataWrapper: Set {\r\n   * //     Entry { keyElement: 1, valueElement: 2 },\r\n   * //     Entry { keyElement: 2, valueElement: 4 },\r\n   * //     Entry { keyElement: 3, valueElement: 6 },\r\n   * //     Entry { keyElement: 4, valueElement: 8 },\r\n   * //     Entry { keyElement: 5, valueElement: 10 }\r\n   * //   },\r\n   * //   mSize: 5,\r\n   * //   mKeys: Set { 1, 2, 3, 4, 5 },\r\n   * //   mValues: [ 2, 4, 6, 8, 10 ]\r\n   * // }\r\n   * ```\r\n   */\r\n  async retrieve(): Promise<KoconutMap<KeyType, ValueType>> {\r\n    await super.retrieve();\r\n    return this;\r\n  }\r\n\r\n  // Properties\r\n  private mKeys = new Set<KeyType>();\r\n  private mValues = new Array<ValueType>();\r\n\r\n  // Accessor\r\n  /**\r\n   * Returns a {@link KoconutSet} contains every {@link Entry}.\r\n   *\r\n   * @return {KoconutSet<Entry<KeyType, ValueType>>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const entries = await koconutMap\r\n   *                   .entries\r\n   *                   .yield()\r\n   * console.log(entries)\r\n   * // ↑ Set {\r\n   * //        Entry { keyElement: 1, valueElement: 2 },\r\n   * //        Entry { keyElement: 2, valueElement: 4 },\r\n   * //        Entry { keyElement: 3, valueElement: 6 },\r\n   * //        Entry { keyElement: 4, valueElement: 8 },\r\n   * //        Entry { keyElement: 5, valueElement: 10 }\r\n   * //       }\r\n   * ```\r\n   */\r\n  get entries(): KoconutSet<Entry<KeyType, ValueType>> {\r\n    const koconutToReturn = new KoconutSet<Entry<KeyType, ValueType>>();\r\n    (koconutToReturn as any as KoconutOpener<Set<Entry<KeyType, ValueType>>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => this.combinedDataWrapper!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutSet} contains all keys.\r\n   *\r\n   * @return {KoconutSet<KeyType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const keys = await koconutMap\r\n   *                   .keys\r\n   *                   .yield()\r\n   * console.log(keys)\r\n   * // ↑ Set { 1, 2, 3, 4, 5 }\r\n   * ```\r\n   */\r\n  get keys(): KoconutSet<KeyType> {\r\n    const koconutToReturn = new KoconutSet<KeyType>();\r\n    (koconutToReturn as any as KoconutOpener<Set<KeyType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => this.mKeys);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of {@link Entry} in this {@link KoconutMap}.\r\n   *\r\n   * @return {KoconutPrimitive<number>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const size = await koconutMap\r\n   *                   .size\r\n   *                   .yield()\r\n   * console.log(size)\r\n   * // ↑ 5\r\n   * ```\r\n   */\r\n  get size(): KoconutPrimitive<number> {\r\n    const koconutToReturn = new KoconutPrimitive<number>();\r\n    (koconutToReturn as any as KoconutOpener<number>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => this.mSize);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutArray} contains all values in this {@link KoconutMap}.\r\n   *\r\n   * @return {KoconutArray<ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const values = await koconutMap\r\n   *                   .values\r\n   *                   .yield()\r\n   * console.log(values)\r\n   * // ↑ [ 2, 4, 6, 8, 10 ]\r\n   * ```\r\n   */\r\n  get values(): KoconutArray<ValueType> {\r\n    const koconutToReturn = new KoconutArray<ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Array<ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => this.mValues);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Creator\r\n  /**\r\n   * Creates a new instance from ```iterable``` object.\r\n   * Inner data type could be an ```Array``` of two values([```Key```, ```Value```]), a Pair or an Entry.\r\n   *\r\n   * @param {Iterable<[KeyType, ValueType]| Entry<KeyType, ValueType>| Pair<KeyType, ValueType>> | null} source An map-like ```iterable``` object to convert to a {@link KoconutMap}.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.11\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const stringAndNumberMap = new Map([\r\n   *  [\"a\", 1], [\"b\", 2], [\"c\", 3]\r\n   * ])\r\n   * const stringAndNumber1 = KoconutMap.from(stringAndNumberMap)\r\n   * // ↑ This is a Koconut string - number paired map.\r\n   *\r\n   * const stringAndNumber2 = KoconutMap.from([\r\n   *  [\"a\", 1], new Pair(\"b\", 2), new Entry(\"c\", 3)\r\n   * ])\r\n   * // ↑ This is a Koconut string - number paired map, too.\r\n   *\r\n   * const emptyStringAndNumberMap = KoconutMap.from<string, number>()\r\n   * // ↑ This is an empty Koconut string - number paired map.\r\n   * ```\r\n   */\r\n  static from<KeyType, ValueType>(\r\n    source: Iterable<\r\n      | [KeyType, ValueType]\r\n      | Entry<KeyType, ValueType>\r\n      | Pair<KeyType, ValueType>\r\n    > | null = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    return new KoconutMap(source);\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance from variable number of arguments.\r\n   * Inner data type could be an ```Array``` of two values([```Key```, ```Value```]), a Pair or an Entry.\r\n   *\r\n   * @param {([KeyType, ValueType]| Entry<KeyType, ValueType>| Pair<KeyType, ValueType>)[]} data A set of elements to include in the new {@link KoconutMap} object.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.11\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const stringAndNumber = KoconutMap.of(\r\n   *  [\"a\", 1], new Pair(\"b\", 2), new Entry(\"c\", 3)\r\n   * )\r\n   * // ↑ This is a Koconut string - number paired map.\r\n   *\r\n   * const emptyStringAndNumberMap = KoconutMap.of<string, number>()\r\n   * // ↑ This is an empty Koconut string - number paired map.\r\n   * ```\r\n   */\r\n  static of<KeyType, ValueType>(\r\n    ...data: (\r\n      | [KeyType, ValueType]\r\n      | Entry<KeyType, ValueType>\r\n      | Pair<KeyType, ValueType>\r\n    )[]\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    return new KoconutMap(data);\r\n  }\r\n\r\n  /**\r\n   * Creates a new instance with given ```count``` as number of entries. ```count``` cannot be negative number.\r\n   * Each entry is provided from ```generator``` with given ordered index.\r\n   *\r\n   * @param {number} count Number of values.\r\n   *\r\n   * @param {Generator<[KeyType, ValueType]| Pair<KeyType, ValueType>| KoconutPair<KeyType, ValueType>| Entry<KeyType, ValueType>| KoconutEntry<KeyType, ValueType>>} generator A callback function that accepts an argument. The method calls the ```action``` one time for each ordered index.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```generator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @throws {@link KoconutInvalidArgumentException}\r\n   * -- When ```count``` is less than 0.\r\n   *\r\n   * @since 1.0.14\r\n   *\r\n   * @category Creator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const numberKeyStringValueMap = await KoconutMap.generate(\r\n   *                                         5, i => [i, i.toString()]\r\n   *                                                 // ↑ Also can be\r\n   *                                                 //   new Pair(i, i.toString())\r\n   *                                                 //   Pair.from([i, i.toString()])\r\n   *                                                 //   new KoconutPair(i, i.toString())\r\n   *                                                 //   new Entry(i, i.toString())\r\n   *                                                 //   Entry.from([i, i.toString()])\r\n   *                                                 //   new KoconutEntry(i, i.toString())\r\n   *                                     )\r\n   *                                     .yield()\r\n   * console.log(numberKeyStringValueMap)\r\n   * // ↑ Map { 0 => '0', 1 => '1', 2 => '2', 3 => '3', 4 => '4' }\r\n   * ```\r\n   */\r\n  static generate<KeyType, ValueType>(\r\n    count: number,\r\n    generator: Generator<\r\n      | [KeyType, ValueType]\r\n      | Pair<KeyType, ValueType>\r\n      | KoconutPair<KeyType, ValueType>\r\n      | Entry<KeyType, ValueType>\r\n      | KoconutEntry<KeyType, ValueType>\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    if (count < 0)\r\n      throw new KoconutInvalidArgumentException(\r\n        `Count must be larger than 0. Given value : ${count}`,\r\n      );\r\n    generator = generator.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (\r\n      koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>\r\n    ).setProcessor(async () => {\r\n      const processedMap = new Map<KeyType, ValueType>();\r\n      for (let eachIndex = 0; eachIndex < count; eachIndex++) {\r\n        const generatedValue = await generator(eachIndex);\r\n        if (generatedValue instanceof Pair)\r\n          processedMap.set(generatedValue.first, generatedValue.second);\r\n        else if (generatedValue instanceof KoconutPair) {\r\n          const eachPair = await generatedValue.yield();\r\n          processedMap.set(eachPair.first, eachPair.second);\r\n        } else if (generatedValue instanceof Entry)\r\n          processedMap.set(generatedValue.key, generatedValue.value);\r\n        else if (generatedValue instanceof KoconutEntry) {\r\n          const eachEntry = await generatedValue.yield();\r\n          processedMap.set(eachEntry.key, eachEntry.value);\r\n        } else processedMap.set(generatedValue[0], generatedValue[1]);\r\n      }\r\n      return processedMap;\r\n    });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Calculator\r\n  /**\r\n   * Returns the first entry yielding the largest value of the given function or\r\n   * throws {@link KoconutNoSuchElementException} if there are no entries.\r\n   *\r\n   * @param {Selector<Entry<KeyType, ValueType>,number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutEntry<KeyType, ValueType>}\r\n   *\r\n   * @throws {@link KoconutNoSuchElementException}\r\n   *\r\n   * @category Calculator\r\n   *\r\n   * @since 1.0.10\r\n   * @deprecated Use {@link maxByOrNull} instead.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // Case 1 -- KoconutArray\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const largestNumberOfArray = await koconutArray\r\n   *                               .maxBy(eachNumber => eachNumber)\r\n   *                               .yield()\r\n   * console.log(largestNumberOfArray)\r\n   * // ↑ 5\r\n   *\r\n   * try {\r\n   *   await koconutArray\r\n   *           .filter(eachNumber => eachNumber > 10)\r\n   *           .maxBy(eachNumber => eachNumber)\r\n   *           .yield()\r\n   * } catch(error) {\r\n   *   console.log(error.name)\r\n   *   // ↑ Koconut No Such Element Exception\r\n   *   // i.e. -- Array is filtered.\r\n   *   // No element in 1 to 5 is greater than 10.\r\n   * }\r\n   *\r\n   * // Case 2 -- KoconutSet\r\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\r\n   *\r\n   * const longestStringOfSet = await koconutSet\r\n   *                               .maxBy(eachString => eachString.length)\r\n   *                               .yield()\r\n   * console.log(longestStringOfSet)\r\n   * // ↑ abc\r\n   *\r\n   * // Case 3 -- KoconutMap\r\n   * const koconutMap = KoconutArray.of(1, 12, 123)\r\n   *                   .associateWith(eachNumber => eachNumber.toString())\r\n   *\r\n   * const longestDigitsEntryOfMap = await koconutMap\r\n   *                                       .maxBy(eachEntry => eachEntry.value.length)\r\n   *                                       .yield()\r\n   * console.log(longestDigitsEntryOfMap)\r\n   * // ↑ Entry { keyElement: 123, valueElement: '123' }\r\n   *\r\n   * // Case 4 -- You can also do it asynchronously\r\n   * const koconutArray2 = KoconutArray.of(19,27,32)\r\n   *\r\n   * const largestNumberOfArray2 = await koconutArray2\r\n   *                                   .maxBy(async eachNumber => eachNumber)\r\n   *                                   .yield()\r\n   * console.log(largestNumberOfArray2)\r\n   * // ↑ 32\r\n   *\r\n   * const largest1sDigitNumberOfArray2 = await koconutArray2\r\n   *                                       .maxBy(eachNumber => new Promise(resolve => {\r\n   *                                           resolve(eachNumber % 10)\r\n   *                                       }))\r\n   *                                       .yield()\r\n   * console.log(largest1sDigitNumberOfArray2)\r\n   * // ↑ 19\r\n   * ```\r\n   */\r\n  maxBy(\r\n    selector: Selector<\r\n      Entry<KeyType, ValueType>,\r\n      number | string | KoconutComparable\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutEntry<KeyType, ValueType> {\r\n    const fromSuper = super.maxBy(selector, thisArg);\r\n    const koconutToReturn = new KoconutEntry<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Entry<KeyType, ValueType>>)\r\n      .setPrevYieldable(fromSuper['prevYieldable']!)\r\n      .setProcessor(fromSuper['processor']!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the first entry yielding the largest value of the given function or null if there are no entries.\r\n   *\r\n   * @param {Selector<Entry<KeyType, ValueType>, number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutEntry<KeyType, ValueType>}\r\n   *\r\n   * @category Calculator\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // Case 1 -- KoconutArray\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const largestNumberOfArray = await koconutArray\r\n   *                               .maxByOrNull(eachNumber => eachNumber)\r\n   *                               .yield()\r\n   * console.log(largestNumberOfArray)\r\n   * // ↑ 5\r\n   *\r\n   *\r\n   * const largestNumberOfEmptyArray = await koconutArray\r\n   *                                 .filter(eachNumber => eachNumber > 10)\r\n   *                                 .maxByOrNull(eachNumber => eachNumber)\r\n   *                                 .yield()\r\n   * console.log(largestNumberOfEmptyArray)\r\n   * // ↑ null\r\n   *\r\n   * // Case 2 -- KoconutSet\r\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\r\n   *\r\n   * const longestStringOfSet = await koconutSet\r\n   *                               .maxByOrNull(eachString => eachString.length)\r\n   *                               .yield()\r\n   * console.log(longestStringOfSet)\r\n   * // ↑ abc\r\n   *\r\n   * // Case 3 -- KoconutMap\r\n   * const koconutMap = KoconutArray.of(1, 12, 123)\r\n   *                   .associateWith(eachNumber => eachNumber.toString())\r\n   *\r\n   * const longestDigitsEntryOfMap = await koconutMap\r\n   *                                       .maxByOrNull(eachEntry => eachEntry.value.length)\r\n   *                                       .yield()\r\n   * console.log(longestDigitsEntryOfMap)\r\n   * // ↑ Entry { keyElement: 123, valueElement: '123' }\r\n   *\r\n   * // Case 4 -- You can also do it asynchronously\r\n   * const koconutArray2 = KoconutArray.of(19,27,32)\r\n   *\r\n   * const largestNumberOfArray2 = await koconutArray2\r\n   *                                   .maxByOrNull(async eachNumber => eachNumber)\r\n   *                                   .yield()\r\n   * console.log(largestNumberOfArray2)\r\n   * // ↑ 32\r\n   *\r\n   * const largest1sDigitNumberOfArray2 = await koconutArray2\r\n   *                                       .maxByOrNull(eachNumber => new Promise(resolve => {\r\n   *                                           resolve(eachNumber % 10)\r\n   *                                       }))\r\n   *                                       .yield()\r\n   * console.log(largest1sDigitNumberOfArray2)\r\n   * // ↑ 19\r\n   * ```\r\n   */\r\n  maxByOrNull(\r\n    selector: Selector<\r\n      Entry<KeyType, ValueType>,\r\n      number | string | KoconutComparable\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutEntry<KeyType, ValueType> {\r\n    const fromSuper = super.maxByOrNull(selector, thisArg);\r\n    const koconutToReturn = new KoconutEntry<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Entry<KeyType, ValueType> | null>)\r\n      .setPrevYieldable(fromSuper['prevYieldable']!)\r\n      .setProcessor(fromSuper['processor']!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the first element having the largest value according to the provided ```comparator``` or throws {@link KoconutNoSuchElementException}\r\n   * if elements are empty.\r\n   *\r\n   * @param {Comparator<Entry<KeyType, ValueType>>} comparator A callback function that accepts two arguments. The method calls the ```comparator``` to compare two selected values.\r\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutEntry<KeyType, ValueType>}\r\n   *\r\n   * @throws {@link KoconutNoSuchElementException}\r\n   *\r\n   * @category Calculator\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // Case 1 -- KoconutArray\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const largestNumberOfArray = await koconutArray\r\n   *                                   .maxWith((front, rear) => front - rear)\r\n   *                                   .yield()\r\n   * console.log(largestNumberOfArray)\r\n   * // ↑ 5\r\n   *\r\n   * try {\r\n   *   await koconutArray\r\n   *           .filter(eachNumber => eachNumber > 10)\r\n   *           .maxWith((front, rear) => front - rear)\r\n   *           .yield()\r\n   * } catch(error) {\r\n   *   console.log(error.name)\r\n   *   // ↑ Koconut No Such Element Exception\r\n   *   // i.e. -- Array is filtered.\r\n   *   // No element in 1 to 5 is greater than 10.\r\n   * }\r\n   *\r\n   * // Case 2 -- KoconutSet\r\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\", \"abcd\")\r\n   *\r\n   * const longestStringLengthOfSet = await koconutSet\r\n   *                                       .maxWith((front, rear) => front.length - rear.length)\r\n   *                                       .yield()\r\n   * console.log(longestStringLengthOfSet)\r\n   * // ↑ abcd\r\n   *\r\n   * // Case 3\r\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\r\n   *                   .associate(eachString => [eachString.length, eachString])\r\n   *\r\n   * const longestStringLengthEntryOfMap = await koconutMap\r\n   *                                   .maxWith((front, rear) => front.key - rear.key)\r\n   *                                   .yield()\r\n   * console.log(longestStringLengthEntryOfMap)\r\n   * // ↑ Entry { keyElement: 3, valueElement: 'abc' }\r\n   *\r\n   * // Case 4 -- You can also do it asynchronously\r\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\r\n   *\r\n   * const largestNumberOfArray2 = await koconutArray2\r\n   *                     .maxWith(async (front, rear) => front - rear)\r\n   *                     .yield()\r\n   * console.log(largestNumberOfArray2)\r\n   * // ↑ 51\r\n   *\r\n   * const largest1sDigitNumberOfArray2 = await koconutArray2\r\n   *                       .maxWith((front, rear) => new Promise(resolve => {\r\n   *                           resolve(front % 10 - rear % 10)\r\n   *                       }))\r\n   *                       .yield()\r\n   * console.log(largest1sDigitNumberOfArray2)\r\n   * // ↑ 45\r\n   * ```\r\n   */\r\n  maxWith(\r\n    comparator: Comparator<Entry<KeyType, ValueType>>,\r\n    thisArg: any = null,\r\n  ): KoconutEntry<KeyType, ValueType> {\r\n    const fromSuper = super.maxWith(comparator, thisArg);\r\n    const koconutToReturn = new KoconutEntry<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Entry<KeyType, ValueType>>)\r\n      .setPrevYieldable(fromSuper['prevYieldable']!)\r\n      .setProcessor(fromSuper['processor']!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the first element having the largest value according to the provided ```comparator``` or null\r\n   * if elements are empty.\r\n   *\r\n   * @param {Comparator<Entry<KeyType, ValueType>>} comparator A callback function that accepts two arguments. The method calls the ```comparator``` to compare two selected values.\r\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutEntry<KeyType, ValueType>}\r\n   *\r\n   * @category Calculator\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // Case 1 -- KoconutArray\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const largestNumberOfArray = await koconutArray\r\n   *                                   .maxWithOrNull((front, rear) => front - rear)\r\n   *                                   .yield()\r\n   * console.log(largestNumberOfArray)\r\n   * // ↑ 5\r\n   *\r\n   * const largestNumberOfEmptyArray = await koconutArray\r\n   *                                  .filter(eachNumber => eachNumber > 10)\r\n   *                                  .maxWithOrNull((front, rear) => front - rear)\r\n   *                                  .yield()\r\n   * console.log(largestNumberOfEmptyArray)\r\n   * // ↑ null\r\n   *\r\n   * // Case 2 -- KoconutSet\r\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\", \"abcd\")\r\n   *\r\n   * const longestStringLengthOfSet = await koconutSet\r\n   *                                       .maxWithOrNull((front, rear) => front.length - rear.length)\r\n   *                                       .yield()\r\n   * console.log(longestStringLengthOfSet)\r\n   * // ↑ abcd\r\n   *\r\n   * // Case 3\r\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\r\n   *                   .associate(eachString => [eachString.length, eachString])\r\n   *\r\n   * const longestStringLengthEntryOfMap = await koconutMap\r\n   *                                   .maxWithOrNull((front, rear) => front.key - rear.key)\r\n   *                                   .yield()\r\n   * console.log(longestStringLengthEntryOfMap)\r\n   * // ↑ Entry { keyElement: 3, valueElement: 'abc' }\r\n   *\r\n   * // Case 4 -- You can also do it asynchronously\r\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\r\n   *\r\n   * const largestNumberOfArray2 = await koconutArray2\r\n   *                     .maxWithOrNull(async (front, rear) => front - rear)\r\n   *                     .yield()\r\n   * console.log(largestNumberOfArray2)\r\n   * // ↑ 51\r\n   *\r\n   * const largest1sDigitNumberOfArray2 = await koconutArray2\r\n   *                       .maxWithOrNull((front, rear) => new Promise(resolve => {\r\n   *                           resolve(front % 10 - rear % 10)\r\n   *                       }))\r\n   *                       .yield()\r\n   * console.log(largest1sDigitNumberOfArray2)\r\n   * // ↑ 45\r\n   * ```\r\n   */\r\n  maxWithOrNull(\r\n    comparator: Comparator<Entry<KeyType, ValueType>>,\r\n    thisArg: any = null,\r\n  ): KoconutEntry<KeyType, ValueType> {\r\n    const fromSuper = super.maxWithOrNull(comparator, thisArg);\r\n    const koconutToReturn = new KoconutEntry<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Entry<KeyType, ValueType> | null>)\r\n      .setPrevYieldable(fromSuper['prevYieldable']!)\r\n      .setProcessor(fromSuper['processor']!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the first entry yielding the smallest value of the given function or\r\n   * throws {@link KoconutNoSuchElementException} if there are no entries.\r\n   *\r\n   * @param {Selector<Entry<KeyType, ValueType>,number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutEntry<KeyType, ValueType>}\r\n   *\r\n   * @throws {@link KoconutNoSuchElementException}\r\n   *\r\n   * @category Calculator\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @deprecated Use {@link minByOrNull} instead.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // Case 1 -- KoconutArray\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const smallestNumberOfArray = await koconutArray\r\n   *                           .minBy(eachNumber => eachNumber)\r\n   *                           .yield()\r\n   * console.log(smallestNumberOfArray)\r\n   * // ↑ 1\r\n   *\r\n   * try {\r\n   * await koconutArray\r\n   *       .filter(eachNumber => eachNumber > 10)\r\n   *       .minBy(eachNumber => eachNumber)\r\n   *       .yield()\r\n   * } catch(error) {\r\n   *   console.log(error.name)\r\n   *   // ↑ Koconut No Such Element Exception\r\n   *   // i.e. -- Array is filtered.\r\n   *   // No element in 1 to 5 is greater than 10.\r\n   * }\r\n   *\r\n   * // Case 2 -- KoconutSet\r\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\r\n   *\r\n   * const shortestStringOfSet = await koconutSet\r\n   *                           .minBy(eachString => eachString.length)\r\n   *                           .yield()\r\n   * console.log(shortestStringOfSet)\r\n   * // ↑ a\r\n   *\r\n   * // Case 3 -- KoconutMap\r\n   * const koconutMap = KoconutArray.of(1, 12, 123)\r\n   *               .associateWith(eachNumber => eachNumber.toString())\r\n   *\r\n   * const shortestDigitsEntryOfMap = await koconutMap\r\n   *                                   .minBy(eachEntry => eachEntry.value.length)\r\n   *                                   .yield()\r\n   * console.log(shortestDigitsEntryOfMap)\r\n   * // ↑ Entry { keyElement: 1, valueElement: '1' }\r\n   *\r\n   * // Case 4 -- You can also do it asynchronously\r\n   * const koconutArray2 = KoconutArray.of(19,27,32)\r\n   *\r\n   * const smallestNumberOfArray2 = await koconutArray2\r\n   *                               .minBy(async eachNumber => eachNumber)\r\n   *                               .yield()\r\n   * console.log(smallestNumberOfArray2)\r\n   * // ↑ 19\r\n   *\r\n   * const smallest1sDigitNumberOfArray2 = await koconutArray2\r\n   *                                   .minBy(eachNumber => new Promise(resolve => {\r\n   *                                       resolve(eachNumber % 10)\r\n   *                                   }))\r\n   *                                   .yield()\r\n   * console.log(smallest1sDigitNumberOfArray2)\r\n   * // ↑ 32\r\n   * ```\r\n   */\r\n  minBy(\r\n    selector: Selector<\r\n      Entry<KeyType, ValueType>,\r\n      number | string | KoconutComparable\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutEntry<KeyType, ValueType> {\r\n    const fromSuper = super.minBy(selector, thisArg);\r\n    const koconutToReturn = new KoconutEntry<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Entry<KeyType, ValueType>>)\r\n      .setPrevYieldable(fromSuper['prevYieldable']!)\r\n      .setProcessor(fromSuper['processor']!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the first entry yielding the smallest value of the given function or ```null``` if there are no entries.\r\n   *\r\n   * @param {Selector<Entry<KeyType, ValueType>,number | string | KoconutComparable>} selector A callback function that accepts an argument. The method calls the ```selector``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```selector```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutEntry<KeyType, ValueType>}\r\n   *\r\n   * @category Calculator\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // Case 1 -- KoconutArray\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const smallestNumberOfArray = await koconutArray\r\n   *                           .minByOrNull(eachNumber => eachNumber)\r\n   *                           .yield()\r\n   * console.log(smallestNumberOfArray)\r\n   * // ↑ 1\r\n   *\r\n   * const smallestNumberOfEmptyArray = await koconutArray\r\n   *                       .filter(eachNumber => eachNumber > 10)\r\n   *                       .minByOrNull(eachNumber => eachNumber)\r\n   *                       .yield()\r\n   * console.log(smallestNumberOfEmptyArray)\r\n   * // ↑ null\r\n   *\r\n   * // Case 2 -- KoconutSet\r\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\")\r\n   *\r\n   * const shortestStringOfSet = await koconutSet\r\n   *                           .minByOrNull(eachString => eachString.length)\r\n   *                           .yield()\r\n   * console.log(shortestStringOfSet)\r\n   * // ↑ a\r\n   *\r\n   * // Case 3 -- KoconutMap\r\n   * const koconutMap = KoconutArray.of(1, 12, 123)\r\n   *               .associateWith(eachNumber => eachNumber.toString())\r\n   *\r\n   * const shortestDigitsEntryOfMap = await koconutMap\r\n   *                                   .minByOrNull(eachEntry => eachEntry.value.length)\r\n   *                                   .yield()\r\n   * console.log(shortestDigitsEntryOfMap)\r\n   * // ↑ Entry { keyElement: 1, valueElement: '1' }\r\n   *\r\n   * // Case 4 -- You can also do it asynchronously\r\n   * const koconutArray2 = KoconutArray.of(19,27,32)\r\n   *\r\n   * const smallestNumberOfArray2 = await koconutArray2\r\n   *                               .minByOrNull(async eachNumber => eachNumber)\r\n   *                               .yield()\r\n   * console.log(smallestNumberOfArray2)\r\n   * // ↑ 19\r\n   *\r\n   * const smallest1sDigitNumberOfArray2 = await koconutArray2\r\n   *                                   .minByOrNull(eachNumber => new Promise(resolve => {\r\n   *                                       resolve(eachNumber % 10)\r\n   *                                   }))\r\n   *                                   .yield()\r\n   * console.log(smallest1sDigitNumberOfArray2)\r\n   * // ↑ 32\r\n   * ```\r\n   */\r\n  minByOrNull(\r\n    selector: Selector<\r\n      Entry<KeyType, ValueType>,\r\n      number | string | KoconutComparable\r\n    >,\r\n    thisArg: any = null,\r\n  ): KoconutEntry<KeyType, ValueType> {\r\n    const fromSuper = super.minByOrNull(selector, thisArg);\r\n    const koconutToReturn = new KoconutEntry<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Entry<KeyType, ValueType> | null>)\r\n      .setPrevYieldable(fromSuper['prevYieldable']!)\r\n      .setProcessor(fromSuper['processor']!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the first element having the smallest value according to the provided ```comparator``` or throws {@link KoconutNoSuchElementException}\r\n   * if elements are empty.\r\n   *\r\n   * @param {Comparator<Entry<KeyType, ValueType>>} comparator A callback function that accepts two arguments. The method calls the ```comparator``` to compare two selected values.\r\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutEntry<KeyType, ValueType>}\r\n   *\r\n   * @throws {@link KoconutNoSuchElementException}\r\n   *\r\n   * @category Calculator\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // Case 1 -- KoconutArray\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const smallestNumberOfArray = await koconutArray\r\n   *                               .minWith((front, rear) => front - rear)\r\n   *                               .yield()\r\n   * console.log(smallestNumberOfArray)\r\n   * // ↑ 1\r\n   *\r\n   * try {\r\n   *   await koconutArray\r\n   *           .filter(eachNumber => eachNumber > 10)\r\n   *           .minWith((front, rear) => front - rear)\r\n   *           .yield()\r\n   * } catch(error) {\r\n   *   console.log(error.name)\r\n   *   // ↑ Koconut No Such Element Exception\r\n   *   // i.e. -- Array is filtered.\r\n   *   // No element in 1 to 5 is greater than 10.\r\n   * }\r\n   *\r\n   * // Case 2 -- KoconutSet\r\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\", \"abcd\")\r\n   *\r\n   * const shortestStringLengthOfSet = await koconutSet\r\n   *                                   .minWith((front, rear) => front.length - rear.length)\r\n   *                                   .yield()\r\n   * console.log(shortestStringLengthOfSet)\r\n   * // ↑ a\r\n   *\r\n   * // Case 3\r\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\r\n   *               .associate(eachString => [eachString.length, eachString])\r\n   *\r\n   * const shortestStringLengthEntryOfMap = await koconutMap\r\n   *                               .minWith((front, rear) => front.key - rear.key)\r\n   *                               .yield()\r\n   * console.log(shortestStringLengthEntryOfMap)\r\n   * // ↑ Entry { keyElement: 1, valueElement: 'a' }\r\n   *\r\n   * // Case 4 -- You can also do it asynchronously\r\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\r\n   *\r\n   * const smallestNumberOfArray2 = await koconutArray2\r\n   *                   .minWith(async (front, rear) => front - rear)\r\n   *                   .yield()\r\n   * console.log(smallestNumberOfArray2)\r\n   * // ↑ 12\r\n   *\r\n   * const smallest1sDigitNumberOfArray2 = await koconutArray2\r\n   *                   .minWith((front, rear) => new Promise(resolve => {\r\n   *                       resolve(front % 10 - rear % 10)\r\n   *                   }))\r\n   *                   .yield()\r\n   * console.log(smallest1sDigitNumberOfArray2)\r\n   * // ↑ 50\r\n   * ```\r\n   */\r\n  minWith(\r\n    comparator: Comparator<Entry<KeyType, ValueType>>,\r\n    thisArg: any = null,\r\n  ): KoconutEntry<KeyType, ValueType> {\r\n    const fromSuper = super.minWith(comparator, thisArg);\r\n    const koconutToReturn = new KoconutEntry<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Entry<KeyType, ValueType>>)\r\n      .setPrevYieldable(fromSuper['prevYieldable']!)\r\n      .setProcessor(fromSuper['processor']!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the first element having the smallest value according to the provided ```comparator``` or ```null```\r\n   * if elements are empty.\r\n   *\r\n   * @param {Comparator<Entry<KeyType, ValueType>>} comparator A callback function that accepts two arguments. The method calls the ```comparator``` to compare two selected values.\r\n   * In case the result is larger than 0, front is bigger than rear, and if it's less than 0 judge vice versa.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```comparator```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutEntry<KeyType, ValueType>}\r\n   *\r\n   * @category Calculator\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // Case 1 -- KoconutArray\r\n   * const koconutArray = KoconutArray.of(1,2,3,4,5)\r\n   *\r\n   * const smallestNumberOfArray = await koconutArray\r\n   *                               .minWithOrNull((front, rear) => front - rear)\r\n   *                               .yield()\r\n   * console.log(smallestNumberOfArray)\r\n   * // ↑ 1\r\n   *\r\n   * const smallestNumberOfEmptyArray = await koconutArray\r\n   *                           .filter(eachNumber => eachNumber > 10)\r\n   *                           .minWithOrNull((front, rear) => front - rear)\r\n   *                           .yield()\r\n   * console.log(smallestNumberOfEmptyArray)\r\n   * // ↑ null\r\n   *\r\n   * // Case 2 -- KoconutSet\r\n   * const koconutSet = KoconutSet.of(\"a\", \"ab\", \"abc\", \"abcd\")\r\n   *\r\n   * const shortestStringLengthOfSet = await koconutSet\r\n   *                                   .minWithOrNull((front, rear) => front.length - rear.length)\r\n   *                                   .yield()\r\n   * console.log(shortestStringLengthOfSet)\r\n   * // ↑ a\r\n   *\r\n   * // Case 3\r\n   * const koconutMap = KoconutArray.of(\"a\", \"ab\", \"abc\")\r\n   *                .associate(eachString => [eachString.length, eachString])\r\n   *\r\n   * const shortestStringLengthEntryOfMap = await koconutMap\r\n   *                               .minWithOrNull((front, rear) => front.key - rear.key)\r\n   *                               .yield()\r\n   * console.log(shortestStringLengthEntryOfMap)\r\n   * // ↑ Entry { keyElement: 1, valueElement: 'a' }\r\n   *\r\n   * // Case 4 -- You can also do it asynchronously\r\n   * const koconutArray2 = KoconutArray.of(12,51,32,45,50)\r\n   *\r\n   * const smallestNumberOfArray2 = await koconutArray2\r\n   *                   .minWithOrNull(async (front, rear) => front - rear)\r\n   *                   .yield()\r\n   * console.log(smallestNumberOfArray2)\r\n   * // ↑ 12\r\n   *\r\n   * const smallest1sDigitNumberOfArray2 = await koconutArray2\r\n   *                   .minWithOrNull((front, rear) => new Promise(resolve => {\r\n   *                       resolve(front % 10 - rear % 10)\r\n   *                   }))\r\n   *                   .yield()\r\n   * console.log(smallest1sDigitNumberOfArray2)\r\n   * // ↑ 50\r\n   * ```\r\n   */\r\n  minWithOrNull(\r\n    comparator: Comparator<Entry<KeyType, ValueType>>,\r\n    thisArg: any = null,\r\n  ): KoconutEntry<KeyType, ValueType> {\r\n    const fromSuper = super.minWithOrNull(comparator, thisArg);\r\n    const koconutToReturn = new KoconutEntry<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Entry<KeyType, ValueType> | null>)\r\n      .setPrevYieldable(fromSuper['prevYieldable']!)\r\n      .setProcessor(fromSuper['processor']!);\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Inspector\r\n  /**\r\n   * Checks if this {@link KoconutMap} contains the given ```key```.\r\n   *\r\n   * @param {KeyType} key Key to search for.\r\n   *\r\n   * @return {KoconutBoolean}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Inspector\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *           .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const doesKoconutMapContainsKey4 = await koconutMap\r\n   *                                           .contains(4)\r\n   *                                           .yield()\r\n   * console.log(doesKoconutMapContainsKey4)\r\n   * // ↑ true\r\n   *\r\n   * const doesKoconutMapContainsKey7 = await koconutMap\r\n   *                                           .contains(7)\r\n   *                                           .yield()\r\n   * console.log(doesKoconutMapContainsKey7)\r\n   * // ↑ false\r\n   * ```\r\n   */\r\n  contains(key: KeyType): KoconutBoolean {\r\n    const koconutToReturn = new KoconutBoolean();\r\n    (koconutToReturn as any as KoconutOpener<boolean>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        for (const eachKey of this.mKeys) {\r\n          if (KoconutTypeChecker.checkIsEquatable(eachKey)) {\r\n            const equalityResult = eachKey.equalsTo(key);\r\n            if (\r\n              (equalityResult instanceof KoconutPrimitive &&\r\n                (await equalityResult.yield())) ||\r\n              (!(equalityResult instanceof KoconutPrimitive) && equalityResult)\r\n            )\r\n              return true;\r\n          } else if (eachKey == key) return true;\r\n        }\r\n        return false;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Checks if this {@link KoconutMap} contains the given ```key```.\r\n   * @param {KeyType} key Key to search for.\r\n   *\r\n   * @return {KoconutBoolean}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Inspector\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *           .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const doesKoconutMapContainsKey4 = await koconutMap\r\n   *                                           .containsKey(4)\r\n   *                                           .yield()\r\n   * console.log(doesKoconutMapContainsKey4)\r\n   * // ↑ true\r\n   *\r\n   * const doesKoconutMapContainsKey7 = await koconutMap\r\n   *                                           .containsKey(7)\r\n   *                                           .yield()\r\n   * console.log(doesKoconutMapContainsKey7)\r\n   * // ↑ false\r\n   * ```\r\n   */\r\n  containsKey(key: KeyType): KoconutBoolean {\r\n    return this.contains(key);\r\n  }\r\n\r\n  /**\r\n   * Checks if this {@link KoconutMap} contains given ```value```.\r\n   * @param {ValueType} value Value to search for.\r\n   *\r\n   * @return {KoconutBoolean}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Inspector\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *           .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const doesKoconutMapContainsValue2 = await koconutMap\r\n   *                                           .containsValue(2)\r\n   *                                           .yield()\r\n   * console.log(doesKoconutMapContainsValue2)\r\n   * // ↑ true\r\n   *\r\n   * const doesKoconutMapContainsValue12 = await koconutMap\r\n   *                                           .containsValue(12)\r\n   *                                           .yield()\r\n   * console.log(doesKoconutMapContainsValue12)\r\n   * // ↑ false\r\n   * ```\r\n   */\r\n  containsValue(value: ValueType): KoconutBoolean {\r\n    const koconutToReturn = new KoconutBoolean();\r\n    (koconutToReturn as any as KoconutOpener<boolean>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        for (const eachValue of this.mValues) {\r\n          if (KoconutTypeChecker.checkIsEquatable(eachValue)) {\r\n            const equalityResult = eachValue.equalsTo(value);\r\n            if (\r\n              (equalityResult instanceof KoconutPrimitive &&\r\n                (await equalityResult.yield())) ||\r\n              (!(equalityResult instanceof KoconutPrimitive) && equalityResult)\r\n            )\r\n              return true;\r\n          } else if (eachValue == value) return true;\r\n        }\r\n        return false;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Iterator\r\n  /**\r\n   * Performs the given ```action``` on each entry and returns the original collection itself afterwards.\r\n   * When you want to stop iteration in the meantime ```return``` ```false``` or {@link KoconutLoopSignal.BREAK}.\r\n   *\r\n   * @param {Action<Entry<KeyType, ValueType>>} action A callback function that accepts an argument. The method calls the ```action``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```action```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Iterator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const KoconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *                   .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const map = await KoconutMap\r\n   *                   .onEach(console.log)\r\n   *                   // ↑ Entry { keyElement: 1, valueElement: 2 }\r\n   *                   //   Entry { keyElement: 2, valueElement: 4 }\r\n   *                   //   Entry { keyElement: 3, valueElement: 6 }\r\n   *                   //   Entry { keyElement: 4, valueElement: 8 }\r\n   *                   //   Entry { keyElement: 5, valueElement: 10 }\r\n   *                   .onEach(async eachEntry => {\r\n   *                       if(eachEntry.key >= 3) return KoconutLoopSignal.BREAK\r\n   *                       console.log(eachEntry.value)\r\n   *                   })\r\n   *                   // ↑ 2\r\n   *                   //   4\r\n   *                   .onEach(eachEntry => new Promise(resolve => {\r\n   *                       if(eachEntry.value == 8) resolve(false)\r\n   *                       else {\r\n   *                           console.log(eachEntry.value)\r\n   *                           resolve()\r\n   *                       }\r\n   *                   }))\r\n   *                   // ↑ 2\r\n   *                   //   4\r\n   *                   //   6\r\n   *                   .yield()\r\n   * console.log(map)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * ```\r\n   */\r\n  onEach(\r\n    action: Action<Entry<KeyType, ValueType>>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    return KoconutMap.fromIterable(super.onEach(action, thisArg));\r\n  }\r\n\r\n  // Manipulator\r\n  /**\r\n   * Returns a map containing only entries matching the given ```predicate```.\r\n   *\r\n   * @param {Predicator<Entry<KeyType, ValueType>>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *           .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const evenKeyEntries = await koconutMap\r\n   *                       .filter(eachEntry => eachEntry.key % 2 == 0)\r\n   *                       .yield()\r\n   * console.log(evenKeyEntries)\r\n   * // ↑ Map { 2 => 4, 4 => 8 }\r\n   * ```\r\n   */\r\n  filter(\r\n    predicate: Predicator<Entry<KeyType, ValueType>>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    return KoconutMap.fromIterable(super.filter(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Returns a map containing only entries not matching the given ```predicate```.\r\n   *\r\n   * @param {Predicator<Entry<KeyType, ValueType>>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *           .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const oddKeyEntries = await koconutMap\r\n   *                       .filterNot(eachEntry => eachEntry.key % 2 == 0)\r\n   *                       .yield()\r\n   * console.log(oddKeyEntries)\r\n   * // ↑ Map { 1 => 2, 3 => 6, 5 => 10 }\r\n   * ```\r\n   */\r\n  filterNot(\r\n    predicate: Predicator<Entry<KeyType, ValueType>>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    return KoconutMap.fromIterable(super.filterNot(predicate, thisArg));\r\n  }\r\n\r\n  /**\r\n   * Appends all entries matching the given ```predicate``` to the given destination.\r\n   *\r\n   * @param {Map<KeyType, ValueType>} destination Iterable destination. ```Map``` to be exact.\r\n   *\r\n   * @param {Predicator<Entry<KeyType, ValueType>>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const evenKeyMap = new Map<number, number>()\r\n   * const originalMap = await koconutMap\r\n   *                       .filterTo(\r\n   *                           evenKeyMap,\r\n   *                           eachEntry => eachEntry.key % 2 == 0\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(evenKeyMap)\r\n   * // ↑ Map { 2 => 4, 4 => 8 }\r\n   * console.log(originalMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * ```\r\n   */\r\n  filterTo(\r\n    destination: Map<KeyType, ValueType>,\r\n    predicate: Predicator<Entry<KeyType, ValueType>>,\r\n    // predicate: (entry: Entry<KeyType, ValueType>) => boolean | Promise<boolean>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    predicate = predicate.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper)\r\n            if (await predicate(eachEntry))\r\n              destination.set(eachEntry.key, eachEntry.value);\r\n        }\r\n        return this.data!;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Appends all entries not matching the given ```predicate``` to the given destination.\r\n   *\r\n   * @param {Map<KeyType, ValueType>} destination Iterable destination. ```Map``` to be exact.\r\n   *\r\n   * @param {Predicator<Entry<KeyType, ValueType>>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const oddKeyMap = new Map<number, number>()\r\n   * const originalMap = await koconutMap\r\n   *                       .filterNotTo(\r\n   *                           oddKeyMap,\r\n   *                           eachEntry => eachEntry.key % 2 == 0\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(oddKeyMap)\r\n   * // ↑ Map { 1 => 2, 3 => 6, 5 => 10 }\r\n   * console.log(originalMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * ```\r\n   */\r\n  filterNotTo(\r\n    destination: Map<KeyType, ValueType>,\r\n    predicate: Predicator<Entry<KeyType, ValueType>>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    predicate = predicate.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper)\r\n            if (!(await predicate(eachEntry)))\r\n              destination.set(eachEntry.key, eachEntry.value);\r\n        }\r\n        return this.data!;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns a map containing all entries with key matching the given ```predicate```.\r\n   *\r\n   * @param {Predicator<KeyType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *           .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const evenKeyMap = await koconutMap\r\n   *                   .filterKeys(eachKey => eachKey % 2 == 0)\r\n   *                   .yield()\r\n   * console.log(evenKeyMap)\r\n   * // ↑ Map { 2 => 4, 4 => 8 }\r\n   * ```\r\n   */\r\n  filterKeys(\r\n    predicate: Predicator<KeyType>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    predicate = predicate.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        const processedMap = new Map<KeyType, ValueType>();\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper)\r\n            if (await predicate(eachEntry.key))\r\n              processedMap.set(eachEntry.key, eachEntry.value);\r\n        }\r\n        return processedMap;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns a map containing all entries with value matching the given ```predicate```.\r\n   *\r\n   * @param {Predicator<ValueType>} predicate A callback function that accepts an argument. The method calls the ```predicate``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```predicate```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *           .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const valueGreaterThan5Map = await koconutMap\r\n   *                   .filterValues(eachValue => eachValue > 5)\r\n   *                   .yield()\r\n   * console.log(valueGreaterThan5Map)\r\n   * // ↑ Map { 3 => 6, 4 => 8, 5 => 10 }\r\n   * ```\r\n   */\r\n  filterValues(\r\n    predicate: Predicator<ValueType>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    predicate = predicate.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        const processedMap = new Map<KeyType, ValueType>();\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper)\r\n            if (await predicate(eachEntry.value))\r\n              processedMap.set(eachEntry.key, eachEntry.value);\r\n        }\r\n        return processedMap;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutMap} containing all entries of the original map except\r\n   * the entries the keys of which are contained in ```keys```.\r\n   *\r\n   * @param {KeyType[]} keys Key data to except. It could be plural or singular.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const key1ExceptedMap = await koconutMap\r\n   *                       .minus(1)\r\n   *                       .yield()\r\n   * console.log(key1ExceptedMap)\r\n   * // ↑ Map { 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   *\r\n   * const key3And4ExpectedMap = await koconutMap\r\n   *                           .minus(3, 4)\r\n   *                           .yield()\r\n   * console.log(key3And4ExpectedMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 5 => 10 }\r\n   * ```\r\n   */\r\n  minus(...keys: KeyType[]): KoconutMap<KeyType, ValueType> {\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        const processedMap = new Map<KeyType, ValueType>();\r\n        if (this.combinedDataWrapper != null) {\r\n          const koconutKeysToExceptArray = KoconutArray.from(keys);\r\n          for (const eachEntry of this.combinedDataWrapper)\r\n            if (\r\n              !(await koconutKeysToExceptArray.contains(eachEntry.key).yield())\r\n            )\r\n              processedMap.set(eachEntry.key, eachEntry.value);\r\n        }\r\n        return processedMap;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link KoconutMap} by replacing or adding entries from given ```entries```.\r\n   *\r\n   * @param {([KeyType, ValueType]| Pair<KeyType, ValueType>| KoconutPair<KeyType, ValueType>| Entry<KeyType, ValueType>| KoconutEntry<KeyType, ValueType>)[]} entries Entries to add or replace. It could be plural or singular.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Manipulator\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const key5ReplacedWith20Map = await koconutMap\r\n   *                           .plus(\r\n   *                               [5, 20]\r\n   *                               // ↑ Also can be\r\n   *                               //   new Pair(5, 20)\r\n   *                               //   Pair.from([5, 20])\r\n   *                               //   new KoconutPair(5, 20)\r\n   *                               //   new Entry(5, 20)\r\n   *                               //   Entry.from([5, 20])\r\n   *                               //   new KoconutEntry(5, 20)\r\n   *                           )\r\n   *                           .yield()\r\n   * console.log(key5ReplacedWith20Map)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 20 }\r\n   *\r\n   * const key6And7AddedMap = await koconutMap\r\n   *                           .plus(\r\n   *                               [6, 12],\r\n   *                               [7, 14]\r\n   *                           )\r\n   *                           .yield()\r\n   * console.log(key6And7AddedMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10, 6 => 12, 7 => 14 }\r\n   * ```\r\n   */\r\n  plus(\r\n    ...entries: (\r\n      | [KeyType, ValueType]\r\n      | Pair<KeyType, ValueType>\r\n      | KoconutPair<KeyType, ValueType>\r\n      | Entry<KeyType, ValueType>\r\n      | KoconutEntry<KeyType, ValueType>\r\n    )[]\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        const processedMap =\r\n          this.data == null\r\n            ? new Map<KeyType, ValueType>()\r\n            : new Map(this.data);\r\n        for (const eachElement of entries) {\r\n          if (eachElement instanceof Pair)\r\n            processedMap.set(eachElement.first, eachElement.second);\r\n          else if (eachElement instanceof KoconutPair) {\r\n            const eachPair = await eachElement.yield();\r\n            if (eachPair != null)\r\n              processedMap.set(eachPair.first, eachPair.second);\r\n          } else if (eachElement instanceof Entry)\r\n            processedMap.set(eachElement.key, eachElement.value);\r\n          else if (eachElement instanceof KoconutEntry) {\r\n            const eachEntry = await eachElement.yield();\r\n            if (eachEntry != null)\r\n              processedMap.set(eachEntry.key, eachEntry.value);\r\n          } else processedMap.set(eachElement[0], eachElement[1]);\r\n        }\r\n        return processedMap;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Selector\r\n  /**\r\n   * Returns the value corresponding to the given ```key```, or ```null``` if such a key is not\r\n   * present in this {@link KoconutMap}.\r\n   *\r\n   * @param {KeyType} key Key to search for.\r\n   *\r\n   * @return {KoconutPrimitive<ValueType | null>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Selector\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const valueOfKey3 = await koconutMap\r\n   *                       .get(3)\r\n   *                       .yield()\r\n   * console.log(valueOfKey3)\r\n   * // ↑ 6\r\n   *\r\n   * const valueOfKey6 = await koconutMap\r\n   *                       .get(6)\r\n   *                       .yield()\r\n   * console.log(valueOfKey6)\r\n   * // ↑ null\r\n   * ```\r\n   */\r\n  get(key: KeyType): KoconutPrimitive<ValueType | null> {\r\n    const koconutToReturn = new KoconutPrimitive<ValueType | null>();\r\n    (koconutToReturn as any as KoconutOpener<ValueType | null>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper) {\r\n            if (KoconutTypeChecker.checkIsEquatable(eachEntry.key)) {\r\n              const equalityResult = eachEntry.key.equalsTo(key);\r\n              if (\r\n                (equalityResult instanceof KoconutPrimitive &&\r\n                  (await equalityResult.yield())) ||\r\n                (!(equalityResult instanceof KoconutPrimitive) &&\r\n                  equalityResult)\r\n              )\r\n                return eachEntry.value;\r\n            } else if (eachEntry.key == key) return eachEntry.value;\r\n          }\r\n        }\r\n        return null;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the value to which the specified key is mapped, or ```defaultValue``` if the map contains\r\n   * no mapping for key.\r\n   *\r\n   * @param {KeyType} key Key to search for.\r\n   *\r\n   * @param {ValueType} defaultValue Default value if no entry is found.\r\n   *\r\n   * @return {KoconutPrimitive<ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Selector\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const valueOfKey3 = await koconutMap\r\n   *                       .getOrDefault(3, 100)\r\n   *                       .yield()\r\n   * console.log(valueOfKey3)\r\n   * // ↑ 6\r\n   *\r\n   * const valueOfKey6 = await koconutMap\r\n   *                       .getOrDefault(6, 100)\r\n   *                       .yield()\r\n   * console.log(valueOfKey6)\r\n   * // ↑ 100\r\n   * ```\r\n   */\r\n  getOrDefault(\r\n    key: KeyType,\r\n    defaultValue: ValueType,\r\n  ): KoconutPrimitive<ValueType> {\r\n    const koconutToReturn = new KoconutPrimitive<ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<ValueType>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper) {\r\n            if (KoconutTypeChecker.checkIsEquatable(eachEntry.key)) {\r\n              const equalityResult = eachEntry.key.equalsTo(key);\r\n              if (\r\n                (equalityResult instanceof KoconutPrimitive &&\r\n                  (await equalityResult.yield())) ||\r\n                (!(equalityResult instanceof KoconutPrimitive) &&\r\n                  equalityResult)\r\n              )\r\n                return eachEntry.value;\r\n            } else if (eachEntry.key == key) return eachEntry.value;\r\n          }\r\n        }\r\n        return defaultValue;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the value for the given ```key```, or the reuslt of the\r\n   * ```defaultValue``` function if there was no entry from the given key.\r\n   *\r\n   * @param {KeyType} key Key to search for.\r\n   *\r\n   * @param {Selector<void, ValueType>} defaultValue Callback function that generates default value. The method will call ```defaultValue``` if no entry is found.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```defaultValue```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutPrimitive<ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Selector\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const valueOfKey3 = await koconutMap\r\n   *                       .getOrElse(3, () => 100)\r\n   *                       .yield()\r\n   * console.log(valueOfKey3)\r\n   * // ↑ 6\r\n   *\r\n   * const valueOfKey6 = await koconutMap\r\n   *                       .getOrElse(6, async () => 100)\r\n   *                       .yield()\r\n   * console.log(valueOfKey6)\r\n   * // ↑ 100\r\n   *\r\n   * const valueOfKey7 = await koconutMap\r\n   *                       .getOrElse(7, () => new Promise(resolve => {\r\n   *                           resolve(100)\r\n   *                       }))\r\n   *                       .yield()\r\n   * console.log(valueOfKey7)\r\n   * // ↑ 100\r\n   * ```\r\n   */\r\n  getOrElse(\r\n    key: KeyType,\r\n    defaultValue: Selector<void, ValueType>,\r\n    thisArg: any = null,\r\n  ): KoconutPrimitive<ValueType> {\r\n    defaultValue = defaultValue.bind(thisArg);\r\n    const koconutToReturn = new KoconutPrimitive<ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<ValueType>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper) {\r\n            if (KoconutTypeChecker.checkIsEquatable(eachEntry.key)) {\r\n              const equalityResult = eachEntry.key.equalsTo(key);\r\n              if (\r\n                (equalityResult instanceof KoconutPrimitive &&\r\n                  (await equalityResult.yield())) ||\r\n                (!(equalityResult instanceof KoconutPrimitive) &&\r\n                  equalityResult)\r\n              )\r\n                return eachEntry.value;\r\n            } else if (eachEntry.key == key) return eachEntry.value;\r\n          }\r\n        }\r\n        return await defaultValue();\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns the value of the given key. If no entry is found, it throws {@link KoconutNoSuchElementException}.\r\n   *\r\n   * @param {KeyType} key Key to search for.\r\n   *\r\n   * @return {KoconutPrimitive<ValueType>}\r\n   *\r\n   * @throws {@link KoconutNoSuchElementException}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Selector\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const valueOfKey3 = await koconutMap\r\n   *                       .getValue(3)\r\n   *                       .yield()\r\n   * console.log(valueOfKey3)\r\n   * // ↑ 6\r\n   *\r\n   * try {\r\n   *   await koconutMap\r\n   *       .getValue(6)\r\n   *       .yield()\r\n   * } catch(error) {\r\n   *   console.log(error.name)\r\n   *   // ↑ Koconut No Such Element Exception\r\n   * }\r\n   * ```\r\n   */\r\n  getValue(key: KeyType): KoconutPrimitive<ValueType> {\r\n    const koconutToReturn = new KoconutPrimitive<ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<ValueType>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper) {\r\n            if (KoconutTypeChecker.checkIsEquatable(eachEntry.key)) {\r\n              const equalityResult = eachEntry.key.equalsTo(key);\r\n              if (\r\n                (equalityResult instanceof KoconutPrimitive &&\r\n                  (await equalityResult.yield())) ||\r\n                (!(equalityResult instanceof KoconutPrimitive) &&\r\n                  equalityResult)\r\n              )\r\n                return eachEntry.value;\r\n            } else if (eachEntry.key == key) return eachEntry.value;\r\n          }\r\n        }\r\n        throw new KoconutNoSuchElementException(\r\n          `No such element matches given key ${key} is found`,\r\n        );\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  // Transformer\r\n  /**\r\n   * Appends all entries yielded from results of ```transform``` function being invoked\r\n   * on each entry of original collection, to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destination. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<Entry<KeyType, ValueType>, Iterable<ResultDataType>>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutSet = KoconutSet.of(\"123\", \"456\")\r\n   *\r\n   * const allNumbersInSet = new Array<number>()\r\n   * await koconutSet\r\n   *       .flatMapTo(\r\n   *           allNumbersInSet,\r\n   *           (eachString) => eachString\r\n   *                   .split('')\r\n   *                   .map(eachCharacter => parseInt(eachCharacter))\r\n   *       )\r\n   *       .process()\r\n   * console.log(allNumbersInSet)\r\n   * // ↑ [ 1, 2, 3, 4, 5, 6 ]\r\n   * ```\r\n   */\r\n  flatMapTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<Entry<KeyType, ValueType>, Iterable<ResultDataType>>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    return KoconutMap.fromIterable(\r\n      super.flatMapTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each entry of the original collection\r\n   * and appends the results to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destination. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<Entry<KeyType, ValueType>, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each element in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associate(eachNumber => [eachNumber, eachNumber * 2])\r\n   *\r\n   * const sumsOfKeyValue = new Array<number>()\r\n   * const originalData = await koconutMap\r\n   *                       .mapTo(\r\n   *                           sumsOfKeyValue,\r\n   *                           eachEntry => eachEntry.key + eachEntry.value\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(sumsOfKeyValue)\r\n   * // ↑ [ 3, 6, 9, 12, 15 ]\r\n   * console.log(originalData)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * ```\r\n   */\r\n  mapTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<Entry<KeyType, ValueType>, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    return KoconutMap.fromIterable(\r\n      super.mapTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Applies the given ```transform``` function to each entry of the original collection\r\n   * and appends the results to the given ```destination```.\r\n   *\r\n   * @param {Array<ResultDataType> | Set<ResultDataType>} destination Iterable destination. ```Array``` or ```Set``` to be exact.\r\n   *\r\n   * @param {Transformer<Entry<KeyType, ValueType>, ResultDataType | null>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *               .associateWith(eachNumber => eachNumber * 2)\r\n   *\r\n   * const oddKeyKeyValueSum = new Array<number>()\r\n   * const originalData = await koconutMap\r\n   *                       .mapNotNullTo(\r\n   *                           oddKeyKeyValueSum,\r\n   *                           eachEntry => {\r\n   *                               if(eachEntry.key % 2 == 1)\r\n   *                                   return eachEntry.key + eachEntry.value\r\n   *                               // return\r\n   *                               // return null\r\n   *                               // return undefined\r\n   *                               // ↑ You can use any one of\r\n   *                               //   them or just omit it.\r\n   *                           }\r\n   *                       )\r\n   *                       .yield()\r\n   * console.log(oddKeyKeyValueSum)\r\n   * // ↑ [ 3, 9, 15 ]\r\n   * console.log(originalData)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * ```\r\n   */\r\n  mapNotNullTo<ResultDataType>(\r\n    destination: Array<ResultDataType> | Set<ResultDataType>,\r\n    transform: Transformer<Entry<KeyType, ValueType>, ResultDataType | null>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    return KoconutMap.fromIterable(\r\n      super.mapNotNullTo(destination, transform, thisArg),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a new ```Map``` with entries having the keys obtained by applying the\r\n   * ```transform``` function to each entry in this object. The value of each of them would be the same\r\n   * as the original entry.\r\n   *\r\n   * @param {Transformer<Entry<KeyType, ValueType>, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<ResultDataType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *                   .associateWith(eachNumber => eachNumber)\r\n   *\r\n   * const stringifiedKeyMap = await koconutMap\r\n   *                       .mapKeys(eachEntry => eachEntry.key.toString())\r\n   *                       .yield()\r\n   * console.log(stringifiedKeyMap)\r\n   * // ↑ Map { '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5 }\r\n   *\r\n   * const doubledKeyMap = await koconutMap\r\n   *                   .mapKeys(async eachEntry => eachEntry.key * 2)\r\n   *                   .yield()\r\n   * console.log(doubledKeyMap)\r\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\r\n   *\r\n   * const sumOfKeyValueKeyMap = await koconutMap\r\n   *                   .mapKeys(eachEntry => new Promise(resolve => {\r\n   *                       resolve(eachEntry.key + eachEntry.value)\r\n   *                   }))\r\n   *                   .yield()\r\n   * console.log(sumOfKeyValueKeyMap)\r\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\r\n   * ```\r\n   */\r\n  mapKeys<ResultDataType>(\r\n    transform: Transformer<Entry<KeyType, ValueType>, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<ResultDataType, ValueType> {\r\n    transform = transform.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<ResultDataType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<ResultDataType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        const processedMap = new Map<ResultDataType, ValueType>();\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper)\r\n            processedMap.set(await transform(eachEntry), eachEntry.value);\r\n        }\r\n        return processedMap;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Populates the given ```destination``` map with entries having keys obtained by applying\r\n   * the ```transform``` function to each entry in this object. The value of each of them would be the same\r\n   * as the original entry.\r\n   *\r\n   * @param {Map<ResultDataType, ValueType>} destination Iterable destination. ```Map``` to be exact.\r\n   *\r\n   * @param {Transformer<Entry<KeyType, ValueType>, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *                   .associateWith(eachNumber => eachNumber)\r\n   *\r\n   * const stringifiedKeyMap = new Map<string, number>()\r\n   * const doubledKeyMap = new Map<number, number>()\r\n   * const sumOfKeyValueKeyMap = new Map<number, number>()\r\n   * const originalData = await koconutMap\r\n   *                   .mapKeysTo(\r\n   *                       stringifiedKeyMap,\r\n   *                       eachEntry => eachEntry.key.toString()\r\n   *                   )\r\n   *                   .mapKeysTo(\r\n   *                       doubledKeyMap,\r\n   *                       async eachEntry => eachEntry.key * 2\r\n   *                   )\r\n   *                   .mapKeysTo(\r\n   *                       sumOfKeyValueKeyMap,\r\n   *                       eachEntry => new Promise(resolve => {\r\n   *                           resolve(eachEntry.key + eachEntry.value)\r\n   *                       })\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(stringifiedKeyMap)\r\n   * // ↑ Map { '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5 }\r\n   * console.log(doubledKeyMap)\r\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\r\n   * console.log(sumOfKeyValueKeyMap)\r\n   * // ↑ Map { 2 => 1, 4 => 2, 6 => 3, 8 => 4, 10 => 5 }\r\n   * console.log(originalData)\r\n   * // ↑ Map { 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5 }\r\n   * ```\r\n   */\r\n  mapKeysTo<ResultDataType>(\r\n    destination: Map<ResultDataType, ValueType>,\r\n    transform: Transformer<Entry<KeyType, ValueType>, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    transform = transform.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper)\r\n            destination.set(await transform(eachEntry), eachEntry.value);\r\n        }\r\n        return this.data!;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Returns a new ```Map``` with entries having the keys of this object and the values obtained by applying\r\n   * the ```transform``` function to each entry.\r\n   *\r\n   * @param {Transformer<Entry<KeyType, ValueType>, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ResultDataType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *                   .associateWith(eachNumber => eachNumber)\r\n   *\r\n   * const doubledValueMap = await koconutMap\r\n   *                       .mapValues(eachEntry => eachEntry.value * 2)\r\n   *                       .yield()\r\n   * console.log(doubledValueMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   *\r\n   * const stringifiedValueMap = await koconutMap\r\n   *                       .mapValues(async eachEntry => eachEntry.value.toString())\r\n   *                       .yield()\r\n   * console.log(stringifiedValueMap)\r\n   * // ↑ Map { 1 => '1', 2 => '2', 3 => '3', 4 => '4', 5 => '5' }\r\n   *\r\n   * const squaredValueMap = await koconutMap\r\n   *                       .mapValues(eachEntry => new Promise(resolve => {\r\n   *                           resolve(eachEntry.value * eachEntry.value)\r\n   *                       }))\r\n   *                       .yield()\r\n   * console.log(squaredValueMap)\r\n   * // ↑ Map { 1 => 1, 2 => 4, 3 => 9, 4 => 16, 5 => 25 }\r\n   * ```\r\n   */\r\n  mapValues<ResultDataType>(\r\n    transform: Transformer<Entry<KeyType, ValueType>, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ResultDataType> {\r\n    transform = transform.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<KeyType, ResultDataType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ResultDataType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        const processedMap = new Map<KeyType, ResultDataType>();\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper) {\r\n            processedMap.set(eachEntry.key, await transform(eachEntry));\r\n          }\r\n        }\r\n        return processedMap;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n\r\n  /**\r\n   * Populates the given ```destination``` ```Map``` with the entries having the keys of this object and\r\n   * the values obtained by applying the ```transform``` function to each entry.\r\n   *\r\n   * @param {Map<KeyType, ResultDataType>} destination Iterable destination. ```Map``` to be exact.\r\n   *\r\n   * @param {Transformer<Entry<KeyType, ValueType>, ResultDataType>} transform A callback function that accepts an argument. The method calls the ```transform``` one time for each entry in object.\r\n   *\r\n   * @param {any} thisArg An object to which the ```this``` keyword can refer in the ```transform```. If ```thisArg``` is omitted, ```null``` is used as the ```this``` value.\r\n   *\r\n   * @return {KoconutMap<KeyType, ValueType>}\r\n   *\r\n   * @since 1.0.10\r\n   *\r\n   * @category Transformer\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const koconutMap = KoconutArray.of(1,2,3,4,5)\r\n   *                   .associateWith(eachNumber => eachNumber)\r\n   *\r\n   * const doubledValueMap = new Map<number, number>()\r\n   * const stringifiedValueMap = new Map<number, string>()\r\n   * const squaredValueMap = new Map<number, number>()\r\n   * const originalData = await koconutMap\r\n   *                   .mapValuesTo(\r\n   *                       doubledValueMap,\r\n   *                       eachEntry => eachEntry.value * 2\r\n   *                   )\r\n   *                   .mapValuesTo(\r\n   *                       stringifiedValueMap,\r\n   *                       async eachEntry => eachEntry.value.toString()\r\n   *                   )\r\n   *                   .mapValuesTo(\r\n   *                       squaredValueMap,\r\n   *                       eachEntry => new Promise(resolve => {\r\n   *                           resolve(eachEntry.value * eachEntry.value)\r\n   *                       })\r\n   *                   )\r\n   *                   .yield()\r\n   * console.log(doubledValueMap)\r\n   * // ↑ Map { 1 => 2, 2 => 4, 3 => 6, 4 => 8, 5 => 10 }\r\n   * console.log(stringifiedValueMap)\r\n   * // ↑ Map { 1 => '1', 2 => '2', 3 => '3', 4 => '4', 5 => '5' }\r\n   * console.log(squaredValueMap)\r\n   * // ↑ Map { 1 => 1, 2 => 4, 3 => 9, 4 => 16, 5 => 25 }\r\n   * console.log(originalData)\r\n   * // ↑ Map { 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5 }\r\n   * ```\r\n   */\r\n  mapValuesTo<ResultDataType>(\r\n    destination: Map<KeyType, ResultDataType>,\r\n    transform: Transformer<Entry<KeyType, ValueType>, ResultDataType>,\r\n    thisArg: any = null,\r\n  ): KoconutMap<KeyType, ValueType> {\r\n    transform = transform.bind(thisArg);\r\n    const koconutToReturn = new KoconutMap<KeyType, ValueType>();\r\n    (koconutToReturn as any as KoconutOpener<Map<KeyType, ValueType>>)\r\n      .setPrevYieldable(this)\r\n      .setProcessor(async () => {\r\n        if (this.combinedDataWrapper != null) {\r\n          for (const eachEntry of this.combinedDataWrapper) {\r\n            destination.set(eachEntry.key, await transform(eachEntry));\r\n          }\r\n        }\r\n        return this.data!;\r\n      });\r\n    return koconutToReturn;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"512b9de56e307219bd2ec1bc8d2acb423928dc6a","contentHash":"e3ae27941999a0d3637a06f5b368622cc34549cd7b82dd99bb4d9a338753159b"}}